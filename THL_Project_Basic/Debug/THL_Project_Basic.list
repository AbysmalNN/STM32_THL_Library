
THL_Project_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad2c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b4c  0800af00  0800af00  0001af00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ba4c  0800ba4c  0001ba4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ba54  0800ba54  0001ba54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ba58  0800ba58  0001ba58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000067c  20000000  0800ba5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000820  2000067c  0800c0d8  0002067c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000e9c  0800c0d8  00020e9c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000262e7  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003e65  00000000  00000000  00046993  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f138  00000000  00000000  0004a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001480  00000000  00000000  00059930  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001388  00000000  00000000  0005adb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a622  00000000  00000000  0005c138  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005b9d  00000000  00000000  0006675a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006c2f7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e7c  00000000  00000000  0006c374  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000df  00000000  00000000  000711f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000067c 	.word	0x2000067c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aee4 	.word	0x0800aee4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000680 	.word	0x20000680
 800020c:	0800aee4 	.word	0x0800aee4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2uiz>:
 8000be0:	004a      	lsls	r2, r1, #1
 8000be2:	d211      	bcs.n	8000c08 <__aeabi_d2uiz+0x28>
 8000be4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be8:	d211      	bcs.n	8000c0e <__aeabi_d2uiz+0x2e>
 8000bea:	d50d      	bpl.n	8000c08 <__aeabi_d2uiz+0x28>
 8000bec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf4:	d40e      	bmi.n	8000c14 <__aeabi_d2uiz+0x34>
 8000bf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c02:	fa23 f002 	lsr.w	r0, r3, r2
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d102      	bne.n	8000c1a <__aeabi_d2uiz+0x3a>
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	4770      	bx	lr
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_d2f>:
 8000c20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c28:	bf24      	itt	cs
 8000c2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c32:	d90d      	bls.n	8000c50 <__aeabi_d2f+0x30>
 8000c34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c54:	d121      	bne.n	8000c9a <__aeabi_d2f+0x7a>
 8000c56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c5a:	bfbc      	itt	lt
 8000c5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	4770      	bxlt	lr
 8000c62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c6a:	f1c2 0218 	rsb	r2, r2, #24
 8000c6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c76:	fa20 f002 	lsr.w	r0, r0, r2
 8000c7a:	bf18      	it	ne
 8000c7c:	f040 0001 	orrne.w	r0, r0, #1
 8000c80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c8c:	ea40 000c 	orr.w	r0, r0, ip
 8000c90:	fa23 f302 	lsr.w	r3, r3, r2
 8000c94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c98:	e7cc      	b.n	8000c34 <__aeabi_d2f+0x14>
 8000c9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9e:	d107      	bne.n	8000cb0 <__aeabi_d2f+0x90>
 8000ca0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca4:	bf1e      	ittt	ne
 8000ca6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bxne	lr
 8000cb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_uldivmod>:
 8000cc0:	b953      	cbnz	r3, 8000cd8 <__aeabi_uldivmod+0x18>
 8000cc2:	b94a      	cbnz	r2, 8000cd8 <__aeabi_uldivmod+0x18>
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	2800      	cmpeq	r0, #0
 8000cca:	bf1c      	itt	ne
 8000ccc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd4:	f000 b97a 	b.w	8000fcc <__aeabi_idiv0>
 8000cd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce0:	f000 f806 	bl	8000cf0 <__udivmoddi4>
 8000ce4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cec:	b004      	add	sp, #16
 8000cee:	4770      	bx	lr

08000cf0 <__udivmoddi4>:
 8000cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	460d      	mov	r5, r1
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	9e08      	ldr	r6, [sp, #32]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d151      	bne.n	8000da4 <__udivmoddi4+0xb4>
 8000d00:	428a      	cmp	r2, r1
 8000d02:	4617      	mov	r7, r2
 8000d04:	d96d      	bls.n	8000de2 <__udivmoddi4+0xf2>
 8000d06:	fab2 fe82 	clz	lr, r2
 8000d0a:	f1be 0f00 	cmp.w	lr, #0
 8000d0e:	d00b      	beq.n	8000d28 <__udivmoddi4+0x38>
 8000d10:	f1ce 0c20 	rsb	ip, lr, #32
 8000d14:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d18:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d20:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d24:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d28:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d2c:	0c25      	lsrs	r5, r4, #16
 8000d2e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d32:	fa1f f987 	uxth.w	r9, r7
 8000d36:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d3a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d3e:	fb08 f309 	mul.w	r3, r8, r9
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x6c>
 8000d46:	19ed      	adds	r5, r5, r7
 8000d48:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d4c:	f080 8123 	bcs.w	8000f96 <__udivmoddi4+0x2a6>
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	f240 8120 	bls.w	8000f96 <__udivmoddi4+0x2a6>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	443d      	add	r5, r7
 8000d5c:	1aed      	subs	r5, r5, r3
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d64:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d6c:	fb00 f909 	mul.w	r9, r0, r9
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x98>
 8000d74:	19e4      	adds	r4, r4, r7
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	f080 810a 	bcs.w	8000f92 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8107 	bls.w	8000f92 <__udivmoddi4+0x2a2>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 0409 	sub.w	r4, r4, r9
 8000d8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d90:	2100      	movs	r1, #0
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d061      	beq.n	8000e5a <__udivmoddi4+0x16a>
 8000d96:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	6034      	str	r4, [r6, #0]
 8000d9e:	6073      	str	r3, [r6, #4]
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0xc8>
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d054      	beq.n	8000e56 <__udivmoddi4+0x166>
 8000dac:	2100      	movs	r1, #0
 8000dae:	e886 0021 	stmia.w	r6, {r0, r5}
 8000db2:	4608      	mov	r0, r1
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	fab3 f183 	clz	r1, r3
 8000dbc:	2900      	cmp	r1, #0
 8000dbe:	f040 808e 	bne.w	8000ede <__udivmoddi4+0x1ee>
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xdc>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80fa 	bhi.w	8000fc0 <__udivmoddi4+0x2d0>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb65 0503 	sbc.w	r5, r5, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	46ac      	mov	ip, r5
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	d03f      	beq.n	8000e5a <__udivmoddi4+0x16a>
 8000dda:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	b912      	cbnz	r2, 8000dea <__udivmoddi4+0xfa>
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dea:	fab7 fe87 	clz	lr, r7
 8000dee:	f1be 0f00 	cmp.w	lr, #0
 8000df2:	d134      	bne.n	8000e5e <__udivmoddi4+0x16e>
 8000df4:	1beb      	subs	r3, r5, r7
 8000df6:	0c3a      	lsrs	r2, r7, #16
 8000df8:	fa1f fc87 	uxth.w	ip, r7
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000e02:	0c25      	lsrs	r5, r4, #16
 8000e04:	fb02 3318 	mls	r3, r2, r8, r3
 8000e08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e0c:	fb0c f308 	mul.w	r3, ip, r8
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x134>
 8000e14:	19ed      	adds	r5, r5, r7
 8000e16:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x132>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	f200 80d1 	bhi.w	8000fc4 <__udivmoddi4+0x2d4>
 8000e22:	4680      	mov	r8, r0
 8000e24:	1aed      	subs	r5, r5, r3
 8000e26:	b2a3      	uxth	r3, r4
 8000e28:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e2c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e30:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e34:	fb0c fc00 	mul.w	ip, ip, r0
 8000e38:	45a4      	cmp	ip, r4
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x15c>
 8000e3c:	19e4      	adds	r4, r4, r7
 8000e3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x15a>
 8000e44:	45a4      	cmp	ip, r4
 8000e46:	f200 80b8 	bhi.w	8000fba <__udivmoddi4+0x2ca>
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	eba4 040c 	sub.w	r4, r4, ip
 8000e50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e54:	e79d      	b.n	8000d92 <__udivmoddi4+0xa2>
 8000e56:	4631      	mov	r1, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	f1ce 0420 	rsb	r4, lr, #32
 8000e62:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e66:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e6a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e6e:	0c3a      	lsrs	r2, r7, #16
 8000e70:	fa25 f404 	lsr.w	r4, r5, r4
 8000e74:	ea48 0803 	orr.w	r8, r8, r3
 8000e78:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e7c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e80:	fb02 4411 	mls	r4, r2, r1, r4
 8000e84:	fa1f fc87 	uxth.w	ip, r7
 8000e88:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e8c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e90:	42ab      	cmp	r3, r5
 8000e92:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e96:	d909      	bls.n	8000eac <__udivmoddi4+0x1bc>
 8000e98:	19ed      	adds	r5, r5, r7
 8000e9a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e9e:	f080 808a 	bcs.w	8000fb6 <__udivmoddi4+0x2c6>
 8000ea2:	42ab      	cmp	r3, r5
 8000ea4:	f240 8087 	bls.w	8000fb6 <__udivmoddi4+0x2c6>
 8000ea8:	3902      	subs	r1, #2
 8000eaa:	443d      	add	r5, r7
 8000eac:	1aeb      	subs	r3, r5, r3
 8000eae:	fa1f f588 	uxth.w	r5, r8
 8000eb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000eb6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ebe:	fb00 f30c 	mul.w	r3, r0, ip
 8000ec2:	42ab      	cmp	r3, r5
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x1e6>
 8000ec6:	19ed      	adds	r5, r5, r7
 8000ec8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ecc:	d26f      	bcs.n	8000fae <__udivmoddi4+0x2be>
 8000ece:	42ab      	cmp	r3, r5
 8000ed0:	d96d      	bls.n	8000fae <__udivmoddi4+0x2be>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	443d      	add	r5, r7
 8000ed6:	1aeb      	subs	r3, r5, r3
 8000ed8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000edc:	e78f      	b.n	8000dfe <__udivmoddi4+0x10e>
 8000ede:	f1c1 0720 	rsb	r7, r1, #32
 8000ee2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ee6:	408b      	lsls	r3, r1
 8000ee8:	fa05 f401 	lsl.w	r4, r5, r1
 8000eec:	ea48 0303 	orr.w	r3, r8, r3
 8000ef0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ef4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	ea4e 0e04 	orr.w	lr, lr, r4
 8000efe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000f02:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000f06:	fb0c 5519 	mls	r5, ip, r9, r5
 8000f0a:	fa1f f883 	uxth.w	r8, r3
 8000f0e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f12:	fb09 f408 	mul.w	r4, r9, r8
 8000f16:	42ac      	cmp	r4, r5
 8000f18:	fa02 f201 	lsl.w	r2, r2, r1
 8000f1c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x244>
 8000f22:	18ed      	adds	r5, r5, r3
 8000f24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f28:	d243      	bcs.n	8000fb2 <__udivmoddi4+0x2c2>
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	d941      	bls.n	8000fb2 <__udivmoddi4+0x2c2>
 8000f2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f32:	441d      	add	r5, r3
 8000f34:	1b2d      	subs	r5, r5, r4
 8000f36:	fa1f fe8e 	uxth.w	lr, lr
 8000f3a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f3e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f42:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f46:	fb00 f808 	mul.w	r8, r0, r8
 8000f4a:	45a0      	cmp	r8, r4
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x26e>
 8000f4e:	18e4      	adds	r4, r4, r3
 8000f50:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f54:	d229      	bcs.n	8000faa <__udivmoddi4+0x2ba>
 8000f56:	45a0      	cmp	r8, r4
 8000f58:	d927      	bls.n	8000faa <__udivmoddi4+0x2ba>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	441c      	add	r4, r3
 8000f5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f62:	eba4 0408 	sub.w	r4, r4, r8
 8000f66:	fba0 8902 	umull	r8, r9, r0, r2
 8000f6a:	454c      	cmp	r4, r9
 8000f6c:	46c6      	mov	lr, r8
 8000f6e:	464d      	mov	r5, r9
 8000f70:	d315      	bcc.n	8000f9e <__udivmoddi4+0x2ae>
 8000f72:	d012      	beq.n	8000f9a <__udivmoddi4+0x2aa>
 8000f74:	b156      	cbz	r6, 8000f8c <__udivmoddi4+0x29c>
 8000f76:	ebba 030e 	subs.w	r3, sl, lr
 8000f7a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f82:	40cb      	lsrs	r3, r1
 8000f84:	431f      	orrs	r7, r3
 8000f86:	40cc      	lsrs	r4, r1
 8000f88:	6037      	str	r7, [r6, #0]
 8000f8a:	6074      	str	r4, [r6, #4]
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	4618      	mov	r0, r3
 8000f94:	e6f8      	b.n	8000d88 <__udivmoddi4+0x98>
 8000f96:	4690      	mov	r8, r2
 8000f98:	e6e0      	b.n	8000d5c <__udivmoddi4+0x6c>
 8000f9a:	45c2      	cmp	sl, r8
 8000f9c:	d2ea      	bcs.n	8000f74 <__udivmoddi4+0x284>
 8000f9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fa2:	eb69 0503 	sbc.w	r5, r9, r3
 8000fa6:	3801      	subs	r0, #1
 8000fa8:	e7e4      	b.n	8000f74 <__udivmoddi4+0x284>
 8000faa:	4628      	mov	r0, r5
 8000fac:	e7d7      	b.n	8000f5e <__udivmoddi4+0x26e>
 8000fae:	4640      	mov	r0, r8
 8000fb0:	e791      	b.n	8000ed6 <__udivmoddi4+0x1e6>
 8000fb2:	4681      	mov	r9, r0
 8000fb4:	e7be      	b.n	8000f34 <__udivmoddi4+0x244>
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	e778      	b.n	8000eac <__udivmoddi4+0x1bc>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	e745      	b.n	8000e4c <__udivmoddi4+0x15c>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xe6>
 8000fc4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc8:	443d      	add	r5, r7
 8000fca:	e72b      	b.n	8000e24 <__udivmoddi4+0x134>

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_InitTick+0x40>)
 8000fd6:	7818      	ldrb	r0, [r3, #0]
 8000fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fdc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <HAL_InitTick+0x44>)
 8000fe2:	6810      	ldr	r0, [r2, #0]
 8000fe4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fe8:	f000 fa20 	bl	800142c <HAL_SYSTICK_Config>
 8000fec:	b968      	cbnz	r0, 800100a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	2c0f      	cmp	r4, #15
 8000ff0:	d901      	bls.n	8000ff6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000ff2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000ff4:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4621      	mov	r1, r4
 8000ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffe:	f000 f9d7 	bl	80013b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_InitTick+0x48>)
 8001004:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001006:	2000      	movs	r0, #0
 8001008:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800100a:	2001      	movs	r0, #1
 800100c:	bd10      	pop	{r4, pc}
 800100e:	bf00      	nop
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_Init>:
{
 800101c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_Init+0x30>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001026:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800102e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001036:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f9a7 	bl	800138c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff ffc6 	bl	8000fd0 <HAL_InitTick>
  HAL_MspInit();
 8001044:	f003 fb86 	bl	8004754 <HAL_MspInit>
}
 8001048:	2000      	movs	r0, #0
 800104a:	bd08      	pop	{r3, pc}
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x10>)
 8001052:	6811      	ldr	r1, [r2, #0]
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_IncTick+0x14>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	440b      	add	r3, r1
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200006d4 	.word	0x200006d4
 8001064:	20000000 	.word	0x20000000

08001068 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001068:	4b01      	ldr	r3, [pc, #4]	; (8001070 <HAL_GetTick+0x8>)
 800106a:	6818      	ldr	r0, [r3, #0]
}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200006d4 	.word	0x200006d4

08001074 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001074:	4b49      	ldr	r3, [pc, #292]	; (800119c <ADC_Init+0x128>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800107c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	6841      	ldr	r1, [r0, #4]
 8001082:	430a      	orrs	r2, r1
 8001084:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001086:	6802      	ldr	r2, [r0, #0]
 8001088:	6853      	ldr	r3, [r2, #4]
 800108a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800108e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001090:	6802      	ldr	r2, [r0, #0]
 8001092:	6853      	ldr	r3, [r2, #4]
 8001094:	6901      	ldr	r1, [r0, #16]
 8001096:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800109a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800109c:	6802      	ldr	r2, [r0, #0]
 800109e:	6853      	ldr	r3, [r2, #4]
 80010a0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80010a4:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010a6:	6802      	ldr	r2, [r0, #0]
 80010a8:	6853      	ldr	r3, [r2, #4]
 80010aa:	6881      	ldr	r1, [r0, #8]
 80010ac:	430b      	orrs	r3, r1
 80010ae:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010b0:	6802      	ldr	r2, [r0, #0]
 80010b2:	6893      	ldr	r3, [r2, #8]
 80010b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010b8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010ba:	6802      	ldr	r2, [r0, #0]
 80010bc:	6893      	ldr	r3, [r2, #8]
 80010be:	68c1      	ldr	r1, [r0, #12]
 80010c0:	430b      	orrs	r3, r1
 80010c2:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80010c6:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <ADC_Init+0x12c>)
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d049      	beq.n	8001160 <ADC_Init+0xec>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010cc:	6802      	ldr	r2, [r0, #0]
 80010ce:	6893      	ldr	r3, [r2, #8]
 80010d0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80010d4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80010d6:	6802      	ldr	r2, [r0, #0]
 80010d8:	6893      	ldr	r3, [r2, #8]
 80010da:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80010dc:	430b      	orrs	r3, r1
 80010de:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010e0:	6802      	ldr	r2, [r0, #0]
 80010e2:	6893      	ldr	r3, [r2, #8]
 80010e4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80010e8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80010ea:	6802      	ldr	r2, [r0, #0]
 80010ec:	6893      	ldr	r3, [r2, #8]
 80010ee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010f4:	6802      	ldr	r2, [r0, #0]
 80010f6:	6893      	ldr	r3, [r2, #8]
 80010f8:	f023 0302 	bic.w	r3, r3, #2
 80010fc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80010fe:	6802      	ldr	r2, [r0, #0]
 8001100:	6893      	ldr	r3, [r2, #8]
 8001102:	6981      	ldr	r1, [r0, #24]
 8001104:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001108:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800110a:	6a03      	ldr	r3, [r0, #32]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d132      	bne.n	8001176 <ADC_Init+0x102>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001110:	6802      	ldr	r2, [r0, #0]
 8001112:	6853      	ldr	r3, [r2, #4]
 8001114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001118:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800111a:	6802      	ldr	r2, [r0, #0]
 800111c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800111e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001122:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001124:	6801      	ldr	r1, [r0, #0]
 8001126:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001128:	69c2      	ldr	r2, [r0, #28]
 800112a:	3a01      	subs	r2, #1
 800112c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001130:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001132:	6802      	ldr	r2, [r0, #0]
 8001134:	6893      	ldr	r3, [r2, #8]
 8001136:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800113a:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800113c:	6802      	ldr	r2, [r0, #0]
 800113e:	6893      	ldr	r3, [r2, #8]
 8001140:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001142:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001146:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001148:	6802      	ldr	r2, [r0, #0]
 800114a:	6893      	ldr	r3, [r2, #8]
 800114c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001150:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001152:	6802      	ldr	r2, [r0, #0]
 8001154:	6893      	ldr	r3, [r2, #8]
 8001156:	6941      	ldr	r1, [r0, #20]
 8001158:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800115c:	6093      	str	r3, [r2, #8]
 800115e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001160:	6802      	ldr	r2, [r0, #0]
 8001162:	6893      	ldr	r3, [r2, #8]
 8001164:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001168:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800116a:	6802      	ldr	r2, [r0, #0]
 800116c:	6893      	ldr	r3, [r2, #8]
 800116e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001172:	6093      	str	r3, [r2, #8]
 8001174:	e7be      	b.n	80010f4 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001176:	6802      	ldr	r2, [r0, #0]
 8001178:	6853      	ldr	r3, [r2, #4]
 800117a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800117e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001180:	6802      	ldr	r2, [r0, #0]
 8001182:	6853      	ldr	r3, [r2, #4]
 8001184:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001188:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800118a:	6801      	ldr	r1, [r0, #0]
 800118c:	684b      	ldr	r3, [r1, #4]
 800118e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001190:	3a01      	subs	r2, #1
 8001192:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001196:	604b      	str	r3, [r1, #4]
 8001198:	e7bf      	b.n	800111a <ADC_Init+0xa6>
 800119a:	bf00      	nop
 800119c:	40012300 	.word	0x40012300
 80011a0:	0f000001 	.word	0x0f000001

080011a4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80011a4:	b330      	cbz	r0, 80011f4 <HAL_ADC_Init+0x50>
{
 80011a6:	b510      	push	{r4, lr}
 80011a8:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80011ac:	b143      	cbz	r3, 80011c0 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011b0:	f013 0f10 	tst.w	r3, #16
 80011b4:	d00a      	beq.n	80011cc <HAL_ADC_Init+0x28>
    tmp_hal_status = HAL_ERROR;
 80011b6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80011b8:	2300      	movs	r3, #0
 80011ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80011be:	bd10      	pop	{r4, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 80011c0:	6443      	str	r3, [r0, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80011c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80011c6:	f003 fae5 	bl	8004794 <HAL_ADC_MspInit>
 80011ca:	e7f0      	b.n	80011ae <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80011cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011d2:	f023 0302 	bic.w	r3, r3, #2
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff ff49 	bl	8001074 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80011e2:	2000      	movs	r0, #0
 80011e4:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80011e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011e8:	f023 0303 	bic.w	r3, r3, #3
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6423      	str	r3, [r4, #64]	; 0x40
 80011f2:	e7e1      	b.n	80011b8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80011f4:	2001      	movs	r0, #1
 80011f6:	4770      	bx	lr

080011f8 <HAL_ADC_ConfigChannel>:
{
 80011f8:	b430      	push	{r4, r5}
 80011fa:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001200:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001204:	2b01      	cmp	r3, #1
 8001206:	f000 80b5 	beq.w	8001374 <HAL_ADC_ConfigChannel+0x17c>
 800120a:	2301      	movs	r3, #1
 800120c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001210:	680b      	ldr	r3, [r1, #0]
 8001212:	2b09      	cmp	r3, #9
 8001214:	d93e      	bls.n	8001294 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001216:	6805      	ldr	r5, [r0, #0]
 8001218:	68ea      	ldr	r2, [r5, #12]
 800121a:	b29b      	uxth	r3, r3
 800121c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001220:	3b1e      	subs	r3, #30
 8001222:	2407      	movs	r4, #7
 8001224:	fa04 f303 	lsl.w	r3, r4, r3
 8001228:	ea22 0303 	bic.w	r3, r2, r3
 800122c:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800122e:	6805      	ldr	r5, [r0, #0]
 8001230:	68ea      	ldr	r2, [r5, #12]
 8001232:	688c      	ldr	r4, [r1, #8]
 8001234:	880b      	ldrh	r3, [r1, #0]
 8001236:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800123a:	3b1e      	subs	r3, #30
 800123c:	fa04 f303 	lsl.w	r3, r4, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8001244:	684b      	ldr	r3, [r1, #4]
 8001246:	2b06      	cmp	r3, #6
 8001248:	d83a      	bhi.n	80012c0 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800124a:	6805      	ldr	r5, [r0, #0]
 800124c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800124e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001252:	3b05      	subs	r3, #5
 8001254:	241f      	movs	r4, #31
 8001256:	fa04 f303 	lsl.w	r3, r4, r3
 800125a:	ea22 0303 	bic.w	r3, r2, r3
 800125e:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001260:	6805      	ldr	r5, [r0, #0]
 8001262:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001264:	684b      	ldr	r3, [r1, #4]
 8001266:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800126a:	3b05      	subs	r3, #5
 800126c:	880c      	ldrh	r4, [r1, #0]
 800126e:	fa04 f303 	lsl.w	r3, r4, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001276:	6802      	ldr	r2, [r0, #0]
 8001278:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <HAL_ADC_ConfigChannel+0x180>)
 800127a:	429a      	cmp	r2, r3
 800127c:	d050      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800127e:	6802      	ldr	r2, [r0, #0]
 8001280:	4b3d      	ldr	r3, [pc, #244]	; (8001378 <HAL_ADC_ConfigChannel+0x180>)
 8001282:	429a      	cmp	r2, r3
 8001284:	d055      	beq.n	8001332 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 8001286:	2300      	movs	r3, #0
 8001288:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800128c:	4618      	mov	r0, r3
}
 800128e:	b002      	add	sp, #8
 8001290:	bc30      	pop	{r4, r5}
 8001292:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001294:	6805      	ldr	r5, [r0, #0]
 8001296:	692a      	ldr	r2, [r5, #16]
 8001298:	b29b      	uxth	r3, r3
 800129a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800129e:	2407      	movs	r4, #7
 80012a0:	fa04 f303 	lsl.w	r3, r4, r3
 80012a4:	ea22 0303 	bic.w	r3, r2, r3
 80012a8:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012aa:	6805      	ldr	r5, [r0, #0]
 80012ac:	692a      	ldr	r2, [r5, #16]
 80012ae:	688c      	ldr	r4, [r1, #8]
 80012b0:	880b      	ldrh	r3, [r1, #0]
 80012b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80012b6:	fa04 f303 	lsl.w	r3, r4, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	612b      	str	r3, [r5, #16]
 80012be:	e7c1      	b.n	8001244 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d816      	bhi.n	80012f2 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012c4:	6805      	ldr	r5, [r0, #0]
 80012c6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80012c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012cc:	3b23      	subs	r3, #35	; 0x23
 80012ce:	241f      	movs	r4, #31
 80012d0:	fa04 f303 	lsl.w	r3, r4, r3
 80012d4:	ea22 0303 	bic.w	r3, r2, r3
 80012d8:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012da:	6805      	ldr	r5, [r0, #0]
 80012dc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80012de:	684b      	ldr	r3, [r1, #4]
 80012e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012e4:	3b23      	subs	r3, #35	; 0x23
 80012e6:	880c      	ldrh	r4, [r1, #0]
 80012e8:	fa04 f303 	lsl.w	r3, r4, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	632b      	str	r3, [r5, #48]	; 0x30
 80012f0:	e7c1      	b.n	8001276 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012f2:	6805      	ldr	r5, [r0, #0]
 80012f4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80012f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012fa:	3b41      	subs	r3, #65	; 0x41
 80012fc:	241f      	movs	r4, #31
 80012fe:	fa04 f303 	lsl.w	r3, r4, r3
 8001302:	ea22 0303 	bic.w	r3, r2, r3
 8001306:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001308:	6805      	ldr	r5, [r0, #0]
 800130a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800130c:	684b      	ldr	r3, [r1, #4]
 800130e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001312:	3b41      	subs	r3, #65	; 0x41
 8001314:	880c      	ldrh	r4, [r1, #0]
 8001316:	fa04 f303 	lsl.w	r3, r4, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800131e:	e7aa      	b.n	8001276 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001320:	680b      	ldr	r3, [r1, #0]
 8001322:	2b12      	cmp	r3, #18
 8001324:	d1ab      	bne.n	800127e <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001326:	4a15      	ldr	r2, [pc, #84]	; (800137c <HAL_ADC_ConfigChannel+0x184>)
 8001328:	6853      	ldr	r3, [r2, #4]
 800132a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800132e:	6053      	str	r3, [r2, #4]
 8001330:	e7a5      	b.n	800127e <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001332:	680b      	ldr	r3, [r1, #0]
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <HAL_ADC_ConfigChannel+0x188>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d001      	beq.n	800133e <HAL_ADC_ConfigChannel+0x146>
 800133a:	2b11      	cmp	r3, #17
 800133c:	d1a3      	bne.n	8001286 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_ADC_ConfigChannel+0x184>)
 8001340:	6853      	ldr	r3, [r2, #4]
 8001342:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001346:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001348:	680a      	ldr	r2, [r1, #0]
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_ADC_ConfigChannel+0x188>)
 800134c:	429a      	cmp	r2, r3
 800134e:	d19a      	bne.n	8001286 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_ADC_ConfigChannel+0x18c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <HAL_ADC_ConfigChannel+0x190>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	0c9b      	lsrs	r3, r3, #18
 800135c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001360:	005a      	lsls	r2, r3, #1
 8001362:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8001364:	e002      	b.n	800136c <HAL_ADC_ConfigChannel+0x174>
        counter--;
 8001366:	9b01      	ldr	r3, [sp, #4]
 8001368:	3b01      	subs	r3, #1
 800136a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800136c:	9b01      	ldr	r3, [sp, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f9      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x16e>
 8001372:	e788      	b.n	8001286 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8001374:	2002      	movs	r0, #2
 8001376:	e78a      	b.n	800128e <HAL_ADC_ConfigChannel+0x96>
 8001378:	40012000 	.word	0x40012000
 800137c:	40012300 	.word	0x40012300
 8001380:	10000012 	.word	0x10000012
 8001384:	20000008 	.word	0x20000008
 8001388:	431bde83 	.word	0x431bde83

0800138c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800138e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001390:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001398:	0200      	lsls	r0, r0, #8
 800139a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80013a0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80013a4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80013a8:	60d0      	str	r0, [r2, #12]
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_NVIC_SetPriority+0x5c>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ba:	f1c3 0407 	rsb	r4, r3, #7
 80013be:	2c04      	cmp	r4, #4
 80013c0:	bf28      	it	cs
 80013c2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c4:	1d1d      	adds	r5, r3, #4
 80013c6:	2d06      	cmp	r5, #6
 80013c8:	d917      	bls.n	80013fa <HAL_NVIC_SetPriority+0x4a>
 80013ca:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	2501      	movs	r5, #1
 80013ce:	fa05 f404 	lsl.w	r4, r5, r4
 80013d2:	3c01      	subs	r4, #1
 80013d4:	4021      	ands	r1, r4
 80013d6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	fa05 f303 	lsl.w	r3, r5, r3
 80013dc:	3b01      	subs	r3, #1
 80013de:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80013e2:	2800      	cmp	r0, #0
 80013e4:	db0b      	blt.n	80013fe <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	0109      	lsls	r1, r1, #4
 80013e8:	b2c9      	uxtb	r1, r1
 80013ea:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80013ee:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80013f2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80013f6:	bc30      	pop	{r4, r5}
 80013f8:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	2300      	movs	r3, #0
 80013fc:	e7e6      	b.n	80013cc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	f000 000f 	and.w	r0, r0, #15
 8001402:	0109      	lsls	r1, r1, #4
 8001404:	b2c9      	uxtb	r1, r1
 8001406:	4b02      	ldr	r3, [pc, #8]	; (8001410 <HAL_NVIC_SetPriority+0x60>)
 8001408:	5419      	strb	r1, [r3, r0]
 800140a:	e7f4      	b.n	80013f6 <HAL_NVIC_SetPriority+0x46>
 800140c:	e000ed00 	.word	0xe000ed00
 8001410:	e000ed14 	.word	0xe000ed14

08001414 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001414:	0942      	lsrs	r2, r0, #5
 8001416:	f000 001f 	and.w	r0, r0, #31
 800141a:	2301      	movs	r3, #1
 800141c:	fa03 f000 	lsl.w	r0, r3, r0
 8001420:	4b01      	ldr	r3, [pc, #4]	; (8001428 <HAL_NVIC_EnableIRQ+0x14>)
 8001422:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100

0800142c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	3801      	subs	r0, #1
 800142e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001432:	d20a      	bcs.n	800144a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_SYSTICK_Config+0x24>)
 8001436:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	21f0      	movs	r1, #240	; 0xf0
 800143a:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_SYSTICK_Config+0x28>)
 800143c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	2000      	movs	r0, #0
 8001442:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001458:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800145a:	6805      	ldr	r5, [r0, #0]
 800145c:	682c      	ldr	r4, [r5, #0]
 800145e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001462:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001464:	6804      	ldr	r4, [r0, #0]
 8001466:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001468:	6883      	ldr	r3, [r0, #8]
 800146a:	2b40      	cmp	r3, #64	; 0x40
 800146c:	d005      	beq.n	800147a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800146e:	6803      	ldr	r3, [r0, #0]
 8001470:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001472:	6803      	ldr	r3, [r0, #0]
 8001474:	60da      	str	r2, [r3, #12]
  }
}
 8001476:	bc30      	pop	{r4, r5}
 8001478:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800147a:	6803      	ldr	r3, [r0, #0]
 800147c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800147e:	6803      	ldr	r3, [r0, #0]
 8001480:	60d9      	str	r1, [r3, #12]
 8001482:	e7f8      	b.n	8001476 <DMA_SetConfig+0x1e>

08001484 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001484:	6802      	ldr	r2, [r0, #0]
 8001486:	b2d3      	uxtb	r3, r2
 8001488:	3b10      	subs	r3, #16
 800148a:	490b      	ldr	r1, [pc, #44]	; (80014b8 <DMA_CalcBaseAndBitshift+0x34>)
 800148c:	fba1 1303 	umull	r1, r3, r1, r3
 8001490:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001492:	490a      	ldr	r1, [pc, #40]	; (80014bc <DMA_CalcBaseAndBitshift+0x38>)
 8001494:	5cc9      	ldrb	r1, [r1, r3]
 8001496:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001498:	2b03      	cmp	r3, #3
 800149a:	d806      	bhi.n	80014aa <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800149c:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80014a0:	f022 0203 	bic.w	r2, r2, #3
 80014a4:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80014a6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80014a8:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014aa:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80014ae:	f022 0203 	bic.w	r2, r2, #3
 80014b2:	3204      	adds	r2, #4
 80014b4:	6582      	str	r2, [r0, #88]	; 0x58
 80014b6:	e7f6      	b.n	80014a6 <DMA_CalcBaseAndBitshift+0x22>
 80014b8:	aaaaaaab 	.word	0xaaaaaaab
 80014bc:	0800af00 	.word	0x0800af00

080014c0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014c2:	6982      	ldr	r2, [r0, #24]
 80014c4:	b992      	cbnz	r2, 80014ec <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d00a      	beq.n	80014e0 <DMA_CheckFifoParam+0x20>
 80014ca:	b11b      	cbz	r3, 80014d4 <DMA_CheckFifoParam+0x14>
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d001      	beq.n	80014d4 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80014d0:	2000      	movs	r0, #0
 80014d2:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014d6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014da:	d12c      	bne.n	8001536 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80014dc:	2000      	movs	r0, #0
 80014de:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014e6:	d028      	beq.n	800153a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80014e8:	2000      	movs	r0, #0
 80014ea:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014ec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80014f0:	d005      	beq.n	80014fe <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d929      	bls.n	800154a <DMA_CheckFifoParam+0x8a>
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d015      	beq.n	8001526 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80014fa:	2000      	movs	r0, #0
 80014fc:	4770      	bx	lr
    switch (tmp)
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d803      	bhi.n	800150a <DMA_CheckFifoParam+0x4a>
 8001502:	e8df f003 	tbb	[pc, r3]
 8001506:	041c      	.short	0x041c
 8001508:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800150a:	2000      	movs	r0, #0
 800150c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800150e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001510:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001514:	d115      	bne.n	8001542 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8001516:	2000      	movs	r0, #0
 8001518:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800151a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800151c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001520:	d011      	beq.n	8001546 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8001522:	2000      	movs	r0, #0
 8001524:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001526:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001528:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800152c:	d001      	beq.n	8001532 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 800152e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001530:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8001532:	2000      	movs	r0, #0
 8001534:	4770      	bx	lr
        status = HAL_ERROR;
 8001536:	2001      	movs	r0, #1
 8001538:	4770      	bx	lr
        status = HAL_ERROR;
 800153a:	2001      	movs	r0, #1
 800153c:	4770      	bx	lr
      status = HAL_ERROR;
 800153e:	2001      	movs	r0, #1
 8001540:	4770      	bx	lr
        status = HAL_ERROR;
 8001542:	2001      	movs	r0, #1
 8001544:	4770      	bx	lr
        status = HAL_ERROR;
 8001546:	2001      	movs	r0, #1
 8001548:	4770      	bx	lr
      status = HAL_ERROR;
 800154a:	2001      	movs	r0, #1
 800154c:	4770      	bx	lr
	...

08001550 <HAL_DMA_Init>:
{
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff fd88 	bl	8001068 <HAL_GetTick>
  if(hdma == NULL)
 8001558:	2c00      	cmp	r4, #0
 800155a:	d05d      	beq.n	8001618 <HAL_DMA_Init+0xc8>
 800155c:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800155e:	2300      	movs	r3, #0
 8001560:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001564:	2302      	movs	r3, #2
 8001566:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800156a:	6822      	ldr	r2, [r4, #0]
 800156c:	6813      	ldr	r3, [r2, #0]
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	f012 0f01 	tst.w	r2, #1
 800157c:	d00a      	beq.n	8001594 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800157e:	f7ff fd73 	bl	8001068 <HAL_GetTick>
 8001582:	1b40      	subs	r0, r0, r5
 8001584:	2805      	cmp	r0, #5
 8001586:	d9f5      	bls.n	8001574 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001588:	2320      	movs	r3, #32
 800158a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800158c:	2003      	movs	r0, #3
 800158e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8001592:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001594:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001596:	4921      	ldr	r1, [pc, #132]	; (800161c <HAL_DMA_Init+0xcc>)
 8001598:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800159a:	6862      	ldr	r2, [r4, #4]
 800159c:	68a0      	ldr	r0, [r4, #8]
 800159e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a0:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a4:	6920      	ldr	r0, [r4, #16]
 80015a6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a8:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015aa:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ac:	69a0      	ldr	r0, [r4, #24]
 80015ae:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b0:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b4:	6a20      	ldr	r0, [r4, #32]
 80015b6:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b8:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80015bc:	2904      	cmp	r1, #4
 80015be:	d016      	beq.n	80015ee <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 80015c0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80015c2:	6826      	ldr	r6, [r4, #0]
 80015c4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015c6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80015ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015cc:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d012      	beq.n	80015f8 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 80015d2:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015d4:	4620      	mov	r0, r4
 80015d6:	f7ff ff55 	bl	8001484 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80015dc:	233f      	movs	r3, #63	; 0x3f
 80015de:	4093      	lsls	r3, r2
 80015e0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e2:	2000      	movs	r0, #0
 80015e4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80015ec:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80015f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80015f2:	4301      	orrs	r1, r0
 80015f4:	430a      	orrs	r2, r1
 80015f6:	e7e3      	b.n	80015c0 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 80015f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015fa:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0e7      	beq.n	80015d2 <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff ff5c 	bl	80014c0 <DMA_CheckFifoParam>
 8001608:	2800      	cmp	r0, #0
 800160a:	d0e2      	beq.n	80015d2 <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800160c:	2340      	movs	r3, #64	; 0x40
 800160e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001610:	2001      	movs	r0, #1
 8001612:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001616:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001618:	2001      	movs	r0, #1
}
 800161a:	bd70      	pop	{r4, r5, r6, pc}
 800161c:	f010803f 	.word	0xf010803f

08001620 <HAL_DMA_Start_IT>:
{
 8001620:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001622:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001624:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001628:	2c01      	cmp	r4, #1
 800162a:	d031      	beq.n	8001690 <HAL_DMA_Start_IT+0x70>
 800162c:	2401      	movs	r4, #1
 800162e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001632:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001636:	b2e4      	uxtb	r4, r4
 8001638:	2c01      	cmp	r4, #1
 800163a:	d004      	beq.n	8001646 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 800163c:	2300      	movs	r3, #0
 800163e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8001642:	2002      	movs	r0, #2
 8001644:	bd38      	pop	{r3, r4, r5, pc}
 8001646:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001648:	2002      	movs	r0, #2
 800164a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800164e:	2000      	movs	r0, #0
 8001650:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001652:	4620      	mov	r0, r4
 8001654:	f7ff ff00 	bl	8001458 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001658:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800165a:	233f      	movs	r3, #63	; 0x3f
 800165c:	4093      	lsls	r3, r2
 800165e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001660:	6822      	ldr	r2, [r4, #0]
 8001662:	6813      	ldr	r3, [r2, #0]
 8001664:	f043 0316 	orr.w	r3, r3, #22
 8001668:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	6953      	ldr	r3, [r2, #20]
 800166e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001672:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001674:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001676:	b123      	cbz	r3, 8001682 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001678:	6822      	ldr	r2, [r4, #0]
 800167a:	6813      	ldr	r3, [r2, #0]
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001682:	6822      	ldr	r2, [r4, #0]
 8001684:	6813      	ldr	r3, [r2, #0]
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800168c:	2000      	movs	r0, #0
 800168e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 8001690:	2002      	movs	r0, #2
}
 8001692:	bd38      	pop	{r3, r4, r5, pc}

08001694 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001694:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d003      	beq.n	80016a6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80016a2:	2001      	movs	r0, #1
 80016a4:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80016a6:	2305      	movs	r3, #5
 80016a8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80016ac:	6802      	ldr	r2, [r0, #0]
 80016ae:	6813      	ldr	r3, [r2, #0]
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80016b6:	2000      	movs	r0, #0
}
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_DMA_IRQHandler>:
{
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	b083      	sub	sp, #12
 80016c0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016c6:	4b72      	ldr	r3, [pc, #456]	; (8001890 <HAL_DMA_IRQHandler+0x1d4>)
 80016c8:	681d      	ldr	r5, [r3, #0]
 80016ca:	4b72      	ldr	r3, [pc, #456]	; (8001894 <HAL_DMA_IRQHandler+0x1d8>)
 80016cc:	fba3 3505 	umull	r3, r5, r3, r5
 80016d0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80016d4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80016d8:	2308      	movs	r3, #8
 80016da:	4093      	lsls	r3, r2
 80016dc:	421e      	tst	r6, r3
 80016de:	d010      	beq.n	8001702 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016e0:	6803      	ldr	r3, [r0, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	f012 0f04 	tst.w	r2, #4
 80016e8:	d00b      	beq.n	8001702 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	f022 0204 	bic.w	r2, r2, #4
 80016f0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016f2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80016f4:	2308      	movs	r3, #8
 80016f6:	4093      	lsls	r3, r2
 80016f8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016fa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001702:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001704:	2301      	movs	r3, #1
 8001706:	4093      	lsls	r3, r2
 8001708:	421e      	tst	r6, r3
 800170a:	d009      	beq.n	8001720 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800170c:	6822      	ldr	r2, [r4, #0]
 800170e:	6952      	ldr	r2, [r2, #20]
 8001710:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001714:	d004      	beq.n	8001720 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001716:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001718:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001720:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001722:	2304      	movs	r3, #4
 8001724:	4093      	lsls	r3, r2
 8001726:	421e      	tst	r6, r3
 8001728:	d009      	beq.n	800173e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800172a:	6822      	ldr	r2, [r4, #0]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	f012 0f02 	tst.w	r2, #2
 8001732:	d004      	beq.n	800173e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001734:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001736:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800173e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001740:	2310      	movs	r3, #16
 8001742:	4093      	lsls	r3, r2
 8001744:	421e      	tst	r6, r3
 8001746:	d024      	beq.n	8001792 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001748:	6822      	ldr	r2, [r4, #0]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	f012 0f08 	tst.w	r2, #8
 8001750:	d01f      	beq.n	8001792 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001752:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800175c:	d00d      	beq.n	800177a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001764:	d104      	bne.n	8001770 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001766:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001768:	b19b      	cbz	r3, 8001792 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800176a:	4620      	mov	r0, r4
 800176c:	4798      	blx	r3
 800176e:	e010      	b.n	8001792 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001770:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001772:	b173      	cbz	r3, 8001792 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001774:	4620      	mov	r0, r4
 8001776:	4798      	blx	r3
 8001778:	e00b      	b.n	8001792 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001780:	d103      	bne.n	800178a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	f022 0208 	bic.w	r2, r2, #8
 8001788:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800178a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800178c:	b10b      	cbz	r3, 8001792 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800178e:	4620      	mov	r0, r4
 8001790:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001792:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001794:	2320      	movs	r3, #32
 8001796:	4093      	lsls	r3, r2
 8001798:	421e      	tst	r6, r3
 800179a:	d055      	beq.n	8001848 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800179c:	6822      	ldr	r2, [r4, #0]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	f012 0f10 	tst.w	r2, #16
 80017a4:	d050      	beq.n	8001848 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017a6:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017a8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d00e      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80017ba:	d033      	beq.n	8001824 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80017c2:	d12a      	bne.n	800181a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80017c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d03e      	beq.n	8001848 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80017ca:	4620      	mov	r0, r4
 80017cc:	4798      	blx	r3
 80017ce:	e03b      	b.n	8001848 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017d0:	6822      	ldr	r2, [r4, #0]
 80017d2:	6813      	ldr	r3, [r2, #0]
 80017d4:	f023 0316 	bic.w	r3, r3, #22
 80017d8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017da:	6822      	ldr	r2, [r4, #0]
 80017dc:	6953      	ldr	r3, [r2, #20]
 80017de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017e2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017e6:	b1a3      	cbz	r3, 8001812 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e8:	6822      	ldr	r2, [r4, #0]
 80017ea:	6813      	ldr	r3, [r2, #0]
 80017ec:	f023 0308 	bic.w	r3, r3, #8
 80017f0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80017f4:	233f      	movs	r3, #63	; 0x3f
 80017f6:	4093      	lsls	r3, r2
 80017f8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80017fa:	2300      	movs	r3, #0
 80017fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001800:	2301      	movs	r3, #1
 8001802:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001806:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03f      	beq.n	800188c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800180c:	4620      	mov	r0, r4
 800180e:	4798      	blx	r3
 8001810:	e03c      	b.n	800188c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001812:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e7      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x12c>
 8001818:	e7eb      	b.n	80017f2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800181a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800181c:	b1a3      	cbz	r3, 8001848 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800181e:	4620      	mov	r0, r4
 8001820:	4798      	blx	r3
 8001822:	e011      	b.n	8001848 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	f412 7f80 	tst.w	r2, #256	; 0x100
 800182a:	d109      	bne.n	8001840 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f022 0210 	bic.w	r2, r2, #16
 8001832:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001834:	2300      	movs	r3, #0
 8001836:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800183a:	2301      	movs	r3, #1
 800183c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001840:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001842:	b10b      	cbz	r3, 8001848 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001844:	4620      	mov	r0, r4
 8001846:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001848:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800184a:	b1fb      	cbz	r3, 800188c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800184c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800184e:	f013 0f01 	tst.w	r3, #1
 8001852:	d017      	beq.n	8001884 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001854:	2305      	movs	r3, #5
 8001856:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800185a:	6822      	ldr	r2, [r4, #0]
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001864:	9b01      	ldr	r3, [sp, #4]
 8001866:	3301      	adds	r3, #1
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	429d      	cmp	r5, r3
 800186c:	d304      	bcc.n	8001878 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f013 0f01 	tst.w	r3, #1
 8001876:	d1f5      	bne.n	8001864 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001878:	2300      	movs	r3, #0
 800187a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800187e:	2301      	movs	r3, #1
 8001880:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001884:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001886:	b10b      	cbz	r3, 800188c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001888:	4620      	mov	r0, r4
 800188a:	4798      	blx	r3
}
 800188c:	b003      	add	sp, #12
 800188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001890:	20000008 	.word	0x20000008
 8001894:	1b4e81b5 	.word	0x1b4e81b5

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189c:	2400      	movs	r4, #0
 800189e:	e098      	b.n	80019d2 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a0:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 80018a4:	f10e 0e08 	add.w	lr, lr, #8
 80018a8:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ac:	f004 0607 	and.w	r6, r4, #7
 80018b0:	00b6      	lsls	r6, r6, #2
 80018b2:	270f      	movs	r7, #15
 80018b4:	40b7      	lsls	r7, r6
 80018b6:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018ba:	690f      	ldr	r7, [r1, #16]
 80018bc:	fa07 f606 	lsl.w	r6, r7, r6
 80018c0:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 80018c2:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 80018c6:	e094      	b.n	80019f2 <HAL_GPIO_Init+0x15a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ca:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018cc:	68cf      	ldr	r7, [r1, #12]
 80018ce:	fa07 f70e 	lsl.w	r7, r7, lr
 80018d2:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80018d4:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d8:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018dc:	684e      	ldr	r6, [r1, #4]
 80018de:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80018e2:	40a6      	lsls	r6, r4
 80018e4:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80018e6:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018e8:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ea:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ec:	688b      	ldr	r3, [r1, #8]
 80018ee:	fa03 f30e 	lsl.w	r3, r3, lr
 80018f2:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80018f4:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f6:	684b      	ldr	r3, [r1, #4]
 80018f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80018fc:	d068      	beq.n	80019d0 <HAL_GPIO_Init+0x138>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <HAL_GPIO_Init+0x1b0>)
 8001904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800190a:	645a      	str	r2, [r3, #68]	; 0x44
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	9b01      	ldr	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001916:	08a3      	lsrs	r3, r4, #2
 8001918:	1c9e      	adds	r6, r3, #2
 800191a:	4a4c      	ldr	r2, [pc, #304]	; (8001a4c <HAL_GPIO_Init+0x1b4>)
 800191c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001920:	f004 0603 	and.w	r6, r4, #3
 8001924:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8001928:	260f      	movs	r6, #15
 800192a:	fa06 f60e 	lsl.w	r6, r6, lr
 800192e:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001932:	4f47      	ldr	r7, [pc, #284]	; (8001a50 <HAL_GPIO_Init+0x1b8>)
 8001934:	42b8      	cmp	r0, r7
 8001936:	d079      	beq.n	8001a2c <HAL_GPIO_Init+0x194>
 8001938:	4e46      	ldr	r6, [pc, #280]	; (8001a54 <HAL_GPIO_Init+0x1bc>)
 800193a:	42b0      	cmp	r0, r6
 800193c:	d078      	beq.n	8001a30 <HAL_GPIO_Init+0x198>
 800193e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001942:	42b0      	cmp	r0, r6
 8001944:	d076      	beq.n	8001a34 <HAL_GPIO_Init+0x19c>
 8001946:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800194a:	42b0      	cmp	r0, r6
 800194c:	d074      	beq.n	8001a38 <HAL_GPIO_Init+0x1a0>
 800194e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001952:	42b0      	cmp	r0, r6
 8001954:	d072      	beq.n	8001a3c <HAL_GPIO_Init+0x1a4>
 8001956:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800195a:	42b0      	cmp	r0, r6
 800195c:	d070      	beq.n	8001a40 <HAL_GPIO_Init+0x1a8>
 800195e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001962:	42b0      	cmp	r0, r6
 8001964:	d060      	beq.n	8001a28 <HAL_GPIO_Init+0x190>
 8001966:	2607      	movs	r6, #7
 8001968:	fa06 f60e 	lsl.w	r6, r6, lr
 800196c:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800196e:	3302      	adds	r3, #2
 8001970:	4e36      	ldr	r6, [pc, #216]	; (8001a4c <HAL_GPIO_Init+0x1b4>)
 8001972:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001976:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <HAL_GPIO_Init+0x1c0>)
 8001978:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 800197a:	43eb      	mvns	r3, r5
 800197c:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001980:	684f      	ldr	r7, [r1, #4]
 8001982:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001986:	d001      	beq.n	800198c <HAL_GPIO_Init+0xf4>
        {
          temp |= iocurrent;
 8001988:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 800198c:	4a32      	ldr	r2, [pc, #200]	; (8001a58 <HAL_GPIO_Init+0x1c0>)
 800198e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001990:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001992:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001996:	684f      	ldr	r7, [r1, #4]
 8001998:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800199c:	d001      	beq.n	80019a2 <HAL_GPIO_Init+0x10a>
        {
          temp |= iocurrent;
 800199e:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 80019a2:	4a2d      	ldr	r2, [pc, #180]	; (8001a58 <HAL_GPIO_Init+0x1c0>)
 80019a4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a6:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ac:	684f      	ldr	r7, [r1, #4]
 80019ae:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80019b2:	d001      	beq.n	80019b8 <HAL_GPIO_Init+0x120>
        {
          temp |= iocurrent;
 80019b4:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 80019b8:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <HAL_GPIO_Init+0x1c0>)
 80019ba:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80019bc:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80019be:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c0:	684e      	ldr	r6, [r1, #4]
 80019c2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80019c6:	d001      	beq.n	80019cc <HAL_GPIO_Init+0x134>
        {
          temp |= iocurrent;
 80019c8:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 80019cc:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <HAL_GPIO_Init+0x1c0>)
 80019ce:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d0:	3401      	adds	r4, #1
 80019d2:	2c0f      	cmp	r4, #15
 80019d4:	d836      	bhi.n	8001a44 <HAL_GPIO_Init+0x1ac>
    ioposition = 0x01U << position;
 80019d6:	2301      	movs	r3, #1
 80019d8:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	680a      	ldr	r2, [r1, #0]
 80019dc:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 80019e0:	42ab      	cmp	r3, r5
 80019e2:	d1f5      	bne.n	80019d0 <HAL_GPIO_Init+0x138>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e4:	684a      	ldr	r2, [r1, #4]
 80019e6:	2a02      	cmp	r2, #2
 80019e8:	f43f af5a 	beq.w	80018a0 <HAL_GPIO_Init+0x8>
 80019ec:	2a12      	cmp	r2, #18
 80019ee:	f43f af57 	beq.w	80018a0 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80019f2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f4:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f20e 	lsl.w	r2, r2, lr
 80019fe:	43d2      	mvns	r2, r2
 8001a00:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a02:	684f      	ldr	r7, [r1, #4]
 8001a04:	f007 0703 	and.w	r7, r7, #3
 8001a08:	fa07 f70e 	lsl.w	r7, r7, lr
 8001a0c:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001a0e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a10:	684e      	ldr	r6, [r1, #4]
 8001a12:	1e77      	subs	r7, r6, #1
 8001a14:	2f01      	cmp	r7, #1
 8001a16:	f67f af57 	bls.w	80018c8 <HAL_GPIO_Init+0x30>
 8001a1a:	2e11      	cmp	r6, #17
 8001a1c:	f43f af54 	beq.w	80018c8 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a20:	2e12      	cmp	r6, #18
 8001a22:	f47f af61 	bne.w	80018e8 <HAL_GPIO_Init+0x50>
 8001a26:	e74f      	b.n	80018c8 <HAL_GPIO_Init+0x30>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a28:	2606      	movs	r6, #6
 8001a2a:	e79d      	b.n	8001968 <HAL_GPIO_Init+0xd0>
 8001a2c:	2600      	movs	r6, #0
 8001a2e:	e79b      	b.n	8001968 <HAL_GPIO_Init+0xd0>
 8001a30:	2601      	movs	r6, #1
 8001a32:	e799      	b.n	8001968 <HAL_GPIO_Init+0xd0>
 8001a34:	2602      	movs	r6, #2
 8001a36:	e797      	b.n	8001968 <HAL_GPIO_Init+0xd0>
 8001a38:	2603      	movs	r6, #3
 8001a3a:	e795      	b.n	8001968 <HAL_GPIO_Init+0xd0>
 8001a3c:	2604      	movs	r6, #4
 8001a3e:	e793      	b.n	8001968 <HAL_GPIO_Init+0xd0>
 8001a40:	2605      	movs	r6, #5
 8001a42:	e791      	b.n	8001968 <HAL_GPIO_Init+0xd0>
      }
    }
  }
}
 8001a44:	b003      	add	sp, #12
 8001a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40013800 	.word	0x40013800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40013c00 	.word	0x40013c00

08001a5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a5c:	b912      	cbnz	r2, 8001a64 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5e:	0409      	lsls	r1, r1, #16
 8001a60:	6181      	str	r1, [r0, #24]
 8001a62:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001a64:	6181      	str	r1, [r0, #24]
 8001a66:	4770      	bx	lr

08001a68 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a68:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b40      	cmp	r3, #64	; 0x40
 8001a70:	d013      	beq.n	8001a9a <I2C_Master_SB+0x32>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a72:	6903      	ldr	r3, [r0, #16]
 8001a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a78:	d01e      	beq.n	8001ab8 <I2C_Master_SB+0x50>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 8001a7a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d02d      	beq.n	8001adc <I2C_Master_SB+0x74>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
      }
      else if(hi2c->EventCount == 1U)
 8001a80:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d133      	bne.n	8001aee <I2C_Master_SB+0x86>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001a86:	6802      	ldr	r2, [r0, #0]
 8001a88:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a8a:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8001a8e:	f003 0306 	and.w	r3, r3, #6
 8001a92:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8001a96:	6113      	str	r3, [r2, #16]
 8001a98:	e029      	b.n	8001aee <I2C_Master_SB+0x86>
    if(hi2c->EventCount == 0U)
 8001a9a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001a9c:	b92b      	cbnz	r3, 8001aaa <I2C_Master_SB+0x42>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001a9e:	6802      	ldr	r2, [r0, #0]
 8001aa0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001aa2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001aa6:	6113      	str	r3, [r2, #16]
 8001aa8:	e021      	b.n	8001aee <I2C_Master_SB+0x86>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001aaa:	6802      	ldr	r2, [r0, #0]
 8001aac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	6113      	str	r3, [r2, #16]
 8001ab6:	e01a      	b.n	8001aee <I2C_Master_SB+0x86>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001ab8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b21      	cmp	r3, #33	; 0x21
 8001ac0:	d006      	beq.n	8001ad0 <I2C_Master_SB+0x68>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ac2:	6802      	ldr	r2, [r0, #0]
 8001ac4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	6113      	str	r3, [r2, #16]
 8001ace:	e00e      	b.n	8001aee <I2C_Master_SB+0x86>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001ad0:	6802      	ldr	r2, [r0, #0]
 8001ad2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ad4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001ad8:	6113      	str	r3, [r2, #16]
 8001ada:	e008      	b.n	8001aee <I2C_Master_SB+0x86>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001adc:	6802      	ldr	r2, [r0, #0]
 8001ade:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ae0:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8001ae4:	f003 0306 	and.w	r3, r3, #6
 8001ae8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001aec:	6113      	str	r3, [r2, #16]
      }
    }
  }

  return HAL_OK;
}
 8001aee:	2000      	movs	r0, #0
 8001af0:	4770      	bx	lr

08001af2 <I2C_Master_ADD10>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001af2:	6802      	ldr	r2, [r0, #0]
 8001af4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
}
 8001afa:	2000      	movs	r0, #0
 8001afc:	4770      	bx	lr

08001afe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001afe:	b410      	push	{r4}
 8001b00:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 8001b02:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001b06:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b08:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8001b0a:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b22      	cmp	r3, #34	; 0x22
 8001b14:	d00c      	beq.n	8001b30 <I2C_Master_ADDR+0x32>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b16:	2300      	movs	r3, #0
 8001b18:	9309      	str	r3, [sp, #36]	; 0x24
 8001b1a:	6803      	ldr	r3, [r0, #0]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	9209      	str	r2, [sp, #36]	; 0x24
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	9309      	str	r3, [sp, #36]	; 0x24
 8001b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  return HAL_OK;
}
 8001b26:	2000      	movs	r0, #0
 8001b28:	b00b      	add	sp, #44	; 0x2c
 8001b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b2e:	4770      	bx	lr
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001b30:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b32:	b90b      	cbnz	r3, 8001b38 <I2C_Master_ADDR+0x3a>
 8001b34:	2a40      	cmp	r2, #64	; 0x40
 8001b36:	d017      	beq.n	8001b68 <I2C_Master_ADDR+0x6a>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001b38:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b3a:	b91b      	cbnz	r3, 8001b44 <I2C_Master_ADDR+0x46>
 8001b3c:	6903      	ldr	r3, [r0, #16]
 8001b3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b42:	d019      	beq.n	8001b78 <I2C_Master_ADDR+0x7a>
      if(hi2c->XferCount == 0U)
 8001b44:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d125      	bne.n	8001b98 <I2C_Master_ADDR+0x9a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b4c:	9302      	str	r3, [sp, #8]
 8001b4e:	6803      	ldr	r3, [r0, #0]
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	9202      	str	r2, [sp, #8]
 8001b54:	699a      	ldr	r2, [r3, #24]
 8001b56:	9202      	str	r2, [sp, #8]
 8001b58:	9a02      	ldr	r2, [sp, #8]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b60:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	6503      	str	r3, [r0, #80]	; 0x50
 8001b66:	e7de      	b.n	8001b26 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	6803      	ldr	r3, [r0, #0]
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	9200      	str	r2, [sp, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	9b00      	ldr	r3, [sp, #0]
 8001b76:	e7d6      	b.n	8001b26 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	6803      	ldr	r3, [r0, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	9201      	str	r2, [sp, #4]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	9201      	str	r2, [sp, #4]
 8001b86:	9a01      	ldr	r2, [sp, #4]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b8e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001b90:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b92:	3301      	adds	r3, #1
 8001b94:	6503      	str	r3, [r0, #80]	; 0x50
 8001b96:	e7c6      	b.n	8001b26 <I2C_Master_ADDR+0x28>
      else if(hi2c->XferCount == 1U)   
 8001b98:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d01a      	beq.n	8001bd6 <I2C_Master_ADDR+0xd8>
      else if(hi2c->XferCount == 2U)
 8001ba0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d06b      	beq.n	8001c80 <I2C_Master_ADDR+0x182>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001ba8:	6802      	ldr	r2, [r0, #0]
 8001baa:	6813      	ldr	r3, [r2, #0]
 8001bac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb0:	6013      	str	r3, [r2, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001bb2:	6803      	ldr	r3, [r0, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001bba:	d003      	beq.n	8001bc4 <I2C_Master_ADDR+0xc6>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bc2:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9308      	str	r3, [sp, #32]
 8001bc8:	6803      	ldr	r3, [r0, #0]
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	9208      	str	r2, [sp, #32]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	9308      	str	r3, [sp, #32]
 8001bd2:	9b08      	ldr	r3, [sp, #32]
 8001bd4:	e7c5      	b.n	8001b62 <I2C_Master_ADDR+0x64>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001bd6:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001bda:	d016      	beq.n	8001c0a <I2C_Master_ADDR+0x10c>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001bdc:	2904      	cmp	r1, #4
 8001bde:	d03d      	beq.n	8001c5c <I2C_Master_ADDR+0x15e>
 8001be0:	2908      	cmp	r1, #8
 8001be2:	d03b      	beq.n	8001c5c <I2C_Master_ADDR+0x15e>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8001be4:	2c12      	cmp	r4, #18
 8001be6:	d039      	beq.n	8001c5c <I2C_Master_ADDR+0x15e>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001be8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d030      	beq.n	8001c50 <I2C_Master_ADDR+0x152>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001bee:	6802      	ldr	r2, [r0, #0]
 8001bf0:	6813      	ldr	r3, [r2, #0]
 8001bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bf6:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9305      	str	r3, [sp, #20]
 8001bfc:	6803      	ldr	r3, [r0, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	9205      	str	r2, [sp, #20]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	9305      	str	r3, [sp, #20]
 8001c06:	9b05      	ldr	r3, [sp, #20]
 8001c08:	e7ab      	b.n	8001b62 <I2C_Master_ADDR+0x64>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c0a:	6802      	ldr	r2, [r0, #0]
 8001c0c:	6813      	ldr	r3, [r2, #0]
 8001c0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c12:	6013      	str	r3, [r2, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001c14:	6803      	ldr	r3, [r0, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001c1c:	d00c      	beq.n	8001c38 <I2C_Master_ADDR+0x13a>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c24:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c26:	2300      	movs	r3, #0
 8001c28:	9303      	str	r3, [sp, #12]
 8001c2a:	6803      	ldr	r3, [r0, #0]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	9203      	str	r2, [sp, #12]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	9303      	str	r3, [sp, #12]
 8001c34:	9b03      	ldr	r3, [sp, #12]
 8001c36:	e794      	b.n	8001b62 <I2C_Master_ADDR+0x64>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	9204      	str	r2, [sp, #16]
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	9204      	str	r2, [sp, #16]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	9204      	str	r2, [sp, #16]
 8001c44:	9a04      	ldr	r2, [sp, #16]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e788      	b.n	8001b62 <I2C_Master_ADDR+0x64>
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001c50:	6802      	ldr	r2, [r0, #0]
 8001c52:	6813      	ldr	r3, [r2, #0]
 8001c54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e7cd      	b.n	8001bf8 <I2C_Master_ADDR+0xfa>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c5c:	6802      	ldr	r2, [r0, #0]
 8001c5e:	6813      	ldr	r3, [r2, #0]
 8001c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c64:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c66:	2300      	movs	r3, #0
 8001c68:	9306      	str	r3, [sp, #24]
 8001c6a:	6803      	ldr	r3, [r0, #0]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	9206      	str	r2, [sp, #24]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	9206      	str	r2, [sp, #24]
 8001c74:	9a06      	ldr	r2, [sp, #24]
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e770      	b.n	8001b62 <I2C_Master_ADDR+0x64>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001c80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d01b      	beq.n	8001cbe <I2C_Master_ADDR+0x1c0>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c86:	6802      	ldr	r2, [r0, #0]
 8001c88:	6813      	ldr	r3, [r2, #0]
 8001c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c8e:	6013      	str	r3, [r2, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001c90:	6802      	ldr	r2, [r0, #0]
 8001c92:	6813      	ldr	r3, [r2, #0]
 8001c94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c98:	6013      	str	r3, [r2, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001c9a:	6803      	ldr	r3, [r0, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001ca2:	d003      	beq.n	8001cac <I2C_Master_ADDR+0x1ae>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001caa:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cac:	2300      	movs	r3, #0
 8001cae:	9307      	str	r3, [sp, #28]
 8001cb0:	6803      	ldr	r3, [r0, #0]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	9207      	str	r2, [sp, #28]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	9307      	str	r3, [sp, #28]
 8001cba:	9b07      	ldr	r3, [sp, #28]
 8001cbc:	e751      	b.n	8001b62 <I2C_Master_ADDR+0x64>
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001cbe:	6802      	ldr	r2, [r0, #0]
 8001cc0:	6813      	ldr	r3, [r2, #0]
 8001cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e7e7      	b.n	8001c9a <I2C_Master_ADDR+0x19c>

08001cca <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 8001cca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	b153      	cbz	r3, 8001ce6 <I2C_SlaveTransmit_BTF+0x1c>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cd0:	6802      	ldr	r2, [r0, #0]
 8001cd2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cd4:	1c59      	adds	r1, r3, #1
 8001cd6:	6241      	str	r1, [r0, #36]	; 0x24
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8001cdc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  return HAL_OK;
}
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	4770      	bx	lr

08001cea <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 8001cea:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	b153      	cbz	r3, 8001d06 <I2C_SlaveReceive_BTF+0x1c>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001cf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	6242      	str	r2, [r0, #36]	; 0x24
 8001cf6:	6802      	ldr	r2, [r0, #0]
 8001cf8:	6912      	ldr	r2, [r2, #16]
 8001cfa:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001cfc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  return HAL_OK;
}
 8001d06:	2000      	movs	r0, #0
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_I2C_Init>:
  if(hi2c == NULL)
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	f000 8082 	beq.w	8001e16 <HAL_I2C_Init+0x10a>
{
 8001d12:	b538      	push	{r3, r4, r5, lr}
 8001d14:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001d16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d041      	beq.n	8001da2 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1e:	2324      	movs	r3, #36	; 0x24
 8001d20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001d24:	6822      	ldr	r2, [r4, #0]
 8001d26:	6813      	ldr	r3, [r2, #0]
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d2e:	f000 fe5d 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
  freqrange = I2C_FREQRANGE(pclk1);
 8001d32:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <HAL_I2C_Init+0x110>)
 8001d34:	fba3 2300 	umull	r2, r3, r3, r0
 8001d38:	0c9b      	lsrs	r3, r3, #18
  hi2c->Instance->CR2 = freqrange;
 8001d3a:	6822      	ldr	r2, [r4, #0]
 8001d3c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d3e:	6821      	ldr	r1, [r4, #0]
 8001d40:	6865      	ldr	r5, [r4, #4]
 8001d42:	4a37      	ldr	r2, [pc, #220]	; (8001e20 <HAL_I2C_Init+0x114>)
 8001d44:	4295      	cmp	r5, r2
 8001d46:	d831      	bhi.n	8001dac <HAL_I2C_Init+0xa0>
 8001d48:	3301      	adds	r3, #1
 8001d4a:	620b      	str	r3, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d4c:	6821      	ldr	r1, [r4, #0]
 8001d4e:	6863      	ldr	r3, [r4, #4]
 8001d50:	4a33      	ldr	r2, [pc, #204]	; (8001e20 <HAL_I2C_Init+0x114>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d834      	bhi.n	8001dc0 <HAL_I2C_Init+0xb4>
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d5c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d800      	bhi.n	8001d66 <HAL_I2C_Init+0x5a>
 8001d64:	2004      	movs	r0, #4
 8001d66:	61c8      	str	r0, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d68:	6822      	ldr	r2, [r4, #0]
 8001d6a:	69e3      	ldr	r3, [r4, #28]
 8001d6c:	6a21      	ldr	r1, [r4, #32]
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001d72:	6822      	ldr	r2, [r4, #0]
 8001d74:	6923      	ldr	r3, [r4, #16]
 8001d76:	68e1      	ldr	r1, [r4, #12]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001d7c:	6822      	ldr	r2, [r4, #0]
 8001d7e:	6963      	ldr	r3, [r4, #20]
 8001d80:	69a1      	ldr	r1, [r4, #24]
 8001d82:	430b      	orrs	r3, r1
 8001d84:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001d86:	6822      	ldr	r2, [r4, #0]
 8001d88:	6813      	ldr	r3, [r2, #0]
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d90:	2000      	movs	r0, #0
 8001d92:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	2320      	movs	r3, #32
 8001d96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d9a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001da0:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001da2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001da6:	f002 fd5f 	bl	8004868 <HAL_I2C_MspInit>
 8001daa:	e7b8      	b.n	8001d1e <HAL_I2C_Init+0x12>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001dac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001db0:	fb02 f303 	mul.w	r3, r2, r3
 8001db4:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <HAL_I2C_Init+0x118>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	099b      	lsrs	r3, r3, #6
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	e7c4      	b.n	8001d4a <HAL_I2C_Init+0x3e>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001dc0:	68a5      	ldr	r5, [r4, #8]
 8001dc2:	b98d      	cbnz	r5, 8001de8 <HAL_I2C_Init+0xdc>
 8001dc4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001dc8:	fbb0 f2f2 	udiv	r2, r0, r2
 8001dcc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	0952      	lsrs	r2, r2, #5
 8001dd6:	b9e2      	cbnz	r2, 8001e12 <HAL_I2C_Init+0x106>
 8001dd8:	b995      	cbnz	r5, 8001e00 <HAL_I2C_Init+0xf4>
 8001dda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001dde:	fbb0 f0f3 	udiv	r0, r0, r3
 8001de2:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001de6:	e7be      	b.n	8001d66 <HAL_I2C_Init+0x5a>
 8001de8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001dec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001df0:	fbb0 f2f2 	udiv	r2, r0, r2
 8001df4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001df8:	fab2 f282 	clz	r2, r2
 8001dfc:	0952      	lsrs	r2, r2, #5
 8001dfe:	e7ea      	b.n	8001dd6 <HAL_I2C_Init+0xca>
 8001e00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e08:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e0c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001e10:	e7a9      	b.n	8001d66 <HAL_I2C_Init+0x5a>
 8001e12:	2001      	movs	r0, #1
 8001e14:	e7a7      	b.n	8001d66 <HAL_I2C_Init+0x5a>
    return HAL_ERROR;
 8001e16:	2001      	movs	r0, #1
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	431bde83 	.word	0x431bde83
 8001e20:	000186a0 	.word	0x000186a0
 8001e24:	10624dd3 	.word	0x10624dd3

08001e28 <I2C_SlaveTransmit_TXE>:
  uint32_t CurrentState = hi2c->State;
 8001e28:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e2c:	b2da      	uxtb	r2, r3
  if(hi2c->XferCount != 0U)
 8001e2e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b1fb      	cbz	r3, 8001e74 <I2C_SlaveTransmit_TXE+0x4c>
{
 8001e34:	b510      	push	{r4, lr}
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e36:	6801      	ldr	r1, [r0, #0]
 8001e38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e3a:	1c5c      	adds	r4, r3, #1
 8001e3c:	6244      	str	r4, [r0, #36]	; 0x24
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	610b      	str	r3, [r1, #16]
    hi2c->XferCount--;
 8001e42:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e4c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	b90b      	cbnz	r3, 8001e56 <I2C_SlaveTransmit_TXE+0x2e>
 8001e52:	2a29      	cmp	r2, #41	; 0x29
 8001e54:	d001      	beq.n	8001e5a <I2C_SlaveTransmit_TXE+0x32>
}
 8001e56:	2000      	movs	r0, #0
 8001e58:	bd10      	pop	{r4, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e5a:	6802      	ldr	r2, [r0, #0]
 8001e5c:	6853      	ldr	r3, [r2, #4]
 8001e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e62:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e64:	2321      	movs	r3, #33	; 0x21
 8001e66:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001e68:	2328      	movs	r3, #40	; 0x28
 8001e6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e6e:	f003 fa5f 	bl	8005330 <HAL_I2C_SlaveTxCpltCallback>
 8001e72:	e7f0      	b.n	8001e56 <I2C_SlaveTransmit_TXE+0x2e>
}
 8001e74:	2000      	movs	r0, #0
 8001e76:	4770      	bx	lr

08001e78 <I2C_SlaveReceive_RXNE>:
{
 8001e78:	b508      	push	{r3, lr}
  uint32_t CurrentState = hi2c->State;
 8001e7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e7e:	b2da      	uxtb	r2, r3
  if(hi2c->XferCount != 0U)
 8001e80:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	b17b      	cbz	r3, 8001ea6 <I2C_SlaveReceive_RXNE+0x2e>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e86:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e88:	1c59      	adds	r1, r3, #1
 8001e8a:	6241      	str	r1, [r0, #36]	; 0x24
 8001e8c:	6801      	ldr	r1, [r0, #0]
 8001e8e:	6909      	ldr	r1, [r1, #16]
 8001e90:	7019      	strb	r1, [r3, #0]
    hi2c->XferCount--;
 8001e92:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e9c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b90b      	cbnz	r3, 8001ea6 <I2C_SlaveReceive_RXNE+0x2e>
 8001ea2:	2a2a      	cmp	r2, #42	; 0x2a
 8001ea4:	d001      	beq.n	8001eaa <I2C_SlaveReceive_RXNE+0x32>
}
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001eaa:	6802      	ldr	r2, [r0, #0]
 8001eac:	6853      	ldr	r3, [r2, #4]
 8001eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eb2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001eb4:	2322      	movs	r3, #34	; 0x22
 8001eb6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001eb8:	2328      	movs	r3, #40	; 0x28
 8001eba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ebe:	f003 fa75 	bl	80053ac <HAL_I2C_SlaveRxCpltCallback>
 8001ec2:	e7f0      	b.n	8001ea6 <I2C_SlaveReceive_RXNE+0x2e>

08001ec4 <HAL_I2C_AddrCallback>:
{
 8001ec4:	4770      	bx	lr

08001ec6 <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001ec6:	b508      	push	{r3, lr}
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
  uint16_t SlaveAddrCode = 0U;

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001ec8:	6803      	ldr	r3, [r0, #0]
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	f012 0f04 	tst.w	r2, #4
 8001ed0:	d009      	beq.n	8001ee6 <I2C_Slave_ADDR+0x20>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001ed2:	2100      	movs	r1, #0
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001eda:	d006      	beq.n	8001eea <I2C_Slave_ADDR+0x24>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8001edc:	8b02      	ldrh	r2, [r0, #24]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001ede:	f7ff fff1 	bl	8001ec4 <HAL_I2C_AddrCallback>

  return HAL_OK;
}
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	bd08      	pop	{r3, pc}
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	e7f4      	b.n	8001ed4 <I2C_Slave_ADDR+0xe>
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8001eea:	8982      	ldrh	r2, [r0, #12]
 8001eec:	e7f7      	b.n	8001ede <I2C_Slave_ADDR+0x18>

08001eee <HAL_I2C_ListenCpltCallback>:
{
 8001eee:	4770      	bx	lr

08001ef0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8001ef0:	b508      	push	{r3, lr}
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8001ef2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ef6:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ef8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001efa:	2a04      	cmp	r2, #4
 8001efc:	d009      	beq.n	8001f12 <I2C_Slave_AF+0x22>
 8001efe:	2a08      	cmp	r2, #8
 8001f00:	d007      	beq.n	8001f12 <I2C_Slave_AF+0x22>
    hi2c->Mode = HAL_I2C_MODE_NONE;
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001f02:	2b21      	cmp	r3, #33	; 0x21
 8001f04:	d021      	beq.n	8001f4a <I2C_Slave_AF+0x5a>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f06:	6803      	ldr	r3, [r0, #0]
 8001f08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f0c:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
}
 8001f0e:	2000      	movs	r0, #0
 8001f10:	bd08      	pop	{r3, pc}
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001f12:	2b28      	cmp	r3, #40	; 0x28
 8001f14:	d1f5      	bne.n	8001f02 <I2C_Slave_AF+0x12>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <I2C_Slave_AF+0x90>)
 8001f18:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f1a:	6802      	ldr	r2, [r0, #0]
 8001f1c:	6853      	ldr	r3, [r2, #4]
 8001f1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f22:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f24:	6803      	ldr	r3, [r0, #0]
 8001f26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f2a:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f2c:	6802      	ldr	r2, [r0, #0]
 8001f2e:	6813      	ldr	r3, [r2, #0]
 8001f30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f34:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f40:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001f44:	f7ff ffd3 	bl	8001eee <HAL_I2C_ListenCpltCallback>
 8001f48:	e7e1      	b.n	8001f0e <I2C_Slave_AF+0x1e>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <I2C_Slave_AF+0x90>)
 8001f4c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f4e:	2321      	movs	r3, #33	; 0x21
 8001f50:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	2320      	movs	r3, #32
 8001f54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f5e:	6802      	ldr	r2, [r0, #0]
 8001f60:	6853      	ldr	r3, [r2, #4]
 8001f62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f66:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f68:	6803      	ldr	r3, [r0, #0]
 8001f6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f6e:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f70:	6802      	ldr	r2, [r0, #0]
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f78:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f7a:	f003 f9d9 	bl	8005330 <HAL_I2C_SlaveTxCpltCallback>
 8001f7e:	e7c6      	b.n	8001f0e <I2C_Slave_AF+0x1e>
 8001f80:	ffff0000 	.word	0xffff0000

08001f84 <HAL_I2C_MemTxCpltCallback>:
{
 8001f84:	4770      	bx	lr

08001f86 <I2C_MasterTransmit_TXE>:
{
 8001f86:	b510      	push	{r4, lr}
  uint32_t CurrentState       = hi2c->State;
 8001f88:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
  uint32_t CurrentMode        = hi2c->Mode;
 8001f8e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001f92:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f94:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f96:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8001f98:	b909      	cbnz	r1, 8001f9e <I2C_MasterTransmit_TXE+0x18>
 8001f9a:	2b21      	cmp	r3, #33	; 0x21
 8001f9c:	d005      	beq.n	8001faa <I2C_MasterTransmit_TXE+0x24>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001f9e:	2b21      	cmp	r3, #33	; 0x21
 8001fa0:	d03c      	beq.n	800201c <I2C_MasterTransmit_TXE+0x96>
 8001fa2:	2a40      	cmp	r2, #64	; 0x40
 8001fa4:	d038      	beq.n	8002018 <I2C_MasterTransmit_TXE+0x92>
}
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	bd10      	pop	{r4, pc}
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001faa:	2c04      	cmp	r4, #4
 8001fac:	d004      	beq.n	8001fb8 <I2C_MasterTransmit_TXE+0x32>
 8001fae:	2c08      	cmp	r4, #8
 8001fb0:	d002      	beq.n	8001fb8 <I2C_MasterTransmit_TXE+0x32>
 8001fb2:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8001fb6:	d119      	bne.n	8001fec <I2C_MasterTransmit_TXE+0x66>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fb8:	6802      	ldr	r2, [r0, #0]
 8001fba:	6853      	ldr	r3, [r2, #4]
 8001fbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fc0:	6053      	str	r3, [r2, #4]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fc2:	6802      	ldr	r2, [r0, #0]
 8001fc4:	6813      	ldr	r3, [r2, #0]
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fca:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fd6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	d015      	beq.n	800200c <I2C_MasterTransmit_TXE+0x86>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fe6:	f003 f985 	bl	80052f4 <HAL_I2C_MasterTxCpltCallback>
 8001fea:	e7dc      	b.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fec:	6802      	ldr	r2, [r0, #0]
 8001fee:	6853      	ldr	r3, [r2, #4]
 8001ff0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ff4:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ff6:	2311      	movs	r3, #17
 8001ff8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002000:	2320      	movs	r3, #32
 8002002:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002006:	f003 f975 	bl	80052f4 <HAL_I2C_MasterTxCpltCallback>
 800200a:	e7cc      	b.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800200c:	2300      	movs	r3, #0
 800200e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002012:	f7ff ffb7 	bl	8001f84 <HAL_I2C_MemTxCpltCallback>
 8002016:	e7c6      	b.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002018:	2b22      	cmp	r3, #34	; 0x22
 800201a:	d1c4      	bne.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>
    if(hi2c->XferCount == 0U)
 800201c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	b183      	cbz	r3, 8002044 <I2C_MasterTransmit_TXE+0xbe>
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002022:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b40      	cmp	r3, #64	; 0x40
 800202a:	d011      	beq.n	8002050 <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800202c:	6802      	ldr	r2, [r0, #0]
 800202e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002030:	1c59      	adds	r1, r3, #1
 8002032:	6241      	str	r1, [r0, #36]	; 0x24
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8002038:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29b      	uxth	r3, r3
 8002040:	8543      	strh	r3, [r0, #42]	; 0x2a
 8002042:	e7b0      	b.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002044:	6802      	ldr	r2, [r0, #0]
 8002046:	6853      	ldr	r3, [r2, #4]
 8002048:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800204c:	6053      	str	r3, [r2, #4]
 800204e:	e7aa      	b.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>
        if(hi2c->EventCount == 0)
 8002050:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002052:	b99b      	cbnz	r3, 800207c <I2C_MasterTransmit_TXE+0xf6>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002054:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002056:	2b01      	cmp	r3, #1
 8002058:	d008      	beq.n	800206c <I2C_MasterTransmit_TXE+0xe6>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800205a:	6802      	ldr	r2, [r0, #0]
 800205c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800205e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002062:	6113      	str	r3, [r2, #16]
            hi2c->EventCount++;
 8002064:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002066:	3301      	adds	r3, #1
 8002068:	6503      	str	r3, [r0, #80]	; 0x50
 800206a:	e79c      	b.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800206c:	6802      	ldr	r2, [r0, #0]
 800206e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002070:	b2db      	uxtb	r3, r3
 8002072:	6113      	str	r3, [r2, #16]
            hi2c->EventCount += 2;
 8002074:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002076:	3302      	adds	r3, #2
 8002078:	6503      	str	r3, [r0, #80]	; 0x50
 800207a:	e794      	b.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>
        else if(hi2c->EventCount == 1)
 800207c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800207e:	2b01      	cmp	r3, #1
 8002080:	d018      	beq.n	80020b4 <I2C_MasterTransmit_TXE+0x12e>
        else if(hi2c->EventCount == 2)
 8002082:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002084:	2b02      	cmp	r3, #2
 8002086:	d18e      	bne.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002088:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b22      	cmp	r3, #34	; 0x22
 8002090:	d018      	beq.n	80020c4 <I2C_MasterTransmit_TXE+0x13e>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002092:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b21      	cmp	r3, #33	; 0x21
 800209a:	d184      	bne.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800209c:	6802      	ldr	r2, [r0, #0]
 800209e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020a0:	1c59      	adds	r1, r3, #1
 80020a2:	6241      	str	r1, [r0, #36]	; 0x24
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	6113      	str	r3, [r2, #16]
            hi2c->XferCount--;
 80020a8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	8543      	strh	r3, [r0, #42]	; 0x2a
 80020b2:	e778      	b.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020b4:	6802      	ldr	r2, [r0, #0]
 80020b6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	6113      	str	r3, [r2, #16]
          hi2c->EventCount++;
 80020bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80020be:	3301      	adds	r3, #1
 80020c0:	6503      	str	r3, [r0, #80]	; 0x50
 80020c2:	e770      	b.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80020c4:	6802      	ldr	r2, [r0, #0]
 80020c6:	6813      	ldr	r3, [r2, #0]
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e76a      	b.n	8001fa6 <I2C_MasterTransmit_TXE+0x20>

080020d0 <I2C_MasterTransmit_BTF>:
{
 80020d0:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b21      	cmp	r3, #33	; 0x21
 80020dc:	d001      	beq.n	80020e2 <I2C_MasterTransmit_BTF+0x12>
}
 80020de:	2000      	movs	r0, #0
 80020e0:	bd08      	pop	{r3, pc}
    if(hi2c->XferCount != 0U)
 80020e2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	bb03      	cbnz	r3, 800212a <I2C_MasterTransmit_BTF+0x5a>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020e8:	2a04      	cmp	r2, #4
 80020ea:	d004      	beq.n	80020f6 <I2C_MasterTransmit_BTF+0x26>
 80020ec:	2a08      	cmp	r2, #8
 80020ee:	d002      	beq.n	80020f6 <I2C_MasterTransmit_BTF+0x26>
 80020f0:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80020f4:	d125      	bne.n	8002142 <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020f6:	6802      	ldr	r2, [r0, #0]
 80020f8:	6853      	ldr	r3, [r2, #4]
 80020fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020fe:	6053      	str	r3, [r2, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002100:	6802      	ldr	r2, [r0, #0]
 8002102:	6813      	ldr	r3, [r2, #0]
 8002104:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002108:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800210a:	2300      	movs	r3, #0
 800210c:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800210e:	2320      	movs	r3, #32
 8002110:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002114:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d021      	beq.n	8002162 <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800211e:	2300      	movs	r3, #0
 8002120:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002124:	f003 f8e6 	bl	80052f4 <HAL_I2C_MasterTxCpltCallback>
 8002128:	e7d9      	b.n	80020de <I2C_MasterTransmit_BTF+0xe>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800212a:	6802      	ldr	r2, [r0, #0]
 800212c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800212e:	1c59      	adds	r1, r3, #1
 8002130:	6241      	str	r1, [r0, #36]	; 0x24
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8002136:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29b      	uxth	r3, r3
 800213e:	8543      	strh	r3, [r0, #42]	; 0x2a
 8002140:	e7cd      	b.n	80020de <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002142:	6802      	ldr	r2, [r0, #0]
 8002144:	6853      	ldr	r3, [r2, #4]
 8002146:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800214a:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800214c:	2311      	movs	r3, #17
 800214e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002150:	2300      	movs	r3, #0
 8002152:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002156:	2320      	movs	r3, #32
 8002158:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800215c:	f003 f8ca 	bl	80052f4 <HAL_I2C_MasterTxCpltCallback>
 8002160:	e7bd      	b.n	80020de <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002162:	2300      	movs	r3, #0
 8002164:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002168:	f7ff ff0c 	bl	8001f84 <HAL_I2C_MemTxCpltCallback>
 800216c:	e7b7      	b.n	80020de <I2C_MasterTransmit_BTF+0xe>

0800216e <HAL_I2C_MemRxCpltCallback>:
{
 800216e:	4770      	bx	lr

08002170 <I2C_MasterReceive_RXNE>:
{
 8002170:	b508      	push	{r3, lr}
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002172:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b22      	cmp	r3, #34	; 0x22
 800217a:	d001      	beq.n	8002180 <I2C_MasterReceive_RXNE+0x10>
}
 800217c:	2000      	movs	r0, #0
 800217e:	bd08      	pop	{r3, pc}
    tmp = hi2c->XferCount;
 8002180:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002182:	b29b      	uxth	r3, r3
    if(tmp > 3U)
 8002184:	2b03      	cmp	r3, #3
 8002186:	d914      	bls.n	80021b2 <I2C_MasterReceive_RXNE+0x42>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002188:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	6242      	str	r2, [r0, #36]	; 0x24
 800218e:	6802      	ldr	r2, [r0, #0]
 8002190:	6912      	ldr	r2, [r2, #16]
 8002192:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002194:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29b      	uxth	r3, r3
 800219c:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 800219e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d1ea      	bne.n	800217c <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021a6:	6802      	ldr	r2, [r0, #0]
 80021a8:	6853      	ldr	r3, [r2, #4]
 80021aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021ae:	6053      	str	r3, [r2, #4]
 80021b0:	e7e4      	b.n	800217c <I2C_MasterReceive_RXNE+0xc>
    else if((tmp == 1U) || (tmp == 0U))
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d8e2      	bhi.n	800217c <I2C_MasterReceive_RXNE+0xc>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021b6:	6802      	ldr	r2, [r0, #0]
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021be:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021c0:	6802      	ldr	r2, [r0, #0]
 80021c2:	6853      	ldr	r3, [r2, #4]
 80021c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021c8:	6053      	str	r3, [r2, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	6242      	str	r2, [r0, #36]	; 0x24
 80021d0:	6802      	ldr	r2, [r0, #0]
 80021d2:	6912      	ldr	r2, [r2, #16]
 80021d4:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80021d6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29b      	uxth	r3, r3
 80021de:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	2320      	movs	r3, #32
 80021e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	6303      	str	r3, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80021ea:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b40      	cmp	r3, #64	; 0x40
 80021f2:	d005      	beq.n	8002200 <I2C_MasterReceive_RXNE+0x90>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80021fa:	f003 f8b9 	bl	8005370 <HAL_I2C_MasterRxCpltCallback>
 80021fe:	e7bd      	b.n	800217c <I2C_MasterReceive_RXNE+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	2300      	movs	r3, #0
 8002202:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002206:	f7ff ffb2 	bl	800216e <HAL_I2C_MemRxCpltCallback>
 800220a:	e7b7      	b.n	800217c <I2C_MasterReceive_RXNE+0xc>

0800220c <I2C_MasterReceive_BTF>:
{
 800220c:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800220e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 8002210:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b04      	cmp	r3, #4
 8002216:	d014      	beq.n	8002242 <I2C_MasterReceive_BTF+0x36>
  else if(hi2c->XferCount == 3U)
 8002218:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b03      	cmp	r3, #3
 800221e:	d021      	beq.n	8002264 <I2C_MasterReceive_BTF+0x58>
  else if(hi2c->XferCount == 2U)
 8002220:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d033      	beq.n	8002290 <I2C_MasterReceive_BTF+0x84>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002228:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	6242      	str	r2, [r0, #36]	; 0x24
 800222e:	6802      	ldr	r2, [r0, #0]
 8002230:	6912      	ldr	r2, [r2, #16]
 8002232:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002234:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29b      	uxth	r3, r3
 800223c:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800223e:	2000      	movs	r0, #0
 8002240:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002242:	6802      	ldr	r2, [r0, #0]
 8002244:	6853      	ldr	r3, [r2, #4]
 8002246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800224a:	6053      	str	r3, [r2, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800224c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	6242      	str	r2, [r0, #36]	; 0x24
 8002252:	6802      	ldr	r2, [r0, #0]
 8002254:	6912      	ldr	r2, [r2, #16]
 8002256:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002258:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29b      	uxth	r3, r3
 8002260:	8543      	strh	r3, [r0, #42]	; 0x2a
 8002262:	e7ec      	b.n	800223e <I2C_MasterReceive_BTF+0x32>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002264:	6802      	ldr	r2, [r0, #0]
 8002266:	6853      	ldr	r3, [r2, #4]
 8002268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800226c:	6053      	str	r3, [r2, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800226e:	6802      	ldr	r2, [r0, #0]
 8002270:	6813      	ldr	r3, [r2, #0]
 8002272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002276:	6013      	str	r3, [r2, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002278:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	6242      	str	r2, [r0, #36]	; 0x24
 800227e:	6802      	ldr	r2, [r0, #0]
 8002280:	6912      	ldr	r2, [r2, #16]
 8002282:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002284:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29b      	uxth	r3, r3
 800228c:	8543      	strh	r3, [r0, #42]	; 0x2a
 800228e:	e7d6      	b.n	800223e <I2C_MasterReceive_BTF+0x32>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8002290:	3a01      	subs	r2, #1
 8002292:	2a01      	cmp	r2, #1
 8002294:	d92f      	bls.n	80022f6 <I2C_MasterReceive_BTF+0xea>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002296:	6802      	ldr	r2, [r0, #0]
 8002298:	6813      	ldr	r3, [r2, #0]
 800229a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800229e:	6013      	str	r3, [r2, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	6242      	str	r2, [r0, #36]	; 0x24
 80022a6:	6802      	ldr	r2, [r0, #0]
 80022a8:	6912      	ldr	r2, [r2, #16]
 80022aa:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80022ac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	6242      	str	r2, [r0, #36]	; 0x24
 80022bc:	6802      	ldr	r2, [r0, #0]
 80022be:	6912      	ldr	r2, [r2, #16]
 80022c0:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80022c2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022cc:	6802      	ldr	r2, [r0, #0]
 80022ce:	6853      	ldr	r3, [r2, #4]
 80022d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	2320      	movs	r3, #32
 80022d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80022dc:	2300      	movs	r3, #0
 80022de:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80022e0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b40      	cmp	r3, #64	; 0x40
 80022e8:	d010      	beq.n	800230c <I2C_MasterReceive_BTF+0x100>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022f0:	f003 f83e 	bl	8005370 <HAL_I2C_MasterRxCpltCallback>
 80022f4:	e7a3      	b.n	800223e <I2C_MasterReceive_BTF+0x32>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80022f6:	6802      	ldr	r2, [r0, #0]
 80022f8:	6813      	ldr	r3, [r2, #0]
 80022fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022fe:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002300:	6802      	ldr	r2, [r0, #0]
 8002302:	6813      	ldr	r3, [r2, #0]
 8002304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e7c9      	b.n	80022a0 <I2C_MasterReceive_BTF+0x94>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800230c:	2300      	movs	r3, #0
 800230e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002312:	f7ff ff2c 	bl	800216e <HAL_I2C_MemRxCpltCallback>
 8002316:	e792      	b.n	800223e <I2C_MasterReceive_BTF+0x32>

08002318 <HAL_I2C_ErrorCallback>:
{
 8002318:	4770      	bx	lr

0800231a <HAL_I2C_AbortCpltCallback>:
{
 800231a:	4770      	bx	lr

0800231c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800231c:	b510      	push	{r4, lr}
 800231e:	4604      	mov	r4, r0
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8002320:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002324:	3b29      	subs	r3, #41	; 0x29
 8002326:	2b01      	cmp	r3, #1
 8002328:	d937      	bls.n	800239a <I2C_ITError+0x7e>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 800232a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b60      	cmp	r3, #96	; 0x60
 8002332:	d007      	beq.n	8002344 <I2C_ITError+0x28>
 8002334:	6803      	ldr	r3, [r0, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800233c:	d102      	bne.n	8002344 <I2C_ITError+0x28>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800233e:	2320      	movs	r3, #32
 8002340:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002344:	2300      	movs	r3, #0
 8002346:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002348:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800234c:	6822      	ldr	r2, [r4, #0]
 800234e:	6813      	ldr	r3, [r2, #0]
 8002350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002354:	6013      	str	r3, [r2, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800235e:	d03f      	beq.n	80023e0 <I2C_ITError+0xc4>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002366:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002368:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800236a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d018      	beq.n	80023a6 <I2C_ITError+0x8a>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002374:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <I2C_ITError+0x144>)
 8002376:	6513      	str	r3, [r2, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002378:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800237a:	f7ff f98b 	bl	8001694 <HAL_DMA_Abort_IT>
 800237e:	2800      	cmp	r0, #0
 8002380:	d03f      	beq.n	8002402 <I2C_ITError+0xe6>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002382:	6822      	ldr	r2, [r4, #0]
 8002384:	6813      	ldr	r3, [r2, #0]
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800238c:	2320      	movs	r3, #32
 800238e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002392:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002394:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002396:	4798      	blx	r3
 8002398:	e033      	b.n	8002402 <I2C_ITError+0xe6>
    hi2c->PreviousState = I2C_STATE_NONE;
 800239a:	2300      	movs	r3, #0
 800239c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800239e:	2328      	movs	r3, #40	; 0x28
 80023a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80023a4:	e7d2      	b.n	800234c <I2C_ITError+0x30>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80023a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023a8:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <I2C_ITError+0x144>)
 80023aa:	651a      	str	r2, [r3, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80023ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80023ae:	f7ff f971 	bl	8001694 <HAL_DMA_Abort_IT>
 80023b2:	b330      	cbz	r0, 8002402 <I2C_ITError+0xe6>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80023bc:	d004      	beq.n	80023c8 <I2C_ITError+0xac>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80023be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023c0:	1c51      	adds	r1, r2, #1
 80023c2:	6261      	str	r1, [r4, #36]	; 0x24
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	7013      	strb	r3, [r2, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	6813      	ldr	r3, [r2, #0]
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	2320      	movs	r3, #32
 80023d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80023d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80023da:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80023dc:	4798      	blx	r3
 80023de:	e010      	b.n	8002402 <I2C_ITError+0xe6>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 80023e0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	2a60      	cmp	r2, #96	; 0x60
 80023e8:	d011      	beq.n	800240e <I2C_ITError+0xf2>
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80023f0:	d004      	beq.n	80023fc <I2C_ITError+0xe0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80023f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023f4:	1c51      	adds	r1, r2, #1
 80023f6:	6261      	str	r1, [r4, #36]	; 0x24
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	7013      	strb	r3, [r2, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 80023fc:	4620      	mov	r0, r4
 80023fe:	f7ff ff8b 	bl	8002318 <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8002402:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b28      	cmp	r3, #40	; 0x28
 800240a:	d017      	beq.n	800243c <I2C_ITError+0x120>
 800240c:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800240e:	2220      	movs	r2, #32
 8002410:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002414:	2200      	movs	r2, #0
 8002416:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800241e:	d004      	beq.n	800242a <I2C_ITError+0x10e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002420:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002422:	1c51      	adds	r1, r2, #1
 8002424:	6261      	str	r1, [r4, #36]	; 0x24
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 800242a:	6822      	ldr	r2, [r4, #0]
 800242c:	6813      	ldr	r3, [r2, #0]
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002434:	4620      	mov	r0, r4
 8002436:	f7ff ff70 	bl	800231a <HAL_I2C_AbortCpltCallback>
 800243a:	e7e2      	b.n	8002402 <I2C_ITError+0xe6>
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 800243c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800243e:	f013 0f04 	tst.w	r3, #4
 8002442:	d0e3      	beq.n	800240c <I2C_ITError+0xf0>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <I2C_ITError+0x148>)
 8002446:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002448:	2300      	movs	r3, #0
 800244a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800244c:	2220      	movs	r2, #32
 800244e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002452:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8002456:	4620      	mov	r0, r4
 8002458:	f7ff fd49 	bl	8001eee <HAL_I2C_ListenCpltCallback>
  }
}
 800245c:	e7d6      	b.n	800240c <I2C_ITError+0xf0>
 800245e:	bf00      	nop
 8002460:	080027a9 	.word	0x080027a9
 8002464:	ffff0000 	.word	0xffff0000

08002468 <I2C_Slave_STOPF>:
{
 8002468:	b510      	push	{r4, lr}
 800246a:	b082      	sub	sp, #8
  uint32_t CurrentState = hi2c->State;
 800246c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002470:	b2db      	uxtb	r3, r3
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002472:	6801      	ldr	r1, [r0, #0]
 8002474:	684a      	ldr	r2, [r1, #4]
 8002476:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800247a:	604a      	str	r2, [r1, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800247c:	2200      	movs	r2, #0
 800247e:	9201      	str	r2, [sp, #4]
 8002480:	6802      	ldr	r2, [r0, #0]
 8002482:	6951      	ldr	r1, [r2, #20]
 8002484:	9101      	str	r1, [sp, #4]
 8002486:	6811      	ldr	r1, [r2, #0]
 8002488:	f041 0101 	orr.w	r1, r1, #1
 800248c:	6011      	str	r1, [r2, #0]
 800248e:	9a01      	ldr	r2, [sp, #4]
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002490:	6801      	ldr	r1, [r0, #0]
 8002492:	680a      	ldr	r2, [r1, #0]
 8002494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002498:	600a      	str	r2, [r1, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800249a:	6801      	ldr	r1, [r0, #0]
 800249c:	684a      	ldr	r2, [r1, #4]
 800249e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80024a2:	d00e      	beq.n	80024c2 <I2C_Slave_STOPF+0x5a>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80024a4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	2a22      	cmp	r2, #34	; 0x22
 80024ac:	d044      	beq.n	8002538 <I2C_Slave_STOPF+0xd0>
 80024ae:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	2a2a      	cmp	r2, #42	; 0x2a
 80024b6:	d03f      	beq.n	8002538 <I2C_Slave_STOPF+0xd0>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80024b8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	6852      	ldr	r2, [r2, #4]
 80024be:	b292      	uxth	r2, r2
 80024c0:	8542      	strh	r2, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 80024c2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80024c4:	b292      	uxth	r2, r2
 80024c6:	b302      	cbz	r2, 800250a <I2C_Slave_STOPF+0xa2>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024c8:	694a      	ldr	r2, [r1, #20]
 80024ca:	f012 0f04 	tst.w	r2, #4
 80024ce:	d009      	beq.n	80024e4 <I2C_Slave_STOPF+0x7c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024d0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80024d2:	1c54      	adds	r4, r2, #1
 80024d4:	6244      	str	r4, [r0, #36]	; 0x24
 80024d6:	6909      	ldr	r1, [r1, #16]
 80024d8:	7011      	strb	r1, [r2, #0]
      hi2c->XferCount--;
 80024da:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80024dc:	b292      	uxth	r2, r2
 80024de:	3a01      	subs	r2, #1
 80024e0:	b292      	uxth	r2, r2
 80024e2:	8542      	strh	r2, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80024e4:	6802      	ldr	r2, [r0, #0]
 80024e6:	6951      	ldr	r1, [r2, #20]
 80024e8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80024ec:	d009      	beq.n	8002502 <I2C_Slave_STOPF+0x9a>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80024f0:	1c4c      	adds	r4, r1, #1
 80024f2:	6244      	str	r4, [r0, #36]	; 0x24
 80024f4:	6912      	ldr	r2, [r2, #16]
 80024f6:	700a      	strb	r2, [r1, #0]
      hi2c->XferCount--;
 80024f8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80024fa:	b292      	uxth	r2, r2
 80024fc:	3a01      	subs	r2, #1
 80024fe:	b292      	uxth	r2, r2
 8002500:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002502:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002504:	f042 0204 	orr.w	r2, r2, #4
 8002508:	6402      	str	r2, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800250a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800250c:	b9d2      	cbnz	r2, 8002544 <I2C_Slave_STOPF+0xdc>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 800250e:	2b28      	cmp	r3, #40	; 0x28
 8002510:	d01b      	beq.n	800254a <I2C_Slave_STOPF+0xe2>
 8002512:	2b2a      	cmp	r3, #42	; 0x2a
 8002514:	d019      	beq.n	800254a <I2C_Slave_STOPF+0xe2>
 8002516:	2b29      	cmp	r3, #41	; 0x29
 8002518:	d017      	beq.n	800254a <I2C_Slave_STOPF+0xe2>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800251a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800251c:	2a22      	cmp	r2, #34	; 0x22
 800251e:	d001      	beq.n	8002524 <I2C_Slave_STOPF+0xbc>
 8002520:	2b22      	cmp	r3, #34	; 0x22
 8002522:	d11d      	bne.n	8002560 <I2C_Slave_STOPF+0xf8>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002524:	2300      	movs	r3, #0
 8002526:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002528:	2220      	movs	r2, #32
 800252a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800252e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002532:	f002 ff3b 	bl	80053ac <HAL_I2C_SlaveRxCpltCallback>
 8002536:	e013      	b.n	8002560 <I2C_Slave_STOPF+0xf8>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002538:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	6852      	ldr	r2, [r2, #4]
 800253e:	b292      	uxth	r2, r2
 8002540:	8542      	strh	r2, [r0, #42]	; 0x2a
 8002542:	e7be      	b.n	80024c2 <I2C_Slave_STOPF+0x5a>
    I2C_ITError(hi2c);
 8002544:	f7ff feea 	bl	800231c <I2C_ITError>
 8002548:	e00a      	b.n	8002560 <I2C_Slave_STOPF+0xf8>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <I2C_Slave_STOPF+0x100>)
 800254c:	62c3      	str	r3, [r0, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800254e:	2300      	movs	r3, #0
 8002550:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002552:	2220      	movs	r2, #32
 8002554:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800255c:	f7ff fcc7 	bl	8001eee <HAL_I2C_ListenCpltCallback>
}
 8002560:	2000      	movs	r0, #0
 8002562:	b002      	add	sp, #8
 8002564:	bd10      	pop	{r4, pc}
 8002566:	bf00      	nop
 8002568:	ffff0000 	.word	0xffff0000

0800256c <HAL_I2C_EV_IRQHandler>:
{
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	4605      	mov	r5, r0
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002570:	6803      	ldr	r3, [r0, #0]
 8002572:	699f      	ldr	r7, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002574:	695c      	ldr	r4, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8002576:	685e      	ldr	r6, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8002578:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800257c:	b2db      	uxtb	r3, r3
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800257e:	2b10      	cmp	r3, #16
 8002580:	d025      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0x62>
 8002582:	2b40      	cmp	r3, #64	; 0x40
 8002584:	d023      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0x62>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002586:	4b4c      	ldr	r3, [pc, #304]	; (80026b8 <HAL_I2C_EV_IRQHandler+0x14c>)
 8002588:	4023      	ands	r3, r4
 800258a:	b113      	cbz	r3, 8002592 <HAL_I2C_EV_IRQHandler+0x26>
 800258c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002590:	d16e      	bne.n	8002670 <HAL_I2C_EV_IRQHandler+0x104>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002592:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <HAL_I2C_EV_IRQHandler+0x150>)
 8002594:	4023      	ands	r3, r4
 8002596:	b113      	cbz	r3, 800259e <HAL_I2C_EV_IRQHandler+0x32>
 8002598:	f416 7f00 	tst.w	r6, #512	; 0x200
 800259c:	d16b      	bne.n	8002676 <HAL_I2C_EV_IRQHandler+0x10a>
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800259e:	4b48      	ldr	r3, [pc, #288]	; (80026c0 <HAL_I2C_EV_IRQHandler+0x154>)
 80025a0:	403b      	ands	r3, r7
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d06f      	beq.n	8002686 <HAL_I2C_EV_IRQHandler+0x11a>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_I2C_EV_IRQHandler+0x158>)
 80025a8:	4023      	ands	r3, r4
 80025aa:	b133      	cbz	r3, 80025ba <HAL_I2C_EV_IRQHandler+0x4e>
 80025ac:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80025b0:	d003      	beq.n	80025ba <HAL_I2C_EV_IRQHandler+0x4e>
 80025b2:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <HAL_I2C_EV_IRQHandler+0x15c>)
 80025b4:	4023      	ands	r3, r4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d061      	beq.n	800267e <HAL_I2C_EV_IRQHandler+0x112>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80025ba:	4b43      	ldr	r3, [pc, #268]	; (80026c8 <HAL_I2C_EV_IRQHandler+0x15c>)
 80025bc:	4023      	ands	r3, r4
 80025be:	b353      	cbz	r3, 8002616 <HAL_I2C_EV_IRQHandler+0xaa>
 80025c0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80025c4:	d027      	beq.n	8002616 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveTransmit_BTF(hi2c);
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7ff fb7f 	bl	8001cca <I2C_SlaveTransmit_BTF>
 80025cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80025ce:	f014 1f01 	tst.w	r4, #65537	; 0x10001
 80025d2:	d002      	beq.n	80025da <HAL_I2C_EV_IRQHandler+0x6e>
 80025d4:	f416 7f00 	tst.w	r6, #512	; 0x200
 80025d8:	d11e      	bne.n	8002618 <HAL_I2C_EV_IRQHandler+0xac>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80025da:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <HAL_I2C_EV_IRQHandler+0x160>)
 80025dc:	4023      	ands	r3, r4
 80025de:	b113      	cbz	r3, 80025e6 <HAL_I2C_EV_IRQHandler+0x7a>
 80025e0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80025e4:	d11c      	bne.n	8002620 <HAL_I2C_EV_IRQHandler+0xb4>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80025e6:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <HAL_I2C_EV_IRQHandler+0x14c>)
 80025e8:	4023      	ands	r3, r4
 80025ea:	b113      	cbz	r3, 80025f2 <HAL_I2C_EV_IRQHandler+0x86>
 80025ec:	f416 7f00 	tst.w	r6, #512	; 0x200
 80025f0:	d11a      	bne.n	8002628 <HAL_I2C_EV_IRQHandler+0xbc>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80025f2:	4b33      	ldr	r3, [pc, #204]	; (80026c0 <HAL_I2C_EV_IRQHandler+0x154>)
 80025f4:	403b      	ands	r3, r7
 80025f6:	b31b      	cbz	r3, 8002640 <HAL_I2C_EV_IRQHandler+0xd4>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80025f8:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <HAL_I2C_EV_IRQHandler+0x158>)
 80025fa:	4023      	ands	r3, r4
 80025fc:	b12b      	cbz	r3, 800260a <HAL_I2C_EV_IRQHandler+0x9e>
 80025fe:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002602:	d002      	beq.n	800260a <HAL_I2C_EV_IRQHandler+0x9e>
 8002604:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002606:	4023      	ands	r3, r4
 8002608:	b193      	cbz	r3, 8002630 <HAL_I2C_EV_IRQHandler+0xc4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800260a:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <HAL_I2C_EV_IRQHandler+0x15c>)
 800260c:	4023      	ands	r3, r4
 800260e:	b113      	cbz	r3, 8002616 <HAL_I2C_EV_IRQHandler+0xaa>
 8002610:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002614:	d110      	bne.n	8002638 <HAL_I2C_EV_IRQHandler+0xcc>
 8002616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Master_SB(hi2c);
 8002618:	4628      	mov	r0, r5
 800261a:	f7ff fa25 	bl	8001a68 <I2C_Master_SB>
 800261e:	e7e8      	b.n	80025f2 <HAL_I2C_EV_IRQHandler+0x86>
      I2C_Master_ADD10(hi2c);
 8002620:	4628      	mov	r0, r5
 8002622:	f7ff fa66 	bl	8001af2 <I2C_Master_ADD10>
 8002626:	e7e4      	b.n	80025f2 <HAL_I2C_EV_IRQHandler+0x86>
      I2C_Master_ADDR(hi2c);
 8002628:	4628      	mov	r0, r5
 800262a:	f7ff fa68 	bl	8001afe <I2C_Master_ADDR>
 800262e:	e7e0      	b.n	80025f2 <HAL_I2C_EV_IRQHandler+0x86>
        I2C_MasterTransmit_TXE(hi2c);
 8002630:	4628      	mov	r0, r5
 8002632:	f7ff fca8 	bl	8001f86 <I2C_MasterTransmit_TXE>
 8002636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_MasterTransmit_BTF(hi2c);
 8002638:	4628      	mov	r0, r5
 800263a:	f7ff fd49 	bl	80020d0 <I2C_MasterTransmit_BTF>
 800263e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002640:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <HAL_I2C_EV_IRQHandler+0x164>)
 8002642:	4023      	ands	r3, r4
 8002644:	b12b      	cbz	r3, 8002652 <HAL_I2C_EV_IRQHandler+0xe6>
 8002646:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800264a:	d002      	beq.n	8002652 <HAL_I2C_EV_IRQHandler+0xe6>
 800264c:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <HAL_I2C_EV_IRQHandler+0x15c>)
 800264e:	4023      	ands	r3, r4
 8002650:	b153      	cbz	r3, 8002668 <HAL_I2C_EV_IRQHandler+0xfc>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002654:	4023      	ands	r3, r4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0dd      	beq.n	8002616 <HAL_I2C_EV_IRQHandler+0xaa>
 800265a:	f416 7f00 	tst.w	r6, #512	; 0x200
 800265e:	d0da      	beq.n	8002616 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_MasterReceive_BTF(hi2c);
 8002660:	4628      	mov	r0, r5
 8002662:	f7ff fdd3 	bl	800220c <I2C_MasterReceive_BTF>
 8002666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_MasterReceive_RXNE(hi2c);
 8002668:	4628      	mov	r0, r5
 800266a:	f7ff fd81 	bl	8002170 <I2C_MasterReceive_RXNE>
 800266e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Slave_ADDR(hi2c);
 8002670:	f7ff fc29 	bl	8001ec6 <I2C_Slave_ADDR>
 8002674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Slave_STOPF(hi2c);
 8002676:	4628      	mov	r0, r5
 8002678:	f7ff fef6 	bl	8002468 <I2C_Slave_STOPF>
 800267c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_SlaveTransmit_TXE(hi2c);
 800267e:	4628      	mov	r0, r5
 8002680:	f7ff fbd2 	bl	8001e28 <I2C_SlaveTransmit_TXE>
 8002684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_I2C_EV_IRQHandler+0x164>)
 8002688:	4023      	ands	r3, r4
 800268a:	b12b      	cbz	r3, 8002698 <HAL_I2C_EV_IRQHandler+0x12c>
 800268c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002690:	d002      	beq.n	8002698 <HAL_I2C_EV_IRQHandler+0x12c>
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002694:	4023      	ands	r3, r4
 8002696:	b153      	cbz	r3, 80026ae <HAL_I2C_EV_IRQHandler+0x142>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_I2C_EV_IRQHandler+0x15c>)
 800269a:	4023      	ands	r3, r4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ba      	beq.n	8002616 <HAL_I2C_EV_IRQHandler+0xaa>
 80026a0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80026a4:	d0b7      	beq.n	8002616 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveReceive_BTF(hi2c);
 80026a6:	4628      	mov	r0, r5
 80026a8:	f7ff fb1f 	bl	8001cea <I2C_SlaveReceive_BTF>
}
 80026ac:	e7b3      	b.n	8002616 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveReceive_RXNE(hi2c);
 80026ae:	4628      	mov	r0, r5
 80026b0:	f7ff fbe2 	bl	8001e78 <I2C_SlaveReceive_RXNE>
 80026b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026b6:	bf00      	nop
 80026b8:	00010002 	.word	0x00010002
 80026bc:	00010010 	.word	0x00010010
 80026c0:	00100004 	.word	0x00100004
 80026c4:	00010080 	.word	0x00010080
 80026c8:	00010004 	.word	0x00010004
 80026cc:	00010008 	.word	0x00010008
 80026d0:	00010040 	.word	0x00010040

080026d4 <HAL_I2C_ER_IRQHandler>:
{
 80026d4:	b570      	push	{r4, r5, r6, lr}
 80026d6:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80026d8:	6803      	ldr	r3, [r0, #0]
 80026da:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80026dc:	685e      	ldr	r6, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80026de:	4a31      	ldr	r2, [pc, #196]	; (80027a4 <HAL_I2C_ER_IRQHandler+0xd0>)
 80026e0:	4215      	tst	r5, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_I2C_ER_IRQHandler+0x24>
 80026e4:	f416 7f80 	tst.w	r6, #256	; 0x100
 80026e8:	d006      	beq.n	80026f8 <HAL_I2C_ER_IRQHandler+0x24>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80026ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80026ec:	f042 0201 	orr.w	r2, r2, #1
 80026f0:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80026f6:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80026f8:	f415 3f81 	tst.w	r5, #66048	; 0x10200
 80026fc:	d00a      	beq.n	8002714 <HAL_I2C_ER_IRQHandler+0x40>
 80026fe:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002702:	d007      	beq.n	8002714 <HAL_I2C_ER_IRQHandler+0x40>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002704:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002712:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002714:	f415 3f82 	tst.w	r5, #66560	; 0x10400
 8002718:	d01a      	beq.n	8002750 <HAL_I2C_ER_IRQHandler+0x7c>
 800271a:	f416 7f80 	tst.w	r6, #256	; 0x100
 800271e:	d017      	beq.n	8002750 <HAL_I2C_ER_IRQHandler+0x7c>
    tmp1 = hi2c->Mode;
 8002720:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002724:	b2db      	uxtb	r3, r3
    tmp2 = hi2c->XferCount;
 8002726:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002728:	b291      	uxth	r1, r2
    tmp3 = hi2c->State;
 800272a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800272e:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 8002730:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002732:	2b20      	cmp	r3, #32
 8002734:	d01d      	beq.n	8002772 <HAL_I2C_ER_IRQHandler+0x9e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6423      	str	r3, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 800273e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b10      	cmp	r3, #16
 8002746:	d022      	beq.n	800278e <HAL_I2C_ER_IRQHandler+0xba>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800274e:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002750:	f415 3f84 	tst.w	r5, #67584	; 0x10800
 8002754:	d00a      	beq.n	800276c <HAL_I2C_ER_IRQHandler+0x98>
 8002756:	f416 7f80 	tst.w	r6, #256	; 0x100
 800275a:	d007      	beq.n	800276c <HAL_I2C_ER_IRQHandler+0x98>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800275c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800276a:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800276c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800276e:	b9a3      	cbnz	r3, 800279a <HAL_I2C_ER_IRQHandler+0xc6>
 8002770:	bd70      	pop	{r4, r5, r6, pc}
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002772:	2900      	cmp	r1, #0
 8002774:	d1df      	bne.n	8002736 <HAL_I2C_ER_IRQHandler+0x62>
 8002776:	2a21      	cmp	r2, #33	; 0x21
 8002778:	d005      	beq.n	8002786 <HAL_I2C_ER_IRQHandler+0xb2>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800277a:	2a29      	cmp	r2, #41	; 0x29
 800277c:	d003      	beq.n	8002786 <HAL_I2C_ER_IRQHandler+0xb2>
 800277e:	2a28      	cmp	r2, #40	; 0x28
 8002780:	d1d9      	bne.n	8002736 <HAL_I2C_ER_IRQHandler+0x62>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002782:	2821      	cmp	r0, #33	; 0x21
 8002784:	d1d7      	bne.n	8002736 <HAL_I2C_ER_IRQHandler+0x62>
      I2C_Slave_AF(hi2c);
 8002786:	4620      	mov	r0, r4
 8002788:	f7ff fbb2 	bl	8001ef0 <I2C_Slave_AF>
 800278c:	e7e0      	b.n	8002750 <HAL_I2C_ER_IRQHandler+0x7c>
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 800278e:	6822      	ldr	r2, [r4, #0]
 8002790:	6813      	ldr	r3, [r2, #0]
 8002792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	e7d6      	b.n	8002748 <HAL_I2C_ER_IRQHandler+0x74>
    I2C_ITError(hi2c);
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff fdbe 	bl	800231c <I2C_ITError>
}
 80027a0:	e7e6      	b.n	8002770 <HAL_I2C_ER_IRQHandler+0x9c>
 80027a2:	bf00      	nop
 80027a4:	00010100 	.word	0x00010100

080027a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80027a8:	b508      	push	{r3, lr}
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80027ac:	6802      	ldr	r2, [r0, #0]
 80027ae:	6813      	ldr	r3, [r2, #0]
 80027b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027b4:	6013      	str	r3, [r2, #0]

  hi2c->XferCount = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	8543      	strh	r3, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80027ba:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80027bc:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80027be:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80027c0:	6513      	str	r3, [r2, #80]	; 0x50

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80027c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b60      	cmp	r3, #96	; 0x60
 80027ca:	d00d      	beq.n	80027e8 <I2C_DMAAbort+0x40>
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	2320      	movs	r3, #32
 80027ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80027d8:	6802      	ldr	r2, [r0, #0]
 80027da:	6813      	ldr	r3, [r2, #0]
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6013      	str	r3, [r2, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 80027e2:	f7ff fd99 	bl	8002318 <HAL_I2C_ErrorCallback>
 80027e6:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80027e8:	2320      	movs	r3, #32
 80027ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f4:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 80027f6:	6802      	ldr	r2, [r0, #0]
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002800:	f7ff fd8b 	bl	800231a <HAL_I2C_AbortCpltCallback>
 8002804:	bd08      	pop	{r3, pc}
	...

08002808 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002808:	b510      	push	{r4, lr}
 800280a:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	2300      	movs	r3, #0
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_PWREx_EnableOverDrive+0x70>)
 8002812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002814:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002824:	2201      	movs	r2, #1
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_PWREx_EnableOverDrive+0x74>)
 8002828:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800282a:	f7fe fc1d 	bl	8001068 <HAL_GetTick>
 800282e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_PWREx_EnableOverDrive+0x78>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002838:	d108      	bne.n	800284c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800283a:	f7fe fc15 	bl	8001068 <HAL_GetTick>
 800283e:	1b00      	subs	r0, r0, r4
 8002840:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002844:	d9f4      	bls.n	8002830 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8002846:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002848:	b002      	add	sp, #8
 800284a:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800284c:	2201      	movs	r2, #1
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_PWREx_EnableOverDrive+0x7c>)
 8002850:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002852:	f7fe fc09 	bl	8001068 <HAL_GetTick>
 8002856:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_PWREx_EnableOverDrive+0x78>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002860:	d107      	bne.n	8002872 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002862:	f7fe fc01 	bl	8001068 <HAL_GetTick>
 8002866:	1b00      	subs	r0, r0, r4
 8002868:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800286c:	d9f4      	bls.n	8002858 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 800286e:	2003      	movs	r0, #3
 8002870:	e7ea      	b.n	8002848 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8002872:	2000      	movs	r0, #0
 8002874:	e7e8      	b.n	8002848 <HAL_PWREx_EnableOverDrive+0x40>
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	420e0040 	.word	0x420e0040
 8002880:	40007000 	.word	0x40007000
 8002884:	420e0044 	.word	0x420e0044

08002888 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002888:	2800      	cmp	r0, #0
 800288a:	f000 809d 	beq.w	80029c8 <HAL_RCC_ClockConfig+0x140>
{
 800288e:	b570      	push	{r4, r5, r6, lr}
 8002890:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002892:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <HAL_RCC_ClockConfig+0x148>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	428b      	cmp	r3, r1
 800289c:	d209      	bcs.n	80028b2 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	b2cb      	uxtb	r3, r1
 80028a0:	4a4b      	ldr	r2, [pc, #300]	; (80029d0 <HAL_RCC_ClockConfig+0x148>)
 80028a2:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a4:	6813      	ldr	r3, [r2, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	4299      	cmp	r1, r3
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 80028ae:	2001      	movs	r0, #1
 80028b0:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	f013 0f02 	tst.w	r3, #2
 80028b8:	d017      	beq.n	80028ea <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ba:	f013 0f04 	tst.w	r3, #4
 80028be:	d004      	beq.n	80028ca <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c0:	4a44      	ldr	r2, [pc, #272]	; (80029d4 <HAL_RCC_ClockConfig+0x14c>)
 80028c2:	6893      	ldr	r3, [r2, #8]
 80028c4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028c8:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	f013 0f08 	tst.w	r3, #8
 80028d0:	d004      	beq.n	80028dc <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d2:	4a40      	ldr	r2, [pc, #256]	; (80029d4 <HAL_RCC_ClockConfig+0x14c>)
 80028d4:	6893      	ldr	r3, [r2, #8]
 80028d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4a3d      	ldr	r2, [pc, #244]	; (80029d4 <HAL_RCC_ClockConfig+0x14c>)
 80028de:	6893      	ldr	r3, [r2, #8]
 80028e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e4:	68a0      	ldr	r0, [r4, #8]
 80028e6:	4303      	orrs	r3, r0
 80028e8:	6093      	str	r3, [r2, #8]
 80028ea:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	f013 0f01 	tst.w	r3, #1
 80028f2:	d032      	beq.n	800295a <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f4:	6863      	ldr	r3, [r4, #4]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d021      	beq.n	800293e <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028fa:	1e9a      	subs	r2, r3, #2
 80028fc:	2a01      	cmp	r2, #1
 80028fe:	d925      	bls.n	800294c <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	4a34      	ldr	r2, [pc, #208]	; (80029d4 <HAL_RCC_ClockConfig+0x14c>)
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	f012 0f02 	tst.w	r2, #2
 8002908:	d060      	beq.n	80029cc <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290a:	4932      	ldr	r1, [pc, #200]	; (80029d4 <HAL_RCC_ClockConfig+0x14c>)
 800290c:	688a      	ldr	r2, [r1, #8]
 800290e:	f022 0203 	bic.w	r2, r2, #3
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002916:	f7fe fba7 	bl	8001068 <HAL_GetTick>
 800291a:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCC_ClockConfig+0x14c>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	6862      	ldr	r2, [r4, #4]
 8002926:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800292a:	d016      	beq.n	800295a <HAL_RCC_ClockConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292c:	f7fe fb9c 	bl	8001068 <HAL_GetTick>
 8002930:	1b80      	subs	r0, r0, r6
 8002932:	f241 3388 	movw	r3, #5000	; 0x1388
 8002936:	4298      	cmp	r0, r3
 8002938:	d9f0      	bls.n	800291c <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_TIMEOUT;
 800293a:	2003      	movs	r0, #3
 800293c:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4a25      	ldr	r2, [pc, #148]	; (80029d4 <HAL_RCC_ClockConfig+0x14c>)
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002946:	d1e0      	bne.n	800290a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002948:	2001      	movs	r0, #1
 800294a:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294c:	4a21      	ldr	r2, [pc, #132]	; (80029d4 <HAL_RCC_ClockConfig+0x14c>)
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002954:	d1d9      	bne.n	800290a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002956:	2001      	movs	r0, #1
 8002958:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_RCC_ClockConfig+0x148>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	429d      	cmp	r5, r3
 8002964:	d209      	bcs.n	800297a <HAL_RCC_ClockConfig+0xf2>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	b2ea      	uxtb	r2, r5
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_RCC_ClockConfig+0x148>)
 800296a:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	429d      	cmp	r5, r3
 8002974:	d001      	beq.n	800297a <HAL_RCC_ClockConfig+0xf2>
    {
      return HAL_ERROR;
 8002976:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8002978:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	f013 0f04 	tst.w	r3, #4
 8002980:	d006      	beq.n	8002990 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002982:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <HAL_RCC_ClockConfig+0x14c>)
 8002984:	6893      	ldr	r3, [r2, #8]
 8002986:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800298a:	68e1      	ldr	r1, [r4, #12]
 800298c:	430b      	orrs	r3, r1
 800298e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	f013 0f08 	tst.w	r3, #8
 8002996:	d007      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002998:	4a0e      	ldr	r2, [pc, #56]	; (80029d4 <HAL_RCC_ClockConfig+0x14c>)
 800299a:	6893      	ldr	r3, [r2, #8]
 800299c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029a0:	6921      	ldr	r1, [r4, #16]
 80029a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029a6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029a8:	f000 f840 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_RCC_ClockConfig+0x14c>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029b4:	4a08      	ldr	r2, [pc, #32]	; (80029d8 <HAL_RCC_ClockConfig+0x150>)
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
 80029b8:	40d8      	lsrs	r0, r3
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HAL_RCC_ClockConfig+0x154>)
 80029bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fe fb06 	bl	8000fd0 <HAL_InitTick>
  return HAL_OK;
 80029c4:	2000      	movs	r0, #0
 80029c6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80029c8:	2001      	movs	r0, #1
 80029ca:	4770      	bx	lr
        return HAL_ERROR;
 80029cc:	2001      	movs	r0, #1
 80029ce:	bd70      	pop	{r4, r5, r6, pc}
 80029d0:	40023c00 	.word	0x40023c00
 80029d4:	40023800 	.word	0x40023800
 80029d8:	0800af08 	.word	0x0800af08
 80029dc:	20000008 	.word	0x20000008

080029e0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80029e0:	4b01      	ldr	r3, [pc, #4]	; (80029e8 <HAL_RCC_GetHCLKFreq+0x8>)
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000008 	.word	0x20000008

080029ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ec:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029ee:	f7ff fff7 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 80029f2:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <HAL_RCC_GetPCLK1Freq+0x18>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80029fa:	4a03      	ldr	r2, [pc, #12]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80029fc:	5cd3      	ldrb	r3, [r2, r3]
}
 80029fe:	40d8      	lsrs	r0, r3
 8002a00:	bd08      	pop	{r3, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800
 8002a08:	0800af18 	.word	0x0800af18

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a0e:	f7ff ffe7 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a12:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002a1a:	4a03      	ldr	r2, [pc, #12]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a1c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a1e:	40d8      	lsrs	r0, r3
 8002a20:	bd08      	pop	{r3, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	0800af18 	.word	0x0800af18

08002a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a2e:	4b5c      	ldr	r3, [pc, #368]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x174>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d006      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x1c>
 8002a3a:	2b0c      	cmp	r3, #12
 8002a3c:	d05a      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0xc8>
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	f000 80ac 	beq.w	8002b9c <HAL_RCC_GetSysClockFreq+0x170>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4857      	ldr	r0, [pc, #348]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x178>)
 8002a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a48:	4b55      	ldr	r3, [pc, #340]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x174>)
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002a56:	d02a      	beq.n	8002aae <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a58:	4b51      	ldr	r3, [pc, #324]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x174>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002a60:	461e      	mov	r6, r3
 8002a62:	2700      	movs	r7, #0
 8002a64:	015c      	lsls	r4, r3, #5
 8002a66:	2500      	movs	r5, #0
 8002a68:	1ae4      	subs	r4, r4, r3
 8002a6a:	eb65 0507 	sbc.w	r5, r5, r7
 8002a6e:	01a9      	lsls	r1, r5, #6
 8002a70:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002a74:	01a0      	lsls	r0, r4, #6
 8002a76:	1b00      	subs	r0, r0, r4
 8002a78:	eb61 0105 	sbc.w	r1, r1, r5
 8002a7c:	00cb      	lsls	r3, r1, #3
 8002a7e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002a82:	00c4      	lsls	r4, r0, #3
 8002a84:	19a0      	adds	r0, r4, r6
 8002a86:	eb43 0107 	adc.w	r1, r3, r7
 8002a8a:	024b      	lsls	r3, r1, #9
 8002a8c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002a90:	0244      	lsls	r4, r0, #9
 8002a92:	4620      	mov	r0, r4
 8002a94:	4619      	mov	r1, r3
 8002a96:	2300      	movs	r3, #0
 8002a98:	f7fe f912 	bl	8000cc0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a9c:	4b40      	ldr	r3, [pc, #256]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x174>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002aa8:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aae:	4b3c      	ldr	r3, [pc, #240]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x174>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002ab6:	461e      	mov	r6, r3
 8002ab8:	2700      	movs	r7, #0
 8002aba:	015c      	lsls	r4, r3, #5
 8002abc:	2500      	movs	r5, #0
 8002abe:	1ae4      	subs	r4, r4, r3
 8002ac0:	eb65 0507 	sbc.w	r5, r5, r7
 8002ac4:	01a9      	lsls	r1, r5, #6
 8002ac6:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002aca:	01a0      	lsls	r0, r4, #6
 8002acc:	1b00      	subs	r0, r0, r4
 8002ace:	eb61 0105 	sbc.w	r1, r1, r5
 8002ad2:	00cb      	lsls	r3, r1, #3
 8002ad4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ad8:	00c4      	lsls	r4, r0, #3
 8002ada:	19a0      	adds	r0, r4, r6
 8002adc:	eb43 0107 	adc.w	r1, r3, r7
 8002ae0:	028b      	lsls	r3, r1, #10
 8002ae2:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002ae6:	0284      	lsls	r4, r0, #10
 8002ae8:	4620      	mov	r0, r4
 8002aea:	4619      	mov	r1, r3
 8002aec:	2300      	movs	r3, #0
 8002aee:	f7fe f8e7 	bl	8000cc0 <__aeabi_uldivmod>
 8002af2:	e7d3      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x70>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af4:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x174>)
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b02:	d028      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0x12a>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x174>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002b0c:	461e      	mov	r6, r3
 8002b0e:	2700      	movs	r7, #0
 8002b10:	015c      	lsls	r4, r3, #5
 8002b12:	2500      	movs	r5, #0
 8002b14:	1ae4      	subs	r4, r4, r3
 8002b16:	eb65 0507 	sbc.w	r5, r5, r7
 8002b1a:	01a9      	lsls	r1, r5, #6
 8002b1c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002b20:	01a0      	lsls	r0, r4, #6
 8002b22:	1b00      	subs	r0, r0, r4
 8002b24:	eb61 0105 	sbc.w	r1, r1, r5
 8002b28:	00cb      	lsls	r3, r1, #3
 8002b2a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b2e:	00c4      	lsls	r4, r0, #3
 8002b30:	19a0      	adds	r0, r4, r6
 8002b32:	eb43 0107 	adc.w	r1, r3, r7
 8002b36:	024b      	lsls	r3, r1, #9
 8002b38:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002b3c:	0244      	lsls	r4, r0, #9
 8002b3e:	4620      	mov	r0, r4
 8002b40:	4619      	mov	r1, r3
 8002b42:	2300      	movs	r3, #0
 8002b44:	f7fe f8bc 	bl	8000cc0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x174>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 8002b50:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x174>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002b5e:	461e      	mov	r6, r3
 8002b60:	2700      	movs	r7, #0
 8002b62:	015c      	lsls	r4, r3, #5
 8002b64:	2500      	movs	r5, #0
 8002b66:	1ae4      	subs	r4, r4, r3
 8002b68:	eb65 0507 	sbc.w	r5, r5, r7
 8002b6c:	01a9      	lsls	r1, r5, #6
 8002b6e:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002b72:	01a0      	lsls	r0, r4, #6
 8002b74:	1b00      	subs	r0, r0, r4
 8002b76:	eb61 0105 	sbc.w	r1, r1, r5
 8002b7a:	00cb      	lsls	r3, r1, #3
 8002b7c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b80:	00c4      	lsls	r4, r0, #3
 8002b82:	19a0      	adds	r0, r4, r6
 8002b84:	eb43 0107 	adc.w	r1, r3, r7
 8002b88:	028b      	lsls	r3, r1, #10
 8002b8a:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002b8e:	0284      	lsls	r4, r0, #10
 8002b90:	4620      	mov	r0, r4
 8002b92:	4619      	mov	r1, r3
 8002b94:	2300      	movs	r3, #0
 8002b96:	f7fe f893 	bl	8000cc0 <__aeabi_uldivmod>
 8002b9a:	e7d5      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x11c>
      sysclockfreq = HSE_VALUE;
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x17c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	6803      	ldr	r3, [r0, #0]
 8002bb4:	f013 0f01 	tst.w	r3, #1
 8002bb8:	d041      	beq.n	8002c3e <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bba:	4ba6      	ldr	r3, [pc, #664]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d032      	beq.n	8002c2c <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bc6:	4ba3      	ldr	r3, [pc, #652]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d027      	beq.n	8002c22 <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd2:	4ba0      	ldr	r3, [pc, #640]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d059      	beq.n	8002c92 <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bde:	6863      	ldr	r3, [r4, #4]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d05b      	beq.n	8002c9e <HAL_RCC_OscConfig+0xf2>
 8002be6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bea:	d05e      	beq.n	8002caa <HAL_RCC_OscConfig+0xfe>
 8002bec:	4b99      	ldr	r3, [pc, #612]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bfe:	6863      	ldr	r3, [r4, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d05c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe fa30 	bl	8001068 <HAL_GetTick>
 8002c08:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b92      	ldr	r3, [pc, #584]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c12:	d114      	bne.n	8002c3e <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe fa28 	bl	8001068 <HAL_GetTick>
 8002c18:	1b40      	subs	r0, r0, r5
 8002c1a:	2864      	cmp	r0, #100	; 0x64
 8002c1c:	d9f5      	bls.n	8002c0a <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8002c1e:	2003      	movs	r0, #3
 8002c20:	e19d      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c22:	4b8c      	ldr	r3, [pc, #560]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002c2a:	d0d2      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	4b89      	ldr	r3, [pc, #548]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c34:	d003      	beq.n	8002c3e <HAL_RCC_OscConfig+0x92>
 8002c36:	6863      	ldr	r3, [r4, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 818d 	beq.w	8002f58 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	f013 0f02 	tst.w	r3, #2
 8002c44:	d067      	beq.n	8002d16 <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c46:	4b83      	ldr	r3, [pc, #524]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f013 0f0c 	tst.w	r3, #12
 8002c4e:	d04a      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c50:	4b80      	ldr	r3, [pc, #512]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d03f      	beq.n	8002cdc <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5c:	4b7d      	ldr	r3, [pc, #500]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	d048      	beq.n	8002cfa <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c68:	68e3      	ldr	r3, [r4, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d074      	beq.n	8002d58 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe f9f8 	bl	8001068 <HAL_GetTick>
 8002c78:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7a:	4b76      	ldr	r3, [pc, #472]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f013 0f02 	tst.w	r3, #2
 8002c82:	d160      	bne.n	8002d46 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c84:	f7fe f9f0 	bl	8001068 <HAL_GetTick>
 8002c88:	1b40      	subs	r0, r0, r5
 8002c8a:	2802      	cmp	r0, #2
 8002c8c:	d9f5      	bls.n	8002c7a <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8002c8e:	2003      	movs	r0, #3
 8002c90:	e165      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c92:	4b70      	ldr	r3, [pc, #448]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002c9a:	d0a0      	beq.n	8002bde <HAL_RCC_OscConfig+0x32>
 8002c9c:	e7c6      	b.n	8002c2c <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9e:	4a6d      	ldr	r2, [pc, #436]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002ca0:	6813      	ldr	r3, [r2, #0]
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e7a9      	b.n	8002bfe <HAL_RCC_OscConfig+0x52>
 8002caa:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e79f      	b.n	8002bfe <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 8002cbe:	f7fe f9d3 	bl	8001068 <HAL_GetTick>
 8002cc2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc4:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ccc:	d0b7      	beq.n	8002c3e <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cce:	f7fe f9cb 	bl	8001068 <HAL_GetTick>
 8002cd2:	1b40      	subs	r0, r0, r5
 8002cd4:	2864      	cmp	r0, #100	; 0x64
 8002cd6:	d9f5      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8002cd8:	2003      	movs	r0, #3
 8002cda:	e140      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cdc:	4b5d      	ldr	r3, [pc, #372]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002ce4:	d1ba      	bne.n	8002c5c <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	4b5b      	ldr	r3, [pc, #364]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f013 0f02 	tst.w	r3, #2
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCC_OscConfig+0x15a>
 8002cf0:	68e3      	ldr	r3, [r4, #12]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d007      	beq.n	8002d06 <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	e131      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfa:	4b56      	ldr	r3, [pc, #344]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002d02:	d1b1      	bne.n	8002c68 <HAL_RCC_OscConfig+0xbc>
 8002d04:	e7ef      	b.n	8002ce6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d06:	4a53      	ldr	r2, [pc, #332]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002d08:	6813      	ldr	r3, [r2, #0]
 8002d0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d0e:	6921      	ldr	r1, [r4, #16]
 8002d10:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d14:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	f013 0f08 	tst.w	r3, #8
 8002d1c:	d040      	beq.n	8002da0 <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d1e:	6963      	ldr	r3, [r4, #20]
 8002d20:	b363      	cbz	r3, 8002d7c <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d22:	2201      	movs	r2, #1
 8002d24:	4b4d      	ldr	r3, [pc, #308]	; (8002e5c <HAL_RCC_OscConfig+0x2b0>)
 8002d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe f99e 	bl	8001068 <HAL_GetTick>
 8002d2c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2e:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d32:	f013 0f02 	tst.w	r3, #2
 8002d36:	d133      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d38:	f7fe f996 	bl	8001068 <HAL_GetTick>
 8002d3c:	1b40      	subs	r0, r0, r5
 8002d3e:	2802      	cmp	r0, #2
 8002d40:	d9f5      	bls.n	8002d2e <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8002d42:	2003      	movs	r0, #3
 8002d44:	e10b      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d46:	4a43      	ldr	r2, [pc, #268]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002d48:	6813      	ldr	r3, [r2, #0]
 8002d4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d4e:	6921      	ldr	r1, [r4, #16]
 8002d50:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e7de      	b.n	8002d16 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 8002d58:	2200      	movs	r2, #0
 8002d5a:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d5e:	f7fe f983 	bl	8001068 <HAL_GetTick>
 8002d62:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d64:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f013 0f02 	tst.w	r3, #2
 8002d6c:	d0d3      	beq.n	8002d16 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7fe f97b 	bl	8001068 <HAL_GetTick>
 8002d72:	1b40      	subs	r0, r0, r5
 8002d74:	2802      	cmp	r0, #2
 8002d76:	d9f5      	bls.n	8002d64 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8002d78:	2003      	movs	r0, #3
 8002d7a:	e0f0      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <HAL_RCC_OscConfig+0x2b0>)
 8002d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fe f971 	bl	8001068 <HAL_GetTick>
 8002d86:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8c:	f013 0f02 	tst.w	r3, #2
 8002d90:	d006      	beq.n	8002da0 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d92:	f7fe f969 	bl	8001068 <HAL_GetTick>
 8002d96:	1b40      	subs	r0, r0, r5
 8002d98:	2802      	cmp	r0, #2
 8002d9a:	d9f5      	bls.n	8002d88 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	e0de      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	f013 0f04 	tst.w	r3, #4
 8002da6:	d079      	beq.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da8:	4b2a      	ldr	r3, [pc, #168]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002db0:	d133      	bne.n	8002e1a <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002dca:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <HAL_RCC_OscConfig+0x2b4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002dd4:	d023      	beq.n	8002e1e <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd6:	68a3      	ldr	r3, [r4, #8]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d034      	beq.n	8002e46 <HAL_RCC_OscConfig+0x29a>
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d041      	beq.n	8002e64 <HAL_RCC_OscConfig+0x2b8>
 8002de0:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002de2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	671a      	str	r2, [r3, #112]	; 0x70
 8002dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dec:	f022 0204 	bic.w	r2, r2, #4
 8002df0:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df2:	68a3      	ldr	r3, [r4, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d03f      	beq.n	8002e78 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7fe f936 	bl	8001068 <HAL_GetTick>
 8002dfc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	f013 0f02 	tst.w	r3, #2
 8002e06:	d148      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7fe f92e 	bl	8001068 <HAL_GetTick>
 8002e0c:	1b80      	subs	r0, r0, r6
 8002e0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e12:	4298      	cmp	r0, r3
 8002e14:	d9f3      	bls.n	8002dfe <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 8002e16:	2003      	movs	r0, #3
 8002e18:	e0a1      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2500      	movs	r5, #0
 8002e1c:	e7d6      	b.n	8002dcc <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1e:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <HAL_RCC_OscConfig+0x2b4>)
 8002e20:	6813      	ldr	r3, [r2, #0]
 8002e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e26:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002e28:	f7fe f91e 	bl	8001068 <HAL_GetTick>
 8002e2c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_RCC_OscConfig+0x2b4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e36:	d1ce      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e38:	f7fe f916 	bl	8001068 <HAL_GetTick>
 8002e3c:	1b80      	subs	r0, r0, r6
 8002e3e:	2802      	cmp	r0, #2
 8002e40:	d9f5      	bls.n	8002e2e <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8002e42:	2003      	movs	r0, #3
 8002e44:	e08b      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e46:	4a03      	ldr	r2, [pc, #12]	; (8002e54 <HAL_RCC_OscConfig+0x2a8>)
 8002e48:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e50:	e7cf      	b.n	8002df2 <HAL_RCC_OscConfig+0x246>
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	42470000 	.word	0x42470000
 8002e5c:	42470e80 	.word	0x42470e80
 8002e60:	40007000 	.word	0x40007000
 8002e64:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <HAL_RCC_OscConfig+0x3bc>)
 8002e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e68:	f042 0204 	orr.w	r2, r2, #4
 8002e6c:	671a      	str	r2, [r3, #112]	; 0x70
 8002e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	671a      	str	r2, [r3, #112]	; 0x70
 8002e76:	e7bc      	b.n	8002df2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe f8f6 	bl	8001068 <HAL_GetTick>
 8002e7c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7e:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <HAL_RCC_OscConfig+0x3bc>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	f013 0f02 	tst.w	r3, #2
 8002e86:	d008      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f7fe f8ee 	bl	8001068 <HAL_GetTick>
 8002e8c:	1b80      	subs	r0, r0, r6
 8002e8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e92:	4298      	cmp	r0, r3
 8002e94:	d9f3      	bls.n	8002e7e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8002e96:	2003      	movs	r0, #3
 8002e98:	e061      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e9a:	b9e5      	cbnz	r5, 8002ed6 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e9c:	69a3      	ldr	r3, [r4, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d05c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ea2:	4a31      	ldr	r2, [pc, #196]	; (8002f68 <HAL_RCC_OscConfig+0x3bc>)
 8002ea4:	6892      	ldr	r2, [r2, #8]
 8002ea6:	f002 020c 	and.w	r2, r2, #12
 8002eaa:	2a08      	cmp	r2, #8
 8002eac:	d059      	beq.n	8002f62 <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d017      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <HAL_RCC_OscConfig+0x3c0>)
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe f8d6 	bl	8001068 <HAL_GetTick>
 8002ebc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebe:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <HAL_RCC_OscConfig+0x3bc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ec6:	d045      	beq.n	8002f54 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe f8ce 	bl	8001068 <HAL_GetTick>
 8002ecc:	1b00      	subs	r0, r0, r4
 8002ece:	2802      	cmp	r0, #2
 8002ed0:	d9f5      	bls.n	8002ebe <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 8002ed2:	2003      	movs	r0, #3
 8002ed4:	e043      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed6:	4a24      	ldr	r2, [pc, #144]	; (8002f68 <HAL_RCC_OscConfig+0x3bc>)
 8002ed8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee0:	e7dc      	b.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <HAL_RCC_OscConfig+0x3c0>)
 8002ee6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ee8:	f7fe f8be 	bl	8001068 <HAL_GetTick>
 8002eec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <HAL_RCC_OscConfig+0x3bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ef6:	d006      	beq.n	8002f06 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe f8b6 	bl	8001068 <HAL_GetTick>
 8002efc:	1b40      	subs	r0, r0, r5
 8002efe:	2802      	cmp	r0, #2
 8002f00:	d9f5      	bls.n	8002eee <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 8002f02:	2003      	movs	r0, #3
 8002f04:	e02b      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f06:	69e3      	ldr	r3, [r4, #28]
 8002f08:	6a22      	ldr	r2, [r4, #32]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f0e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f14:	0852      	lsrs	r2, r2, #1
 8002f16:	3a01      	subs	r2, #1
 8002f18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002f24:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002f28:	4a0f      	ldr	r2, [pc, #60]	; (8002f68 <HAL_RCC_OscConfig+0x3bc>)
 8002f2a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <HAL_RCC_OscConfig+0x3c0>)
 8002f30:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f32:	f7fe f899 	bl	8001068 <HAL_GetTick>
 8002f36:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_OscConfig+0x3bc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f40:	d106      	bne.n	8002f50 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fe f891 	bl	8001068 <HAL_GetTick>
 8002f46:	1b00      	subs	r0, r0, r4
 8002f48:	2802      	cmp	r0, #2
 8002f4a:	d9f5      	bls.n	8002f38 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 8002f4c:	2003      	movs	r0, #3
 8002f4e:	e006      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002f50:	2000      	movs	r0, #0
 8002f52:	e004      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
 8002f54:	2000      	movs	r0, #0
 8002f56:	e002      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 8002f5c:	2000      	movs	r0, #0
}
 8002f5e:	b002      	add	sp, #8
 8002f60:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002f62:	2001      	movs	r0, #1
 8002f64:	e7fb      	b.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	42470060 	.word	0x42470060

08002f70 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d03b      	beq.n	8002fec <HAL_SPI_Init+0x7c>
{
 8002f74:	b510      	push	{r4, lr}
 8002f76:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002f7c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d02e      	beq.n	8002fe2 <HAL_SPI_Init+0x72>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f84:	2302      	movs	r3, #2
 8002f86:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f8a:	6822      	ldr	r2, [r4, #0]
 8002f8c:	6813      	ldr	r3, [r2, #0]
 8002f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f92:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f94:	6822      	ldr	r2, [r4, #0]
 8002f96:	6863      	ldr	r3, [r4, #4]
 8002f98:	68a1      	ldr	r1, [r4, #8]
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	68e1      	ldr	r1, [r4, #12]
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	6921      	ldr	r1, [r4, #16]
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	6961      	ldr	r1, [r4, #20]
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	69a1      	ldr	r1, [r4, #24]
 8002faa:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	69e1      	ldr	r1, [r4, #28]
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	6a21      	ldr	r1, [r4, #32]
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002fbe:	6822      	ldr	r2, [r4, #0]
 8002fc0:	8b63      	ldrh	r3, [r4, #26]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fcc:	6822      	ldr	r2, [r4, #0]
 8002fce:	69d3      	ldr	r3, [r2, #28]
 8002fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fd4:	61d3      	str	r3, [r2, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8002fe0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002fe2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002fe6:	f001 fd13 	bl	8004a10 <HAL_SPI_MspInit>
 8002fea:	e7cb      	b.n	8002f84 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002fec:	2001      	movs	r0, #1
 8002fee:	4770      	bx	lr

08002ff0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_SPI_IRQHandler>:
{
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8002ffa:	6802      	ldr	r2, [r0, #0]
 8002ffc:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002ffe:	6893      	ldr	r3, [r2, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8003000:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8003004:	2801      	cmp	r0, #1
 8003006:	d05c      	beq.n	80030c2 <HAL_SPI_IRQHandler+0xce>
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8003008:	f013 0f02 	tst.w	r3, #2
 800300c:	d002      	beq.n	8003014 <HAL_SPI_IRQHandler+0x20>
 800300e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003012:	d15d      	bne.n	80030d0 <HAL_SPI_IRQHandler+0xdc>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8003014:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8003018:	d05d      	beq.n	80030d6 <HAL_SPI_IRQHandler+0xe2>
 800301a:	f011 0f20 	tst.w	r1, #32
 800301e:	d05a      	beq.n	80030d6 <HAL_SPI_IRQHandler+0xe2>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8003020:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003024:	d00f      	beq.n	8003046 <HAL_SPI_IRQHandler+0x52>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003026:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800302a:	b2c0      	uxtb	r0, r0
 800302c:	2803      	cmp	r0, #3
 800302e:	d054      	beq.n	80030da <HAL_SPI_IRQHandler+0xe6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003030:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003032:	f040 0004 	orr.w	r0, r0, #4
 8003036:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003038:	2000      	movs	r0, #0
 800303a:	9000      	str	r0, [sp, #0]
 800303c:	68d0      	ldr	r0, [r2, #12]
 800303e:	9000      	str	r0, [sp, #0]
 8003040:	6890      	ldr	r0, [r2, #8]
 8003042:	9000      	str	r0, [sp, #0]
 8003044:	9800      	ldr	r0, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8003046:	f013 0f20 	tst.w	r3, #32
 800304a:	d00c      	beq.n	8003066 <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800304c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800304e:	f040 0001 	orr.w	r0, r0, #1
 8003052:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003054:	2000      	movs	r0, #0
 8003056:	9002      	str	r0, [sp, #8]
 8003058:	6890      	ldr	r0, [r2, #8]
 800305a:	9002      	str	r0, [sp, #8]
 800305c:	6810      	ldr	r0, [r2, #0]
 800305e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8003062:	6010      	str	r0, [r2, #0]
 8003064:	9a02      	ldr	r2, [sp, #8]
    if((itflag & SPI_FLAG_FRE) != RESET)
 8003066:	f413 7f80 	tst.w	r3, #256	; 0x100
 800306a:	d009      	beq.n	8003080 <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800306c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800306e:	f043 0308 	orr.w	r3, r3, #8
 8003072:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003074:	2300      	movs	r3, #0
 8003076:	9303      	str	r3, [sp, #12]
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	9303      	str	r3, [sp, #12]
 800307e:	9b03      	ldr	r3, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003080:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003082:	b343      	cbz	r3, 80030d6 <HAL_SPI_IRQHandler+0xe2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003084:	6822      	ldr	r2, [r4, #0]
 8003086:	6853      	ldr	r3, [r2, #4]
 8003088:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800308c:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800308e:	2301      	movs	r3, #1
 8003090:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003094:	f011 0f03 	tst.w	r1, #3
 8003098:	d027      	beq.n	80030ea <HAL_SPI_IRQHandler+0xf6>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800309a:	6822      	ldr	r2, [r4, #0]
 800309c:	6853      	ldr	r3, [r2, #4]
 800309e:	f023 0303 	bic.w	r3, r3, #3
 80030a2:	6053      	str	r3, [r2, #4]
        if(hspi->hdmarx != NULL)
 80030a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80030a6:	b123      	cbz	r3, 80030b2 <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80030a8:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <HAL_SPI_IRQHandler+0x100>)
 80030aa:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80030ac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80030ae:	f7fe faf1 	bl	8001694 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 80030b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80030b4:	b17b      	cbz	r3, 80030d6 <HAL_SPI_IRQHandler+0xe2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80030b6:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <HAL_SPI_IRQHandler+0x100>)
 80030b8:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80030ba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80030bc:	f7fe faea 	bl	8001694 <HAL_DMA_Abort_IT>
 80030c0:	e009      	b.n	80030d6 <HAL_SPI_IRQHandler+0xe2>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80030c2:	f011 0f40 	tst.w	r1, #64	; 0x40
 80030c6:	d09f      	beq.n	8003008 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 80030c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030ca:	4620      	mov	r0, r4
 80030cc:	4798      	blx	r3
    return;
 80030ce:	e002      	b.n	80030d6 <HAL_SPI_IRQHandler+0xe2>
    hspi->TxISR(hspi);
 80030d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030d2:	4620      	mov	r0, r4
 80030d4:	4798      	blx	r3
}
 80030d6:	b004      	add	sp, #16
 80030d8:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030da:	2300      	movs	r3, #0
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	68d3      	ldr	r3, [r2, #12]
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	6893      	ldr	r3, [r2, #8]
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	9b01      	ldr	r3, [sp, #4]
        return;
 80030e8:	e7f5      	b.n	80030d6 <HAL_SPI_IRQHandler+0xe2>
        HAL_SPI_ErrorCallback(hspi);
 80030ea:	4620      	mov	r0, r4
 80030ec:	f7ff ff80 	bl	8002ff0 <HAL_SPI_ErrorCallback>
 80030f0:	e7f1      	b.n	80030d6 <HAL_SPI_IRQHandler+0xe2>
 80030f2:	bf00      	nop
 80030f4:	080030f9 	.word	0x080030f9

080030f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030f8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003100:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8003102:	f7ff ff75 	bl	8002ff0 <HAL_SPI_ErrorCallback>
 8003106:	bd08      	pop	{r3, pc}

08003108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003108:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310a:	6a03      	ldr	r3, [r0, #32]
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003112:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003114:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003116:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003118:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800311c:	680d      	ldr	r5, [r1, #0]
 800311e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003120:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003124:	688d      	ldr	r5, [r1, #8]
 8003126:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003128:	4d0f      	ldr	r5, [pc, #60]	; (8003168 <TIM_OC1_SetConfig+0x60>)
 800312a:	42a8      	cmp	r0, r5
 800312c:	d01a      	beq.n	8003164 <TIM_OC1_SetConfig+0x5c>
 800312e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003132:	42a8      	cmp	r0, r5
 8003134:	d014      	beq.n	8003160 <TIM_OC1_SetConfig+0x58>
 8003136:	2500      	movs	r5, #0
 8003138:	b15d      	cbz	r5, 8003152 <TIM_OC1_SetConfig+0x4a>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800313a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800313e:	68cd      	ldr	r5, [r1, #12]
 8003140:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003142:	f023 0304 	bic.w	r3, r3, #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003146:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800314a:	694d      	ldr	r5, [r1, #20]
 800314c:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800314e:	698d      	ldr	r5, [r1, #24]
 8003150:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003152:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003154:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003156:	684a      	ldr	r2, [r1, #4]
 8003158:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800315a:	6203      	str	r3, [r0, #32]
} 
 800315c:	bc30      	pop	{r4, r5}
 800315e:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003160:	2501      	movs	r5, #1
 8003162:	e7e9      	b.n	8003138 <TIM_OC1_SetConfig+0x30>
 8003164:	2501      	movs	r5, #1
 8003166:	e7e7      	b.n	8003138 <TIM_OC1_SetConfig+0x30>
 8003168:	40010000 	.word	0x40010000

0800316c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800316e:	6a03      	ldr	r3, [r0, #32]
 8003170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003174:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003176:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003178:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800317a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800317c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003180:	680d      	ldr	r5, [r1, #0]
 8003182:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003188:	688d      	ldr	r5, [r1, #8]
 800318a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800318e:	4d11      	ldr	r5, [pc, #68]	; (80031d4 <TIM_OC3_SetConfig+0x68>)
 8003190:	42a8      	cmp	r0, r5
 8003192:	d01d      	beq.n	80031d0 <TIM_OC3_SetConfig+0x64>
 8003194:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003198:	42a8      	cmp	r0, r5
 800319a:	d017      	beq.n	80031cc <TIM_OC3_SetConfig+0x60>
 800319c:	2500      	movs	r5, #0
 800319e:	b175      	cbz	r5, 80031be <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031a4:	68cd      	ldr	r5, [r1, #12]
 80031a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ae:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031b2:	694d      	ldr	r5, [r1, #20]
 80031b4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031b8:	698d      	ldr	r5, [r1, #24]
 80031ba:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031be:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031c0:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031c2:	684a      	ldr	r2, [r1, #4]
 80031c4:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c6:	6203      	str	r3, [r0, #32]
}
 80031c8:	bc30      	pop	{r4, r5}
 80031ca:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80031cc:	2501      	movs	r5, #1
 80031ce:	e7e6      	b.n	800319e <TIM_OC3_SetConfig+0x32>
 80031d0:	2501      	movs	r5, #1
 80031d2:	e7e4      	b.n	800319e <TIM_OC3_SetConfig+0x32>
 80031d4:	40010000 	.word	0x40010000

080031d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031da:	6a03      	ldr	r3, [r0, #32]
 80031dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031e0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80031e4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031e6:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031e8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ec:	680d      	ldr	r5, [r1, #0]
 80031ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031f6:	688d      	ldr	r5, [r1, #8]
 80031f8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80031fc:	4d0c      	ldr	r5, [pc, #48]	; (8003230 <TIM_OC4_SetConfig+0x58>)
 80031fe:	42a8      	cmp	r0, r5
 8003200:	d013      	beq.n	800322a <TIM_OC4_SetConfig+0x52>
 8003202:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003206:	42a8      	cmp	r0, r5
 8003208:	d00d      	beq.n	8003226 <TIM_OC4_SetConfig+0x4e>
 800320a:	2500      	movs	r5, #0
 800320c:	b125      	cbz	r5, 8003218 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800320e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003212:	694d      	ldr	r5, [r1, #20]
 8003214:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003218:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800321a:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800321c:	684a      	ldr	r2, [r1, #4]
 800321e:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003220:	6203      	str	r3, [r0, #32]
}
 8003222:	bc30      	pop	{r4, r5}
 8003224:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003226:	2501      	movs	r5, #1
 8003228:	e7f0      	b.n	800320c <TIM_OC4_SetConfig+0x34>
 800322a:	2501      	movs	r5, #1
 800322c:	e7ee      	b.n	800320c <TIM_OC4_SetConfig+0x34>
 800322e:	bf00      	nop
 8003230:	40010000 	.word	0x40010000

08003234 <TIM_TI2_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003234:	b430      	push	{r4, r5}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003236:	6a04      	ldr	r4, [r0, #32]
 8003238:	f024 0410 	bic.w	r4, r4, #16
 800323c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003240:	6a05      	ldr	r5, [r0, #32]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003242:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003246:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800324a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800324e:	031b      	lsls	r3, r3, #12
 8003250:	b29b      	uxth	r3, r3
 8003252:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003254:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003258:	0109      	lsls	r1, r1, #4
 800325a:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 800325e:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003260:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003262:	6205      	str	r5, [r0, #32]
}
 8003264:	bc30      	pop	{r4, r5}
 8003266:	4770      	bx	lr

08003268 <TIM_TI3_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003268:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800326a:	6a04      	ldr	r4, [r0, #32]
 800326c:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8003270:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003272:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003274:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003276:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 800327a:	4322      	orrs	r2, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800327c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	b2db      	uxtb	r3, r3
 8003284:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003286:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800328a:	0209      	lsls	r1, r1, #8
 800328c:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8003290:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003292:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8003294:	6205      	str	r5, [r0, #32]
}
 8003296:	bc30      	pop	{r4, r5}
 8003298:	4770      	bx	lr

0800329a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800329a:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800329c:	6a04      	ldr	r4, [r0, #32]
 800329e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80032a2:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032a4:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80032a6:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80032a8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80032ac:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80032b0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80032b4:	031b      	lsls	r3, r3, #12
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80032ba:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80032be:	0309      	lsls	r1, r1, #12
 80032c0:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 80032c4:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032c6:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 80032c8:	6205      	str	r5, [r0, #32]
}
 80032ca:	bc30      	pop	{r4, r5}
 80032cc:	4770      	bx	lr

080032ce <HAL_TIM_IC_MspInit>:
{
 80032ce:	4770      	bx	lr

080032d0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80032d0:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80032d2:	4a45      	ldr	r2, [pc, #276]	; (80033e8 <TIM_Base_SetConfig+0x118>)
 80032d4:	4290      	cmp	r0, r2
 80032d6:	d04a      	beq.n	800336e <TIM_Base_SetConfig+0x9e>
 80032d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032dc:	d049      	beq.n	8003372 <TIM_Base_SetConfig+0xa2>
 80032de:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80032e2:	4290      	cmp	r0, r2
 80032e4:	d047      	beq.n	8003376 <TIM_Base_SetConfig+0xa6>
 80032e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032ea:	4290      	cmp	r0, r2
 80032ec:	d045      	beq.n	800337a <TIM_Base_SetConfig+0xaa>
 80032ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032f2:	4290      	cmp	r0, r2
 80032f4:	d043      	beq.n	800337e <TIM_Base_SetConfig+0xae>
 80032f6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80032fa:	4290      	cmp	r0, r2
 80032fc:	d035      	beq.n	800336a <TIM_Base_SetConfig+0x9a>
 80032fe:	2200      	movs	r2, #0
 8003300:	b11a      	cbz	r2, 800330a <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003306:	684a      	ldr	r2, [r1, #4]
 8003308:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800330a:	4a37      	ldr	r2, [pc, #220]	; (80033e8 <TIM_Base_SetConfig+0x118>)
 800330c:	4290      	cmp	r0, r2
 800330e:	d03a      	beq.n	8003386 <TIM_Base_SetConfig+0xb6>
 8003310:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003314:	d050      	beq.n	80033b8 <TIM_Base_SetConfig+0xe8>
 8003316:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800331a:	4290      	cmp	r0, r2
 800331c:	d04e      	beq.n	80033bc <TIM_Base_SetConfig+0xec>
 800331e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003322:	4290      	cmp	r0, r2
 8003324:	d04c      	beq.n	80033c0 <TIM_Base_SetConfig+0xf0>
 8003326:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800332a:	4290      	cmp	r0, r2
 800332c:	d04a      	beq.n	80033c4 <TIM_Base_SetConfig+0xf4>
 800332e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003332:	4290      	cmp	r0, r2
 8003334:	d048      	beq.n	80033c8 <TIM_Base_SetConfig+0xf8>
 8003336:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800333a:	4290      	cmp	r0, r2
 800333c:	d046      	beq.n	80033cc <TIM_Base_SetConfig+0xfc>
 800333e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003342:	4290      	cmp	r0, r2
 8003344:	d044      	beq.n	80033d0 <TIM_Base_SetConfig+0x100>
 8003346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800334a:	4290      	cmp	r0, r2
 800334c:	d042      	beq.n	80033d4 <TIM_Base_SetConfig+0x104>
 800334e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003352:	4290      	cmp	r0, r2
 8003354:	d040      	beq.n	80033d8 <TIM_Base_SetConfig+0x108>
 8003356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800335a:	4290      	cmp	r0, r2
 800335c:	d03e      	beq.n	80033dc <TIM_Base_SetConfig+0x10c>
 800335e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003362:	4290      	cmp	r0, r2
 8003364:	d00d      	beq.n	8003382 <TIM_Base_SetConfig+0xb2>
 8003366:	2200      	movs	r2, #0
 8003368:	e00e      	b.n	8003388 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800336a:	2201      	movs	r2, #1
 800336c:	e7c8      	b.n	8003300 <TIM_Base_SetConfig+0x30>
 800336e:	2201      	movs	r2, #1
 8003370:	e7c6      	b.n	8003300 <TIM_Base_SetConfig+0x30>
 8003372:	2201      	movs	r2, #1
 8003374:	e7c4      	b.n	8003300 <TIM_Base_SetConfig+0x30>
 8003376:	2201      	movs	r2, #1
 8003378:	e7c2      	b.n	8003300 <TIM_Base_SetConfig+0x30>
 800337a:	2201      	movs	r2, #1
 800337c:	e7c0      	b.n	8003300 <TIM_Base_SetConfig+0x30>
 800337e:	2201      	movs	r2, #1
 8003380:	e7be      	b.n	8003300 <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003382:	2201      	movs	r2, #1
 8003384:	e000      	b.n	8003388 <TIM_Base_SetConfig+0xb8>
 8003386:	2201      	movs	r2, #1
 8003388:	b11a      	cbz	r2, 8003392 <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 800338a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338e:	68ca      	ldr	r2, [r1, #12]
 8003390:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003392:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003394:	688b      	ldr	r3, [r1, #8]
 8003396:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003398:	680b      	ldr	r3, [r1, #0]
 800339a:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <TIM_Base_SetConfig+0x118>)
 800339e:	4298      	cmp	r0, r3
 80033a0:	d020      	beq.n	80033e4 <TIM_Base_SetConfig+0x114>
 80033a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033a6:	4298      	cmp	r0, r3
 80033a8:	d01a      	beq.n	80033e0 <TIM_Base_SetConfig+0x110>
 80033aa:	2300      	movs	r3, #0
 80033ac:	b10b      	cbz	r3, 80033b2 <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 80033ae:	690b      	ldr	r3, [r1, #16]
 80033b0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80033b2:	2301      	movs	r3, #1
 80033b4:	6143      	str	r3, [r0, #20]
 80033b6:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80033b8:	2201      	movs	r2, #1
 80033ba:	e7e5      	b.n	8003388 <TIM_Base_SetConfig+0xb8>
 80033bc:	2201      	movs	r2, #1
 80033be:	e7e3      	b.n	8003388 <TIM_Base_SetConfig+0xb8>
 80033c0:	2201      	movs	r2, #1
 80033c2:	e7e1      	b.n	8003388 <TIM_Base_SetConfig+0xb8>
 80033c4:	2201      	movs	r2, #1
 80033c6:	e7df      	b.n	8003388 <TIM_Base_SetConfig+0xb8>
 80033c8:	2201      	movs	r2, #1
 80033ca:	e7dd      	b.n	8003388 <TIM_Base_SetConfig+0xb8>
 80033cc:	2201      	movs	r2, #1
 80033ce:	e7db      	b.n	8003388 <TIM_Base_SetConfig+0xb8>
 80033d0:	2201      	movs	r2, #1
 80033d2:	e7d9      	b.n	8003388 <TIM_Base_SetConfig+0xb8>
 80033d4:	2201      	movs	r2, #1
 80033d6:	e7d7      	b.n	8003388 <TIM_Base_SetConfig+0xb8>
 80033d8:	2201      	movs	r2, #1
 80033da:	e7d5      	b.n	8003388 <TIM_Base_SetConfig+0xb8>
 80033dc:	2201      	movs	r2, #1
 80033de:	e7d3      	b.n	8003388 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80033e0:	2301      	movs	r3, #1
 80033e2:	e7e3      	b.n	80033ac <TIM_Base_SetConfig+0xdc>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e7e1      	b.n	80033ac <TIM_Base_SetConfig+0xdc>
 80033e8:	40010000 	.word	0x40010000

080033ec <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 80033ec:	b1a8      	cbz	r0, 800341a <HAL_TIM_PWM_Init+0x2e>
{
 80033ee:	b510      	push	{r4, lr}
 80033f0:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80033f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80033f6:	b15b      	cbz	r3, 8003410 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 80033f8:	2302      	movs	r3, #2
 80033fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80033fe:	1d21      	adds	r1, r4, #4
 8003400:	6820      	ldr	r0, [r4, #0]
 8003402:	f7ff ff65 	bl	80032d0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003406:	2301      	movs	r3, #1
 8003408:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800340c:	2000      	movs	r0, #0
 800340e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003410:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8003414:	f001 fb9c 	bl	8004b50 <HAL_TIM_PWM_MspInit>
 8003418:	e7ee      	b.n	80033f8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800341a:	2001      	movs	r0, #1
 800341c:	4770      	bx	lr

0800341e <HAL_TIM_IC_Init>:
  if(htim == NULL)
 800341e:	b1a8      	cbz	r0, 800344c <HAL_TIM_IC_Init+0x2e>
{
 8003420:	b510      	push	{r4, lr}
 8003422:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8003424:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003428:	b15b      	cbz	r3, 8003442 <HAL_TIM_IC_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;   
 800342a:	2302      	movs	r3, #2
 800342c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003430:	1d21      	adds	r1, r4, #4
 8003432:	6820      	ldr	r0, [r4, #0]
 8003434:	f7ff ff4c 	bl	80032d0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003438:	2301      	movs	r3, #1
 800343a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800343e:	2000      	movs	r0, #0
 8003440:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003442:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8003446:	f7ff ff42 	bl	80032ce <HAL_TIM_IC_MspInit>
 800344a:	e7ee      	b.n	800342a <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 800344c:	2001      	movs	r0, #1
 800344e:	4770      	bx	lr

08003450 <HAL_TIM_Encoder_Init>:
  if(htim == NULL)
 8003450:	2800      	cmp	r0, #0
 8003452:	d047      	beq.n	80034e4 <HAL_TIM_Encoder_Init+0x94>
{
 8003454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003456:	4605      	mov	r5, r0
 8003458:	460c      	mov	r4, r1
  if(htim->State == HAL_TIM_STATE_RESET)
 800345a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800345e:	2b00      	cmp	r3, #0
 8003460:	d03b      	beq.n	80034da <HAL_TIM_Encoder_Init+0x8a>
  htim->State= HAL_TIM_STATE_BUSY;   
 8003462:	2302      	movs	r3, #2
 8003464:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003468:	4629      	mov	r1, r5
 800346a:	f851 2b04 	ldr.w	r2, [r1], #4
 800346e:	6893      	ldr	r3, [r2, #8]
 8003470:	f023 0307 	bic.w	r3, r3, #7
 8003474:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8003476:	6828      	ldr	r0, [r5, #0]
 8003478:	f7ff ff2a 	bl	80032d0 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800347c:	6828      	ldr	r0, [r5, #0]
 800347e:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8003480:	6983      	ldr	r3, [r0, #24]
  tmpccer = htim->Instance->CCER;
 8003482:	6a02      	ldr	r2, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003484:	6821      	ldr	r1, [r4, #0]
 8003486:	430e      	orrs	r6, r1
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348c:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003490:	68a1      	ldr	r1, [r4, #8]
 8003492:	69a7      	ldr	r7, [r4, #24]
 8003494:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8003498:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800349a:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800349e:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80034a2:	68e1      	ldr	r1, [r4, #12]
 80034a4:	69e7      	ldr	r7, [r4, #28]
 80034a6:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80034aa:	430b      	orrs	r3, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80034ac:	6927      	ldr	r7, [r4, #16]
 80034ae:	6a21      	ldr	r1, [r4, #32]
 80034b0:	0309      	lsls	r1, r1, #12
 80034b2:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 80034b6:	430b      	orrs	r3, r1
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80034b8:	f022 02aa 	bic.w	r2, r2, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80034bc:	6861      	ldr	r1, [r4, #4]
 80034be:	6964      	ldr	r4, [r4, #20]
 80034c0:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 80034c4:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 80034c6:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80034c8:	6829      	ldr	r1, [r5, #0]
 80034ca:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 80034cc:	682b      	ldr	r3, [r5, #0]
 80034ce:	621a      	str	r2, [r3, #32]
  htim->State= HAL_TIM_STATE_READY;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 80034d6:	2000      	movs	r0, #0
 80034d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 80034da:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 80034de:	f001 fb6d 	bl	8004bbc <HAL_TIM_Encoder_MspInit>
 80034e2:	e7be      	b.n	8003462 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 80034e4:	2001      	movs	r0, #1
 80034e6:	4770      	bx	lr

080034e8 <TIM_TI1_SetConfig>:
{
 80034e8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ea:	6a04      	ldr	r4, [r0, #32]
 80034ec:	f024 0401 	bic.w	r4, r4, #1
 80034f0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80034f4:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80034f6:	4e23      	ldr	r6, [pc, #140]	; (8003584 <TIM_TI1_SetConfig+0x9c>)
 80034f8:	42b0      	cmp	r0, r6
 80034fa:	d030      	beq.n	800355e <TIM_TI1_SetConfig+0x76>
 80034fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003500:	d02f      	beq.n	8003562 <TIM_TI1_SetConfig+0x7a>
 8003502:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8003506:	42b0      	cmp	r0, r6
 8003508:	d02d      	beq.n	8003566 <TIM_TI1_SetConfig+0x7e>
 800350a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800350e:	42b0      	cmp	r0, r6
 8003510:	d02b      	beq.n	800356a <TIM_TI1_SetConfig+0x82>
 8003512:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003516:	42b0      	cmp	r0, r6
 8003518:	d029      	beq.n	800356e <TIM_TI1_SetConfig+0x86>
 800351a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800351e:	42b0      	cmp	r0, r6
 8003520:	d027      	beq.n	8003572 <TIM_TI1_SetConfig+0x8a>
 8003522:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8003526:	42b0      	cmp	r0, r6
 8003528:	d025      	beq.n	8003576 <TIM_TI1_SetConfig+0x8e>
 800352a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800352e:	42b0      	cmp	r0, r6
 8003530:	d013      	beq.n	800355a <TIM_TI1_SetConfig+0x72>
 8003532:	2600      	movs	r6, #0
 8003534:	bb0e      	cbnz	r6, 800357a <TIM_TI1_SetConfig+0x92>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003536:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800353a:	f042 0201 	orr.w	r2, r2, #1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800353e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	b2db      	uxtb	r3, r3
 8003546:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003548:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800354c:	f001 010a 	and.w	r1, r1, #10
 8003550:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8003552:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003554:	6201      	str	r1, [r0, #32]
}
 8003556:	bc70      	pop	{r4, r5, r6}
 8003558:	4770      	bx	lr
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800355a:	2601      	movs	r6, #1
 800355c:	e7ea      	b.n	8003534 <TIM_TI1_SetConfig+0x4c>
 800355e:	2601      	movs	r6, #1
 8003560:	e7e8      	b.n	8003534 <TIM_TI1_SetConfig+0x4c>
 8003562:	2601      	movs	r6, #1
 8003564:	e7e6      	b.n	8003534 <TIM_TI1_SetConfig+0x4c>
 8003566:	2601      	movs	r6, #1
 8003568:	e7e4      	b.n	8003534 <TIM_TI1_SetConfig+0x4c>
 800356a:	2601      	movs	r6, #1
 800356c:	e7e2      	b.n	8003534 <TIM_TI1_SetConfig+0x4c>
 800356e:	2601      	movs	r6, #1
 8003570:	e7e0      	b.n	8003534 <TIM_TI1_SetConfig+0x4c>
 8003572:	2601      	movs	r6, #1
 8003574:	e7de      	b.n	8003534 <TIM_TI1_SetConfig+0x4c>
 8003576:	2601      	movs	r6, #1
 8003578:	e7dc      	b.n	8003534 <TIM_TI1_SetConfig+0x4c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800357a:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800357e:	4322      	orrs	r2, r4
 8003580:	e7dd      	b.n	800353e <TIM_TI1_SetConfig+0x56>
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000

08003588 <HAL_TIM_IC_ConfigChannel>:
{
 8003588:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800358a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800358e:	2b01      	cmp	r3, #1
 8003590:	d058      	beq.n	8003644 <HAL_TIM_IC_ConfigChannel+0xbc>
 8003592:	460d      	mov	r5, r1
 8003594:	4604      	mov	r4, r0
 8003596:	2301      	movs	r3, #1
 8003598:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	2302      	movs	r3, #2
 800359e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 80035a2:	b1da      	cbz	r2, 80035dc <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 80035a4:	2a04      	cmp	r2, #4
 80035a6:	d02a      	beq.n	80035fe <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 80035a8:	2a08      	cmp	r2, #8
 80035aa:	d03a      	beq.n	8003622 <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance, 
 80035ac:	68cb      	ldr	r3, [r1, #12]
 80035ae:	684a      	ldr	r2, [r1, #4]
 80035b0:	6809      	ldr	r1, [r1, #0]
 80035b2:	6800      	ldr	r0, [r0, #0]
 80035b4:	f7ff fe71 	bl	800329a <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	69d3      	ldr	r3, [r2, #28]
 80035bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80035c0:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80035c2:	6822      	ldr	r2, [r4, #0]
 80035c4:	69d3      	ldr	r3, [r2, #28]
 80035c6:	68a9      	ldr	r1, [r5, #8]
 80035c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035cc:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80035d4:	2000      	movs	r0, #0
 80035d6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK; 
 80035da:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80035dc:	68cb      	ldr	r3, [r1, #12]
 80035de:	684a      	ldr	r2, [r1, #4]
 80035e0:	6809      	ldr	r1, [r1, #0]
 80035e2:	6800      	ldr	r0, [r0, #0]
 80035e4:	f7ff ff80 	bl	80034e8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035e8:	6822      	ldr	r2, [r4, #0]
 80035ea:	6993      	ldr	r3, [r2, #24]
 80035ec:	f023 030c 	bic.w	r3, r3, #12
 80035f0:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035f2:	6822      	ldr	r2, [r4, #0]
 80035f4:	6993      	ldr	r3, [r2, #24]
 80035f6:	68a9      	ldr	r1, [r5, #8]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6193      	str	r3, [r2, #24]
 80035fc:	e7e7      	b.n	80035ce <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance, 
 80035fe:	68cb      	ldr	r3, [r1, #12]
 8003600:	684a      	ldr	r2, [r1, #4]
 8003602:	6809      	ldr	r1, [r1, #0]
 8003604:	6800      	ldr	r0, [r0, #0]
 8003606:	f7ff fe15 	bl	8003234 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	6993      	ldr	r3, [r2, #24]
 800360e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003612:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	6993      	ldr	r3, [r2, #24]
 8003618:	68a9      	ldr	r1, [r5, #8]
 800361a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800361e:	6193      	str	r3, [r2, #24]
 8003620:	e7d5      	b.n	80035ce <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,  
 8003622:	68cb      	ldr	r3, [r1, #12]
 8003624:	684a      	ldr	r2, [r1, #4]
 8003626:	6809      	ldr	r1, [r1, #0]
 8003628:	6800      	ldr	r0, [r0, #0]
 800362a:	f7ff fe1d 	bl	8003268 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	69d3      	ldr	r3, [r2, #28]
 8003632:	f023 030c 	bic.w	r3, r3, #12
 8003636:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	69d3      	ldr	r3, [r2, #28]
 800363c:	68a9      	ldr	r1, [r5, #8]
 800363e:	430b      	orrs	r3, r1
 8003640:	61d3      	str	r3, [r2, #28]
 8003642:	e7c4      	b.n	80035ce <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 8003644:	2002      	movs	r0, #2
}
 8003646:	bd38      	pop	{r3, r4, r5, pc}

08003648 <TIM_OC2_SetConfig>:
{
 8003648:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364a:	6a03      	ldr	r3, [r0, #32]
 800364c:	f023 0310 	bic.w	r3, r3, #16
 8003650:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003652:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003654:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003656:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003658:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800365c:	680d      	ldr	r5, [r1, #0]
 800365e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003662:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003666:	688d      	ldr	r5, [r1, #8]
 8003668:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800366c:	4d11      	ldr	r5, [pc, #68]	; (80036b4 <TIM_OC2_SetConfig+0x6c>)
 800366e:	42a8      	cmp	r0, r5
 8003670:	d01d      	beq.n	80036ae <TIM_OC2_SetConfig+0x66>
 8003672:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003676:	42a8      	cmp	r0, r5
 8003678:	d017      	beq.n	80036aa <TIM_OC2_SetConfig+0x62>
 800367a:	2500      	movs	r5, #0
 800367c:	b175      	cbz	r5, 800369c <TIM_OC2_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC2NP;
 800367e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003682:	68cd      	ldr	r5, [r1, #12]
 8003684:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800368c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003690:	694d      	ldr	r5, [r1, #20]
 8003692:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003696:	698d      	ldr	r5, [r1, #24]
 8003698:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800369c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800369e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80036a0:	684a      	ldr	r2, [r1, #4]
 80036a2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80036a4:	6203      	str	r3, [r0, #32]
}
 80036a6:	bc30      	pop	{r4, r5}
 80036a8:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80036aa:	2501      	movs	r5, #1
 80036ac:	e7e6      	b.n	800367c <TIM_OC2_SetConfig+0x34>
 80036ae:	2501      	movs	r5, #1
 80036b0:	e7e4      	b.n	800367c <TIM_OC2_SetConfig+0x34>
 80036b2:	bf00      	nop
 80036b4:	40010000 	.word	0x40010000

080036b8 <HAL_TIM_PWM_ConfigChannel>:
{
 80036b8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80036ba:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d066      	beq.n	8003790 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80036c2:	460d      	mov	r5, r1
 80036c4:	4604      	mov	r4, r0
 80036c6:	2301      	movs	r3, #1
 80036c8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	2302      	movs	r3, #2
 80036ce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 80036d2:	2a0c      	cmp	r2, #12
 80036d4:	d81a      	bhi.n	800370c <HAL_TIM_PWM_ConfigChannel+0x54>
 80036d6:	e8df f002 	tbb	[pc, r2]
 80036da:	1907      	.short	0x1907
 80036dc:	19201919 	.word	0x19201919
 80036e0:	19341919 	.word	0x19341919
 80036e4:	1919      	.short	0x1919
 80036e6:	47          	.byte	0x47
 80036e7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e8:	6800      	ldr	r0, [r0, #0]
 80036ea:	f7ff fd0d 	bl	8003108 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	6993      	ldr	r3, [r2, #24]
 80036f2:	f043 0308 	orr.w	r3, r3, #8
 80036f6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036f8:	6822      	ldr	r2, [r4, #0]
 80036fa:	6993      	ldr	r3, [r2, #24]
 80036fc:	f023 0304 	bic.w	r3, r3, #4
 8003700:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003702:	6822      	ldr	r2, [r4, #0]
 8003704:	6993      	ldr	r3, [r2, #24]
 8003706:	6929      	ldr	r1, [r5, #16]
 8003708:	430b      	orrs	r3, r1
 800370a:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800370c:	2301      	movs	r3, #1
 800370e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003712:	2000      	movs	r0, #0
 8003714:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8003718:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800371a:	6800      	ldr	r0, [r0, #0]
 800371c:	f7ff ff94 	bl	8003648 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003720:	6822      	ldr	r2, [r4, #0]
 8003722:	6993      	ldr	r3, [r2, #24]
 8003724:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003728:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800372a:	6822      	ldr	r2, [r4, #0]
 800372c:	6993      	ldr	r3, [r2, #24]
 800372e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003732:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	6993      	ldr	r3, [r2, #24]
 8003738:	6929      	ldr	r1, [r5, #16]
 800373a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800373e:	6193      	str	r3, [r2, #24]
    break;
 8003740:	e7e4      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003742:	6800      	ldr	r0, [r0, #0]
 8003744:	f7ff fd12 	bl	800316c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003748:	6822      	ldr	r2, [r4, #0]
 800374a:	69d3      	ldr	r3, [r2, #28]
 800374c:	f043 0308 	orr.w	r3, r3, #8
 8003750:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	69d3      	ldr	r3, [r2, #28]
 8003756:	f023 0304 	bic.w	r3, r3, #4
 800375a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800375c:	6822      	ldr	r2, [r4, #0]
 800375e:	69d3      	ldr	r3, [r2, #28]
 8003760:	6929      	ldr	r1, [r5, #16]
 8003762:	430b      	orrs	r3, r1
 8003764:	61d3      	str	r3, [r2, #28]
    break;
 8003766:	e7d1      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003768:	6800      	ldr	r0, [r0, #0]
 800376a:	f7ff fd35 	bl	80031d8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800376e:	6822      	ldr	r2, [r4, #0]
 8003770:	69d3      	ldr	r3, [r2, #28]
 8003772:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003776:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003778:	6822      	ldr	r2, [r4, #0]
 800377a:	69d3      	ldr	r3, [r2, #28]
 800377c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003780:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003782:	6822      	ldr	r2, [r4, #0]
 8003784:	69d3      	ldr	r3, [r2, #28]
 8003786:	6929      	ldr	r1, [r5, #16]
 8003788:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800378c:	61d3      	str	r3, [r2, #28]
    break;
 800378e:	e7bd      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8003790:	2002      	movs	r0, #2
}
 8003792:	bd38      	pop	{r3, r4, r5, pc}

08003794 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8003794:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003798:	2b01      	cmp	r3, #1
 800379a:	d022      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 800379c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800379e:	2201      	movs	r2, #1
 80037a0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	2302      	movs	r3, #2
 80037a6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80037aa:	6804      	ldr	r4, [r0, #0]
 80037ac:	6863      	ldr	r3, [r4, #4]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80037b4:	6804      	ldr	r4, [r0, #0]
 80037b6:	6863      	ldr	r3, [r4, #4]
 80037b8:	680d      	ldr	r5, [r1, #0]
 80037ba:	432b      	orrs	r3, r5
 80037bc:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80037be:	6804      	ldr	r4, [r0, #0]
 80037c0:	68a3      	ldr	r3, [r4, #8]
 80037c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c6:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80037c8:	6804      	ldr	r4, [r0, #0]
 80037ca:	68a3      	ldr	r3, [r4, #8]
 80037cc:	6849      	ldr	r1, [r1, #4]
 80037ce:	430b      	orrs	r3, r1
 80037d0:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80037d2:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80037d6:	2300      	movs	r3, #0
 80037d8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80037dc:	4618      	mov	r0, r3
} 
 80037de:	bc30      	pop	{r4, r5}
 80037e0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80037e2:	2002      	movs	r0, #2
 80037e4:	4770      	bx	lr

080037e6 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80037e6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d025      	beq.n	800383a <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 80037ee:	2301      	movs	r3, #1
 80037f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037f4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fa:	688a      	ldr	r2, [r1, #8]
 80037fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003802:	684a      	ldr	r2, [r1, #4]
 8003804:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800380a:	680a      	ldr	r2, [r1, #0]
 800380c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800380e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003812:	690a      	ldr	r2, [r1, #16]
 8003814:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800381a:	694a      	ldr	r2, [r1, #20]
 800381c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800381e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003822:	698a      	ldr	r2, [r1, #24]
 8003824:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003826:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800382a:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800382c:	6802      	ldr	r2, [r0, #0]
 800382e:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8003830:	2300      	movs	r3, #0
 8003832:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8003836:	4618      	mov	r0, r3
 8003838:	4770      	bx	lr
  __HAL_LOCK(htim);
 800383a:	2002      	movs	r0, #2
}
 800383c:	4770      	bx	lr

0800383e <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800383e:	6802      	ldr	r2, [r0, #0]
 8003840:	68d3      	ldr	r3, [r2, #12]
 8003842:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003846:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003848:	2320      	movs	r3, #32
 800384a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800384e:	4770      	bx	lr

08003850 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003850:	6802      	ldr	r2, [r0, #0]
 8003852:	68d3      	ldr	r3, [r2, #12]
 8003854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003858:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385a:	6802      	ldr	r2, [r0, #0]
 800385c:	6953      	ldr	r3, [r2, #20]
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003864:	2320      	movs	r3, #32
 8003866:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800386a:	4770      	bx	lr

0800386c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800386c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b21      	cmp	r3, #33	; 0x21
 8003874:	d001      	beq.n	800387a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003876:	2002      	movs	r0, #2
 8003878:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800387a:	6883      	ldr	r3, [r0, #8]
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003880:	d017      	beq.n	80038b2 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003882:	6802      	ldr	r2, [r0, #0]
 8003884:	6a03      	ldr	r3, [r0, #32]
 8003886:	1c59      	adds	r1, r3, #1
 8003888:	6201      	str	r1, [r0, #32]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 800388e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29b      	uxth	r3, r3
 8003896:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003898:	b9db      	cbnz	r3, 80038d2 <UART_Transmit_IT+0x66>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800389a:	6802      	ldr	r2, [r0, #0]
 800389c:	68d3      	ldr	r3, [r2, #12]
 800389e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a2:	60d3      	str	r3, [r2, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038a4:	6802      	ldr	r2, [r0, #0]
 80038a6:	68d3      	ldr	r3, [r2, #12]
 80038a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ac:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80038ae:	2000      	movs	r0, #0
 80038b0:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80038b2:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038b4:	6802      	ldr	r2, [r0, #0]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038bc:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80038be:	6903      	ldr	r3, [r0, #16]
 80038c0:	b91b      	cbnz	r3, 80038ca <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 80038c2:	6a03      	ldr	r3, [r0, #32]
 80038c4:	3302      	adds	r3, #2
 80038c6:	6203      	str	r3, [r0, #32]
 80038c8:	e7e1      	b.n	800388e <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 80038ca:	6a03      	ldr	r3, [r0, #32]
 80038cc:	3301      	adds	r3, #1
 80038ce:	6203      	str	r3, [r0, #32]
 80038d0:	e7dd      	b.n	800388e <UART_Transmit_IT+0x22>
    return HAL_OK;
 80038d2:	2000      	movs	r0, #0
  }
}
 80038d4:	4770      	bx	lr
	...

080038d8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038dc:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80038de:	6802      	ldr	r2, [r0, #0]
 80038e0:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80038e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80038e6:	68c1      	ldr	r1, [r0, #12]
 80038e8:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80038ea:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80038ec:	6801      	ldr	r1, [r0, #0]
 80038ee:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80038f0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038f4:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038f8:	6882      	ldr	r2, [r0, #8]
 80038fa:	6900      	ldr	r0, [r0, #16]
 80038fc:	4302      	orrs	r2, r0
 80038fe:	6960      	ldr	r0, [r4, #20]
 8003900:	4302      	orrs	r2, r0
 8003902:	69e0      	ldr	r0, [r4, #28]
 8003904:	4302      	orrs	r2, r0
 8003906:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003908:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800390a:	6822      	ldr	r2, [r4, #0]
 800390c:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800390e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003912:	69a1      	ldr	r1, [r4, #24]
 8003914:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003916:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003918:	69e3      	ldr	r3, [r4, #28]
 800391a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391e:	d062      	beq.n	80039e6 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003920:	f8d4 8000 	ldr.w	r8, [r4]
 8003924:	4bbb      	ldr	r3, [pc, #748]	; (8003c14 <UART_SetConfig+0x33c>)
 8003926:	4598      	cmp	r8, r3
 8003928:	f000 811b 	beq.w	8003b62 <UART_SetConfig+0x28a>
 800392c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003930:	4598      	cmp	r8, r3
 8003932:	f000 8116 	beq.w	8003b62 <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003936:	f7ff f859 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 800393a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800393e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003942:	6865      	ldr	r5, [r4, #4]
 8003944:	00ad      	lsls	r5, r5, #2
 8003946:	fbb0 f5f5 	udiv	r5, r0, r5
 800394a:	4fb3      	ldr	r7, [pc, #716]	; (8003c18 <UART_SetConfig+0x340>)
 800394c:	fba7 3505 	umull	r3, r5, r7, r5
 8003950:	096d      	lsrs	r5, r5, #5
 8003952:	012e      	lsls	r6, r5, #4
 8003954:	f7ff f84a 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003958:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800395c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003960:	6865      	ldr	r5, [r4, #4]
 8003962:	00ad      	lsls	r5, r5, #2
 8003964:	fbb0 faf5 	udiv	sl, r0, r5
 8003968:	f7ff f840 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 800396c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003970:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003974:	6865      	ldr	r5, [r4, #4]
 8003976:	00ad      	lsls	r5, r5, #2
 8003978:	fbb0 f5f5 	udiv	r5, r0, r5
 800397c:	fba7 3505 	umull	r3, r5, r7, r5
 8003980:	096d      	lsrs	r5, r5, #5
 8003982:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003986:	fb09 a515 	mls	r5, r9, r5, sl
 800398a:	012d      	lsls	r5, r5, #4
 800398c:	3532      	adds	r5, #50	; 0x32
 800398e:	fba7 3505 	umull	r3, r5, r7, r5
 8003992:	096d      	lsrs	r5, r5, #5
 8003994:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8003998:	4435      	add	r5, r6
 800399a:	f7ff f827 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 800399e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80039a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80039a6:	6866      	ldr	r6, [r4, #4]
 80039a8:	00b6      	lsls	r6, r6, #2
 80039aa:	fbb0 f6f6 	udiv	r6, r0, r6
 80039ae:	f7ff f81d 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 80039b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80039b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80039ba:	6863      	ldr	r3, [r4, #4]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	fbb0 f0f3 	udiv	r0, r0, r3
 80039c2:	fba7 3000 	umull	r3, r0, r7, r0
 80039c6:	0940      	lsrs	r0, r0, #5
 80039c8:	fb09 6910 	mls	r9, r9, r0, r6
 80039cc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80039d0:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80039d4:	fba7 3709 	umull	r3, r7, r7, r9
 80039d8:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80039dc:	442f      	add	r7, r5
 80039de:	f8c8 7008 	str.w	r7, [r8, #8]
 80039e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e6:	f8d4 8000 	ldr.w	r8, [r4]
 80039ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039ee:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80039f2:	4598      	cmp	r8, r3
 80039f4:	d05c      	beq.n	8003ab0 <UART_SetConfig+0x1d8>
 80039f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039fa:	4598      	cmp	r8, r3
 80039fc:	d058      	beq.n	8003ab0 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80039fe:	f7fe fff5 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003a02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a0a:	6865      	ldr	r5, [r4, #4]
 8003a0c:	006d      	lsls	r5, r5, #1
 8003a0e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003a12:	4f81      	ldr	r7, [pc, #516]	; (8003c18 <UART_SetConfig+0x340>)
 8003a14:	fba7 3505 	umull	r3, r5, r7, r5
 8003a18:	096d      	lsrs	r5, r5, #5
 8003a1a:	012e      	lsls	r6, r5, #4
 8003a1c:	f7fe ffe6 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003a20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a28:	6865      	ldr	r5, [r4, #4]
 8003a2a:	006d      	lsls	r5, r5, #1
 8003a2c:	fbb0 faf5 	udiv	sl, r0, r5
 8003a30:	f7fe ffdc 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003a34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a3c:	6865      	ldr	r5, [r4, #4]
 8003a3e:	006d      	lsls	r5, r5, #1
 8003a40:	fbb0 f5f5 	udiv	r5, r0, r5
 8003a44:	fba7 3505 	umull	r3, r5, r7, r5
 8003a48:	096d      	lsrs	r5, r5, #5
 8003a4a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003a4e:	fb09 a515 	mls	r5, r9, r5, sl
 8003a52:	00ed      	lsls	r5, r5, #3
 8003a54:	3532      	adds	r5, #50	; 0x32
 8003a56:	fba7 3505 	umull	r3, r5, r7, r5
 8003a5a:	096d      	lsrs	r5, r5, #5
 8003a5c:	006d      	lsls	r5, r5, #1
 8003a5e:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8003a62:	4435      	add	r5, r6
 8003a64:	f7fe ffc2 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003a68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a70:	6866      	ldr	r6, [r4, #4]
 8003a72:	0076      	lsls	r6, r6, #1
 8003a74:	fbb0 f6f6 	udiv	r6, r0, r6
 8003a78:	f7fe ffb8 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003a7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a84:	6863      	ldr	r3, [r4, #4]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8c:	fba7 2303 	umull	r2, r3, r7, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	fb09 6913 	mls	r9, r9, r3, r6
 8003a96:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8003a9a:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8003a9e:	fba7 3709 	umull	r3, r7, r7, r9
 8003aa2:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8003aa6:	442f      	add	r7, r5
 8003aa8:	f8c8 7008 	str.w	r7, [r8, #8]
 8003aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003ab0:	f7fe ffac 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8003ab4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ab8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003abc:	6865      	ldr	r5, [r4, #4]
 8003abe:	006d      	lsls	r5, r5, #1
 8003ac0:	fbb0 f5f5 	udiv	r5, r0, r5
 8003ac4:	4f54      	ldr	r7, [pc, #336]	; (8003c18 <UART_SetConfig+0x340>)
 8003ac6:	fba7 3505 	umull	r3, r5, r7, r5
 8003aca:	096d      	lsrs	r5, r5, #5
 8003acc:	012e      	lsls	r6, r5, #4
 8003ace:	f7fe ff9d 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8003ad2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ad6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ada:	6865      	ldr	r5, [r4, #4]
 8003adc:	006d      	lsls	r5, r5, #1
 8003ade:	fbb0 faf5 	udiv	sl, r0, r5
 8003ae2:	f7fe ff93 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8003ae6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003aea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003aee:	6865      	ldr	r5, [r4, #4]
 8003af0:	006d      	lsls	r5, r5, #1
 8003af2:	fbb0 f5f5 	udiv	r5, r0, r5
 8003af6:	fba7 3505 	umull	r3, r5, r7, r5
 8003afa:	096d      	lsrs	r5, r5, #5
 8003afc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003b00:	fb09 a515 	mls	r5, r9, r5, sl
 8003b04:	00ed      	lsls	r5, r5, #3
 8003b06:	3532      	adds	r5, #50	; 0x32
 8003b08:	fba7 3505 	umull	r3, r5, r7, r5
 8003b0c:	096d      	lsrs	r5, r5, #5
 8003b0e:	006d      	lsls	r5, r5, #1
 8003b10:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8003b14:	4435      	add	r5, r6
 8003b16:	f7fe ff79 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8003b1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b22:	6866      	ldr	r6, [r4, #4]
 8003b24:	0076      	lsls	r6, r6, #1
 8003b26:	fbb0 f6f6 	udiv	r6, r0, r6
 8003b2a:	f7fe ff6f 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8003b2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b36:	6863      	ldr	r3, [r4, #4]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3e:	fba7 2303 	umull	r2, r3, r7, r3
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	fb09 6913 	mls	r9, r9, r3, r6
 8003b48:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8003b4c:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8003b50:	fba7 3709 	umull	r3, r7, r7, r9
 8003b54:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8003b58:	442f      	add	r7, r5
 8003b5a:	f8c8 7008 	str.w	r7, [r8, #8]
 8003b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003b62:	f7fe ff53 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8003b66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b6e:	6865      	ldr	r5, [r4, #4]
 8003b70:	00ad      	lsls	r5, r5, #2
 8003b72:	fbb0 f5f5 	udiv	r5, r0, r5
 8003b76:	4f28      	ldr	r7, [pc, #160]	; (8003c18 <UART_SetConfig+0x340>)
 8003b78:	fba7 3505 	umull	r3, r5, r7, r5
 8003b7c:	096d      	lsrs	r5, r5, #5
 8003b7e:	012e      	lsls	r6, r5, #4
 8003b80:	f7fe ff44 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8003b84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b8c:	6865      	ldr	r5, [r4, #4]
 8003b8e:	00ad      	lsls	r5, r5, #2
 8003b90:	fbb0 faf5 	udiv	sl, r0, r5
 8003b94:	f7fe ff3a 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8003b98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ba0:	6865      	ldr	r5, [r4, #4]
 8003ba2:	00ad      	lsls	r5, r5, #2
 8003ba4:	fbb0 f5f5 	udiv	r5, r0, r5
 8003ba8:	fba7 3505 	umull	r3, r5, r7, r5
 8003bac:	096d      	lsrs	r5, r5, #5
 8003bae:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003bb2:	fb09 a515 	mls	r5, r9, r5, sl
 8003bb6:	012d      	lsls	r5, r5, #4
 8003bb8:	3532      	adds	r5, #50	; 0x32
 8003bba:	fba7 3505 	umull	r3, r5, r7, r5
 8003bbe:	096d      	lsrs	r5, r5, #5
 8003bc0:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8003bc4:	4435      	add	r5, r6
 8003bc6:	f7fe ff21 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8003bca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003bce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003bd2:	6866      	ldr	r6, [r4, #4]
 8003bd4:	00b6      	lsls	r6, r6, #2
 8003bd6:	fbb0 f6f6 	udiv	r6, r0, r6
 8003bda:	f7fe ff17 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8003bde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003be2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003be6:	6863      	ldr	r3, [r4, #4]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bee:	fba7 2303 	umull	r2, r3, r7, r3
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	fb09 6913 	mls	r9, r9, r3, r6
 8003bf8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8003bfc:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8003c00:	fba7 3709 	umull	r3, r7, r7, r9
 8003c04:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8003c08:	442f      	add	r7, r5
 8003c0a:	f8c8 7008 	str.w	r7, [r8, #8]
 8003c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c12:	bf00      	nop
 8003c14:	40011000 	.word	0x40011000
 8003c18:	51eb851f 	.word	0x51eb851f

08003c1c <UART_WaitOnFlagUntilTimeout>:
{
 8003c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c20:	4605      	mov	r5, r0
 8003c22:	460f      	mov	r7, r1
 8003c24:	4616      	mov	r6, r2
 8003c26:	4698      	mov	r8, r3
 8003c28:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003c2a:	682b      	ldr	r3, [r5, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	ea37 0303 	bics.w	r3, r7, r3
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	42b3      	cmp	r3, r6
 8003c3a:	d11e      	bne.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8003c3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003c40:	d0f3      	beq.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003c42:	b12c      	cbz	r4, 8003c50 <UART_WaitOnFlagUntilTimeout+0x34>
 8003c44:	f7fd fa10 	bl	8001068 <HAL_GetTick>
 8003c48:	eba0 0008 	sub.w	r0, r0, r8
 8003c4c:	4284      	cmp	r4, r0
 8003c4e:	d2ec      	bcs.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c50:	682a      	ldr	r2, [r5, #0]
 8003c52:	68d3      	ldr	r3, [r2, #12]
 8003c54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c58:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	682a      	ldr	r2, [r5, #0]
 8003c5c:	6953      	ldr	r3, [r2, #20]
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003c64:	2320      	movs	r3, #32
 8003c66:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8003c74:	2003      	movs	r0, #3
 8003c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8003c7a:	2000      	movs	r0, #0
}
 8003c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c80 <HAL_UART_Init>:
  if(huart == NULL)
 8003c80:	b358      	cbz	r0, 8003cda <HAL_UART_Init+0x5a>
{
 8003c82:	b510      	push	{r4, lr}
 8003c84:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8003c86:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003c8a:	b30b      	cbz	r3, 8003cd0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003c8c:	2324      	movs	r3, #36	; 0x24
 8003c8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003c92:	6822      	ldr	r2, [r4, #0]
 8003c94:	68d3      	ldr	r3, [r2, #12]
 8003c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c9a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f7ff fe1b 	bl	80038d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	6913      	ldr	r3, [r2, #16]
 8003ca6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003caa:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cac:	6822      	ldr	r2, [r4, #0]
 8003cae:	6953      	ldr	r3, [r2, #20]
 8003cb0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003cb4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	68d3      	ldr	r3, [r2, #12]
 8003cba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cbe:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003cca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003cce:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003cd0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003cd4:	f000 ffd4 	bl	8004c80 <HAL_UART_MspInit>
 8003cd8:	e7d8      	b.n	8003c8c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003cda:	2001      	movs	r0, #1
 8003cdc:	4770      	bx	lr

08003cde <HAL_UART_Transmit>:
{
 8003cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8003ce6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d004      	beq.n	8003cfa <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8003cf0:	2302      	movs	r3, #2
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	b002      	add	sp, #8
 8003cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	460d      	mov	r5, r1
 8003cfe:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 8003d00:	2900      	cmp	r1, #0
 8003d02:	d055      	beq.n	8003db0 <HAL_UART_Transmit+0xd2>
 8003d04:	2a00      	cmp	r2, #0
 8003d06:	d055      	beq.n	8003db4 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 8003d08:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_UART_Transmit+0x36>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e7ee      	b.n	8003cf2 <HAL_UART_Transmit+0x14>
 8003d14:	2301      	movs	r3, #1
 8003d16:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d1e:	2321      	movs	r3, #33	; 0x21
 8003d20:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003d24:	f7fd f9a0 	bl	8001068 <HAL_GetTick>
 8003d28:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003d2a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d2e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003d32:	e010      	b.n	8003d56 <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d34:	9600      	str	r6, [sp, #0]
 8003d36:	463b      	mov	r3, r7
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2180      	movs	r1, #128	; 0x80
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f7ff ff6d 	bl	8003c1c <UART_WaitOnFlagUntilTimeout>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d138      	bne.n	8003db8 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003d46:	6822      	ldr	r2, [r4, #0]
 8003d48:	882b      	ldrh	r3, [r5, #0]
 8003d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003d50:	6923      	ldr	r3, [r4, #16]
 8003d52:	b9cb      	cbnz	r3, 8003d88 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8003d54:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 8003d56:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	b1bb      	cbz	r3, 8003d8c <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 8003d5c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d66:	68a3      	ldr	r3, [r4, #8]
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6c:	d0e2      	beq.n	8003d34 <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d6e:	9600      	str	r6, [sp, #0]
 8003d70:	463b      	mov	r3, r7
 8003d72:	2200      	movs	r2, #0
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7ff ff50 	bl	8003c1c <UART_WaitOnFlagUntilTimeout>
 8003d7c:	b9f0      	cbnz	r0, 8003dbc <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	782a      	ldrb	r2, [r5, #0]
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	3501      	adds	r5, #1
 8003d86:	e7e6      	b.n	8003d56 <HAL_UART_Transmit+0x78>
          pData +=1U;
 8003d88:	3501      	adds	r5, #1
 8003d8a:	e7e4      	b.n	8003d56 <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d8c:	9600      	str	r6, [sp, #0]
 8003d8e:	463b      	mov	r3, r7
 8003d90:	2200      	movs	r2, #0
 8003d92:	2140      	movs	r1, #64	; 0x40
 8003d94:	4620      	mov	r0, r4
 8003d96:	f7ff ff41 	bl	8003c1c <UART_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	b108      	cbz	r0, 8003da2 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e7a7      	b.n	8003cf2 <HAL_UART_Transmit+0x14>
      huart->gState = HAL_UART_STATE_READY;
 8003da2:	2220      	movs	r2, #32
 8003da4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8003da8:	2200      	movs	r2, #0
 8003daa:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8003dae:	e7a0      	b.n	8003cf2 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e79e      	b.n	8003cf2 <HAL_UART_Transmit+0x14>
 8003db4:	2301      	movs	r3, #1
 8003db6:	e79c      	b.n	8003cf2 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e79a      	b.n	8003cf2 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e798      	b.n	8003cf2 <HAL_UART_Transmit+0x14>

08003dc0 <HAL_UART_Receive>:
{ 
 8003dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003dc8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	d003      	beq.n	8003dda <HAL_UART_Receive+0x1a>
    return HAL_BUSY;   
 8003dd2:	2002      	movs	r0, #2
}
 8003dd4:	b002      	add	sp, #8
 8003dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dda:	4604      	mov	r4, r0
 8003ddc:	460d      	mov	r5, r1
 8003dde:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 8003de0:	2900      	cmp	r1, #0
 8003de2:	d058      	beq.n	8003e96 <HAL_UART_Receive+0xd6>
 8003de4:	2a00      	cmp	r2, #0
 8003de6:	d058      	beq.n	8003e9a <HAL_UART_Receive+0xda>
    __HAL_LOCK(huart);
 8003de8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_UART_Receive+0x34>
 8003df0:	2002      	movs	r0, #2
 8003df2:	e7ef      	b.n	8003dd4 <HAL_UART_Receive+0x14>
 8003df4:	2301      	movs	r3, #1
 8003df6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dfe:	2322      	movs	r3, #34	; 0x22
 8003e00:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8003e04:	f7fd f930 	bl	8001068 <HAL_GetTick>
 8003e08:	4607      	mov	r7, r0
    huart->RxXferSize = Size; 
 8003e0a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e0e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 8003e12:	e01d      	b.n	8003e50 <HAL_UART_Receive+0x90>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e14:	9600      	str	r6, [sp, #0]
 8003e16:	463b      	mov	r3, r7
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2120      	movs	r1, #32
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f7ff fefd 	bl	8003c1c <UART_WaitOnFlagUntilTimeout>
 8003e22:	2800      	cmp	r0, #0
 8003e24:	d13b      	bne.n	8003e9e <HAL_UART_Receive+0xde>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003e26:	6923      	ldr	r3, [r4, #16]
 8003e28:	b933      	cbnz	r3, 8003e38 <HAL_UART_Receive+0x78>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e32:	f825 3b02 	strh.w	r3, [r5], #2
 8003e36:	e00b      	b.n	8003e50 <HAL_UART_Receive+0x90>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f825 3b01 	strh.w	r3, [r5], #1
 8003e42:	e005      	b.n	8003e50 <HAL_UART_Receive+0x90>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e4c:	702b      	strb	r3, [r5, #0]
 8003e4e:	3501      	adds	r5, #1
    while(huart->RxXferCount > 0U)
 8003e50:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	b1c3      	cbz	r3, 8003e88 <HAL_UART_Receive+0xc8>
      huart->RxXferCount--;
 8003e56:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e60:	68a3      	ldr	r3, [r4, #8]
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e66:	d0d5      	beq.n	8003e14 <HAL_UART_Receive+0x54>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e68:	9600      	str	r6, [sp, #0]
 8003e6a:	463b      	mov	r3, r7
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2120      	movs	r1, #32
 8003e70:	4620      	mov	r0, r4
 8003e72:	f7ff fed3 	bl	8003c1c <UART_WaitOnFlagUntilTimeout>
 8003e76:	b9a0      	cbnz	r0, 8003ea2 <HAL_UART_Receive+0xe2>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003e78:	6923      	ldr	r3, [r4, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e2      	bne.n	8003e44 <HAL_UART_Receive+0x84>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	702b      	strb	r3, [r5, #0]
 8003e84:	3501      	adds	r5, #1
 8003e86:	e7e3      	b.n	8003e50 <HAL_UART_Receive+0x90>
    huart->RxState = HAL_UART_STATE_READY;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8003e8e:	2000      	movs	r0, #0
 8003e90:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8003e94:	e79e      	b.n	8003dd4 <HAL_UART_Receive+0x14>
      return  HAL_ERROR;
 8003e96:	2001      	movs	r0, #1
 8003e98:	e79c      	b.n	8003dd4 <HAL_UART_Receive+0x14>
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	e79a      	b.n	8003dd4 <HAL_UART_Receive+0x14>
          return HAL_TIMEOUT;
 8003e9e:	2003      	movs	r0, #3
 8003ea0:	e798      	b.n	8003dd4 <HAL_UART_Receive+0x14>
          return HAL_TIMEOUT;
 8003ea2:	2003      	movs	r0, #3
 8003ea4:	e796      	b.n	8003dd4 <HAL_UART_Receive+0x14>
	...

08003ea8 <HAL_UART_Transmit_DMA>:
{
 8003ea8:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8003eaa:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8003eae:	b2e4      	uxtb	r4, r4
 8003eb0:	2c20      	cmp	r4, #32
 8003eb2:	d001      	beq.n	8003eb8 <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 8003eb4:	2002      	movs	r0, #2
 8003eb6:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL ) || (Size == 0))
 8003eb8:	2900      	cmp	r1, #0
 8003eba:	d031      	beq.n	8003f20 <HAL_UART_Transmit_DMA+0x78>
 8003ebc:	2a00      	cmp	r2, #0
 8003ebe:	d031      	beq.n	8003f24 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8003ec0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_UART_Transmit_DMA+0x24>
 8003ec8:	2002      	movs	r0, #2
}
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	4613      	mov	r3, r2
 8003ece:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 8003ed6:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8003ed8:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eda:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003edc:	2500      	movs	r5, #0
 8003ede:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee0:	2221      	movs	r2, #33	; 0x21
 8003ee2:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ee6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ee8:	480f      	ldr	r0, [pc, #60]	; (8003f28 <HAL_UART_Transmit_DMA+0x80>)
 8003eea:	63d0      	str	r0, [r2, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003eec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003eee:	480f      	ldr	r0, [pc, #60]	; (8003f2c <HAL_UART_Transmit_DMA+0x84>)
 8003ef0:	6410      	str	r0, [r2, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003ef2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003ef4:	480e      	ldr	r0, [pc, #56]	; (8003f30 <HAL_UART_Transmit_DMA+0x88>)
 8003ef6:	64d0      	str	r0, [r2, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 8003ef8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003efa:	6515      	str	r5, [r2, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003efc:	6822      	ldr	r2, [r4, #0]
 8003efe:	3204      	adds	r2, #4
 8003f00:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003f02:	f7fd fb8d 	bl	8001620 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f0c:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8003f0e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	6953      	ldr	r3, [r2, #20]
 8003f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1a:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003f20:	2001      	movs	r0, #1
 8003f22:	bd38      	pop	{r3, r4, r5, pc}
 8003f24:	2001      	movs	r0, #1
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	08003fdd 	.word	0x08003fdd
 8003f2c:	08004029 	.word	0x08004029
 8003f30:	08004111 	.word	0x08004111

08003f34 <HAL_UART_Receive_DMA>:
{  
 8003f34:	b530      	push	{r4, r5, lr}
 8003f36:	b083      	sub	sp, #12
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003f38:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8003f3c:	b2e4      	uxtb	r4, r4
 8003f3e:	2c20      	cmp	r4, #32
 8003f40:	d002      	beq.n	8003f48 <HAL_UART_Receive_DMA+0x14>
    return HAL_BUSY; 
 8003f42:	2002      	movs	r0, #2
}
 8003f44:	b003      	add	sp, #12
 8003f46:	bd30      	pop	{r4, r5, pc}
    if((pData == NULL ) || (Size == 0)) 
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	d03d      	beq.n	8003fc8 <HAL_UART_Receive_DMA+0x94>
 8003f4c:	2a00      	cmp	r2, #0
 8003f4e:	d03d      	beq.n	8003fcc <HAL_UART_Receive_DMA+0x98>
    __HAL_LOCK(huart);
 8003f50:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_UART_Receive_DMA+0x28>
 8003f58:	2002      	movs	r0, #2
 8003f5a:	e7f3      	b.n	8003f44 <HAL_UART_Receive_DMA+0x10>
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	460a      	mov	r2, r1
 8003f60:	4604      	mov	r4, r0
 8003f62:	2101      	movs	r1, #1
 8003f64:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8003f68:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f6a:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6c:	2500      	movs	r5, #0
 8003f6e:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f70:	2122      	movs	r1, #34	; 0x22
 8003f72:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f76:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003f78:	4815      	ldr	r0, [pc, #84]	; (8003fd0 <HAL_UART_Receive_DMA+0x9c>)
 8003f7a:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f7e:	4815      	ldr	r0, [pc, #84]	; (8003fd4 <HAL_UART_Receive_DMA+0xa0>)
 8003f80:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f84:	4814      	ldr	r0, [pc, #80]	; (8003fd8 <HAL_UART_Receive_DMA+0xa4>)
 8003f86:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8003f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f8a:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003f8c:	6821      	ldr	r1, [r4, #0]
 8003f8e:	3104      	adds	r1, #4
 8003f90:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003f92:	f7fd fb45 	bl	8001620 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003f96:	9501      	str	r5, [sp, #4]
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	9201      	str	r2, [sp, #4]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	9201      	str	r2, [sp, #4]
 8003fa2:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8003fa4:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fae:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	6822      	ldr	r2, [r4, #0]
 8003fb2:	6953      	ldr	r3, [r2, #20]
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	6953      	ldr	r3, [r2, #20]
 8003fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fc2:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	e7bd      	b.n	8003f44 <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 8003fc8:	2001      	movs	r0, #1
 8003fca:	e7bb      	b.n	8003f44 <HAL_UART_Receive_DMA+0x10>
 8003fcc:	2001      	movs	r0, #1
 8003fce:	e7b9      	b.n	8003f44 <HAL_UART_Receive_DMA+0x10>
 8003fd0:	08004033 	.word	0x08004033
 8003fd4:	08004107 	.word	0x08004107
 8003fd8:	08004111 	.word	0x08004111

08003fdc <UART_DMATransmitCplt>:
{
 8003fdc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fde:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003fe0:	6802      	ldr	r2, [r0, #0]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003fe8:	d10c      	bne.n	8004004 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0U;
 8003fea:	2200      	movs	r2, #0
 8003fec:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	694a      	ldr	r2, [r1, #20]
 8003ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff6:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68d3      	ldr	r3, [r2, #12]
 8003ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004000:	60d3      	str	r3, [r2, #12]
 8004002:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004004:	4618      	mov	r0, r3
 8004006:	f001 fa7f 	bl	8005508 <HAL_UART_TxCpltCallback>
 800400a:	bd08      	pop	{r3, pc}

0800400c <UART_EndTransmit_IT>:
{
 800400c:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800400e:	6801      	ldr	r1, [r0, #0]
 8004010:	68cb      	ldr	r3, [r1, #12]
 8004012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004016:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004018:	2320      	movs	r3, #32
 800401a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800401e:	f001 fa73 	bl	8005508 <HAL_UART_TxCpltCallback>
}
 8004022:	2000      	movs	r0, #0
 8004024:	bd08      	pop	{r3, pc}

08004026 <HAL_UART_TxHalfCpltCallback>:
{
 8004026:	4770      	bx	lr

08004028 <UART_DMATxHalfCplt>:
{
 8004028:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800402a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800402c:	f7ff fffb 	bl	8004026 <HAL_UART_TxHalfCpltCallback>
 8004030:	bd08      	pop	{r3, pc}

08004032 <UART_DMAReceiveCplt>:
{
 8004032:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004034:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004036:	6802      	ldr	r2, [r0, #0]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800403e:	d113      	bne.n	8004068 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8004040:	2200      	movs	r2, #0
 8004042:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004044:	6819      	ldr	r1, [r3, #0]
 8004046:	68ca      	ldr	r2, [r1, #12]
 8004048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800404c:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	694a      	ldr	r2, [r1, #20]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	694a      	ldr	r2, [r1, #20]
 800405c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004060:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8004068:	4618      	mov	r0, r3
 800406a:	f001 fb17 	bl	800569c <HAL_UART_RxCpltCallback>
 800406e:	bd08      	pop	{r3, pc}

08004070 <UART_Receive_IT>:
{
 8004070:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004072:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b22      	cmp	r3, #34	; 0x22
 800407a:	d001      	beq.n	8004080 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 800407c:	2002      	movs	r0, #2
 800407e:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004080:	6883      	ldr	r3, [r0, #8]
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d00f      	beq.n	80040a8 <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004088:	6903      	ldr	r3, [r0, #16]
 800408a:	bb0b      	cbnz	r3, 80040d0 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800408c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	6282      	str	r2, [r0, #40]	; 0x28
 8004092:	6802      	ldr	r2, [r0, #0]
 8004094:	6852      	ldr	r2, [r2, #4]
 8004096:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8004098:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29b      	uxth	r3, r3
 80040a0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80040a2:	b1f3      	cbz	r3, 80040e2 <UART_Receive_IT+0x72>
    return HAL_OK;
 80040a4:	2000      	movs	r0, #0
}
 80040a6:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80040a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 80040aa:	6903      	ldr	r3, [r0, #16]
 80040ac:	b943      	cbnz	r3, 80040c0 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040ae:	6803      	ldr	r3, [r0, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b6:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 80040b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80040ba:	3302      	adds	r3, #2
 80040bc:	6283      	str	r3, [r0, #40]	; 0x28
 80040be:	e7eb      	b.n	8004098 <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80040c0:	6803      	ldr	r3, [r0, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80040c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80040ca:	3301      	adds	r3, #1
 80040cc:	6283      	str	r3, [r0, #40]	; 0x28
 80040ce:	e7e3      	b.n	8004098 <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040d0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80040d2:	1c53      	adds	r3, r2, #1
 80040d4:	6283      	str	r3, [r0, #40]	; 0x28
 80040d6:	6803      	ldr	r3, [r0, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040de:	7013      	strb	r3, [r2, #0]
 80040e0:	e7da      	b.n	8004098 <UART_Receive_IT+0x28>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e2:	6802      	ldr	r2, [r0, #0]
 80040e4:	68d3      	ldr	r3, [r2, #12]
 80040e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ea:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ec:	6802      	ldr	r2, [r0, #0]
 80040ee:	6953      	ldr	r3, [r2, #20]
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80040f6:	2320      	movs	r3, #32
 80040f8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80040fc:	f001 face 	bl	800569c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8004100:	2000      	movs	r0, #0
 8004102:	bd08      	pop	{r3, pc}

08004104 <HAL_UART_RxHalfCpltCallback>:
{
 8004104:	4770      	bx	lr

08004106 <UART_DMARxHalfCplt>:
{
 8004106:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8004108:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800410a:	f7ff fffb 	bl	8004104 <HAL_UART_RxHalfCpltCallback>
 800410e:	bd08      	pop	{r3, pc}

08004110 <UART_DMAError>:
{
 8004110:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004112:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004118:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b21      	cmp	r3, #33	; 0x21
 8004120:	d010      	beq.n	8004144 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	695a      	ldr	r2, [r3, #20]
 8004126:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800412a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b22      	cmp	r3, #34	; 0x22
 8004132:	d011      	beq.n	8004158 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004136:	f043 0310 	orr.w	r3, r3, #16
 800413a:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800413c:	4620      	mov	r0, r4
 800413e:	f001 fb67 	bl	8005810 <HAL_UART_ErrorCallback>
 8004142:	bd10      	pop	{r4, pc}
 8004144:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004148:	2a00      	cmp	r2, #0
 800414a:	d0ea      	beq.n	8004122 <UART_DMAError+0x12>
    huart->TxXferCount = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004150:	4620      	mov	r0, r4
 8004152:	f7ff fb74 	bl	800383e <UART_EndTxTransfer>
 8004156:	e7e4      	b.n	8004122 <UART_DMAError+0x12>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004158:	2a00      	cmp	r2, #0
 800415a:	d0eb      	beq.n	8004134 <UART_DMAError+0x24>
    huart->RxXferCount = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004160:	4620      	mov	r0, r4
 8004162:	f7ff fb75 	bl	8003850 <UART_EndRxTransfer>
 8004166:	e7e5      	b.n	8004134 <UART_DMAError+0x24>

08004168 <HAL_UART_IRQHandler>:
{
 8004168:	b510      	push	{r4, lr}
 800416a:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800416c:	6802      	ldr	r2, [r0, #0]
 800416e:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004170:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004172:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8004174:	f013 000f 	ands.w	r0, r3, #15
 8004178:	d105      	bne.n	8004186 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800417a:	f013 0f20 	tst.w	r3, #32
 800417e:	d002      	beq.n	8004186 <HAL_UART_IRQHandler+0x1e>
 8004180:	f011 0f20 	tst.w	r1, #32
 8004184:	d153      	bne.n	800422e <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004186:	2800      	cmp	r0, #0
 8004188:	d067      	beq.n	800425a <HAL_UART_IRQHandler+0xf2>
 800418a:	f012 0201 	ands.w	r2, r2, #1
 800418e:	d102      	bne.n	8004196 <HAL_UART_IRQHandler+0x2e>
 8004190:	f411 7f90 	tst.w	r1, #288	; 0x120
 8004194:	d061      	beq.n	800425a <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004196:	f013 0f01 	tst.w	r3, #1
 800419a:	d006      	beq.n	80041aa <HAL_UART_IRQHandler+0x42>
 800419c:	f411 7f80 	tst.w	r1, #256	; 0x100
 80041a0:	d003      	beq.n	80041aa <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80041a4:	f040 0001 	orr.w	r0, r0, #1
 80041a8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041aa:	f013 0f04 	tst.w	r3, #4
 80041ae:	d004      	beq.n	80041ba <HAL_UART_IRQHandler+0x52>
 80041b0:	b11a      	cbz	r2, 80041ba <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80041b4:	f040 0002 	orr.w	r0, r0, #2
 80041b8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ba:	f013 0f02 	tst.w	r3, #2
 80041be:	d004      	beq.n	80041ca <HAL_UART_IRQHandler+0x62>
 80041c0:	b11a      	cbz	r2, 80041ca <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80041c4:	f040 0004 	orr.w	r0, r0, #4
 80041c8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ca:	f013 0f08 	tst.w	r3, #8
 80041ce:	d004      	beq.n	80041da <HAL_UART_IRQHandler+0x72>
 80041d0:	b11a      	cbz	r2, 80041da <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80041d4:	f042 0208 	orr.w	r2, r2, #8
 80041d8:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80041dc:	2a00      	cmp	r2, #0
 80041de:	d048      	beq.n	8004272 <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041e0:	f013 0f20 	tst.w	r3, #32
 80041e4:	d002      	beq.n	80041ec <HAL_UART_IRQHandler+0x84>
 80041e6:	f011 0f20 	tst.w	r1, #32
 80041ea:	d124      	bne.n	8004236 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80041f6:	f012 0f08 	tst.w	r2, #8
 80041fa:	d100      	bne.n	80041fe <HAL_UART_IRQHandler+0x96>
 80041fc:	b33b      	cbz	r3, 800424e <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 80041fe:	4620      	mov	r0, r4
 8004200:	f7ff fb26 	bl	8003850 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	f012 0f40 	tst.w	r2, #64	; 0x40
 800420c:	d01b      	beq.n	8004246 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004214:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8004216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004218:	b18b      	cbz	r3, 800423e <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800421a:	4a1a      	ldr	r2, [pc, #104]	; (8004284 <HAL_UART_IRQHandler+0x11c>)
 800421c:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800421e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004220:	f7fd fa38 	bl	8001694 <HAL_DMA_Abort_IT>
 8004224:	b328      	cbz	r0, 8004272 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004226:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004228:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800422a:	4798      	blx	r3
 800422c:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 800422e:	4620      	mov	r0, r4
 8004230:	f7ff ff1e 	bl	8004070 <UART_Receive_IT>
      return;
 8004234:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8004236:	4620      	mov	r0, r4
 8004238:	f7ff ff1a 	bl	8004070 <UART_Receive_IT>
 800423c:	e7d6      	b.n	80041ec <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 800423e:	4620      	mov	r0, r4
 8004240:	f001 fae6 	bl	8005810 <HAL_UART_ErrorCallback>
 8004244:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8004246:	4620      	mov	r0, r4
 8004248:	f001 fae2 	bl	8005810 <HAL_UART_ErrorCallback>
 800424c:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 800424e:	4620      	mov	r0, r4
 8004250:	f001 fade 	bl	8005810 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004254:	2300      	movs	r3, #0
 8004256:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004258:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800425a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800425e:	d002      	beq.n	8004266 <HAL_UART_IRQHandler+0xfe>
 8004260:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004264:	d106      	bne.n	8004274 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004266:	f013 0f40 	tst.w	r3, #64	; 0x40
 800426a:	d002      	beq.n	8004272 <HAL_UART_IRQHandler+0x10a>
 800426c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004270:	d104      	bne.n	800427c <HAL_UART_IRQHandler+0x114>
 8004272:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8004274:	4620      	mov	r0, r4
 8004276:	f7ff faf9 	bl	800386c <UART_Transmit_IT>
    return;
 800427a:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 800427c:	4620      	mov	r0, r4
 800427e:	f7ff fec5 	bl	800400c <UART_EndTransmit_IT>
    return;
 8004282:	e7f6      	b.n	8004272 <HAL_UART_IRQHandler+0x10a>
 8004284:	08004289 	.word	0x08004289

08004288 <UART_DMAAbortOnError>:
{
 8004288:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800428a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8004290:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004292:	f001 fabd 	bl	8005810 <HAL_UART_ErrorCallback>
 8004296:	bd08      	pop	{r3, pc}

08004298 <prj_main>:
#include "Prj_Main.h"
#include "THL_Library_Basic.h"
#include "THL_UsartTesters.h"

void prj_main(void) {
 8004298:	b508      	push	{r3, lr}
	testUsart();
 800429a:	f000 fffb 	bl	8005294 <testUsart>
 800429e:	bd08      	pop	{r3, pc}

080042a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a4:	2400      	movs	r4, #0
 80042a6:	9405      	str	r4, [sp, #20]
 80042a8:	9406      	str	r4, [sp, #24]
 80042aa:	9407      	str	r4, [sp, #28]
 80042ac:	9408      	str	r4, [sp, #32]
 80042ae:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042b0:	9401      	str	r4, [sp, #4]
 80042b2:	4b29      	ldr	r3, [pc, #164]	; (8004358 <MX_GPIO_Init+0xb8>)
 80042b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b6:	f042 0204 	orr.w	r2, r2, #4
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
 80042bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042be:	f002 0204 	and.w	r2, r2, #4
 80042c2:	9201      	str	r2, [sp, #4]
 80042c4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042c6:	9402      	str	r4, [sp, #8]
 80042c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
 80042d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80042d6:	9202      	str	r2, [sp, #8]
 80042d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042da:	9403      	str	r4, [sp, #12]
 80042dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
 80042e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e6:	f002 0201 	and.w	r2, r2, #1
 80042ea:	9203      	str	r2, [sp, #12]
 80042ec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ee:	9404      	str	r4, [sp, #16]
 80042f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f2:	f042 0202 	orr.w	r2, r2, #2
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	9304      	str	r3, [sp, #16]
 8004300:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004302:	4f16      	ldr	r7, [pc, #88]	; (800435c <MX_GPIO_Init+0xbc>)
 8004304:	4622      	mov	r2, r4
 8004306:	2120      	movs	r1, #32
 8004308:	4638      	mov	r0, r7
 800430a:	f7fd fba7 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800430e:	4d14      	ldr	r5, [pc, #80]	; (8004360 <MX_GPIO_Init+0xc0>)
 8004310:	4622      	mov	r2, r4
 8004312:	21c0      	movs	r1, #192	; 0xc0
 8004314:	4628      	mov	r0, r5
 8004316:	f7fd fba1 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800431a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800431e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <MX_GPIO_Init+0xc4>)
 8004322:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004326:	a905      	add	r1, sp, #20
 8004328:	480f      	ldr	r0, [pc, #60]	; (8004368 <MX_GPIO_Init+0xc8>)
 800432a:	f7fd fab5 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800432e:	2320      	movs	r3, #32
 8004330:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004332:	2601      	movs	r6, #1
 8004334:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004336:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004338:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800433a:	a905      	add	r1, sp, #20
 800433c:	4638      	mov	r0, r7
 800433e:	f7fd faab 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004342:	23c0      	movs	r3, #192	; 0xc0
 8004344:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004346:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004348:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800434a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434c:	a905      	add	r1, sp, #20
 800434e:	4628      	mov	r0, r5
 8004350:	f7fd faa2 	bl	8001898 <HAL_GPIO_Init>

}
 8004354:	b00b      	add	sp, #44	; 0x2c
 8004356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004358:	40023800 	.word	0x40023800
 800435c:	40020000 	.word	0x40020000
 8004360:	40020400 	.word	0x40020400
 8004364:	10210000 	.word	0x10210000
 8004368:	40020800 	.word	0x40020800

0800436c <MX_DMA_Init>:
{
 800436c:	b510      	push	{r4, lr}
 800436e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004370:	2400      	movs	r4, #0
 8004372:	9400      	str	r4, [sp, #0]
 8004374:	4b26      	ldr	r3, [pc, #152]	; (8004410 <MX_DMA_Init+0xa4>)
 8004376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004378:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
 800437e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004380:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004384:	9200      	str	r2, [sp, #0]
 8004386:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004388:	9401      	str	r4, [sp, #4]
 800438a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800438c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800439c:	4622      	mov	r2, r4
 800439e:	4621      	mov	r1, r4
 80043a0:	200b      	movs	r0, #11
 80043a2:	f7fd f805 	bl	80013b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80043a6:	200b      	movs	r0, #11
 80043a8:	f7fd f834 	bl	8001414 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80043ac:	4622      	mov	r2, r4
 80043ae:	4621      	mov	r1, r4
 80043b0:	200e      	movs	r0, #14
 80043b2:	f7fc fffd 	bl	80013b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80043b6:	200e      	movs	r0, #14
 80043b8:	f7fd f82c 	bl	8001414 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80043bc:	4622      	mov	r2, r4
 80043be:	4621      	mov	r1, r4
 80043c0:	200f      	movs	r0, #15
 80043c2:	f7fc fff5 	bl	80013b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80043c6:	200f      	movs	r0, #15
 80043c8:	f7fd f824 	bl	8001414 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80043cc:	4622      	mov	r2, r4
 80043ce:	4621      	mov	r1, r4
 80043d0:	2010      	movs	r0, #16
 80043d2:	f7fc ffed 	bl	80013b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80043d6:	2010      	movs	r0, #16
 80043d8:	f7fd f81c 	bl	8001414 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80043dc:	4622      	mov	r2, r4
 80043de:	4621      	mov	r1, r4
 80043e0:	2011      	movs	r0, #17
 80043e2:	f7fc ffe5 	bl	80013b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80043e6:	2011      	movs	r0, #17
 80043e8:	f7fd f814 	bl	8001414 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80043ec:	4622      	mov	r2, r4
 80043ee:	4621      	mov	r1, r4
 80043f0:	202f      	movs	r0, #47	; 0x2f
 80043f2:	f7fc ffdd 	bl	80013b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80043f6:	202f      	movs	r0, #47	; 0x2f
 80043f8:	f7fd f80c 	bl	8001414 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80043fc:	4622      	mov	r2, r4
 80043fe:	4621      	mov	r1, r4
 8004400:	2038      	movs	r0, #56	; 0x38
 8004402:	f7fc ffd5 	bl	80013b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004406:	2038      	movs	r0, #56	; 0x38
 8004408:	f7fd f804 	bl	8001414 <HAL_NVIC_EnableIRQ>
}
 800440c:	b002      	add	sp, #8
 800440e:	bd10      	pop	{r4, pc}
 8004410:	40023800 	.word	0x40023800

08004414 <MX_USART2_UART_Init>:
{
 8004414:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8004416:	4808      	ldr	r0, [pc, #32]	; (8004438 <MX_USART2_UART_Init+0x24>)
 8004418:	4b08      	ldr	r3, [pc, #32]	; (800443c <MX_USART2_UART_Init+0x28>)
 800441a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800441c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004420:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004422:	2300      	movs	r3, #0
 8004424:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004426:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004428:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800442a:	220c      	movs	r2, #12
 800442c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800442e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004430:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004432:	f7ff fc25 	bl	8003c80 <HAL_UART_Init>
 8004436:	bd08      	pop	{r3, pc}
 8004438:	20000ad8 	.word	0x20000ad8
 800443c:	40004400 	.word	0x40004400

08004440 <MX_TIM1_Init>:
{
 8004440:	b530      	push	{r4, r5, lr}
 8004442:	b095      	sub	sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004444:	2400      	movs	r4, #0
 8004446:	9412      	str	r4, [sp, #72]	; 0x48
 8004448:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800444a:	940b      	str	r4, [sp, #44]	; 0x2c
 800444c:	940c      	str	r4, [sp, #48]	; 0x30
 800444e:	940d      	str	r4, [sp, #52]	; 0x34
 8004450:	940e      	str	r4, [sp, #56]	; 0x38
 8004452:	940f      	str	r4, [sp, #60]	; 0x3c
 8004454:	9410      	str	r4, [sp, #64]	; 0x40
 8004456:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004458:	9407      	str	r4, [sp, #28]
 800445a:	9408      	str	r4, [sp, #32]
 800445c:	9409      	str	r4, [sp, #36]	; 0x24
 800445e:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004460:	9400      	str	r4, [sp, #0]
 8004462:	9401      	str	r4, [sp, #4]
 8004464:	9402      	str	r4, [sp, #8]
 8004466:	9403      	str	r4, [sp, #12]
 8004468:	9404      	str	r4, [sp, #16]
 800446a:	9405      	str	r4, [sp, #20]
 800446c:	9406      	str	r4, [sp, #24]
  htim1.Instance = TIM1;
 800446e:	4d23      	ldr	r5, [pc, #140]	; (80044fc <MX_TIM1_Init+0xbc>)
 8004470:	4b23      	ldr	r3, [pc, #140]	; (8004500 <MX_TIM1_Init+0xc0>)
 8004472:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8004474:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004476:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 8004478:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800447a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800447c:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800447e:	4628      	mov	r0, r5
 8004480:	f7fe ffb4 	bl	80033ec <HAL_TIM_PWM_Init>
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8004484:	4628      	mov	r0, r5
 8004486:	f7fe ffca 	bl	800341e <HAL_TIM_IC_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800448a:	9412      	str	r4, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800448c:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800448e:	a912      	add	r1, sp, #72	; 0x48
 8004490:	4628      	mov	r0, r5
 8004492:	f7ff f97f 	bl	8003794 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004496:	2360      	movs	r3, #96	; 0x60
 8004498:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800449a:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800449c:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800449e:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044a0:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80044a2:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044a4:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044a6:	4622      	mov	r2, r4
 80044a8:	a90b      	add	r1, sp, #44	; 0x2c
 80044aa:	4628      	mov	r0, r5
 80044ac:	f7ff f904 	bl	80036b8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80044b0:	2204      	movs	r2, #4
 80044b2:	a90b      	add	r1, sp, #44	; 0x2c
 80044b4:	4628      	mov	r0, r5
 80044b6:	f7ff f8ff 	bl	80036b8 <HAL_TIM_PWM_ConfigChannel>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80044ba:	9407      	str	r4, [sp, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80044bc:	2301      	movs	r3, #1
 80044be:	9308      	str	r3, [sp, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80044c0:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 80044c2:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80044c4:	2208      	movs	r2, #8
 80044c6:	a907      	add	r1, sp, #28
 80044c8:	4628      	mov	r0, r5
 80044ca:	f7ff f85d 	bl	8003588 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80044ce:	220c      	movs	r2, #12
 80044d0:	a907      	add	r1, sp, #28
 80044d2:	4628      	mov	r0, r5
 80044d4:	f7ff f858 	bl	8003588 <HAL_TIM_IC_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80044d8:	9400      	str	r4, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80044da:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80044dc:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80044de:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80044e0:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044e6:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044e8:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80044ea:	4669      	mov	r1, sp
 80044ec:	4628      	mov	r0, r5
 80044ee:	f7ff f97a 	bl	80037e6 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 80044f2:	4628      	mov	r0, r5
 80044f4:	f000 fb96 	bl	8004c24 <HAL_TIM_MspPostInit>
}
 80044f8:	b015      	add	sp, #84	; 0x54
 80044fa:	bd30      	pop	{r4, r5, pc}
 80044fc:	20000a3c 	.word	0x20000a3c
 8004500:	40010000 	.word	0x40010000

08004504 <MX_TIM5_Init>:
{
 8004504:	b530      	push	{r4, r5, lr}
 8004506:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 8004508:	2224      	movs	r2, #36	; 0x24
 800450a:	2100      	movs	r1, #0
 800450c:	a803      	add	r0, sp, #12
 800450e:	f001 f9e4 	bl	80058da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004512:	2400      	movs	r4, #0
 8004514:	9401      	str	r4, [sp, #4]
 8004516:	9402      	str	r4, [sp, #8]
  htim5.Instance = TIM5;
 8004518:	4d0b      	ldr	r5, [pc, #44]	; (8004548 <MX_TIM5_Init+0x44>)
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <MX_TIM5_Init+0x48>)
 800451c:	602b      	str	r3, [r5, #0]
  htim5.Init.Prescaler = 0;
 800451e:	606c      	str	r4, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004520:	60ac      	str	r4, [r5, #8]
  htim5.Init.Period = 0;
 8004522:	60ec      	str	r4, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004524:	612c      	str	r4, [r5, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004526:	2301      	movs	r3, #1
 8004528:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800452a:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800452c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800452e:	a903      	add	r1, sp, #12
 8004530:	4628      	mov	r0, r5
 8004532:	f7fe ff8d 	bl	8003450 <HAL_TIM_Encoder_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004536:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004538:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800453a:	a901      	add	r1, sp, #4
 800453c:	4628      	mov	r0, r5
 800453e:	f7ff f929 	bl	8003794 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004542:	b00d      	add	sp, #52	; 0x34
 8004544:	bd30      	pop	{r4, r5, pc}
 8004546:	bf00      	nop
 8004548:	200008f8 	.word	0x200008f8
 800454c:	40000c00 	.word	0x40000c00

08004550 <MX_I2C1_Init>:
{
 8004550:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8004552:	4809      	ldr	r0, [pc, #36]	; (8004578 <MX_I2C1_Init+0x28>)
 8004554:	4b09      	ldr	r3, [pc, #36]	; (800457c <MX_I2C1_Init+0x2c>)
 8004556:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004558:	4b09      	ldr	r3, [pc, #36]	; (8004580 <MX_I2C1_Init+0x30>)
 800455a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800455c:	2300      	movs	r3, #0
 800455e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 12;
 8004560:	220c      	movs	r2, #12
 8004562:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004564:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004568:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800456a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800456c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800456e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004570:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004572:	f7fd fbcb 	bl	8001d0c <HAL_I2C_Init>
 8004576:	bd08      	pop	{r3, pc}
 8004578:	200007f0 	.word	0x200007f0
 800457c:	40005400 	.word	0x40005400
 8004580:	000186a0 	.word	0x000186a0

08004584 <MX_I2C2_Init>:
{
 8004584:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8004586:	480a      	ldr	r0, [pc, #40]	; (80045b0 <MX_I2C2_Init+0x2c>)
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <MX_I2C2_Init+0x30>)
 800458a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 10000;
 800458c:	f242 7310 	movw	r3, #10000	; 0x2710
 8004590:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004592:	2300      	movs	r3, #0
 8004594:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 6;
 8004596:	2206      	movs	r2, #6
 8004598:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800459a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800459e:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045a0:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80045a2:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045a4:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045a6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80045a8:	f7fd fbb0 	bl	8001d0c <HAL_I2C_Init>
 80045ac:	bd08      	pop	{r3, pc}
 80045ae:	bf00      	nop
 80045b0:	20000844 	.word	0x20000844
 80045b4:	40005800 	.word	0x40005800

080045b8 <MX_SPI2_Init>:
{
 80045b8:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 80045ba:	480b      	ldr	r0, [pc, #44]	; (80045e8 <MX_SPI2_Init+0x30>)
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <MX_SPI2_Init+0x34>)
 80045be:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80045c0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80045c4:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80045c6:	2300      	movs	r3, #0
 80045c8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80045ca:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045cc:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045ce:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80045d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80045d4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045d6:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045d8:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80045da:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045dc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80045de:	230a      	movs	r3, #10
 80045e0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80045e2:	f7fe fcc5 	bl	8002f70 <HAL_SPI_Init>
 80045e6:	bd08      	pop	{r3, pc}
 80045e8:	20000738 	.word	0x20000738
 80045ec:	40003800 	.word	0x40003800

080045f0 <MX_ADC1_Init>:
{
 80045f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80045f4:	2300      	movs	r3, #0
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	9302      	str	r3, [sp, #8]
 80045fc:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 80045fe:	4c1c      	ldr	r4, [pc, #112]	; (8004670 <MX_ADC1_Init+0x80>)
 8004600:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <MX_ADC1_Init+0x84>)
 8004602:	6022      	str	r2, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004604:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004608:	6062      	str	r2, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800460a:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800460c:	2501      	movs	r5, #1
 800460e:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004610:	61a5      	str	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004612:	6223      	str	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004614:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004616:	4a18      	ldr	r2, [pc, #96]	; (8004678 <MX_ADC1_Init+0x88>)
 8004618:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800461a:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 4;
 800461c:	2604      	movs	r6, #4
 800461e:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004620:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004622:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004624:	4620      	mov	r0, r4
 8004626:	f7fc fdbd 	bl	80011a4 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 800462a:	2306      	movs	r3, #6
 800462c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800462e:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004630:	2703      	movs	r7, #3
 8004632:	9702      	str	r7, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004634:	4669      	mov	r1, sp
 8004636:	4620      	mov	r0, r4
 8004638:	f7fc fdde 	bl	80011f8 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_7;
 800463c:	2507      	movs	r5, #7
 800463e:	9500      	str	r5, [sp, #0]
  sConfig.Rank = 2;
 8004640:	2302      	movs	r3, #2
 8004642:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004644:	4669      	mov	r1, sp
 8004646:	4620      	mov	r0, r4
 8004648:	f7fc fdd6 	bl	80011f8 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 800464c:	2308      	movs	r3, #8
 800464e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8004650:	9701      	str	r7, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004652:	4669      	mov	r1, sp
 8004654:	4620      	mov	r0, r4
 8004656:	f7fc fdcf 	bl	80011f8 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <MX_ADC1_Init+0x8c>)
 800465c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 800465e:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004660:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004662:	4669      	mov	r1, sp
 8004664:	4620      	mov	r0, r4
 8004666:	f7fc fdc7 	bl	80011f8 <HAL_ADC_ConfigChannel>
}
 800466a:	b005      	add	sp, #20
 800466c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800466e:	bf00      	nop
 8004670:	20000934 	.word	0x20000934
 8004674:	40012000 	.word	0x40012000
 8004678:	0f000001 	.word	0x0f000001
 800467c:	10000012 	.word	0x10000012

08004680 <SystemClock_Config>:
{
 8004680:	b530      	push	{r4, r5, lr}
 8004682:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004684:	2234      	movs	r2, #52	; 0x34
 8004686:	2100      	movs	r1, #0
 8004688:	a807      	add	r0, sp, #28
 800468a:	f001 f926 	bl	80058da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800468e:	2400      	movs	r4, #0
 8004690:	9402      	str	r4, [sp, #8]
 8004692:	9403      	str	r4, [sp, #12]
 8004694:	9404      	str	r4, [sp, #16]
 8004696:	9405      	str	r4, [sp, #20]
 8004698:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800469a:	9400      	str	r4, [sp, #0]
 800469c:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <SystemClock_Config+0x94>)
 800469e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046b0:	9401      	str	r4, [sp, #4]
 80046b2:	4b19      	ldr	r3, [pc, #100]	; (8004718 <SystemClock_Config+0x98>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046c6:	2301      	movs	r3, #1
 80046c8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046ce:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046d0:	2502      	movs	r5, #2
 80046d2:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046d8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80046da:	2304      	movs	r3, #4
 80046dc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80046de:	23b4      	movs	r3, #180	; 0xb4
 80046e0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046e2:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80046e4:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80046e6:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046e8:	a807      	add	r0, sp, #28
 80046ea:	f7fe fa5f 	bl	8002bac <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80046ee:	f7fe f88b 	bl	8002808 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046f2:	230f      	movs	r3, #15
 80046f4:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046f6:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046f8:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80046fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80046fe:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004704:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004706:	2105      	movs	r1, #5
 8004708:	a802      	add	r0, sp, #8
 800470a:	f7fe f8bd 	bl	8002888 <HAL_RCC_ClockConfig>
}
 800470e:	b015      	add	sp, #84	; 0x54
 8004710:	bd30      	pop	{r4, r5, pc}
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800
 8004718:	40007000 	.word	0x40007000

0800471c <main>:
{
 800471c:	b508      	push	{r3, lr}
  HAL_Init();
 800471e:	f7fc fc7d 	bl	800101c <HAL_Init>
  SystemClock_Config();
 8004722:	f7ff ffad 	bl	8004680 <SystemClock_Config>
  MX_GPIO_Init();
 8004726:	f7ff fdbb 	bl	80042a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800472a:	f7ff fe1f 	bl	800436c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800472e:	f7ff fe71 	bl	8004414 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004732:	f7ff fe85 	bl	8004440 <MX_TIM1_Init>
  MX_TIM5_Init();
 8004736:	f7ff fee5 	bl	8004504 <MX_TIM5_Init>
  MX_I2C1_Init();
 800473a:	f7ff ff09 	bl	8004550 <MX_I2C1_Init>
  MX_I2C2_Init();
 800473e:	f7ff ff21 	bl	8004584 <MX_I2C2_Init>
  MX_SPI2_Init();
 8004742:	f7ff ff39 	bl	80045b8 <MX_SPI2_Init>
  MX_ADC1_Init();
 8004746:	f7ff ff53 	bl	80045f0 <MX_ADC1_Init>
  prj_main();
 800474a:	f7ff fda5 	bl	8004298 <prj_main>
 800474e:	e7fe      	b.n	800474e <main+0x32>

08004750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004750:	4770      	bx	lr
	...

08004754 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004754:	b500      	push	{lr}
 8004756:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004758:	2100      	movs	r1, #0
 800475a:	9100      	str	r1, [sp, #0]
 800475c:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <HAL_MspInit+0x3c>)
 800475e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
 8004766:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004768:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800476c:	9200      	str	r2, [sp, #0]
 800476e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004770:	9101      	str	r1, [sp, #4]
 8004772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004774:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004784:	2007      	movs	r0, #7
 8004786:	f7fc fe01 	bl	800138c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800478a:	b003      	add	sp, #12
 800478c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004790:	40023800 	.word	0x40023800

08004794 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	2300      	movs	r3, #0
 800479a:	9303      	str	r3, [sp, #12]
 800479c:	9304      	str	r3, [sp, #16]
 800479e:	9305      	str	r3, [sp, #20]
 80047a0:	9306      	str	r3, [sp, #24]
 80047a2:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80047a4:	6802      	ldr	r2, [r0, #0]
 80047a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047aa:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d001      	beq.n	80047b6 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80047b2:	b008      	add	sp, #32
 80047b4:	bd70      	pop	{r4, r5, r6, pc}
 80047b6:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80047b8:	2500      	movs	r5, #0
 80047ba:	9500      	str	r5, [sp, #0]
 80047bc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80047c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44
 80047c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ca:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80047ce:	9200      	str	r2, [sp, #0]
 80047d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d2:	9501      	str	r5, [sp, #4]
 80047d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	631a      	str	r2, [r3, #48]	; 0x30
 80047dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047de:	f002 0201 	and.w	r2, r2, #1
 80047e2:	9201      	str	r2, [sp, #4]
 80047e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e6:	9502      	str	r5, [sp, #8]
 80047e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ea:	f042 0202 	orr.w	r2, r2, #2
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	9302      	str	r3, [sp, #8]
 80047f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047fa:	23c0      	movs	r3, #192	; 0xc0
 80047fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047fe:	2603      	movs	r6, #3
 8004800:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004802:	a903      	add	r1, sp, #12
 8004804:	4814      	ldr	r0, [pc, #80]	; (8004858 <HAL_ADC_MspInit+0xc4>)
 8004806:	f7fd f847 	bl	8001898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800480a:	2301      	movs	r3, #1
 800480c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800480e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004812:	a903      	add	r1, sp, #12
 8004814:	4811      	ldr	r0, [pc, #68]	; (800485c <HAL_ADC_MspInit+0xc8>)
 8004816:	f7fd f83f 	bl	8001898 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800481a:	4811      	ldr	r0, [pc, #68]	; (8004860 <HAL_ADC_MspInit+0xcc>)
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <HAL_ADC_MspInit+0xd0>)
 800481e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004820:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004822:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004824:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800482a:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800482c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004830:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004836:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800483c:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800483e:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004840:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004842:	f7fc fe85 	bl	8001550 <HAL_DMA_Init>
 8004846:	b918      	cbnz	r0, 8004850 <HAL_ADC_MspInit+0xbc>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_ADC_MspInit+0xcc>)
 800484a:	63a3      	str	r3, [r4, #56]	; 0x38
 800484c:	639c      	str	r4, [r3, #56]	; 0x38
}
 800484e:	e7b0      	b.n	80047b2 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8004850:	f7ff ff7e 	bl	8004750 <Error_Handler>
 8004854:	e7f8      	b.n	8004848 <HAL_ADC_MspInit+0xb4>
 8004856:	bf00      	nop
 8004858:	40020000 	.word	0x40020000
 800485c:	40020400 	.word	0x40020400
 8004860:	200009dc 	.word	0x200009dc
 8004864:	40026410 	.word	0x40026410

08004868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800486c:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800486e:	2300      	movs	r3, #0
 8004870:	9305      	str	r3, [sp, #20]
 8004872:	9306      	str	r3, [sp, #24]
 8004874:	9307      	str	r3, [sp, #28]
 8004876:	9308      	str	r3, [sp, #32]
 8004878:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 800487a:	6803      	ldr	r3, [r0, #0]
 800487c:	4a5b      	ldr	r2, [pc, #364]	; (80049ec <HAL_I2C_MspInit+0x184>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d005      	beq.n	800488e <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8004882:	4a5b      	ldr	r2, [pc, #364]	; (80049f0 <HAL_I2C_MspInit+0x188>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d06f      	beq.n	8004968 <HAL_I2C_MspInit+0x100>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004888:	b00b      	add	sp, #44	; 0x2c
 800488a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800488e:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004890:	2500      	movs	r5, #0
 8004892:	9500      	str	r5, [sp, #0]
 8004894:	4e57      	ldr	r6, [pc, #348]	; (80049f4 <HAL_I2C_MspInit+0x18c>)
 8004896:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004898:	f043 0302 	orr.w	r3, r3, #2
 800489c:	6333      	str	r3, [r6, #48]	; 0x30
 800489e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048ac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048ae:	2312      	movs	r3, #18
 80048b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b2:	2303      	movs	r3, #3
 80048b4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048b6:	2304      	movs	r3, #4
 80048b8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ba:	a905      	add	r1, sp, #20
 80048bc:	484e      	ldr	r0, [pc, #312]	; (80049f8 <HAL_I2C_MspInit+0x190>)
 80048be:	f7fc ffeb 	bl	8001898 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048c2:	9501      	str	r5, [sp, #4]
 80048c4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80048c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048ca:	6433      	str	r3, [r6, #64]	; 0x40
 80048cc:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80048ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80048d6:	4849      	ldr	r0, [pc, #292]	; (80049fc <HAL_I2C_MspInit+0x194>)
 80048d8:	4b49      	ldr	r3, [pc, #292]	; (8004a00 <HAL_I2C_MspInit+0x198>)
 80048da:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80048dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048e0:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048e2:	2340      	movs	r3, #64	; 0x40
 80048e4:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048e6:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ec:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048ee:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048f0:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80048f2:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80048f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80048f8:	6203      	str	r3, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048fa:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80048fc:	f7fc fe28 	bl	8001550 <HAL_DMA_Init>
 8004900:	bb60      	cbnz	r0, 800495c <HAL_I2C_MspInit+0xf4>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004902:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <HAL_I2C_MspInit+0x194>)
 8004904:	6363      	str	r3, [r4, #52]	; 0x34
 8004906:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004908:	483e      	ldr	r0, [pc, #248]	; (8004a04 <HAL_I2C_MspInit+0x19c>)
 800490a:	4b3f      	ldr	r3, [pc, #252]	; (8004a08 <HAL_I2C_MspInit+0x1a0>)
 800490c:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800490e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004912:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004914:	2300      	movs	r3, #0
 8004916:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004918:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800491a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800491e:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004920:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004922:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004924:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004926:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800492a:	6202      	str	r2, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800492c:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800492e:	f7fc fe0f 	bl	8001550 <HAL_DMA_Init>
 8004932:	b9b0      	cbnz	r0, 8004962 <HAL_I2C_MspInit+0xfa>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004934:	4b33      	ldr	r3, [pc, #204]	; (8004a04 <HAL_I2C_MspInit+0x19c>)
 8004936:	63a3      	str	r3, [r4, #56]	; 0x38
 8004938:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800493a:	2200      	movs	r2, #0
 800493c:	4611      	mov	r1, r2
 800493e:	201f      	movs	r0, #31
 8004940:	f7fc fd36 	bl	80013b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004944:	201f      	movs	r0, #31
 8004946:	f7fc fd65 	bl	8001414 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800494a:	2200      	movs	r2, #0
 800494c:	4611      	mov	r1, r2
 800494e:	2020      	movs	r0, #32
 8004950:	f7fc fd2e 	bl	80013b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004954:	2020      	movs	r0, #32
 8004956:	f7fc fd5d 	bl	8001414 <HAL_NVIC_EnableIRQ>
 800495a:	e795      	b.n	8004888 <HAL_I2C_MspInit+0x20>
      Error_Handler();
 800495c:	f7ff fef8 	bl	8004750 <Error_Handler>
 8004960:	e7cf      	b.n	8004902 <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 8004962:	f7ff fef5 	bl	8004750 <Error_Handler>
 8004966:	e7e5      	b.n	8004934 <HAL_I2C_MspInit+0xcc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004968:	2500      	movs	r5, #0
 800496a:	9502      	str	r5, [sp, #8]
 800496c:	4c21      	ldr	r4, [pc, #132]	; (80049f4 <HAL_I2C_MspInit+0x18c>)
 800496e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004970:	f043 0302 	orr.w	r3, r3, #2
 8004974:	6323      	str	r3, [r4, #48]	; 0x30
 8004976:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	9302      	str	r3, [sp, #8]
 800497e:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004980:	9503      	str	r5, [sp, #12]
 8004982:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004984:	f043 0304 	orr.w	r3, r3, #4
 8004988:	6323      	str	r3, [r4, #48]	; 0x30
 800498a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	9303      	str	r3, [sp, #12]
 8004992:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004998:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800499a:	f04f 0912 	mov.w	r9, #18
 800499e:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049a2:	f04f 0801 	mov.w	r8, #1
 80049a6:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049aa:	2703      	movs	r7, #3
 80049ac:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80049ae:	2604      	movs	r6, #4
 80049b0:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b2:	a905      	add	r1, sp, #20
 80049b4:	4810      	ldr	r0, [pc, #64]	; (80049f8 <HAL_I2C_MspInit+0x190>)
 80049b6:	f7fc ff6f 	bl	8001898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80049ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049c0:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049c4:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049c8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80049ca:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049cc:	a905      	add	r1, sp, #20
 80049ce:	480f      	ldr	r0, [pc, #60]	; (8004a0c <HAL_I2C_MspInit+0x1a4>)
 80049d0:	f7fc ff62 	bl	8001898 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80049d4:	9504      	str	r5, [sp, #16]
 80049d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049dc:	6423      	str	r3, [r4, #64]	; 0x40
 80049de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e4:	9304      	str	r3, [sp, #16]
 80049e6:	9b04      	ldr	r3, [sp, #16]
}
 80049e8:	e74e      	b.n	8004888 <HAL_I2C_MspInit+0x20>
 80049ea:	bf00      	nop
 80049ec:	40005400 	.word	0x40005400
 80049f0:	40005800 	.word	0x40005800
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40020400 	.word	0x40020400
 80049fc:	20000790 	.word	0x20000790
 8004a00:	400260b8 	.word	0x400260b8
 8004a04:	20000a78 	.word	0x20000a78
 8004a08:	40026010 	.word	0x40026010
 8004a0c:	40020800 	.word	0x40020800

08004a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a14:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a16:	2300      	movs	r3, #0
 8004a18:	9303      	str	r3, [sp, #12]
 8004a1a:	9304      	str	r3, [sp, #16]
 8004a1c:	9305      	str	r3, [sp, #20]
 8004a1e:	9306      	str	r3, [sp, #24]
 8004a20:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8004a22:	6802      	ldr	r2, [r0, #0]
 8004a24:	4b43      	ldr	r3, [pc, #268]	; (8004b34 <HAL_SPI_MspInit+0x124>)
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d002      	beq.n	8004a30 <HAL_SPI_MspInit+0x20>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004a2a:	b009      	add	sp, #36	; 0x24
 8004a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a30:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004a32:	2500      	movs	r5, #0
 8004a34:	9500      	str	r5, [sp, #0]
 8004a36:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
 8004a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a44:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004a48:	9200      	str	r2, [sp, #0]
 8004a4a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a4c:	9501      	str	r5, [sp, #4]
 8004a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a50:	f042 0204 	orr.w	r2, r2, #4
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
 8004a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a58:	f002 0204 	and.w	r2, r2, #4
 8004a5c:	9201      	str	r2, [sp, #4]
 8004a5e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a60:	9502      	str	r5, [sp, #8]
 8004a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a64:	f042 0202 	orr.w	r2, r2, #2
 8004a68:	631a      	str	r2, [r3, #48]	; 0x30
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	9302      	str	r3, [sp, #8]
 8004a72:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004a74:	2602      	movs	r6, #2
 8004a76:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a78:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a7a:	2703      	movs	r7, #3
 8004a7c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004a7e:	2307      	movs	r3, #7
 8004a80:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a82:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8004b4c <HAL_SPI_MspInit+0x13c>
 8004a86:	a903      	add	r1, sp, #12
 8004a88:	4648      	mov	r0, r9
 8004a8a:	f7fc ff05 	bl	8001898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a8e:	2304      	movs	r3, #4
 8004a90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a92:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a96:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a98:	f04f 0805 	mov.w	r8, #5
 8004a9c:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aa0:	a903      	add	r1, sp, #12
 8004aa2:	4648      	mov	r0, r9
 8004aa4:	f7fc fef8 	bl	8001898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004aa8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004aac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aae:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab2:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ab4:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ab8:	a903      	add	r1, sp, #12
 8004aba:	481f      	ldr	r0, [pc, #124]	; (8004b38 <HAL_SPI_MspInit+0x128>)
 8004abc:	f7fc feec 	bl	8001898 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004ac0:	481e      	ldr	r0, [pc, #120]	; (8004b3c <HAL_SPI_MspInit+0x12c>)
 8004ac2:	4b1f      	ldr	r3, [pc, #124]	; (8004b40 <HAL_SPI_MspInit+0x130>)
 8004ac4:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8004ac6:	6045      	str	r5, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ac8:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aca:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad0:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ad2:	6145      	str	r5, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ad4:	6185      	str	r5, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004ad6:	61c5      	str	r5, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ad8:	6205      	str	r5, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ada:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004adc:	f7fc fd38 	bl	8001550 <HAL_DMA_Init>
 8004ae0:	bb08      	cbnz	r0, 8004b26 <HAL_SPI_MspInit+0x116>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004ae2:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <HAL_SPI_MspInit+0x12c>)
 8004ae4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004ae6:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004ae8:	4816      	ldr	r0, [pc, #88]	; (8004b44 <HAL_SPI_MspInit+0x134>)
 8004aea:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <HAL_SPI_MspInit+0x138>)
 8004aec:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004af2:	2240      	movs	r2, #64	; 0x40
 8004af4:	6082      	str	r2, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004af6:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004afc:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004afe:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b00:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004b02:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b04:	6203      	str	r3, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b06:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004b08:	f7fc fd22 	bl	8001550 <HAL_DMA_Init>
 8004b0c:	b970      	cbnz	r0, 8004b2c <HAL_SPI_MspInit+0x11c>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <HAL_SPI_MspInit+0x134>)
 8004b10:	64a3      	str	r3, [r4, #72]	; 0x48
 8004b12:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004b14:	2200      	movs	r2, #0
 8004b16:	4611      	mov	r1, r2
 8004b18:	2024      	movs	r0, #36	; 0x24
 8004b1a:	f7fc fc49 	bl	80013b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004b1e:	2024      	movs	r0, #36	; 0x24
 8004b20:	f7fc fc78 	bl	8001414 <HAL_NVIC_EnableIRQ>
}
 8004b24:	e781      	b.n	8004a2a <HAL_SPI_MspInit+0x1a>
      Error_Handler();
 8004b26:	f7ff fe13 	bl	8004750 <Error_Handler>
 8004b2a:	e7da      	b.n	8004ae2 <HAL_SPI_MspInit+0xd2>
      Error_Handler();
 8004b2c:	f7ff fe10 	bl	8004750 <Error_Handler>
 8004b30:	e7ed      	b.n	8004b0e <HAL_SPI_MspInit+0xfe>
 8004b32:	bf00      	nop
 8004b34:	40003800 	.word	0x40003800
 8004b38:	40020400 	.word	0x40020400
 8004b3c:	20000898 	.word	0x20000898
 8004b40:	40026058 	.word	0x40026058
 8004b44:	20000b18 	.word	0x20000b18
 8004b48:	40026070 	.word	0x40026070
 8004b4c:	40020800 	.word	0x40020800

08004b50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004b50:	b500      	push	{lr}
 8004b52:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b54:	2300      	movs	r3, #0
 8004b56:	9303      	str	r3, [sp, #12]
 8004b58:	9304      	str	r3, [sp, #16]
 8004b5a:	9305      	str	r3, [sp, #20]
 8004b5c:	9306      	str	r3, [sp, #24]
 8004b5e:	9307      	str	r3, [sp, #28]
  if(htim_pwm->Instance==TIM1)
 8004b60:	6802      	ldr	r2, [r0, #0]
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <HAL_TIM_PWM_MspInit+0x64>)
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d002      	beq.n	8004b6e <HAL_TIM_PWM_MspInit+0x1e>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004b68:	b009      	add	sp, #36	; 0x24
 8004b6a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b6e:	2100      	movs	r1, #0
 8004b70:	9101      	str	r1, [sp, #4]
 8004b72:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8004b76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b78:	f042 0201 	orr.w	r2, r2, #1
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
 8004b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b80:	f002 0201 	and.w	r2, r2, #1
 8004b84:	9201      	str	r2, [sp, #4]
 8004b86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b88:	9102      	str	r1, [sp, #8]
 8004b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	9302      	str	r3, [sp, #8]
 8004b9a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ba0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004baa:	a903      	add	r1, sp, #12
 8004bac:	4802      	ldr	r0, [pc, #8]	; (8004bb8 <HAL_TIM_PWM_MspInit+0x68>)
 8004bae:	f7fc fe73 	bl	8001898 <HAL_GPIO_Init>
}
 8004bb2:	e7d9      	b.n	8004b68 <HAL_TIM_PWM_MspInit+0x18>
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40020000 	.word	0x40020000

08004bbc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004bbc:	b500      	push	{lr}
 8004bbe:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	9303      	str	r3, [sp, #12]
 8004bc4:	9304      	str	r3, [sp, #16]
 8004bc6:	9305      	str	r3, [sp, #20]
 8004bc8:	9306      	str	r3, [sp, #24]
 8004bca:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM5)
 8004bcc:	6802      	ldr	r2, [r0, #0]
 8004bce:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <HAL_TIM_Encoder_MspInit+0x60>)
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d002      	beq.n	8004bda <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004bd4:	b009      	add	sp, #36	; 0x24
 8004bd6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004bda:	2100      	movs	r1, #0
 8004bdc:	9101      	str	r1, [sp, #4]
 8004bde:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 8004be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be4:	f042 0208 	orr.w	r2, r2, #8
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40
 8004bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bec:	f002 0208 	and.w	r2, r2, #8
 8004bf0:	9201      	str	r2, [sp, #4]
 8004bf2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf4:	9102      	str	r1, [sp, #8]
 8004bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf8:	f042 0201 	orr.w	r2, r2, #1
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	9302      	str	r3, [sp, #8]
 8004c06:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004c10:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c12:	a903      	add	r1, sp, #12
 8004c14:	4802      	ldr	r0, [pc, #8]	; (8004c20 <HAL_TIM_Encoder_MspInit+0x64>)
 8004c16:	f7fc fe3f 	bl	8001898 <HAL_GPIO_Init>
}
 8004c1a:	e7db      	b.n	8004bd4 <HAL_TIM_Encoder_MspInit+0x18>
 8004c1c:	40000c00 	.word	0x40000c00
 8004c20:	40020000 	.word	0x40020000

08004c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c24:	b500      	push	{lr}
 8004c26:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9301      	str	r3, [sp, #4]
 8004c2c:	9302      	str	r3, [sp, #8]
 8004c2e:	9303      	str	r3, [sp, #12]
 8004c30:	9304      	str	r3, [sp, #16]
 8004c32:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8004c34:	6802      	ldr	r2, [r0, #0]
 8004c36:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <HAL_TIM_MspPostInit+0x50>)
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d002      	beq.n	8004c42 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004c3c:	b007      	add	sp, #28
 8004c3e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c42:	2300      	movs	r3, #0
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <HAL_TIM_MspPostInit+0x54>)
 8004c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c5e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c60:	2302      	movs	r3, #2
 8004c62:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c64:	2301      	movs	r3, #1
 8004c66:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c68:	a901      	add	r1, sp, #4
 8004c6a:	4804      	ldr	r0, [pc, #16]	; (8004c7c <HAL_TIM_MspPostInit+0x58>)
 8004c6c:	f7fc fe14 	bl	8001898 <HAL_GPIO_Init>
}
 8004c70:	e7e4      	b.n	8004c3c <HAL_TIM_MspPostInit+0x18>
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40020000 	.word	0x40020000

08004c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c80:	b530      	push	{r4, r5, lr}
 8004c82:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c84:	2300      	movs	r3, #0
 8004c86:	9303      	str	r3, [sp, #12]
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	9305      	str	r3, [sp, #20]
 8004c8c:	9306      	str	r3, [sp, #24]
 8004c8e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8004c90:	6802      	ldr	r2, [r0, #0]
 8004c92:	4b34      	ldr	r3, [pc, #208]	; (8004d64 <HAL_UART_MspInit+0xe4>)
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c98:	b009      	add	sp, #36	; 0x24
 8004c9a:	bd30      	pop	{r4, r5, pc}
 8004c9c:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c9e:	2500      	movs	r5, #0
 8004ca0:	9501      	str	r5, [sp, #4]
 8004ca2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8004ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
 8004cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cb0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004cb4:	9201      	str	r2, [sp, #4]
 8004cb6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb8:	9502      	str	r5, [sp, #8]
 8004cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cbc:	f042 0201 	orr.w	r2, r2, #1
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	9302      	str	r3, [sp, #8]
 8004cca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004ccc:	230c      	movs	r3, #12
 8004cce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cdc:	2307      	movs	r3, #7
 8004cde:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce0:	a903      	add	r1, sp, #12
 8004ce2:	4821      	ldr	r0, [pc, #132]	; (8004d68 <HAL_UART_MspInit+0xe8>)
 8004ce4:	f7fc fdd8 	bl	8001898 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004ce8:	4820      	ldr	r0, [pc, #128]	; (8004d6c <HAL_UART_MspInit+0xec>)
 8004cea:	4b21      	ldr	r3, [pc, #132]	; (8004d70 <HAL_UART_MspInit+0xf0>)
 8004cec:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004cee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cf2:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cf4:	2340      	movs	r3, #64	; 0x40
 8004cf6:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cf8:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cfe:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d00:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d02:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d04:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d06:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d08:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d0a:	f7fc fc21 	bl	8001550 <HAL_DMA_Init>
 8004d0e:	bb10      	cbnz	r0, 8004d56 <HAL_UART_MspInit+0xd6>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d10:	4b16      	ldr	r3, [pc, #88]	; (8004d6c <HAL_UART_MspInit+0xec>)
 8004d12:	6323      	str	r3, [r4, #48]	; 0x30
 8004d14:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004d16:	4817      	ldr	r0, [pc, #92]	; (8004d74 <HAL_UART_MspInit+0xf4>)
 8004d18:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <HAL_UART_MspInit+0xf8>)
 8004d1a:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d20:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d22:	2300      	movs	r3, #0
 8004d24:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d26:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d2c:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d2e:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d30:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004d32:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d34:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d36:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004d38:	f7fc fc0a 	bl	8001550 <HAL_DMA_Init>
 8004d3c:	b970      	cbnz	r0, 8004d5c <HAL_UART_MspInit+0xdc>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <HAL_UART_MspInit+0xf4>)
 8004d40:	6363      	str	r3, [r4, #52]	; 0x34
 8004d42:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8004d44:	2201      	movs	r2, #1
 8004d46:	2100      	movs	r1, #0
 8004d48:	2026      	movs	r0, #38	; 0x26
 8004d4a:	f7fc fb31 	bl	80013b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d4e:	2026      	movs	r0, #38	; 0x26
 8004d50:	f7fc fb60 	bl	8001414 <HAL_NVIC_EnableIRQ>
}
 8004d54:	e7a0      	b.n	8004c98 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8004d56:	f7ff fcfb 	bl	8004750 <Error_Handler>
 8004d5a:	e7d9      	b.n	8004d10 <HAL_UART_MspInit+0x90>
      Error_Handler();
 8004d5c:	f7ff fcf8 	bl	8004750 <Error_Handler>
 8004d60:	e7ed      	b.n	8004d3e <HAL_UART_MspInit+0xbe>
 8004d62:	bf00      	nop
 8004d64:	40004400 	.word	0x40004400
 8004d68:	40020000 	.word	0x40020000
 8004d6c:	2000097c 	.word	0x2000097c
 8004d70:	400260a0 	.word	0x400260a0
 8004d74:	200006d8 	.word	0x200006d8
 8004d78:	40026088 	.word	0x40026088

08004d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d7c:	4770      	bx	lr

08004d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d7e:	e7fe      	b.n	8004d7e <HardFault_Handler>

08004d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d80:	e7fe      	b.n	8004d80 <MemManage_Handler>

08004d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d82:	e7fe      	b.n	8004d82 <BusFault_Handler>

08004d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d84:	e7fe      	b.n	8004d84 <UsageFault_Handler>

08004d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d86:	4770      	bx	lr

08004d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d88:	4770      	bx	lr

08004d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d8a:	4770      	bx	lr

08004d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d8e:	f7fc f95f 	bl	8001050 <HAL_IncTick>
 8004d92:	bd08      	pop	{r3, pc}

08004d94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004d94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004d96:	4802      	ldr	r0, [pc, #8]	; (8004da0 <DMA1_Stream0_IRQHandler+0xc>)
 8004d98:	f7fc fc90 	bl	80016bc <HAL_DMA_IRQHandler>
 8004d9c:	bd08      	pop	{r3, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000a78 	.word	0x20000a78

08004da4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004da4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004da6:	4802      	ldr	r0, [pc, #8]	; (8004db0 <DMA1_Stream3_IRQHandler+0xc>)
 8004da8:	f7fc fc88 	bl	80016bc <HAL_DMA_IRQHandler>
 8004dac:	bd08      	pop	{r3, pc}
 8004dae:	bf00      	nop
 8004db0:	20000898 	.word	0x20000898

08004db4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004db4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004db6:	4802      	ldr	r0, [pc, #8]	; (8004dc0 <DMA1_Stream4_IRQHandler+0xc>)
 8004db8:	f7fc fc80 	bl	80016bc <HAL_DMA_IRQHandler>
 8004dbc:	bd08      	pop	{r3, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000b18 	.word	0x20000b18

08004dc4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004dc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004dc6:	4802      	ldr	r0, [pc, #8]	; (8004dd0 <DMA1_Stream5_IRQHandler+0xc>)
 8004dc8:	f7fc fc78 	bl	80016bc <HAL_DMA_IRQHandler>
 8004dcc:	bd08      	pop	{r3, pc}
 8004dce:	bf00      	nop
 8004dd0:	200006d8 	.word	0x200006d8

08004dd4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004dd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004dd6:	4802      	ldr	r0, [pc, #8]	; (8004de0 <DMA1_Stream6_IRQHandler+0xc>)
 8004dd8:	f7fc fc70 	bl	80016bc <HAL_DMA_IRQHandler>
 8004ddc:	bd08      	pop	{r3, pc}
 8004dde:	bf00      	nop
 8004de0:	2000097c 	.word	0x2000097c

08004de4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004de6:	4802      	ldr	r0, [pc, #8]	; (8004df0 <I2C1_EV_IRQHandler+0xc>)
 8004de8:	f7fd fbc0 	bl	800256c <HAL_I2C_EV_IRQHandler>
 8004dec:	bd08      	pop	{r3, pc}
 8004dee:	bf00      	nop
 8004df0:	200007f0 	.word	0x200007f0

08004df4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004df6:	4802      	ldr	r0, [pc, #8]	; (8004e00 <I2C1_ER_IRQHandler+0xc>)
 8004df8:	f7fd fc6c 	bl	80026d4 <HAL_I2C_ER_IRQHandler>
 8004dfc:	bd08      	pop	{r3, pc}
 8004dfe:	bf00      	nop
 8004e00:	200007f0 	.word	0x200007f0

08004e04 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004e04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004e06:	4802      	ldr	r0, [pc, #8]	; (8004e10 <SPI2_IRQHandler+0xc>)
 8004e08:	f7fe f8f4 	bl	8002ff4 <HAL_SPI_IRQHandler>
 8004e0c:	bd08      	pop	{r3, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000738 	.word	0x20000738

08004e14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e16:	4802      	ldr	r0, [pc, #8]	; (8004e20 <USART2_IRQHandler+0xc>)
 8004e18:	f7ff f9a6 	bl	8004168 <HAL_UART_IRQHandler>
 8004e1c:	bd08      	pop	{r3, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000ad8 	.word	0x20000ad8

08004e24 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004e24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004e26:	4802      	ldr	r0, [pc, #8]	; (8004e30 <DMA1_Stream7_IRQHandler+0xc>)
 8004e28:	f7fc fc48 	bl	80016bc <HAL_DMA_IRQHandler>
 8004e2c:	bd08      	pop	{r3, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000790 	.word	0x20000790

08004e34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e36:	4802      	ldr	r0, [pc, #8]	; (8004e40 <DMA2_Stream0_IRQHandler+0xc>)
 8004e38:	f7fc fc40 	bl	80016bc <HAL_DMA_IRQHandler>
 8004e3c:	bd08      	pop	{r3, pc}
 8004e3e:	bf00      	nop
 8004e40:	200009dc 	.word	0x200009dc

08004e44 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e44:	490f      	ldr	r1, [pc, #60]	; (8004e84 <SystemInit+0x40>)
 8004e46:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004e4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004e52:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <SystemInit+0x44>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004e66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004e6c:	4a07      	ldr	r2, [pc, #28]	; (8004e8c <SystemInit+0x48>)
 8004e6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e76:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004e78:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e7e:	608b      	str	r3, [r1, #8]
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	e000ed00 	.word	0xe000ed00
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	24003010 	.word	0x24003010

08004e90 <IT_CallBack_UsartTC>:
	    //printf_u("\rxxxxx = %f\r\n", 0.123456);
	    delay(100);
	}
}

void IT_CallBack_UsartTC(USART* Device) {
 8004e90:	b508      	push	{r3, lr}
	turnOn(Led);
 8004e92:	4b02      	ldr	r3, [pc, #8]	; (8004e9c <IT_CallBack_UsartTC+0xc>)
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	f000 fa24 	bl	80052e2 <turnOn>
 8004e9a:	bd08      	pop	{r3, pc}
 8004e9c:	20000c60 	.word	0x20000c60

08004ea0 <testScans>:
	printf_u("\r======================End==========================\r\n");
	
	delay(500);
	turnOff(Led);
}
void testScans(void) {
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	USART* Terminal = newUSART(&uart2, &huart2);
 8004ea8:	49bd      	ldr	r1, [pc, #756]	; (80051a0 <testScans+0x300>)
 8004eaa:	48be      	ldr	r0, [pc, #760]	; (80051a4 <testScans+0x304>)
 8004eac:	f000 fa9c 	bl	80053e8 <newUSART>
 8004eb0:	4604      	mov	r4, r0
	char* str;
	print(Terminal,"\r++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\r");
 8004eb2:	4dbd      	ldr	r5, [pc, #756]	; (80051a8 <testScans+0x308>)
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	f000 fb45 	bl	8005544 <print>
	print(Terminal,"\r++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\r");
 8004eba:	4629      	mov	r1, r5
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f000 fb41 	bl	8005544 <print>
	print(Terminal,"\r++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\r");
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f000 fb3d 	bl	8005544 <print>
	print(Terminal,"\n\r=============Begin:Test Basic Inputtings==================\r");
 8004eca:	49b8      	ldr	r1, [pc, #736]	; (80051ac <testScans+0x30c>)
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f000 fb39 	bl	8005544 <print>
		//test usartRead() 
		for(int i = 1; i <= 5; i+=4) {	
 8004ed2:	2501      	movs	r5, #1
 8004ed4:	e013      	b.n	8004efe <testScans+0x5e>
			print(Terminal, "\n\rTest[usartRead]\r\n");
 8004ed6:	49b6      	ldr	r1, [pc, #728]	; (80051b0 <testScans+0x310>)
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 fb33 	bl	8005544 <print>
			print(Terminal,"\r[*****]Please enter EXACTLY %d letters\r\n\r>>>>>>> ",i);
 8004ede:	462a      	mov	r2, r5
 8004ee0:	49b4      	ldr	r1, [pc, #720]	; (80051b4 <testScans+0x314>)
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f000 fb2e 	bl	8005544 <print>
			str = usartRead(Terminal, i+1); //+1 due to [Enter] key counting as one character at the end of stdin
 8004ee8:	1c69      	adds	r1, r5, #1
 8004eea:	b289      	uxth	r1, r1
 8004eec:	4620      	mov	r0, r4
 8004eee:	f000 fb6b 	bl	80055c8 <usartRead>
			print(Terminal,"\r[Echo]: %s\r\n",str);
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	49b0      	ldr	r1, [pc, #704]	; (80051b8 <testScans+0x318>)
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f000 fb24 	bl	8005544 <print>
		for(int i = 1; i <= 5; i+=4) {	
 8004efc:	3504      	adds	r5, #4
 8004efe:	2d05      	cmp	r5, #5
 8004f00:	dde9      	ble.n	8004ed6 <testScans+0x36>
 8004f02:	2503      	movs	r5, #3
 8004f04:	e013      	b.n	8004f2e <testScans+0x8e>
		}
		for(int i = 3; i > 0; i-=2) {	
			print(Terminal, "\n\rTest[usartRead]\r\n");
 8004f06:	49aa      	ldr	r1, [pc, #680]	; (80051b0 <testScans+0x310>)
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f000 fb1b 	bl	8005544 <print>
			print(Terminal,"\r[*****]Please enter EXACTLY %d letters\r\n\r>>>>>>> ",i);
 8004f0e:	462a      	mov	r2, r5
 8004f10:	49a8      	ldr	r1, [pc, #672]	; (80051b4 <testScans+0x314>)
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 fb16 	bl	8005544 <print>
			str = usartRead(Terminal, i+1); //+1 due to [Enter] key counting as one character at the end of stdin
 8004f18:	1c69      	adds	r1, r5, #1
 8004f1a:	b289      	uxth	r1, r1
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f000 fb53 	bl	80055c8 <usartRead>
			print(Terminal,"\r[Echo]: %s\r\n",str);
 8004f22:	4602      	mov	r2, r0
 8004f24:	49a4      	ldr	r1, [pc, #656]	; (80051b8 <testScans+0x318>)
 8004f26:	4620      	mov	r0, r4
 8004f28:	f000 fb0c 	bl	8005544 <print>
		for(int i = 3; i > 0; i-=2) {	
 8004f2c:	3d02      	subs	r5, #2
 8004f2e:	2d00      	cmp	r5, #0
 8004f30:	dce9      	bgt.n	8004f06 <testScans+0x66>
		}
	
		//test readWord() & readLine()
		print(Terminal, "\n\rTest[readWord]\r\n");
 8004f32:	49a2      	ldr	r1, [pc, #648]	; (80051bc <testScans+0x31c>)
 8004f34:	4620      	mov	r0, r4
 8004f36:	f000 fb05 	bl	8005544 <print>
		print(Terminal,"\r[*****]Please enter two words (space-sperated) below\r\n");
 8004f3a:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 8005200 <testScans+0x360>
 8004f3e:	4659      	mov	r1, fp
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 faff 	bl	8005544 <print>
		print(Terminal,"\r>>>>>>>>>>>>>>>>>>>\r\n");
 8004f46:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8005204 <testScans+0x364>
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f000 faf9 	bl	8005544 <print>
		char one_word[USART_RxBuffer_Size];
		readWord(Terminal, one_word);
 8004f52:	a967      	add	r1, sp, #412	; 0x19c
 8004f54:	4620      	mov	r0, r4
 8004f56:	f000 fbbf 	bl	80056d8 <readWord>
		char another_word[USART_RxBuffer_Size];
		readWord(Terminal, another_word);
 8004f5a:	a94e      	add	r1, sp, #312	; 0x138
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f000 fbbb 	bl	80056d8 <readWord>
		print(Terminal,"\r<<<<<<<<<<<<<<<<<<<\r\n");
 8004f62:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8005208 <testScans+0x368>
 8004f66:	4641      	mov	r1, r8
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f000 faeb 	bl	8005544 <print>
		print(Terminal, "\r[Echo]:\r\n\r%s\r\n", one_word);
 8004f6e:	4f94      	ldr	r7, [pc, #592]	; (80051c0 <testScans+0x320>)
 8004f70:	aa67      	add	r2, sp, #412	; 0x19c
 8004f72:	4639      	mov	r1, r7
 8004f74:	4620      	mov	r0, r4
 8004f76:	f000 fae5 	bl	8005544 <print>
		print(Terminal, "\r%s\r\n", another_word);
 8004f7a:	4d92      	ldr	r5, [pc, #584]	; (80051c4 <testScans+0x324>)
 8004f7c:	aa4e      	add	r2, sp, #312	; 0x138
 8004f7e:	4629      	mov	r1, r5
 8004f80:	4620      	mov	r0, r4
 8004f82:	f000 fadf 	bl	8005544 <print>

		print(Terminal, "\n\rTest[readLine]\r\n");
 8004f86:	4990      	ldr	r1, [pc, #576]	; (80051c8 <testScans+0x328>)
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 fadb 	bl	8005544 <print>
		print(Terminal,"\r[*****]Please enter anything below (no more than [USART_RxBuffer_Size] number of characters)\r\n");
 8004f8e:	f8df a27c 	ldr.w	sl, [pc, #636]	; 800520c <testScans+0x36c>
 8004f92:	4651      	mov	r1, sl
 8004f94:	4620      	mov	r0, r4
 8004f96:	f000 fad5 	bl	8005544 <print>
		print(Terminal,"\r>>>>>>>>>>>>>>>>>>>\r\n");
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f000 fad1 	bl	8005544 <print>
		char one_line[USART_RxBuffer_Size];
		readLine(Terminal, one_line);
 8004fa2:	a935      	add	r1, sp, #212	; 0xd4
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f000 fbb3 	bl	8005710 <readLine>
		print(Terminal,"\r<<<<<<<<<<<<<<<<<<<\r\n");
 8004faa:	4641      	mov	r1, r8
 8004fac:	4620      	mov	r0, r4
 8004fae:	f000 fac9 	bl	8005544 <print>
		print(Terminal, "\r[Echo]:\r\n\r%s\r\n", one_line);
 8004fb2:	aa35      	add	r2, sp, #212	; 0xd4
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 fac4 	bl	8005544 <print>
		
		//test readWordf & readLinef
		newMainUSART(&huart2);
 8004fbc:	4e78      	ldr	r6, [pc, #480]	; (80051a0 <testScans+0x300>)
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	f000 fa40 	bl	8005444 <newMainUSART>
		printf_u("\n\rTest[readWordf]\r\n");
 8004fc4:	4881      	ldr	r0, [pc, #516]	; (80051cc <testScans+0x32c>)
 8004fc6:	f000 fad1 	bl	800556c <printf_u>
		printf_u("\r[*****]Please enter two words (space-sperated) below\r\n");
 8004fca:	4658      	mov	r0, fp
 8004fcc:	f000 face 	bl	800556c <printf_u>
		printf_u("\r>>>>>>>>>>>>>>>>>>>\r\n");
 8004fd0:	4648      	mov	r0, r9
 8004fd2:	f000 facb 	bl	800556c <printf_u>
		readWordf(one_word);
 8004fd6:	a867      	add	r0, sp, #412	; 0x19c
 8004fd8:	f000 fbb4 	bl	8005744 <readWordf>
		readWordf(another_word);
 8004fdc:	a84e      	add	r0, sp, #312	; 0x138
 8004fde:	f000 fbb1 	bl	8005744 <readWordf>
		printf_u("\r<<<<<<<<<<<<<<<<<<<\r\n");
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	f000 fac2 	bl	800556c <printf_u>
		printf_u("\r[Echo]:\r\n\r%s\r\n", one_word);
 8004fe8:	a967      	add	r1, sp, #412	; 0x19c
 8004fea:	4638      	mov	r0, r7
 8004fec:	f000 fabe 	bl	800556c <printf_u>
		printf_u("\r%s\r\n", another_word);
 8004ff0:	a94e      	add	r1, sp, #312	; 0x138
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	f000 faba 	bl	800556c <printf_u>
		
		printf_u("\n\rTest[readLinef]\r\n");
 8004ff8:	4875      	ldr	r0, [pc, #468]	; (80051d0 <testScans+0x330>)
 8004ffa:	f000 fab7 	bl	800556c <printf_u>
		printf_u("\r[*****]Please enter anything below (no more than [USART_RxBuffer_Size] number of characters)\r\n");
 8004ffe:	4650      	mov	r0, sl
 8005000:	f000 fab4 	bl	800556c <printf_u>
		printf_u("\r>>>>>>>>>>>>>>>>>>>\r\n");
 8005004:	4648      	mov	r0, r9
 8005006:	f000 fab1 	bl	800556c <printf_u>
		readLinef(one_line);
 800500a:	a835      	add	r0, sp, #212	; 0xd4
 800500c:	f000 fbb8 	bl	8005780 <readLinef>
		printf_u("\r<<<<<<<<<<<<<<<<<<<\r\n");
 8005010:	4640      	mov	r0, r8
 8005012:	f000 faab 	bl	800556c <printf_u>
		printf_u("\r[Echo]:\r\n\r%s\r\n", one_line);
 8005016:	a935      	add	r1, sp, #212	; 0xd4
 8005018:	4638      	mov	r0, r7
 800501a:	f000 faa7 	bl	800556c <printf_u>
	
		//test scan
	
		Terminal = newUSART(&uart2, &huart2);
 800501e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80051a4 <testScans+0x304>
 8005022:	4631      	mov	r1, r6
 8005024:	4640      	mov	r0, r8
 8005026:	f000 f9df 	bl	80053e8 <newUSART>
 800502a:	4604      	mov	r4, r0
	//while(1) { // uncomment it to do stress testing
		print(Terminal, "\n\rTest[scan]\r\n");
 800502c:	4969      	ldr	r1, [pc, #420]	; (80051d4 <testScans+0x334>)
 800502e:	f000 fa89 	bl	8005544 <print>
		print(Terminal, "\r[*****]Please enter two integers (space-sperated) below\r\n");
 8005032:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8005210 <testScans+0x370>
 8005036:	4659      	mov	r1, fp
 8005038:	4620      	mov	r0, r4
 800503a:	f000 fa83 	bl	8005544 <print>
		uint32_t A, B;
		scan(Terminal, "%d %d", &A, &B);
 800503e:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8005214 <testScans+0x374>
 8005042:	ab33      	add	r3, sp, #204	; 0xcc
 8005044:	aa34      	add	r2, sp, #208	; 0xd0
 8005046:	4651      	mov	r1, sl
 8005048:	4620      	mov	r0, r4
 800504a:	f000 fbb5 	bl	80057b8 <scan>
		print(Terminal, "\r[Echo]:\r\n");
 800504e:	4f62      	ldr	r7, [pc, #392]	; (80051d8 <testScans+0x338>)
 8005050:	4639      	mov	r1, r7
 8005052:	4620      	mov	r0, r4
 8005054:	f000 fa76 	bl	8005544 <print>
		print(Terminal, "\r%d\r\n",A);
 8005058:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8005218 <testScans+0x378>
 800505c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800505e:	4649      	mov	r1, r9
 8005060:	4620      	mov	r0, r4
 8005062:	f000 fa6f 	bl	8005544 <print>
		print(Terminal, "\r%d\r\n",B);
 8005066:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8005068:	4649      	mov	r1, r9
 800506a:	4620      	mov	r0, r4
 800506c:	f000 fa6a 	bl	8005544 <print>
		print(Terminal, "\r[Sum]: %d\r\n", A+B);
 8005070:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8005072:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8005074:	441a      	add	r2, r3
 8005076:	4959      	ldr	r1, [pc, #356]	; (80051dc <testScans+0x33c>)
 8005078:	4620      	mov	r0, r4
 800507a:	f000 fa63 	bl	8005544 <print>
		
		print(Terminal, "\r[*****]Please enter two strings (space-sperated) below\r\n");
 800507e:	4958      	ldr	r1, [pc, #352]	; (80051e0 <testScans+0x340>)
 8005080:	4620      	mov	r0, r4
 8005082:	f000 fa5f 	bl	8005544 <print>
		char string1[USART_RxBuffer_Size], string2[USART_RxBuffer_Size];
		scan(Terminal, "%s %s", string1, string2);
 8005086:	ab01      	add	r3, sp, #4
 8005088:	aa1a      	add	r2, sp, #104	; 0x68
 800508a:	4956      	ldr	r1, [pc, #344]	; (80051e4 <testScans+0x344>)
 800508c:	4620      	mov	r0, r4
 800508e:	f000 fb93 	bl	80057b8 <scan>
		print(Terminal, "\r[Echo]:\r\n");
 8005092:	4639      	mov	r1, r7
 8005094:	4620      	mov	r0, r4
 8005096:	f000 fa55 	bl	8005544 <print>
		print(Terminal, "\r%s\r\n",string1);
 800509a:	aa1a      	add	r2, sp, #104	; 0x68
 800509c:	4629      	mov	r1, r5
 800509e:	4620      	mov	r0, r4
 80050a0:	f000 fa50 	bl	8005544 <print>
		print(Terminal, "\r%s\r\n",string2);
 80050a4:	aa01      	add	r2, sp, #4
 80050a6:	4629      	mov	r1, r5
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 fa4b 	bl	8005544 <print>
		print(Terminal, "\r[Concatenation]: %s%s\r\n", string1, string2);
 80050ae:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800521c <testScans+0x37c>
 80050b2:	ab01      	add	r3, sp, #4
 80050b4:	aa1a      	add	r2, sp, #104	; 0x68
 80050b6:	4649      	mov	r1, r9
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 fa43 	bl	8005544 <print>
	//}
	
		//test scanf_u
		newMainUSART(&huart2);
 80050be:	4630      	mov	r0, r6
 80050c0:	f000 f9c0 	bl	8005444 <newMainUSART>
	//while(1) { // uncomment it to do stress testing
		printf_u("\n\rTest[scanf_u]\r\n");
 80050c4:	4848      	ldr	r0, [pc, #288]	; (80051e8 <testScans+0x348>)
 80050c6:	f000 fa51 	bl	800556c <printf_u>
		printf_u("\r[*****]Please enter two integers (space-sperated) below\r\n");
 80050ca:	4658      	mov	r0, fp
 80050cc:	f000 fa4e 	bl	800556c <printf_u>
		scanf_u("%d %d", &A, &B);
 80050d0:	aa33      	add	r2, sp, #204	; 0xcc
 80050d2:	a934      	add	r1, sp, #208	; 0xd0
 80050d4:	4650      	mov	r0, sl
 80050d6:	f000 fb83 	bl	80057e0 <scanf_u>
		printf_u("\r[Echo]:\r\n");
 80050da:	4638      	mov	r0, r7
 80050dc:	f000 fa46 	bl	800556c <printf_u>
		printf_u("\r%lu\r\n",A);
 80050e0:	4c42      	ldr	r4, [pc, #264]	; (80051ec <testScans+0x34c>)
 80050e2:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80050e4:	4620      	mov	r0, r4
 80050e6:	f000 fa41 	bl	800556c <printf_u>
		printf_u("\r%lu\r\n",B);
 80050ea:	9933      	ldr	r1, [sp, #204]	; 0xcc
 80050ec:	4620      	mov	r0, r4
 80050ee:	f000 fa3d 	bl	800556c <printf_u>
		printf_u("\r[Sum]: %lu\r\n", A+B);
 80050f2:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80050f4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80050f6:	4419      	add	r1, r3
 80050f8:	483d      	ldr	r0, [pc, #244]	; (80051f0 <testScans+0x350>)
 80050fa:	f000 fa37 	bl	800556c <printf_u>
		
		printf_u("\r[*****]Please enter two strings (space-sperated) below\r\n");
 80050fe:	4838      	ldr	r0, [pc, #224]	; (80051e0 <testScans+0x340>)
 8005100:	f000 fa34 	bl	800556c <printf_u>
		scanf_u("%s %s", string1, string2);
 8005104:	aa01      	add	r2, sp, #4
 8005106:	a91a      	add	r1, sp, #104	; 0x68
 8005108:	4836      	ldr	r0, [pc, #216]	; (80051e4 <testScans+0x344>)
 800510a:	f000 fb69 	bl	80057e0 <scanf_u>
		printf_u("\r[Echo]:\r\n");
 800510e:	4638      	mov	r0, r7
 8005110:	f000 fa2c 	bl	800556c <printf_u>
		printf_u("\r%s\r\n",string1);
 8005114:	a91a      	add	r1, sp, #104	; 0x68
 8005116:	4628      	mov	r0, r5
 8005118:	f000 fa28 	bl	800556c <printf_u>
		printf_u("\r%s\r\n",string2);
 800511c:	a901      	add	r1, sp, #4
 800511e:	4628      	mov	r0, r5
 8005120:	f000 fa24 	bl	800556c <printf_u>
		printf_u("\r[Concatenation]: %s%s\r\n", string1, string2);
 8005124:	aa01      	add	r2, sp, #4
 8005126:	a91a      	add	r1, sp, #104	; 0x68
 8005128:	4648      	mov	r0, r9
 800512a:	f000 fa1f 	bl	800556c <printf_u>
	//}
	printf_u("\r======================End==========================\r\n");
 800512e:	4831      	ldr	r0, [pc, #196]	; (80051f4 <testScans+0x354>)
 8005130:	f000 fa1c 	bl	800556c <printf_u>
	
	printf_u("\n\r===============Begin:Test Inputtings with DMA=================\r");
 8005134:	4830      	ldr	r0, [pc, #192]	; (80051f8 <testScans+0x358>)
 8005136:	f000 fa19 	bl	800556c <printf_u>
		Terminal = newUSART(&uart2, &huart2);
 800513a:	4631      	mov	r1, r6
 800513c:	4640      	mov	r0, r8
 800513e:	f000 f953 	bl	80053e8 <newUSART>
 8005142:	4604      	mov	r4, r0
		//test usartRead_DMA()
		for(int i = 1; i <= 5; i+=4) {
 8005144:	2501      	movs	r5, #1
 8005146:	e027      	b.n	8005198 <testScans+0x2f8>
			print_DMA(Terminal, "\n\rTest[usartRead_DMA]\r\n");
 8005148:	492c      	ldr	r1, [pc, #176]	; (80051fc <testScans+0x35c>)
 800514a:	4620      	mov	r0, r4
 800514c:	f000 fa24 	bl	8005598 <print_DMA>
			while(Terminal->TxStatus != Completed);
 8005150:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b03      	cmp	r3, #3
 8005158:	d1fa      	bne.n	8005150 <testScans+0x2b0>
			print_DMA(Terminal,"\r[*****]Please enter EXACTLY %d letters\r\n\r>>>>>>> ",i);
 800515a:	462a      	mov	r2, r5
 800515c:	4915      	ldr	r1, [pc, #84]	; (80051b4 <testScans+0x314>)
 800515e:	4620      	mov	r0, r4
 8005160:	f000 fa1a 	bl	8005598 <print_DMA>
			while(Terminal->TxStatus != Completed);
 8005164:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b03      	cmp	r3, #3
 800516c:	d1fa      	bne.n	8005164 <testScans+0x2c4>
			str = usartRead_DMA(Terminal, i+1);
 800516e:	1c69      	adds	r1, r5, #1
 8005170:	b289      	uxth	r1, r1
 8005172:	4620      	mov	r0, r4
 8005174:	f000 fa66 	bl	8005644 <usartRead_DMA>
 8005178:	4602      	mov	r2, r0
			while(Terminal->RxStatus != Completed);
 800517a:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b03      	cmp	r3, #3
 8005182:	d1fa      	bne.n	800517a <testScans+0x2da>
			print(Terminal,"\r[Echo]: %s\r\n",str);
 8005184:	490c      	ldr	r1, [pc, #48]	; (80051b8 <testScans+0x318>)
 8005186:	4620      	mov	r0, r4
 8005188:	f000 f9dc 	bl	8005544 <print>
			while(Terminal->TxStatus != Completed);
 800518c:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b03      	cmp	r3, #3
 8005194:	d1fa      	bne.n	800518c <testScans+0x2ec>
		for(int i = 1; i <= 5; i+=4) {
 8005196:	3504      	adds	r5, #4
 8005198:	2d05      	cmp	r5, #5
 800519a:	ddd5      	ble.n	8005148 <testScans+0x2a8>
 800519c:	2503      	movs	r5, #3
 800519e:	e067      	b.n	8005270 <testScans+0x3d0>
 80051a0:	20000ad8 	.word	0x20000ad8
 80051a4:	20000c64 	.word	0x20000c64
 80051a8:	0800b290 	.word	0x0800b290
 80051ac:	0800b2d4 	.word	0x0800b2d4
 80051b0:	0800b314 	.word	0x0800b314
 80051b4:	0800b328 	.word	0x0800b328
 80051b8:	0800b35c 	.word	0x0800b35c
 80051bc:	0800b36c 	.word	0x0800b36c
 80051c0:	0800b3e8 	.word	0x0800b3e8
 80051c4:	0800b3f8 	.word	0x0800b3f8
 80051c8:	0800b400 	.word	0x0800b400
 80051cc:	0800b474 	.word	0x0800b474
 80051d0:	0800b488 	.word	0x0800b488
 80051d4:	0800b49c 	.word	0x0800b49c
 80051d8:	0800b4f0 	.word	0x0800b4f0
 80051dc:	0800b504 	.word	0x0800b504
 80051e0:	0800b514 	.word	0x0800b514
 80051e4:	0800b550 	.word	0x0800b550
 80051e8:	0800b574 	.word	0x0800b574
 80051ec:	0800b588 	.word	0x0800b588
 80051f0:	0800b590 	.word	0x0800b590
 80051f4:	0800b094 	.word	0x0800b094
 80051f8:	0800b5a0 	.word	0x0800b5a0
 80051fc:	0800b5e4 	.word	0x0800b5e4
 8005200:	0800b380 	.word	0x0800b380
 8005204:	0800b3b8 	.word	0x0800b3b8
 8005208:	0800b3d0 	.word	0x0800b3d0
 800520c:	0800b414 	.word	0x0800b414
 8005210:	0800b4ac 	.word	0x0800b4ac
 8005214:	0800b4e8 	.word	0x0800b4e8
 8005218:	0800b4fc 	.word	0x0800b4fc
 800521c:	0800b558 	.word	0x0800b558
		}
		for(int i = 3; i > 0; i-=2) {
			print_DMA(Terminal, "\n\rTest[usartRead_DMA]\r\n");
 8005220:	4918      	ldr	r1, [pc, #96]	; (8005284 <testScans+0x3e4>)
 8005222:	4620      	mov	r0, r4
 8005224:	f000 f9b8 	bl	8005598 <print_DMA>
			while(Terminal->TxStatus != Completed);
 8005228:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b03      	cmp	r3, #3
 8005230:	d1fa      	bne.n	8005228 <testScans+0x388>
			print_DMA(Terminal,"\r[*****]Please enter EXACTLY %d letters\r\n\r>>>>>>> ",i);
 8005232:	462a      	mov	r2, r5
 8005234:	4914      	ldr	r1, [pc, #80]	; (8005288 <testScans+0x3e8>)
 8005236:	4620      	mov	r0, r4
 8005238:	f000 f9ae 	bl	8005598 <print_DMA>
			while(Terminal->TxStatus != Completed);
 800523c:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b03      	cmp	r3, #3
 8005244:	d1fa      	bne.n	800523c <testScans+0x39c>
			str = usartRead_DMA(Terminal, i+1);
 8005246:	1c69      	adds	r1, r5, #1
 8005248:	b289      	uxth	r1, r1
 800524a:	4620      	mov	r0, r4
 800524c:	f000 f9fa 	bl	8005644 <usartRead_DMA>
 8005250:	4602      	mov	r2, r0
			while(Terminal->RxStatus != Completed);
 8005252:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b03      	cmp	r3, #3
 800525a:	d1fa      	bne.n	8005252 <testScans+0x3b2>
			print(Terminal,"\r[Echo]: %s\r\n",str);
 800525c:	490b      	ldr	r1, [pc, #44]	; (800528c <testScans+0x3ec>)
 800525e:	4620      	mov	r0, r4
 8005260:	f000 f970 	bl	8005544 <print>
			while(Terminal->TxStatus != Completed);
 8005264:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b03      	cmp	r3, #3
 800526c:	d1fa      	bne.n	8005264 <testScans+0x3c4>
		for(int i = 3; i > 0; i-=2) {
 800526e:	3d02      	subs	r5, #2
 8005270:	2d00      	cmp	r5, #0
 8005272:	dcd5      	bgt.n	8005220 <testScans+0x380>
		}
	printf_u("\r======================End==========================\r\n");
 8005274:	4806      	ldr	r0, [pc, #24]	; (8005290 <testScans+0x3f0>)
 8005276:	f000 f979 	bl	800556c <printf_u>
}
 800527a:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 800527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005282:	bf00      	nop
 8005284:	0800b5e4 	.word	0x0800b5e4
 8005288:	0800b328 	.word	0x0800b328
 800528c:	0800b35c 	.word	0x0800b35c
 8005290:	0800b094 	.word	0x0800b094

08005294 <testUsart>:
//Treat it as the main() of this tester file 
void testUsart(void) {
 8005294:	b508      	push	{r3, lr}
	 *#undef USART_RxBuffer_Size
	 *#define USART_TxBuffer_Size ???
     *#define USART_RxBuffer_Size ???
	 *
	 *Replace ??? with the number of desire buffer sizes*/
	Led = newGPIO(&led_pin, LD2_GPIO_Port, LD2_Pin);
 8005296:	2220      	movs	r2, #32
 8005298:	4904      	ldr	r1, [pc, #16]	; (80052ac <testUsart+0x18>)
 800529a:	4805      	ldr	r0, [pc, #20]	; (80052b0 <testUsart+0x1c>)
 800529c:	f000 f81e 	bl	80052dc <newGPIO>
 80052a0:	4b04      	ldr	r3, [pc, #16]	; (80052b4 <testUsart+0x20>)
 80052a2:	6018      	str	r0, [r3, #0]
	//testPrints();
	testScans();
 80052a4:	f7ff fdfc 	bl	8004ea0 <testScans>
 80052a8:	bd08      	pop	{r3, pc}
 80052aa:	bf00      	nop
 80052ac:	40020000 	.word	0x40020000
 80052b0:	20000b80 	.word	0x20000b80
 80052b4:	20000c60 	.word	0x20000c60

080052b8 <Exception_Handler>:
}
void Exception_Handler(const char* str) {
 80052b8:	b510      	push	{r4, lr}
 80052ba:	4604      	mov	r4, r0
	USART* Terminal = newUSART(&uart2, &huart2);
 80052bc:	4904      	ldr	r1, [pc, #16]	; (80052d0 <Exception_Handler+0x18>)
 80052be:	4805      	ldr	r0, [pc, #20]	; (80052d4 <Exception_Handler+0x1c>)
 80052c0:	f000 f892 	bl	80053e8 <newUSART>
	print(Terminal, "\r%s\r\n",str);
 80052c4:	4622      	mov	r2, r4
 80052c6:	4904      	ldr	r1, [pc, #16]	; (80052d8 <Exception_Handler+0x20>)
 80052c8:	f000 f93c 	bl	8005544 <print>
 80052cc:	bd10      	pop	{r4, pc}
 80052ce:	bf00      	nop
 80052d0:	20000ad8 	.word	0x20000ad8
 80052d4:	20000c64 	.word	0x20000c64
 80052d8:	0800b3f8 	.word	0x0800b3f8

080052dc <newGPIO>:



/*========================SETUP AND DATA STRUCTURE========================*/
GPIO *newGPIO(GPIO* obj, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	obj->GPIO_Pin = GPIO_Pin;
 80052dc:	8082      	strh	r2, [r0, #4]
	obj->GPIOx = GPIOx;
 80052de:	6001      	str	r1, [r0, #0]
	return obj;
}
 80052e0:	4770      	bx	lr

080052e2 <turnOn>:
}
/*=============================================================================*/


/*========================Convenience Purposed Methods========================*/
void turnOn(GPIO* obj) {
 80052e2:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(obj->GPIOx, obj->GPIO_Pin, GPIO_PIN_SET);
 80052e4:	2201      	movs	r2, #1
 80052e6:	8881      	ldrh	r1, [r0, #4]
 80052e8:	6800      	ldr	r0, [r0, #0]
 80052ea:	f7fc fbb7 	bl	8001a5c <HAL_GPIO_WritePin>
 80052ee:	bd08      	pop	{r3, pc}

080052f0 <IT_CallBack_I2cTC>:
}
/*=========================================================================*/


/*==============================Interrupt Handler===============================*/
__weak void IT_CallBack_I2cTC(I2C* instance){
 80052f0:	4770      	bx	lr
	...

080052f4 <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 80052f8:	2400      	movs	r4, #0
 80052fa:	e000      	b.n	80052fe <HAL_I2C_MasterTxCpltCallback+0xa>
 80052fc:	3401      	adds	r4, #1
 80052fe:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <HAL_I2C_MasterTxCpltCallback+0x34>)
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	429c      	cmp	r4, r3
 8005304:	da0e      	bge.n	8005324 <HAL_I2C_MasterTxCpltCallback+0x30>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <HAL_I2C_MasterTxCpltCallback+0x38>)
 8005308:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800530c:	6803      	ldr	r3, [r0, #0]
 800530e:	42ab      	cmp	r3, r5
 8005310:	d1f4      	bne.n	80052fc <HAL_I2C_MasterTxCpltCallback+0x8>
			IT_CallBack_I2cTC(ActiveI2Cs[i]);
 8005312:	f7ff ffed 	bl	80052f0 <IT_CallBack_I2cTC>
			ActiveI2Cs[i]->TxStatus = Completed;
 8005316:	4b05      	ldr	r3, [pc, #20]	; (800532c <HAL_I2C_MasterTxCpltCallback+0x38>)
 8005318:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800531c:	2203      	movs	r2, #3
 800531e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8005322:	e7eb      	b.n	80052fc <HAL_I2C_MasterTxCpltCallback+0x8>
}
 8005324:	bd38      	pop	{r3, r4, r5, pc}
 8005326:	bf00      	nop
 8005328:	20000698 	.word	0x20000698
 800532c:	20000d3c 	.word	0x20000d3c

08005330 <HAL_I2C_SlaveTxCpltCallback>:
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 8005334:	2400      	movs	r4, #0
 8005336:	e000      	b.n	800533a <HAL_I2C_SlaveTxCpltCallback+0xa>
 8005338:	3401      	adds	r4, #1
 800533a:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <HAL_I2C_SlaveTxCpltCallback+0x34>)
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	429c      	cmp	r4, r3
 8005340:	da0e      	bge.n	8005360 <HAL_I2C_SlaveTxCpltCallback+0x30>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8005342:	4b09      	ldr	r3, [pc, #36]	; (8005368 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8005344:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005348:	6803      	ldr	r3, [r0, #0]
 800534a:	42ab      	cmp	r3, r5
 800534c:	d1f4      	bne.n	8005338 <HAL_I2C_SlaveTxCpltCallback+0x8>
			IT_CallBack_I2cTC(ActiveI2Cs[i]);
 800534e:	f7ff ffcf 	bl	80052f0 <IT_CallBack_I2cTC>
			ActiveI2Cs[i]->TxStatus = Completed;
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8005354:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005358:	2203      	movs	r2, #3
 800535a:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 800535e:	e7eb      	b.n	8005338 <HAL_I2C_SlaveTxCpltCallback+0x8>
}
 8005360:	bd38      	pop	{r3, r4, r5, pc}
 8005362:	bf00      	nop
 8005364:	20000698 	.word	0x20000698
 8005368:	20000d3c 	.word	0x20000d3c

0800536c <IT_CallBack_I2cRC>:
	 UNUSED(instance);
}

__weak void IT_CallBack_I2cRC(I2C* instance){
 800536c:	4770      	bx	lr
	...

08005370 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 8005374:	2400      	movs	r4, #0
 8005376:	e000      	b.n	800537a <HAL_I2C_MasterRxCpltCallback+0xa>
 8005378:	3401      	adds	r4, #1
 800537a:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <HAL_I2C_MasterRxCpltCallback+0x34>)
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	429c      	cmp	r4, r3
 8005380:	da0e      	bge.n	80053a0 <HAL_I2C_MasterRxCpltCallback+0x30>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8005382:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8005384:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005388:	6803      	ldr	r3, [r0, #0]
 800538a:	42ab      	cmp	r3, r5
 800538c:	d1f4      	bne.n	8005378 <HAL_I2C_MasterRxCpltCallback+0x8>
			IT_CallBack_I2cRC(ActiveI2Cs[i]);
 800538e:	f7ff ffed 	bl	800536c <IT_CallBack_I2cRC>
			ActiveI2Cs[i]->RxStatus = Completed;
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8005394:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005398:	2203      	movs	r2, #3
 800539a:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 800539e:	e7eb      	b.n	8005378 <HAL_I2C_MasterRxCpltCallback+0x8>
}
 80053a0:	bd38      	pop	{r3, r4, r5, pc}
 80053a2:	bf00      	nop
 80053a4:	20000698 	.word	0x20000698
 80053a8:	20000d3c 	.word	0x20000d3c

080053ac <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 80053b0:	2400      	movs	r4, #0
 80053b2:	e000      	b.n	80053b6 <HAL_I2C_SlaveRxCpltCallback+0xa>
 80053b4:	3401      	adds	r4, #1
 80053b6:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	429c      	cmp	r4, r3
 80053bc:	da0e      	bge.n	80053dc <HAL_I2C_SlaveRxCpltCallback+0x30>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 80053be:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80053c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80053c4:	6803      	ldr	r3, [r0, #0]
 80053c6:	42ab      	cmp	r3, r5
 80053c8:	d1f4      	bne.n	80053b4 <HAL_I2C_SlaveRxCpltCallback+0x8>
			IT_CallBack_I2cRC(ActiveI2Cs[i]);
 80053ca:	f7ff ffcf 	bl	800536c <IT_CallBack_I2cRC>
			ActiveI2Cs[i]->RxStatus = Completed;
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80053d0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80053d4:	2203      	movs	r2, #3
 80053d6:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 80053da:	e7eb      	b.n	80053b4 <HAL_I2C_SlaveRxCpltCallback+0x8>
}
 80053dc:	bd38      	pop	{r3, r4, r5, pc}
 80053de:	bf00      	nop
 80053e0:	20000698 	.word	0x20000698
 80053e4:	20000d3c 	.word	0x20000d3c

080053e8 <newUSART>:
  *The actual initiation of the usart circuit takes place by HAL 
  *before THL_Main.c gets called by main.c
  *Treated it as Pseudo-Constructor
  *Note: no memory allocation occurs
  */
USART *newUSART(USART* instance, UART_HandleTypeDef *huart) {
 80053e8:	b410      	push	{r4}
	instance->huart = huart;
 80053ea:	6001      	str	r1, [r0, #0]
	instance->TxTimeOut = USART_Default_TxTimeOut;
 80053ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053f0:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	instance->RxTimeOut = USART_Default_RxTimeOut;
 80053f4:	f04f 33ff 	mov.w	r3, #4294967295
 80053f8:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	instance->TxStatus = Ready;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f880 30d4 	strb.w	r3, [r0, #212]	; 0xd4
	instance->RxStatus = Ready;
 8005402:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	for(int i = 0; i < numActiveUSARTs; i++) 
 8005406:	2300      	movs	r3, #0
 8005408:	4a0c      	ldr	r2, [pc, #48]	; (800543c <newUSART+0x54>)
 800540a:	8812      	ldrh	r2, [r2, #0]
 800540c:	4614      	mov	r4, r2
 800540e:	4293      	cmp	r3, r2
 8005410:	da0b      	bge.n	800542a <newUSART+0x42>
		if(ActiveUSARTs[i]->huart == huart) {
 8005412:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <newUSART+0x58>)
 8005414:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	4291      	cmp	r1, r2
 800541c:	d001      	beq.n	8005422 <newUSART+0x3a>
	for(int i = 0; i < numActiveUSARTs; i++) 
 800541e:	3301      	adds	r3, #1
 8005420:	e7f2      	b.n	8005408 <newUSART+0x20>
			ActiveUSARTs[i] = instance;
 8005422:	4a07      	ldr	r2, [pc, #28]	; (8005440 <newUSART+0x58>)
 8005424:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			return instance;
 8005428:	e005      	b.n	8005436 <newUSART+0x4e>
		}
	ActiveUSARTs[numActiveUSARTs++] = instance;
 800542a:	3201      	adds	r2, #1
 800542c:	4b03      	ldr	r3, [pc, #12]	; (800543c <newUSART+0x54>)
 800542e:	801a      	strh	r2, [r3, #0]
 8005430:	4b03      	ldr	r3, [pc, #12]	; (8005440 <newUSART+0x58>)
 8005432:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	return instance;
}
 8005436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	2000069a 	.word	0x2000069a
 8005440:	20000e3c 	.word	0x20000e3c

08005444 <newMainUSART>:

/**Pseudo-Constructor for Default/Main USART
  *It sets the usart
  */
USART *newMainUSART(UART_HandleTypeDef *huart) { 
 8005444:	b508      	push	{r3, lr}
	return newUSART(&DefaultUSART, huart);
 8005446:	4601      	mov	r1, r0
 8005448:	4801      	ldr	r0, [pc, #4]	; (8005450 <newMainUSART+0xc>)
 800544a:	f7ff ffcd 	bl	80053e8 <newUSART>
}
 800544e:	bd08      	pop	{r3, pc}
 8005450:	20000d64 	.word	0x20000d64

08005454 <usartWrite>:
/*=========================================================================*/



/*==============================Transmission===============================*/
void usartWrite(USART* instance) {
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	4605      	mov	r5, r0
	HAL_StatusTypeDef Status;
	Status = HAL_UART_Transmit(instance->huart, (uint8_t*)instance->TxBuffer, strlen(instance->TxBuffer), instance->TxTimeOut);
 8005458:	4604      	mov	r4, r0
 800545a:	f854 6b04 	ldr.w	r6, [r4], #4
 800545e:	4620      	mov	r0, r4
 8005460:	f7fa fed6 	bl	8000210 <strlen>
 8005464:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
 8005468:	b282      	uxth	r2, r0
 800546a:	4621      	mov	r1, r4
 800546c:	4630      	mov	r0, r6
 800546e:	f7fe fc36 	bl	8003cde <HAL_UART_Transmit>
	if(Status == HAL_BUSY) instance->TxStatus = InProcess;
 8005472:	2802      	cmp	r0, #2
 8005474:	d008      	beq.n	8005488 <usartWrite+0x34>
	else if(Status == HAL_TIMEOUT) {
 8005476:	2803      	cmp	r0, #3
 8005478:	d00a      	beq.n	8005490 <usartWrite+0x3c>
		__HAL_UNLOCK(instance->huart);
		instance->huart->gState = HAL_UART_STATE_READY;
		
		throwException("THL_Usart.c: usartWrite() | TimeOut");
	}
	else if(Status == HAL_ERROR) {
 800547a:	2801      	cmp	r0, #1
 800547c:	d017      	beq.n	80054ae <usartWrite+0x5a>
		instance->TxStatus = Error;
		throwException("THL_Usart.c: usartWrite() | Error");
	}
	else if(Status == HAL_OK) instance->TxStatus = Completed;
 800547e:	b910      	cbnz	r0, 8005486 <usartWrite+0x32>
 8005480:	2303      	movs	r3, #3
 8005482:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
 8005486:	bd70      	pop	{r4, r5, r6, pc}
	if(Status == HAL_BUSY) instance->TxStatus = InProcess;
 8005488:	2302      	movs	r3, #2
 800548a:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
 800548e:	bd70      	pop	{r4, r5, r6, pc}
		instance->TxStatus = TimeOut;
 8005490:	2304      	movs	r3, #4
 8005492:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
		__HAL_UNLOCK(instance->huart);
 8005496:	682b      	ldr	r3, [r5, #0]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		instance->huart->gState = HAL_UART_STATE_READY;
 800549e:	682b      	ldr	r3, [r5, #0]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		throwException("THL_Usart.c: usartWrite() | TimeOut");
 80054a6:	4805      	ldr	r0, [pc, #20]	; (80054bc <usartWrite+0x68>)
 80054a8:	f000 f9ba 	bl	8005820 <throwException>
 80054ac:	bd70      	pop	{r4, r5, r6, pc}
		instance->TxStatus = Error;
 80054ae:	2305      	movs	r3, #5
 80054b0:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
		throwException("THL_Usart.c: usartWrite() | Error");
 80054b4:	4802      	ldr	r0, [pc, #8]	; (80054c0 <usartWrite+0x6c>)
 80054b6:	f000 f9b3 	bl	8005820 <throwException>
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	0800b694 	.word	0x0800b694
 80054c0:	0800b6b8 	.word	0x0800b6b8

080054c4 <usartWrite_DMA>:
	instance->TxStatus = InProcess;
}

void usartWrite_DMA(USART* instance) {
	//check if the previous transmission is completed
	if(instance->TxStatus == InProcess) return;
 80054c4:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d019      	beq.n	8005502 <usartWrite_DMA+0x3e>
void usartWrite_DMA(USART* instance) {
 80054ce:	b570      	push	{r4, r5, r6, lr}
 80054d0:	4604      	mov	r4, r0
	HAL_StatusTypeDef Status;
	Status = HAL_UART_Transmit_DMA(instance->huart, (uint8_t*)instance->TxBuffer, strlen(instance->TxBuffer));
 80054d2:	4605      	mov	r5, r0
 80054d4:	f855 6b04 	ldr.w	r6, [r5], #4
 80054d8:	4628      	mov	r0, r5
 80054da:	f7fa fe99 	bl	8000210 <strlen>
 80054de:	b282      	uxth	r2, r0
 80054e0:	4629      	mov	r1, r5
 80054e2:	4630      	mov	r0, r6
 80054e4:	f7fe fce0 	bl	8003ea8 <HAL_UART_Transmit_DMA>
	if(Status == HAL_ERROR) {
 80054e8:	2801      	cmp	r0, #1
 80054ea:	d003      	beq.n	80054f4 <usartWrite_DMA+0x30>
		instance->TxStatus = Error;
		throwException("THL_Usart.c: usartWrite_DMA() | Error");
		return;
	}
	instance->TxStatus = InProcess;
 80054ec:	2302      	movs	r3, #2
 80054ee:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
		instance->TxStatus = Error;
 80054f4:	2305      	movs	r3, #5
 80054f6:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
		throwException("THL_Usart.c: usartWrite_DMA() | Error");
 80054fa:	4802      	ldr	r0, [pc, #8]	; (8005504 <usartWrite_DMA+0x40>)
 80054fc:	f000 f990 	bl	8005820 <throwException>
		return;
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	4770      	bx	lr
 8005504:	0800b6dc 	.word	0x0800b6dc

08005508 <HAL_UART_TxCpltCallback>:
} 
/** Interrupt handler call back function
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveUSARTs; i++) {
 800550c:	2400      	movs	r4, #0
 800550e:	e000      	b.n	8005512 <HAL_UART_TxCpltCallback+0xa>
 8005510:	3401      	adds	r4, #1
 8005512:	4b0a      	ldr	r3, [pc, #40]	; (800553c <HAL_UART_TxCpltCallback+0x34>)
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	429c      	cmp	r4, r3
 8005518:	da0e      	bge.n	8005538 <HAL_UART_TxCpltCallback+0x30>
		if(ActiveUSARTs[i]->huart == huart) {
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <HAL_UART_TxCpltCallback+0x38>)
 800551c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005520:	6803      	ldr	r3, [r0, #0]
 8005522:	42ab      	cmp	r3, r5
 8005524:	d1f4      	bne.n	8005510 <HAL_UART_TxCpltCallback+0x8>
			IT_CallBack_UsartTC(ActiveUSARTs[i]);
 8005526:	f7ff fcb3 	bl	8004e90 <IT_CallBack_UsartTC>
			ActiveUSARTs[i]->TxStatus = Completed;
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_UART_TxCpltCallback+0x38>)
 800552c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005530:	2203      	movs	r2, #3
 8005532:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8005536:	e7eb      	b.n	8005510 <HAL_UART_TxCpltCallback+0x8>
		}
	}
}
 8005538:	bd38      	pop	{r3, r4, r5, pc}
 800553a:	bf00      	nop
 800553c:	2000069a 	.word	0x2000069a
 8005540:	20000e3c 	.word	0x20000e3c

08005544 <print>:
  */
__weak void IT_CallBack_UsartTC(USART* instance){
	 UNUSED(instance);
}

void print(USART* instance, Format_Param) {
 8005544:	b40e      	push	{r1, r2, r3}
 8005546:	b510      	push	{r4, lr}
 8005548:	b083      	sub	sp, #12
 800554a:	4604      	mov	r4, r0
 800554c:	aa05      	add	r2, sp, #20
 800554e:	f852 1b04 	ldr.w	r1, [r2], #4
	formatStrings(instance->TxBuffer);
 8005552:	9201      	str	r2, [sp, #4]
 8005554:	3004      	adds	r0, #4
 8005556:	f000 f9e1 	bl	800591c <vsprintf>
	usartWrite(instance);
 800555a:	4620      	mov	r0, r4
 800555c:	f7ff ff7a 	bl	8005454 <usartWrite>
}
 8005560:	b003      	add	sp, #12
 8005562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005566:	b003      	add	sp, #12
 8005568:	4770      	bx	lr
	...

0800556c <printf_u>:
void printf_u(Format_Param) {
 800556c:	b40f      	push	{r0, r1, r2, r3}
 800556e:	b510      	push	{r4, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	aa04      	add	r2, sp, #16
 8005574:	f852 1b04 	ldr.w	r1, [r2], #4
	formatStrings(DefaultUSART.TxBuffer);
 8005578:	9201      	str	r2, [sp, #4]
 800557a:	4c06      	ldr	r4, [pc, #24]	; (8005594 <printf_u+0x28>)
 800557c:	4620      	mov	r0, r4
 800557e:	f000 f9cd 	bl	800591c <vsprintf>
	usartWrite(&DefaultUSART);
 8005582:	1f20      	subs	r0, r4, #4
 8005584:	f7ff ff66 	bl	8005454 <usartWrite>
}
 8005588:	b002      	add	sp, #8
 800558a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800558e:	b004      	add	sp, #16
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20000d68 	.word	0x20000d68

08005598 <print_DMA>:
	formatStrings(instance->TxBuffer);
	usartWrite_IT(instance);
}
/** Non-Blocking mode print with dma
  */
void print_DMA(USART* instance, Format_Param) {
 8005598:	b40e      	push	{r1, r2, r3}
 800559a:	b510      	push	{r4, lr}
 800559c:	b083      	sub	sp, #12
	//check if the previous transmission is completed
	if(instance->TxStatus == InProcess) return;
 800559e:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d009      	beq.n	80055bc <print_DMA+0x24>
 80055a8:	4604      	mov	r4, r0
	formatStrings(instance->TxBuffer);
 80055aa:	aa06      	add	r2, sp, #24
 80055ac:	9201      	str	r2, [sp, #4]
 80055ae:	9905      	ldr	r1, [sp, #20]
 80055b0:	3004      	adds	r0, #4
 80055b2:	f000 f9b3 	bl	800591c <vsprintf>
	usartWrite_DMA(instance);
 80055b6:	4620      	mov	r0, r4
 80055b8:	f7ff ff84 	bl	80054c4 <usartWrite_DMA>
}
 80055bc:	b003      	add	sp, #12
 80055be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c2:	b003      	add	sp, #12
 80055c4:	4770      	bx	lr
	...

080055c8 <usartRead>:

/*=========================================================================*/


/*================================Reception================================*/
char* usartRead(USART* instance, uint16_t size) {
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	4605      	mov	r5, r0
 80055cc:	460e      	mov	r6, r1
	HAL_StatusTypeDef Status;
	memset(instance->RxBuffer, 0, strlen(instance->RxBuffer));
 80055ce:	f100 0468 	add.w	r4, r0, #104	; 0x68
 80055d2:	4620      	mov	r0, r4
 80055d4:	f7fa fe1c 	bl	8000210 <strlen>
 80055d8:	4602      	mov	r2, r0
 80055da:	2100      	movs	r1, #0
 80055dc:	4620      	mov	r0, r4
 80055de:	f000 f97c 	bl	80058da <memset>
	Status = HAL_UART_Receive(instance->huart, (uint8_t*)instance->RxBuffer, size, instance->RxTimeOut);
 80055e2:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 80055e6:	4632      	mov	r2, r6
 80055e8:	4621      	mov	r1, r4
 80055ea:	6828      	ldr	r0, [r5, #0]
 80055ec:	f7fe fbe8 	bl	8003dc0 <HAL_UART_Receive>
	if(Status == HAL_BUSY) instance->RxStatus = InProcess;
 80055f0:	2802      	cmp	r0, #2
 80055f2:	d009      	beq.n	8005608 <usartRead+0x40>
	else if(Status == HAL_TIMEOUT) {
 80055f4:	2803      	cmp	r0, #3
 80055f6:	d00b      	beq.n	8005610 <usartRead+0x48>
		__HAL_UNLOCK(instance->huart);
		instance->huart->gState = HAL_UART_STATE_READY;
		
		throwException("THL_Usart.c: usartRead() | TimeOut");
	}
	else if(Status == HAL_ERROR) {
 80055f8:	2801      	cmp	r0, #1
 80055fa:	d018      	beq.n	800562e <usartRead+0x66>
		instance->RxStatus = Error;
		throwException("THL_Usart.c: usartRead() | Error");
	}
	else if(Status == HAL_OK) instance->RxStatus = Completed;
 80055fc:	b910      	cbnz	r0, 8005604 <usartRead+0x3c>
 80055fe:	2303      	movs	r3, #3
 8005600:	f885 30d5 	strb.w	r3, [r5, #213]	; 0xd5
	return instance->RxBuffer;
}
 8005604:	4620      	mov	r0, r4
 8005606:	bd70      	pop	{r4, r5, r6, pc}
	if(Status == HAL_BUSY) instance->RxStatus = InProcess;
 8005608:	2302      	movs	r3, #2
 800560a:	f885 30d5 	strb.w	r3, [r5, #213]	; 0xd5
 800560e:	e7f9      	b.n	8005604 <usartRead+0x3c>
		instance->RxStatus = TimeOut;
 8005610:	2304      	movs	r3, #4
 8005612:	f885 30d5 	strb.w	r3, [r5, #213]	; 0xd5
		__HAL_UNLOCK(instance->huart);
 8005616:	682b      	ldr	r3, [r5, #0]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		instance->huart->gState = HAL_UART_STATE_READY;
 800561e:	682b      	ldr	r3, [r5, #0]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		throwException("THL_Usart.c: usartRead() | TimeOut");
 8005626:	4805      	ldr	r0, [pc, #20]	; (800563c <usartRead+0x74>)
 8005628:	f000 f8fa 	bl	8005820 <throwException>
 800562c:	e7ea      	b.n	8005604 <usartRead+0x3c>
		instance->RxStatus = Error;
 800562e:	2305      	movs	r3, #5
 8005630:	f885 30d5 	strb.w	r3, [r5, #213]	; 0xd5
		throwException("THL_Usart.c: usartRead() | Error");
 8005634:	4802      	ldr	r0, [pc, #8]	; (8005640 <usartRead+0x78>)
 8005636:	f000 f8f3 	bl	8005820 <throwException>
 800563a:	e7e3      	b.n	8005604 <usartRead+0x3c>
 800563c:	0800b624 	.word	0x0800b624
 8005640:	0800b648 	.word	0x0800b648

08005644 <usartRead_DMA>:
	return instance->RxBuffer;
}

char* usartRead_DMA(USART* instance, uint16_t size) {
	//check if the previous reception is completed
	if(instance->RxStatus == InProcess) return instance->RxBuffer;
 8005644:	f890 30d5 	ldrb.w	r3, [r0, #213]	; 0xd5
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d018      	beq.n	8005680 <usartRead_DMA+0x3c>
char* usartRead_DMA(USART* instance, uint16_t size) {
 800564e:	b570      	push	{r4, r5, r6, lr}
 8005650:	460e      	mov	r6, r1
 8005652:	4604      	mov	r4, r0
	HAL_StatusTypeDef Status;
	memset(instance->RxBuffer, 0, strlen(instance->RxBuffer));
 8005654:	f100 0568 	add.w	r5, r0, #104	; 0x68
 8005658:	4628      	mov	r0, r5
 800565a:	f7fa fdd9 	bl	8000210 <strlen>
 800565e:	4602      	mov	r2, r0
 8005660:	2100      	movs	r1, #0
 8005662:	4628      	mov	r0, r5
 8005664:	f000 f939 	bl	80058da <memset>
	Status = HAL_UART_Receive_DMA(instance->huart, (uint8_t*)instance->RxBuffer, size);
 8005668:	4632      	mov	r2, r6
 800566a:	4629      	mov	r1, r5
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	f7fe fc61 	bl	8003f34 <HAL_UART_Receive_DMA>
	if(Status == HAL_ERROR) {
 8005672:	2801      	cmp	r0, #1
 8005674:	d006      	beq.n	8005684 <usartRead_DMA+0x40>
		instance->RxStatus = Error;
		throwException("THL_Usart.c: usartRead_DMA() | Error");
		return instance->RxBuffer;
	}
	instance->RxStatus = InProcess;
 8005676:	2302      	movs	r3, #2
 8005678:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
	return instance->RxBuffer;
 800567c:	4628      	mov	r0, r5
} 
 800567e:	bd70      	pop	{r4, r5, r6, pc}
	if(instance->RxStatus == InProcess) return instance->RxBuffer;
 8005680:	3068      	adds	r0, #104	; 0x68
 8005682:	4770      	bx	lr
		instance->RxStatus = Error;
 8005684:	2305      	movs	r3, #5
 8005686:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
		throwException("THL_Usart.c: usartRead_DMA() | Error");
 800568a:	4802      	ldr	r0, [pc, #8]	; (8005694 <usartRead_DMA+0x50>)
 800568c:	f000 f8c8 	bl	8005820 <throwException>
		return instance->RxBuffer;
 8005690:	4628      	mov	r0, r5
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	0800b66c 	.word	0x0800b66c

08005698 <IT_CallBack_UsartRC>:
			ActiveUSARTs[i]->RxStatus = Completed;
		}
	}
}

__weak void IT_CallBack_UsartRC(USART* instance){
 8005698:	4770      	bx	lr
	...

0800569c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveUSARTs; i++) {
 80056a0:	2400      	movs	r4, #0
 80056a2:	e000      	b.n	80056a6 <HAL_UART_RxCpltCallback+0xa>
 80056a4:	3401      	adds	r4, #1
 80056a6:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <HAL_UART_RxCpltCallback+0x34>)
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	429c      	cmp	r4, r3
 80056ac:	da0e      	bge.n	80056cc <HAL_UART_RxCpltCallback+0x30>
		if(ActiveUSARTs[i]->huart == huart) {
 80056ae:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <HAL_UART_RxCpltCallback+0x38>)
 80056b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80056b4:	6803      	ldr	r3, [r0, #0]
 80056b6:	42ab      	cmp	r3, r5
 80056b8:	d1f4      	bne.n	80056a4 <HAL_UART_RxCpltCallback+0x8>
			IT_CallBack_UsartRC(ActiveUSARTs[i]);
 80056ba:	f7ff ffed 	bl	8005698 <IT_CallBack_UsartRC>
			ActiveUSARTs[i]->RxStatus = Completed;
 80056be:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <HAL_UART_RxCpltCallback+0x38>)
 80056c0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80056c4:	2203      	movs	r2, #3
 80056c6:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 80056ca:	e7eb      	b.n	80056a4 <HAL_UART_RxCpltCallback+0x8>
}
 80056cc:	bd38      	pop	{r3, r4, r5, pc}
 80056ce:	bf00      	nop
 80056d0:	2000069a 	.word	0x2000069a
 80056d4:	20000e3c 	.word	0x20000e3c

080056d8 <readWord>:
	 UNUSED(instance);
}


void readWord(USART* instance, char* str) {
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	4606      	mov	r6, r0
 80056dc:	460d      	mov	r5, r1
	int i = 0;
	str[i] = usartRead(instance, 1)[0];
 80056de:	2101      	movs	r1, #1
 80056e0:	f7ff ff72 	bl	80055c8 <usartRead>
 80056e4:	7803      	ldrb	r3, [r0, #0]
 80056e6:	702b      	strb	r3, [r5, #0]
	int i = 0;
 80056e8:	2400      	movs	r4, #0
	while(str[i] != ' ' && str[i] != '\r' && str[i] != '\n') 
 80056ea:	e006      	b.n	80056fa <readWord+0x22>
		str[++i] = usartRead(instance, 1)[0];
 80056ec:	3401      	adds	r4, #1
 80056ee:	2101      	movs	r1, #1
 80056f0:	4630      	mov	r0, r6
 80056f2:	f7ff ff69 	bl	80055c8 <usartRead>
 80056f6:	7803      	ldrb	r3, [r0, #0]
 80056f8:	552b      	strb	r3, [r5, r4]
	while(str[i] != ' ' && str[i] != '\r' && str[i] != '\n') 
 80056fa:	192a      	adds	r2, r5, r4
 80056fc:	5d2b      	ldrb	r3, [r5, r4]
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d003      	beq.n	800570a <readWord+0x32>
 8005702:	2b0d      	cmp	r3, #13
 8005704:	d001      	beq.n	800570a <readWord+0x32>
 8005706:	2b0a      	cmp	r3, #10
 8005708:	d1f0      	bne.n	80056ec <readWord+0x14>
	str[i] = '\0';
 800570a:	2300      	movs	r3, #0
 800570c:	7013      	strb	r3, [r2, #0]
 800570e:	bd70      	pop	{r4, r5, r6, pc}

08005710 <readLine>:
}
void readLine(USART* instance, char* str) {
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	4606      	mov	r6, r0
 8005714:	460d      	mov	r5, r1
	int i = 0;
	str[i] = usartRead(instance, 1)[0];
 8005716:	2101      	movs	r1, #1
 8005718:	f7ff ff56 	bl	80055c8 <usartRead>
 800571c:	7803      	ldrb	r3, [r0, #0]
 800571e:	702b      	strb	r3, [r5, #0]
	int i = 0;
 8005720:	2400      	movs	r4, #0
	while(str[i] != '\r' && str[i] != '\n') 
 8005722:	e006      	b.n	8005732 <readLine+0x22>
		str[++i] = usartRead(instance, 1)[0];
 8005724:	3401      	adds	r4, #1
 8005726:	2101      	movs	r1, #1
 8005728:	4630      	mov	r0, r6
 800572a:	f7ff ff4d 	bl	80055c8 <usartRead>
 800572e:	7803      	ldrb	r3, [r0, #0]
 8005730:	552b      	strb	r3, [r5, r4]
	while(str[i] != '\r' && str[i] != '\n') 
 8005732:	192a      	adds	r2, r5, r4
 8005734:	5d2b      	ldrb	r3, [r5, r4]
 8005736:	2b0d      	cmp	r3, #13
 8005738:	d001      	beq.n	800573e <readLine+0x2e>
 800573a:	2b0a      	cmp	r3, #10
 800573c:	d1f2      	bne.n	8005724 <readLine+0x14>
	str[i] = '\0';
 800573e:	2300      	movs	r3, #0
 8005740:	7013      	strb	r3, [r2, #0]
 8005742:	bd70      	pop	{r4, r5, r6, pc}

08005744 <readWordf>:
}

void readWordf(char* str) {
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4605      	mov	r5, r0
	int i = 0;
	str[i] = usartRead(&DefaultUSART, 1)[0];
 8005748:	2101      	movs	r1, #1
 800574a:	480c      	ldr	r0, [pc, #48]	; (800577c <readWordf+0x38>)
 800574c:	f7ff ff3c 	bl	80055c8 <usartRead>
 8005750:	7803      	ldrb	r3, [r0, #0]
 8005752:	702b      	strb	r3, [r5, #0]
	int i = 0;
 8005754:	2400      	movs	r4, #0
	while(str[i] != ' ' && str[i] != '\r' && str[i] != '\n') 
 8005756:	e006      	b.n	8005766 <readWordf+0x22>
		str[++i] = usartRead(&DefaultUSART, 1)[0];
 8005758:	3401      	adds	r4, #1
 800575a:	2101      	movs	r1, #1
 800575c:	4807      	ldr	r0, [pc, #28]	; (800577c <readWordf+0x38>)
 800575e:	f7ff ff33 	bl	80055c8 <usartRead>
 8005762:	7803      	ldrb	r3, [r0, #0]
 8005764:	552b      	strb	r3, [r5, r4]
	while(str[i] != ' ' && str[i] != '\r' && str[i] != '\n') 
 8005766:	192a      	adds	r2, r5, r4
 8005768:	5d2b      	ldrb	r3, [r5, r4]
 800576a:	2b20      	cmp	r3, #32
 800576c:	d003      	beq.n	8005776 <readWordf+0x32>
 800576e:	2b0d      	cmp	r3, #13
 8005770:	d001      	beq.n	8005776 <readWordf+0x32>
 8005772:	2b0a      	cmp	r3, #10
 8005774:	d1f0      	bne.n	8005758 <readWordf+0x14>
	str[i] = '\0';
 8005776:	2300      	movs	r3, #0
 8005778:	7013      	strb	r3, [r2, #0]
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	20000d64 	.word	0x20000d64

08005780 <readLinef>:
}
void readLinef(char* str) {
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4605      	mov	r5, r0
	int i = 0;
	str[i] = usartRead(&DefaultUSART, 1)[0];
 8005784:	2101      	movs	r1, #1
 8005786:	480b      	ldr	r0, [pc, #44]	; (80057b4 <readLinef+0x34>)
 8005788:	f7ff ff1e 	bl	80055c8 <usartRead>
 800578c:	7803      	ldrb	r3, [r0, #0]
 800578e:	702b      	strb	r3, [r5, #0]
	int i = 0;
 8005790:	2400      	movs	r4, #0
	while(str[i] != '\r' && str[i] != '\n') 
 8005792:	e006      	b.n	80057a2 <readLinef+0x22>
		str[++i] = usartRead(&DefaultUSART, 1)[0];
 8005794:	3401      	adds	r4, #1
 8005796:	2101      	movs	r1, #1
 8005798:	4806      	ldr	r0, [pc, #24]	; (80057b4 <readLinef+0x34>)
 800579a:	f7ff ff15 	bl	80055c8 <usartRead>
 800579e:	7803      	ldrb	r3, [r0, #0]
 80057a0:	552b      	strb	r3, [r5, r4]
	while(str[i] != '\r' && str[i] != '\n') 
 80057a2:	192a      	adds	r2, r5, r4
 80057a4:	5d2b      	ldrb	r3, [r5, r4]
 80057a6:	2b0d      	cmp	r3, #13
 80057a8:	d001      	beq.n	80057ae <readLinef+0x2e>
 80057aa:	2b0a      	cmp	r3, #10
 80057ac:	d1f2      	bne.n	8005794 <readLinef+0x14>
	str[i] = '\0';
 80057ae:	2300      	movs	r3, #0
 80057b0:	7013      	strb	r3, [r2, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	20000d64 	.word	0x20000d64

080057b8 <scan>:
}
int scan(USART* instance, Format_Param) {
 80057b8:	b40e      	push	{r1, r2, r3}
 80057ba:	b530      	push	{r4, r5, lr}
 80057bc:	b09a      	sub	sp, #104	; 0x68
 80057be:	ac1d      	add	r4, sp, #116	; 0x74
 80057c0:	f854 5b04 	ldr.w	r5, [r4], #4
	char scan_str[USART_RxBuffer_Size];
	readLine(instance, scan_str);
 80057c4:	a901      	add	r1, sp, #4
 80057c6:	f7ff ffa3 	bl	8005710 <readLine>
	va_list args; 
    va_start(args, format); 
 80057ca:	9400      	str	r4, [sp, #0]
	int rtn = vsscanf(scan_str, format, args);
 80057cc:	4622      	mov	r2, r4
 80057ce:	4629      	mov	r1, r5
 80057d0:	a801      	add	r0, sp, #4
 80057d2:	f000 f8d1 	bl	8005978 <vsscanf>
	va_end(args); 
	return rtn;
}
 80057d6:	b01a      	add	sp, #104	; 0x68
 80057d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057dc:	b003      	add	sp, #12
 80057de:	4770      	bx	lr

080057e0 <scanf_u>:
/*Implement usart-scanf by overloading fgetc is quite troublesome,
 *while C is not oop and scanf() is not overwrite/overload-able, 
 *thus we provide scanf_u instead, use it as if you are using scanf.
 *Here, 'u' in scanf_u stands for usart.	
 */
int scanf_u(Format_Param) {
 80057e0:	b40f      	push	{r0, r1, r2, r3}
 80057e2:	b530      	push	{r4, r5, lr}
 80057e4:	b09b      	sub	sp, #108	; 0x6c
 80057e6:	ac1e      	add	r4, sp, #120	; 0x78
 80057e8:	f854 5b04 	ldr.w	r5, [r4], #4
	char scanf_str[USART_RxBuffer_Size];
	readLine(&DefaultUSART, scanf_str);
 80057ec:	a901      	add	r1, sp, #4
 80057ee:	4807      	ldr	r0, [pc, #28]	; (800580c <scanf_u+0x2c>)
 80057f0:	f7ff ff8e 	bl	8005710 <readLine>
	va_list args; 
    va_start(args, format); 
 80057f4:	9400      	str	r4, [sp, #0]
	int rtn = vsscanf(scanf_str, format, args);
 80057f6:	4622      	mov	r2, r4
 80057f8:	4629      	mov	r1, r5
 80057fa:	a801      	add	r0, sp, #4
 80057fc:	f000 f8bc 	bl	8005978 <vsscanf>
	va_end(args); 
	return rtn;
}
 8005800:	b01b      	add	sp, #108	; 0x6c
 8005802:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005806:	b004      	add	sp, #16
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20000d64 	.word	0x20000d64

08005810 <HAL_UART_ErrorCallback>:

/*=========================================================================*/



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005810:	b508      	push	{r3, lr}
	throwException("THL_Usart.c: HAL_UART_ErrorCallback()");
 8005812:	4802      	ldr	r0, [pc, #8]	; (800581c <HAL_UART_ErrorCallback+0xc>)
 8005814:	f000 f804 	bl	8005820 <throwException>
 8005818:	bd08      	pop	{r3, pc}
 800581a:	bf00      	nop
 800581c:	0800b5fc 	.word	0x0800b5fc

08005820 <throwException>:

/*==========================Exception Handling==============================*/
__weak void Exception_Handler(const char* str) {
	UNUSED(str);
}
void throwException(const char* str) {
 8005820:	b508      	push	{r3, lr}
	Exception_Handler(str);
 8005822:	f7ff fd49 	bl	80052b8 <Exception_Handler>
 8005826:	bd08      	pop	{r3, pc}

08005828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005860 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800582c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800582e:	e003      	b.n	8005838 <LoopCopyDataInit>

08005830 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005832:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005834:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005836:	3104      	adds	r1, #4

08005838 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005838:	480b      	ldr	r0, [pc, #44]	; (8005868 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800583a:	4b0c      	ldr	r3, [pc, #48]	; (800586c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800583c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800583e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005840:	d3f6      	bcc.n	8005830 <CopyDataInit>
  ldr  r2, =_sbss
 8005842:	4a0b      	ldr	r2, [pc, #44]	; (8005870 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005844:	e002      	b.n	800584c <LoopFillZerobss>

08005846 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005846:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005848:	f842 3b04 	str.w	r3, [r2], #4

0800584c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800584c:	4b09      	ldr	r3, [pc, #36]	; (8005874 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800584e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005850:	d3f9      	bcc.n	8005846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005852:	f7ff faf7 	bl	8004e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005856:	f000 f811 	bl	800587c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800585a:	f7fe ff5f 	bl	800471c <main>
  bx  lr    
 800585e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005860:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005864:	0800ba5c 	.word	0x0800ba5c
  ldr  r0, =_sdata
 8005868:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800586c:	2000067c 	.word	0x2000067c
  ldr  r2, =_sbss
 8005870:	2000067c 	.word	0x2000067c
  ldr  r3, = _ebss
 8005874:	20000e9c 	.word	0x20000e9c

08005878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005878:	e7fe      	b.n	8005878 <ADC_IRQHandler>
	...

0800587c <__libc_init_array>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4e0d      	ldr	r6, [pc, #52]	; (80058b4 <__libc_init_array+0x38>)
 8005880:	4c0d      	ldr	r4, [pc, #52]	; (80058b8 <__libc_init_array+0x3c>)
 8005882:	1ba4      	subs	r4, r4, r6
 8005884:	10a4      	asrs	r4, r4, #2
 8005886:	2500      	movs	r5, #0
 8005888:	42a5      	cmp	r5, r4
 800588a:	d109      	bne.n	80058a0 <__libc_init_array+0x24>
 800588c:	4e0b      	ldr	r6, [pc, #44]	; (80058bc <__libc_init_array+0x40>)
 800588e:	4c0c      	ldr	r4, [pc, #48]	; (80058c0 <__libc_init_array+0x44>)
 8005890:	f005 fb28 	bl	800aee4 <_init>
 8005894:	1ba4      	subs	r4, r4, r6
 8005896:	10a4      	asrs	r4, r4, #2
 8005898:	2500      	movs	r5, #0
 800589a:	42a5      	cmp	r5, r4
 800589c:	d105      	bne.n	80058aa <__libc_init_array+0x2e>
 800589e:	bd70      	pop	{r4, r5, r6, pc}
 80058a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058a4:	4798      	blx	r3
 80058a6:	3501      	adds	r5, #1
 80058a8:	e7ee      	b.n	8005888 <__libc_init_array+0xc>
 80058aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058ae:	4798      	blx	r3
 80058b0:	3501      	adds	r5, #1
 80058b2:	e7f2      	b.n	800589a <__libc_init_array+0x1e>
 80058b4:	0800ba54 	.word	0x0800ba54
 80058b8:	0800ba54 	.word	0x0800ba54
 80058bc:	0800ba54 	.word	0x0800ba54
 80058c0:	0800ba58 	.word	0x0800ba58

080058c4 <memcpy>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	1e43      	subs	r3, r0, #1
 80058c8:	440a      	add	r2, r1
 80058ca:	4291      	cmp	r1, r2
 80058cc:	d100      	bne.n	80058d0 <memcpy+0xc>
 80058ce:	bd10      	pop	{r4, pc}
 80058d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d8:	e7f7      	b.n	80058ca <memcpy+0x6>

080058da <memset>:
 80058da:	4402      	add	r2, r0
 80058dc:	4603      	mov	r3, r0
 80058de:	4293      	cmp	r3, r2
 80058e0:	d100      	bne.n	80058e4 <memset+0xa>
 80058e2:	4770      	bx	lr
 80058e4:	f803 1b01 	strb.w	r1, [r3], #1
 80058e8:	e7f9      	b.n	80058de <memset+0x4>

080058ea <_vsprintf_r>:
 80058ea:	b510      	push	{r4, lr}
 80058ec:	b09a      	sub	sp, #104	; 0x68
 80058ee:	f44f 7402 	mov.w	r4, #520	; 0x208
 80058f2:	9100      	str	r1, [sp, #0]
 80058f4:	9104      	str	r1, [sp, #16]
 80058f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058fa:	9102      	str	r1, [sp, #8]
 80058fc:	9105      	str	r1, [sp, #20]
 80058fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005902:	f8ad 100e 	strh.w	r1, [sp, #14]
 8005906:	4669      	mov	r1, sp
 8005908:	f8ad 400c 	strh.w	r4, [sp, #12]
 800590c:	f000 f840 	bl	8005990 <_svfprintf_r>
 8005910:	9b00      	ldr	r3, [sp, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	b01a      	add	sp, #104	; 0x68
 8005918:	bd10      	pop	{r4, pc}
	...

0800591c <vsprintf>:
 800591c:	4613      	mov	r3, r2
 800591e:	460a      	mov	r2, r1
 8005920:	4601      	mov	r1, r0
 8005922:	4802      	ldr	r0, [pc, #8]	; (800592c <vsprintf+0x10>)
 8005924:	6800      	ldr	r0, [r0, #0]
 8005926:	f7ff bfe0 	b.w	80058ea <_vsprintf_r>
 800592a:	bf00      	nop
 800592c:	2000000c 	.word	0x2000000c

08005930 <_vsscanf_r>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	b09a      	sub	sp, #104	; 0x68
 8005934:	4604      	mov	r4, r0
 8005936:	461e      	mov	r6, r3
 8005938:	4608      	mov	r0, r1
 800593a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800593e:	4615      	mov	r5, r2
 8005940:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005944:	9100      	str	r1, [sp, #0]
 8005946:	9104      	str	r1, [sp, #16]
 8005948:	f7fa fc62 	bl	8000210 <strlen>
 800594c:	4b09      	ldr	r3, [pc, #36]	; (8005974 <_vsscanf_r+0x44>)
 800594e:	9309      	str	r3, [sp, #36]	; 0x24
 8005950:	2100      	movs	r1, #0
 8005952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005956:	9001      	str	r0, [sp, #4]
 8005958:	9005      	str	r0, [sp, #20]
 800595a:	910d      	str	r1, [sp, #52]	; 0x34
 800595c:	9112      	str	r1, [sp, #72]	; 0x48
 800595e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005962:	462a      	mov	r2, r5
 8005964:	4633      	mov	r3, r6
 8005966:	4669      	mov	r1, sp
 8005968:	4620      	mov	r0, r4
 800596a:	f000 ffe5 	bl	8006938 <__ssvfscanf_r>
 800596e:	b01a      	add	sp, #104	; 0x68
 8005970:	bd70      	pop	{r4, r5, r6, pc}
 8005972:	bf00      	nop
 8005974:	0800598d 	.word	0x0800598d

08005978 <vsscanf>:
 8005978:	4613      	mov	r3, r2
 800597a:	460a      	mov	r2, r1
 800597c:	4601      	mov	r1, r0
 800597e:	4802      	ldr	r0, [pc, #8]	; (8005988 <vsscanf+0x10>)
 8005980:	6800      	ldr	r0, [r0, #0]
 8005982:	f7ff bfd5 	b.w	8005930 <_vsscanf_r>
 8005986:	bf00      	nop
 8005988:	2000000c 	.word	0x2000000c

0800598c <__seofread>:
 800598c:	2000      	movs	r0, #0
 800598e:	4770      	bx	lr

08005990 <_svfprintf_r>:
 8005990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005994:	b0bd      	sub	sp, #244	; 0xf4
 8005996:	468a      	mov	sl, r1
 8005998:	4615      	mov	r5, r2
 800599a:	461f      	mov	r7, r3
 800599c:	4683      	mov	fp, r0
 800599e:	f002 fbcd 	bl	800813c <_localeconv_r>
 80059a2:	6803      	ldr	r3, [r0, #0]
 80059a4:	930d      	str	r3, [sp, #52]	; 0x34
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fa fc32 	bl	8000210 <strlen>
 80059ac:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80059b0:	9008      	str	r0, [sp, #32]
 80059b2:	061b      	lsls	r3, r3, #24
 80059b4:	d518      	bpl.n	80059e8 <_svfprintf_r+0x58>
 80059b6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80059ba:	b9ab      	cbnz	r3, 80059e8 <_svfprintf_r+0x58>
 80059bc:	2140      	movs	r1, #64	; 0x40
 80059be:	4658      	mov	r0, fp
 80059c0:	f002 fbd2 	bl	8008168 <_malloc_r>
 80059c4:	f8ca 0000 	str.w	r0, [sl]
 80059c8:	f8ca 0010 	str.w	r0, [sl, #16]
 80059cc:	b948      	cbnz	r0, 80059e2 <_svfprintf_r+0x52>
 80059ce:	230c      	movs	r3, #12
 80059d0:	f8cb 3000 	str.w	r3, [fp]
 80059d4:	f04f 33ff 	mov.w	r3, #4294967295
 80059d8:	9309      	str	r3, [sp, #36]	; 0x24
 80059da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059dc:	b03d      	add	sp, #244	; 0xf4
 80059de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e2:	2340      	movs	r3, #64	; 0x40
 80059e4:	f8ca 3014 	str.w	r3, [sl, #20]
 80059e8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8005c50 <_svfprintf_r+0x2c0>
 80059ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80059f0:	2300      	movs	r3, #0
 80059f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80059f4:	941f      	str	r4, [sp, #124]	; 0x7c
 80059f6:	9321      	str	r3, [sp, #132]	; 0x84
 80059f8:	9320      	str	r3, [sp, #128]	; 0x80
 80059fa:	9505      	str	r5, [sp, #20]
 80059fc:	9303      	str	r3, [sp, #12]
 80059fe:	9311      	str	r3, [sp, #68]	; 0x44
 8005a00:	9310      	str	r3, [sp, #64]	; 0x40
 8005a02:	9309      	str	r3, [sp, #36]	; 0x24
 8005a04:	9d05      	ldr	r5, [sp, #20]
 8005a06:	462b      	mov	r3, r5
 8005a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a0c:	b112      	cbz	r2, 8005a14 <_svfprintf_r+0x84>
 8005a0e:	2a25      	cmp	r2, #37	; 0x25
 8005a10:	f040 8083 	bne.w	8005b1a <_svfprintf_r+0x18a>
 8005a14:	9b05      	ldr	r3, [sp, #20]
 8005a16:	1aee      	subs	r6, r5, r3
 8005a18:	d00d      	beq.n	8005a36 <_svfprintf_r+0xa6>
 8005a1a:	e884 0048 	stmia.w	r4, {r3, r6}
 8005a1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a20:	4433      	add	r3, r6
 8005a22:	9321      	str	r3, [sp, #132]	; 0x84
 8005a24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a26:	3301      	adds	r3, #1
 8005a28:	2b07      	cmp	r3, #7
 8005a2a:	9320      	str	r3, [sp, #128]	; 0x80
 8005a2c:	dc77      	bgt.n	8005b1e <_svfprintf_r+0x18e>
 8005a2e:	3408      	adds	r4, #8
 8005a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a32:	4433      	add	r3, r6
 8005a34:	9309      	str	r3, [sp, #36]	; 0x24
 8005a36:	782b      	ldrb	r3, [r5, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8729 	beq.w	8006890 <_svfprintf_r+0xf00>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	1c69      	adds	r1, r5, #1
 8005a42:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005a46:	461a      	mov	r2, r3
 8005a48:	f04f 39ff 	mov.w	r9, #4294967295
 8005a4c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a4e:	461d      	mov	r5, r3
 8005a50:	200a      	movs	r0, #10
 8005a52:	1c4e      	adds	r6, r1, #1
 8005a54:	7809      	ldrb	r1, [r1, #0]
 8005a56:	9605      	str	r6, [sp, #20]
 8005a58:	9102      	str	r1, [sp, #8]
 8005a5a:	9902      	ldr	r1, [sp, #8]
 8005a5c:	3920      	subs	r1, #32
 8005a5e:	2958      	cmp	r1, #88	; 0x58
 8005a60:	f200 8418 	bhi.w	8006294 <_svfprintf_r+0x904>
 8005a64:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005a68:	041600a6 	.word	0x041600a6
 8005a6c:	00ab0416 	.word	0x00ab0416
 8005a70:	04160416 	.word	0x04160416
 8005a74:	04160416 	.word	0x04160416
 8005a78:	04160416 	.word	0x04160416
 8005a7c:	006500ae 	.word	0x006500ae
 8005a80:	00b70416 	.word	0x00b70416
 8005a84:	041600ba 	.word	0x041600ba
 8005a88:	00da00d7 	.word	0x00da00d7
 8005a8c:	00da00da 	.word	0x00da00da
 8005a90:	00da00da 	.word	0x00da00da
 8005a94:	00da00da 	.word	0x00da00da
 8005a98:	00da00da 	.word	0x00da00da
 8005a9c:	04160416 	.word	0x04160416
 8005aa0:	04160416 	.word	0x04160416
 8005aa4:	04160416 	.word	0x04160416
 8005aa8:	04160416 	.word	0x04160416
 8005aac:	04160416 	.word	0x04160416
 8005ab0:	012b0115 	.word	0x012b0115
 8005ab4:	012b0416 	.word	0x012b0416
 8005ab8:	04160416 	.word	0x04160416
 8005abc:	04160416 	.word	0x04160416
 8005ac0:	041600ed 	.word	0x041600ed
 8005ac4:	03400416 	.word	0x03400416
 8005ac8:	04160416 	.word	0x04160416
 8005acc:	04160416 	.word	0x04160416
 8005ad0:	03a80416 	.word	0x03a80416
 8005ad4:	04160416 	.word	0x04160416
 8005ad8:	04160086 	.word	0x04160086
 8005adc:	04160416 	.word	0x04160416
 8005ae0:	04160416 	.word	0x04160416
 8005ae4:	04160416 	.word	0x04160416
 8005ae8:	04160416 	.word	0x04160416
 8005aec:	01070416 	.word	0x01070416
 8005af0:	012b006b 	.word	0x012b006b
 8005af4:	012b012b 	.word	0x012b012b
 8005af8:	006b00f0 	.word	0x006b00f0
 8005afc:	04160416 	.word	0x04160416
 8005b00:	041600fa 	.word	0x041600fa
 8005b04:	03420322 	.word	0x03420322
 8005b08:	01010376 	.word	0x01010376
 8005b0c:	03870416 	.word	0x03870416
 8005b10:	03aa0416 	.word	0x03aa0416
 8005b14:	04160416 	.word	0x04160416
 8005b18:	03c2      	.short	0x03c2
 8005b1a:	461d      	mov	r5, r3
 8005b1c:	e773      	b.n	8005a06 <_svfprintf_r+0x76>
 8005b1e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b20:	4651      	mov	r1, sl
 8005b22:	4658      	mov	r0, fp
 8005b24:	f004 fa72 	bl	800a00c <__ssprint_r>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	f040 8692 	bne.w	8006852 <_svfprintf_r+0xec2>
 8005b2e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b30:	e77e      	b.n	8005a30 <_svfprintf_r+0xa0>
 8005b32:	2301      	movs	r3, #1
 8005b34:	222b      	movs	r2, #43	; 0x2b
 8005b36:	9905      	ldr	r1, [sp, #20]
 8005b38:	e78b      	b.n	8005a52 <_svfprintf_r+0xc2>
 8005b3a:	460f      	mov	r7, r1
 8005b3c:	e7fb      	b.n	8005b36 <_svfprintf_r+0x1a6>
 8005b3e:	b10b      	cbz	r3, 8005b44 <_svfprintf_r+0x1b4>
 8005b40:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005b44:	06ae      	lsls	r6, r5, #26
 8005b46:	f140 80aa 	bpl.w	8005c9e <_svfprintf_r+0x30e>
 8005b4a:	3707      	adds	r7, #7
 8005b4c:	f027 0707 	bic.w	r7, r7, #7
 8005b50:	f107 0308 	add.w	r3, r7, #8
 8005b54:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005b58:	9304      	str	r3, [sp, #16]
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	f177 0300 	sbcs.w	r3, r7, #0
 8005b60:	da06      	bge.n	8005b70 <_svfprintf_r+0x1e0>
 8005b62:	4276      	negs	r6, r6
 8005b64:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8005b68:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005b6c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005b70:	2301      	movs	r3, #1
 8005b72:	e2ca      	b.n	800610a <_svfprintf_r+0x77a>
 8005b74:	b10b      	cbz	r3, 8005b7a <_svfprintf_r+0x1ea>
 8005b76:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005b7a:	4b37      	ldr	r3, [pc, #220]	; (8005c58 <_svfprintf_r+0x2c8>)
 8005b7c:	9311      	str	r3, [sp, #68]	; 0x44
 8005b7e:	06ab      	lsls	r3, r5, #26
 8005b80:	f140 8339 	bpl.w	80061f6 <_svfprintf_r+0x866>
 8005b84:	3707      	adds	r7, #7
 8005b86:	f027 0707 	bic.w	r7, r7, #7
 8005b8a:	f107 0308 	add.w	r3, r7, #8
 8005b8e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005b92:	9304      	str	r3, [sp, #16]
 8005b94:	07e8      	lsls	r0, r5, #31
 8005b96:	d50b      	bpl.n	8005bb0 <_svfprintf_r+0x220>
 8005b98:	ea56 0307 	orrs.w	r3, r6, r7
 8005b9c:	d008      	beq.n	8005bb0 <_svfprintf_r+0x220>
 8005b9e:	2330      	movs	r3, #48	; 0x30
 8005ba0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005ba4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005ba8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8005bac:	f045 0502 	orr.w	r5, r5, #2
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e2a7      	b.n	8006104 <_svfprintf_r+0x774>
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	d1be      	bne.n	8005b36 <_svfprintf_r+0x1a6>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	2220      	movs	r2, #32
 8005bbc:	e7bb      	b.n	8005b36 <_svfprintf_r+0x1a6>
 8005bbe:	f045 0501 	orr.w	r5, r5, #1
 8005bc2:	e7b8      	b.n	8005b36 <_svfprintf_r+0x1a6>
 8005bc4:	683e      	ldr	r6, [r7, #0]
 8005bc6:	960a      	str	r6, [sp, #40]	; 0x28
 8005bc8:	2e00      	cmp	r6, #0
 8005bca:	f107 0104 	add.w	r1, r7, #4
 8005bce:	dab4      	bge.n	8005b3a <_svfprintf_r+0x1aa>
 8005bd0:	4276      	negs	r6, r6
 8005bd2:	960a      	str	r6, [sp, #40]	; 0x28
 8005bd4:	460f      	mov	r7, r1
 8005bd6:	f045 0504 	orr.w	r5, r5, #4
 8005bda:	e7ac      	b.n	8005b36 <_svfprintf_r+0x1a6>
 8005bdc:	9905      	ldr	r1, [sp, #20]
 8005bde:	1c4e      	adds	r6, r1, #1
 8005be0:	7809      	ldrb	r1, [r1, #0]
 8005be2:	9102      	str	r1, [sp, #8]
 8005be4:	292a      	cmp	r1, #42	; 0x2a
 8005be6:	d010      	beq.n	8005c0a <_svfprintf_r+0x27a>
 8005be8:	f04f 0900 	mov.w	r9, #0
 8005bec:	9605      	str	r6, [sp, #20]
 8005bee:	9902      	ldr	r1, [sp, #8]
 8005bf0:	3930      	subs	r1, #48	; 0x30
 8005bf2:	2909      	cmp	r1, #9
 8005bf4:	f63f af31 	bhi.w	8005a5a <_svfprintf_r+0xca>
 8005bf8:	fb00 1909 	mla	r9, r0, r9, r1
 8005bfc:	9905      	ldr	r1, [sp, #20]
 8005bfe:	460e      	mov	r6, r1
 8005c00:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005c04:	9102      	str	r1, [sp, #8]
 8005c06:	9605      	str	r6, [sp, #20]
 8005c08:	e7f1      	b.n	8005bee <_svfprintf_r+0x25e>
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	9605      	str	r6, [sp, #20]
 8005c0e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8005c12:	3704      	adds	r7, #4
 8005c14:	e78f      	b.n	8005b36 <_svfprintf_r+0x1a6>
 8005c16:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005c1a:	e78c      	b.n	8005b36 <_svfprintf_r+0x1a6>
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	910a      	str	r1, [sp, #40]	; 0x28
 8005c20:	9902      	ldr	r1, [sp, #8]
 8005c22:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005c24:	3930      	subs	r1, #48	; 0x30
 8005c26:	fb00 1106 	mla	r1, r0, r6, r1
 8005c2a:	910a      	str	r1, [sp, #40]	; 0x28
 8005c2c:	9905      	ldr	r1, [sp, #20]
 8005c2e:	460e      	mov	r6, r1
 8005c30:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005c34:	9102      	str	r1, [sp, #8]
 8005c36:	9902      	ldr	r1, [sp, #8]
 8005c38:	9605      	str	r6, [sp, #20]
 8005c3a:	3930      	subs	r1, #48	; 0x30
 8005c3c:	2909      	cmp	r1, #9
 8005c3e:	d9ef      	bls.n	8005c20 <_svfprintf_r+0x290>
 8005c40:	e70b      	b.n	8005a5a <_svfprintf_r+0xca>
 8005c42:	f045 0508 	orr.w	r5, r5, #8
 8005c46:	e776      	b.n	8005b36 <_svfprintf_r+0x1a6>
 8005c48:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8005c4c:	e773      	b.n	8005b36 <_svfprintf_r+0x1a6>
 8005c4e:	bf00      	nop
	...
 8005c58:	0800b714 	.word	0x0800b714
 8005c5c:	9905      	ldr	r1, [sp, #20]
 8005c5e:	7809      	ldrb	r1, [r1, #0]
 8005c60:	296c      	cmp	r1, #108	; 0x6c
 8005c62:	d105      	bne.n	8005c70 <_svfprintf_r+0x2e0>
 8005c64:	9905      	ldr	r1, [sp, #20]
 8005c66:	3101      	adds	r1, #1
 8005c68:	9105      	str	r1, [sp, #20]
 8005c6a:	f045 0520 	orr.w	r5, r5, #32
 8005c6e:	e762      	b.n	8005b36 <_svfprintf_r+0x1a6>
 8005c70:	f045 0510 	orr.w	r5, r5, #16
 8005c74:	e75f      	b.n	8005b36 <_svfprintf_r+0x1a6>
 8005c76:	1d3b      	adds	r3, r7, #4
 8005c78:	9304      	str	r3, [sp, #16]
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005c82:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005c86:	f04f 0901 	mov.w	r9, #1
 8005c8a:	4637      	mov	r7, r6
 8005c8c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8005c90:	e11b      	b.n	8005eca <_svfprintf_r+0x53a>
 8005c92:	b10b      	cbz	r3, 8005c98 <_svfprintf_r+0x308>
 8005c94:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005c98:	f045 0510 	orr.w	r5, r5, #16
 8005c9c:	e752      	b.n	8005b44 <_svfprintf_r+0x1b4>
 8005c9e:	f015 0f10 	tst.w	r5, #16
 8005ca2:	f107 0304 	add.w	r3, r7, #4
 8005ca6:	d003      	beq.n	8005cb0 <_svfprintf_r+0x320>
 8005ca8:	683e      	ldr	r6, [r7, #0]
 8005caa:	9304      	str	r3, [sp, #16]
 8005cac:	17f7      	asrs	r7, r6, #31
 8005cae:	e754      	b.n	8005b5a <_svfprintf_r+0x1ca>
 8005cb0:	683e      	ldr	r6, [r7, #0]
 8005cb2:	9304      	str	r3, [sp, #16]
 8005cb4:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005cb8:	bf18      	it	ne
 8005cba:	b236      	sxthne	r6, r6
 8005cbc:	e7f6      	b.n	8005cac <_svfprintf_r+0x31c>
 8005cbe:	b10b      	cbz	r3, 8005cc4 <_svfprintf_r+0x334>
 8005cc0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005cc4:	3707      	adds	r7, #7
 8005cc6:	f027 0707 	bic.w	r7, r7, #7
 8005cca:	f107 0308 	add.w	r3, r7, #8
 8005cce:	9304      	str	r3, [sp, #16]
 8005cd0:	ed97 7b00 	vldr	d7, [r7]
 8005cd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005cd8:	9b06      	ldr	r3, [sp, #24]
 8005cda:	9312      	str	r3, [sp, #72]	; 0x48
 8005cdc:	9b07      	ldr	r3, [sp, #28]
 8005cde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ce2:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce8:	4b4a      	ldr	r3, [pc, #296]	; (8005e14 <_svfprintf_r+0x484>)
 8005cea:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005cee:	f7fa ff39 	bl	8000b64 <__aeabi_dcmpun>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	f040 85d5 	bne.w	80068a2 <_svfprintf_r+0xf12>
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfc:	4b45      	ldr	r3, [pc, #276]	; (8005e14 <_svfprintf_r+0x484>)
 8005cfe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005d02:	f7fa ff11 	bl	8000b28 <__aeabi_dcmple>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	f040 85cb 	bne.w	80068a2 <_svfprintf_r+0xf12>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d14:	f7fa fefe 	bl	8000b14 <__aeabi_dcmplt>
 8005d18:	b110      	cbz	r0, 8005d20 <_svfprintf_r+0x390>
 8005d1a:	232d      	movs	r3, #45	; 0x2d
 8005d1c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005d20:	4b3d      	ldr	r3, [pc, #244]	; (8005e18 <_svfprintf_r+0x488>)
 8005d22:	4a3e      	ldr	r2, [pc, #248]	; (8005e1c <_svfprintf_r+0x48c>)
 8005d24:	9902      	ldr	r1, [sp, #8]
 8005d26:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005d2a:	2947      	cmp	r1, #71	; 0x47
 8005d2c:	bfcc      	ite	gt
 8005d2e:	4690      	movgt	r8, r2
 8005d30:	4698      	movle	r8, r3
 8005d32:	f04f 0903 	mov.w	r9, #3
 8005d36:	2600      	movs	r6, #0
 8005d38:	4637      	mov	r7, r6
 8005d3a:	e0c6      	b.n	8005eca <_svfprintf_r+0x53a>
 8005d3c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005d40:	d022      	beq.n	8005d88 <_svfprintf_r+0x3f8>
 8005d42:	9b02      	ldr	r3, [sp, #8]
 8005d44:	f023 0320 	bic.w	r3, r3, #32
 8005d48:	2b47      	cmp	r3, #71	; 0x47
 8005d4a:	d104      	bne.n	8005d56 <_svfprintf_r+0x3c6>
 8005d4c:	f1b9 0f00 	cmp.w	r9, #0
 8005d50:	bf08      	it	eq
 8005d52:	f04f 0901 	moveq.w	r9, #1
 8005d56:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8005d5a:	930c      	str	r3, [sp, #48]	; 0x30
 8005d5c:	9b07      	ldr	r3, [sp, #28]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	da15      	bge.n	8005d8e <_svfprintf_r+0x3fe>
 8005d62:	9b06      	ldr	r3, [sp, #24]
 8005d64:	930e      	str	r3, [sp, #56]	; 0x38
 8005d66:	9b07      	ldr	r3, [sp, #28]
 8005d68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d6e:	232d      	movs	r3, #45	; 0x2d
 8005d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d72:	9b02      	ldr	r3, [sp, #8]
 8005d74:	f023 0720 	bic.w	r7, r3, #32
 8005d78:	2f46      	cmp	r7, #70	; 0x46
 8005d7a:	d00e      	beq.n	8005d9a <_svfprintf_r+0x40a>
 8005d7c:	2f45      	cmp	r7, #69	; 0x45
 8005d7e:	d146      	bne.n	8005e0e <_svfprintf_r+0x47e>
 8005d80:	f109 0601 	add.w	r6, r9, #1
 8005d84:	2102      	movs	r1, #2
 8005d86:	e00a      	b.n	8005d9e <_svfprintf_r+0x40e>
 8005d88:	f04f 0906 	mov.w	r9, #6
 8005d8c:	e7e3      	b.n	8005d56 <_svfprintf_r+0x3c6>
 8005d8e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005d92:	2300      	movs	r3, #0
 8005d94:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005d98:	e7ea      	b.n	8005d70 <_svfprintf_r+0x3e0>
 8005d9a:	464e      	mov	r6, r9
 8005d9c:	2103      	movs	r1, #3
 8005d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	ab1a      	add	r3, sp, #104	; 0x68
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	4632      	mov	r2, r6
 8005da8:	ab19      	add	r3, sp, #100	; 0x64
 8005daa:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8005dae:	4658      	mov	r0, fp
 8005db0:	f001 fbc6 	bl	8007540 <_dtoa_r>
 8005db4:	2f47      	cmp	r7, #71	; 0x47
 8005db6:	4680      	mov	r8, r0
 8005db8:	d102      	bne.n	8005dc0 <_svfprintf_r+0x430>
 8005dba:	07e8      	lsls	r0, r5, #31
 8005dbc:	f140 857e 	bpl.w	80068bc <_svfprintf_r+0xf2c>
 8005dc0:	eb08 0306 	add.w	r3, r8, r6
 8005dc4:	2f46      	cmp	r7, #70	; 0x46
 8005dc6:	9303      	str	r3, [sp, #12]
 8005dc8:	d111      	bne.n	8005dee <_svfprintf_r+0x45e>
 8005dca:	f898 3000 	ldrb.w	r3, [r8]
 8005dce:	2b30      	cmp	r3, #48	; 0x30
 8005dd0:	d109      	bne.n	8005de6 <_svfprintf_r+0x456>
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005dda:	f7fa fe91 	bl	8000b00 <__aeabi_dcmpeq>
 8005dde:	b910      	cbnz	r0, 8005de6 <_svfprintf_r+0x456>
 8005de0:	f1c6 0601 	rsb	r6, r6, #1
 8005de4:	9619      	str	r6, [sp, #100]	; 0x64
 8005de6:	9a03      	ldr	r2, [sp, #12]
 8005de8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dea:	441a      	add	r2, r3
 8005dec:	9203      	str	r2, [sp, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	2300      	movs	r3, #0
 8005df2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005df6:	f7fa fe83 	bl	8000b00 <__aeabi_dcmpeq>
 8005dfa:	b988      	cbnz	r0, 8005e20 <_svfprintf_r+0x490>
 8005dfc:	2230      	movs	r2, #48	; 0x30
 8005dfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e00:	9903      	ldr	r1, [sp, #12]
 8005e02:	4299      	cmp	r1, r3
 8005e04:	d90e      	bls.n	8005e24 <_svfprintf_r+0x494>
 8005e06:	1c59      	adds	r1, r3, #1
 8005e08:	911d      	str	r1, [sp, #116]	; 0x74
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	e7f7      	b.n	8005dfe <_svfprintf_r+0x46e>
 8005e0e:	464e      	mov	r6, r9
 8005e10:	e7b8      	b.n	8005d84 <_svfprintf_r+0x3f4>
 8005e12:	bf00      	nop
 8005e14:	7fefffff 	.word	0x7fefffff
 8005e18:	0800b704 	.word	0x0800b704
 8005e1c:	0800b708 	.word	0x0800b708
 8005e20:	9b03      	ldr	r3, [sp, #12]
 8005e22:	931d      	str	r3, [sp, #116]	; 0x74
 8005e24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e26:	2f47      	cmp	r7, #71	; 0x47
 8005e28:	eba3 0308 	sub.w	r3, r3, r8
 8005e2c:	9303      	str	r3, [sp, #12]
 8005e2e:	f040 80fa 	bne.w	8006026 <_svfprintf_r+0x696>
 8005e32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e34:	1cd9      	adds	r1, r3, #3
 8005e36:	db02      	blt.n	8005e3e <_svfprintf_r+0x4ae>
 8005e38:	4599      	cmp	r9, r3
 8005e3a:	f280 8120 	bge.w	800607e <_svfprintf_r+0x6ee>
 8005e3e:	9b02      	ldr	r3, [sp, #8]
 8005e40:	3b02      	subs	r3, #2
 8005e42:	9302      	str	r3, [sp, #8]
 8005e44:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e46:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8005e4a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8005e4e:	1e53      	subs	r3, r2, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	9319      	str	r3, [sp, #100]	; 0x64
 8005e54:	bfb6      	itet	lt
 8005e56:	f1c2 0301 	rsblt	r3, r2, #1
 8005e5a:	222b      	movge	r2, #43	; 0x2b
 8005e5c:	222d      	movlt	r2, #45	; 0x2d
 8005e5e:	2b09      	cmp	r3, #9
 8005e60:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005e64:	f340 80fb 	ble.w	800605e <_svfprintf_r+0x6ce>
 8005e68:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005e6c:	260a      	movs	r6, #10
 8005e6e:	fb93 f0f6 	sdiv	r0, r3, r6
 8005e72:	fb06 3310 	mls	r3, r6, r0, r3
 8005e76:	3330      	adds	r3, #48	; 0x30
 8005e78:	2809      	cmp	r0, #9
 8005e7a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e7e:	f102 31ff 	add.w	r1, r2, #4294967295
 8005e82:	4603      	mov	r3, r0
 8005e84:	f300 80e4 	bgt.w	8006050 <_svfprintf_r+0x6c0>
 8005e88:	3330      	adds	r3, #48	; 0x30
 8005e8a:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005e8e:	3a02      	subs	r2, #2
 8005e90:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8005e94:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8005e98:	4282      	cmp	r2, r0
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	f0c0 80da 	bcc.w	8006054 <_svfprintf_r+0x6c4>
 8005ea0:	9a03      	ldr	r2, [sp, #12]
 8005ea2:	ab1b      	add	r3, sp, #108	; 0x6c
 8005ea4:	1acb      	subs	r3, r1, r3
 8005ea6:	2a01      	cmp	r2, #1
 8005ea8:	9310      	str	r3, [sp, #64]	; 0x40
 8005eaa:	eb03 0902 	add.w	r9, r3, r2
 8005eae:	dc02      	bgt.n	8005eb6 <_svfprintf_r+0x526>
 8005eb0:	f015 0701 	ands.w	r7, r5, #1
 8005eb4:	d002      	beq.n	8005ebc <_svfprintf_r+0x52c>
 8005eb6:	9b08      	ldr	r3, [sp, #32]
 8005eb8:	2700      	movs	r7, #0
 8005eba:	4499      	add	r9, r3
 8005ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ebe:	b113      	cbz	r3, 8005ec6 <_svfprintf_r+0x536>
 8005ec0:	232d      	movs	r3, #45	; 0x2d
 8005ec2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005ec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ec8:	2600      	movs	r6, #0
 8005eca:	454e      	cmp	r6, r9
 8005ecc:	4633      	mov	r3, r6
 8005ece:	bfb8      	it	lt
 8005ed0:	464b      	movlt	r3, r9
 8005ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ed4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005ed8:	b113      	cbz	r3, 8005ee0 <_svfprintf_r+0x550>
 8005eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005edc:	3301      	adds	r3, #1
 8005ede:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ee0:	f015 0302 	ands.w	r3, r5, #2
 8005ee4:	9314      	str	r3, [sp, #80]	; 0x50
 8005ee6:	bf1e      	ittt	ne
 8005ee8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8005eea:	3302      	addne	r3, #2
 8005eec:	930b      	strne	r3, [sp, #44]	; 0x2c
 8005eee:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8005ef2:	9315      	str	r3, [sp, #84]	; 0x54
 8005ef4:	d118      	bne.n	8005f28 <_svfprintf_r+0x598>
 8005ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	930c      	str	r3, [sp, #48]	; 0x30
 8005f00:	dd12      	ble.n	8005f28 <_svfprintf_r+0x598>
 8005f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f04:	2b10      	cmp	r3, #16
 8005f06:	4ba9      	ldr	r3, [pc, #676]	; (80061ac <_svfprintf_r+0x81c>)
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	f300 81d5 	bgt.w	80062b8 <_svfprintf_r+0x928>
 8005f0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f10:	6063      	str	r3, [r4, #4]
 8005f12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f16:	4413      	add	r3, r2
 8005f18:	9321      	str	r3, [sp, #132]	; 0x84
 8005f1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	2b07      	cmp	r3, #7
 8005f20:	9320      	str	r3, [sp, #128]	; 0x80
 8005f22:	f300 81e2 	bgt.w	80062ea <_svfprintf_r+0x95a>
 8005f26:	3408      	adds	r4, #8
 8005f28:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005f2c:	b173      	cbz	r3, 8005f4c <_svfprintf_r+0x5bc>
 8005f2e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8005f32:	6023      	str	r3, [r4, #0]
 8005f34:	2301      	movs	r3, #1
 8005f36:	6063      	str	r3, [r4, #4]
 8005f38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	9321      	str	r3, [sp, #132]	; 0x84
 8005f3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f40:	3301      	adds	r3, #1
 8005f42:	2b07      	cmp	r3, #7
 8005f44:	9320      	str	r3, [sp, #128]	; 0x80
 8005f46:	f300 81da 	bgt.w	80062fe <_svfprintf_r+0x96e>
 8005f4a:	3408      	adds	r4, #8
 8005f4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f4e:	b16b      	cbz	r3, 8005f6c <_svfprintf_r+0x5dc>
 8005f50:	ab18      	add	r3, sp, #96	; 0x60
 8005f52:	6023      	str	r3, [r4, #0]
 8005f54:	2302      	movs	r3, #2
 8005f56:	6063      	str	r3, [r4, #4]
 8005f58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f5a:	3302      	adds	r3, #2
 8005f5c:	9321      	str	r3, [sp, #132]	; 0x84
 8005f5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f60:	3301      	adds	r3, #1
 8005f62:	2b07      	cmp	r3, #7
 8005f64:	9320      	str	r3, [sp, #128]	; 0x80
 8005f66:	f300 81d4 	bgt.w	8006312 <_svfprintf_r+0x982>
 8005f6a:	3408      	adds	r4, #8
 8005f6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f6e:	2b80      	cmp	r3, #128	; 0x80
 8005f70:	d114      	bne.n	8005f9c <_svfprintf_r+0x60c>
 8005f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	dd0f      	ble.n	8005f9c <_svfprintf_r+0x60c>
 8005f7c:	4a8c      	ldr	r2, [pc, #560]	; (80061b0 <_svfprintf_r+0x820>)
 8005f7e:	6022      	str	r2, [r4, #0]
 8005f80:	2b10      	cmp	r3, #16
 8005f82:	f300 81d0 	bgt.w	8006326 <_svfprintf_r+0x996>
 8005f86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f88:	6063      	str	r3, [r4, #4]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	9321      	str	r3, [sp, #132]	; 0x84
 8005f8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f90:	3301      	adds	r3, #1
 8005f92:	2b07      	cmp	r3, #7
 8005f94:	9320      	str	r3, [sp, #128]	; 0x80
 8005f96:	f300 81df 	bgt.w	8006358 <_svfprintf_r+0x9c8>
 8005f9a:	3408      	adds	r4, #8
 8005f9c:	eba6 0609 	sub.w	r6, r6, r9
 8005fa0:	2e00      	cmp	r6, #0
 8005fa2:	dd0f      	ble.n	8005fc4 <_svfprintf_r+0x634>
 8005fa4:	4b82      	ldr	r3, [pc, #520]	; (80061b0 <_svfprintf_r+0x820>)
 8005fa6:	6023      	str	r3, [r4, #0]
 8005fa8:	2e10      	cmp	r6, #16
 8005faa:	f300 81df 	bgt.w	800636c <_svfprintf_r+0x9dc>
 8005fae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005fb0:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005fb2:	6066      	str	r6, [r4, #4]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	4406      	add	r6, r0
 8005fb8:	2b07      	cmp	r3, #7
 8005fba:	9621      	str	r6, [sp, #132]	; 0x84
 8005fbc:	9320      	str	r3, [sp, #128]	; 0x80
 8005fbe:	f300 81ec 	bgt.w	800639a <_svfprintf_r+0xa0a>
 8005fc2:	3408      	adds	r4, #8
 8005fc4:	05eb      	lsls	r3, r5, #23
 8005fc6:	f100 81f2 	bmi.w	80063ae <_svfprintf_r+0xa1e>
 8005fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fcc:	e884 0300 	stmia.w	r4, {r8, r9}
 8005fd0:	444b      	add	r3, r9
 8005fd2:	9321      	str	r3, [sp, #132]	; 0x84
 8005fd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	2b07      	cmp	r3, #7
 8005fda:	9320      	str	r3, [sp, #128]	; 0x80
 8005fdc:	f340 8419 	ble.w	8006812 <_svfprintf_r+0xe82>
 8005fe0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005fe2:	4651      	mov	r1, sl
 8005fe4:	4658      	mov	r0, fp
 8005fe6:	f004 f811 	bl	800a00c <__ssprint_r>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	f040 8431 	bne.w	8006852 <_svfprintf_r+0xec2>
 8005ff0:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ff2:	076b      	lsls	r3, r5, #29
 8005ff4:	f100 8410 	bmi.w	8006818 <_svfprintf_r+0xe88>
 8005ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ffe:	428a      	cmp	r2, r1
 8006000:	bfac      	ite	ge
 8006002:	189b      	addge	r3, r3, r2
 8006004:	185b      	addlt	r3, r3, r1
 8006006:	9309      	str	r3, [sp, #36]	; 0x24
 8006008:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800600a:	b13b      	cbz	r3, 800601c <_svfprintf_r+0x68c>
 800600c:	aa1f      	add	r2, sp, #124	; 0x7c
 800600e:	4651      	mov	r1, sl
 8006010:	4658      	mov	r0, fp
 8006012:	f003 fffb 	bl	800a00c <__ssprint_r>
 8006016:	2800      	cmp	r0, #0
 8006018:	f040 841b 	bne.w	8006852 <_svfprintf_r+0xec2>
 800601c:	2300      	movs	r3, #0
 800601e:	9320      	str	r3, [sp, #128]	; 0x80
 8006020:	9f04      	ldr	r7, [sp, #16]
 8006022:	ac2c      	add	r4, sp, #176	; 0xb0
 8006024:	e4ee      	b.n	8005a04 <_svfprintf_r+0x74>
 8006026:	9b02      	ldr	r3, [sp, #8]
 8006028:	2b65      	cmp	r3, #101	; 0x65
 800602a:	f77f af0b 	ble.w	8005e44 <_svfprintf_r+0x4b4>
 800602e:	9b02      	ldr	r3, [sp, #8]
 8006030:	2b66      	cmp	r3, #102	; 0x66
 8006032:	d124      	bne.n	800607e <_svfprintf_r+0x6ee>
 8006034:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006036:	2b00      	cmp	r3, #0
 8006038:	dd19      	ble.n	800606e <_svfprintf_r+0x6de>
 800603a:	f1b9 0f00 	cmp.w	r9, #0
 800603e:	d101      	bne.n	8006044 <_svfprintf_r+0x6b4>
 8006040:	07ea      	lsls	r2, r5, #31
 8006042:	d502      	bpl.n	800604a <_svfprintf_r+0x6ba>
 8006044:	9a08      	ldr	r2, [sp, #32]
 8006046:	4413      	add	r3, r2
 8006048:	444b      	add	r3, r9
 800604a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800604c:	4699      	mov	r9, r3
 800604e:	e735      	b.n	8005ebc <_svfprintf_r+0x52c>
 8006050:	460a      	mov	r2, r1
 8006052:	e70c      	b.n	8005e6e <_svfprintf_r+0x4de>
 8006054:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006058:	f803 1b01 	strb.w	r1, [r3], #1
 800605c:	e71c      	b.n	8005e98 <_svfprintf_r+0x508>
 800605e:	2230      	movs	r2, #48	; 0x30
 8006060:	4413      	add	r3, r2
 8006062:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8006066:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800606a:	a91c      	add	r1, sp, #112	; 0x70
 800606c:	e718      	b.n	8005ea0 <_svfprintf_r+0x510>
 800606e:	f1b9 0f00 	cmp.w	r9, #0
 8006072:	d101      	bne.n	8006078 <_svfprintf_r+0x6e8>
 8006074:	07eb      	lsls	r3, r5, #31
 8006076:	d515      	bpl.n	80060a4 <_svfprintf_r+0x714>
 8006078:	9b08      	ldr	r3, [sp, #32]
 800607a:	3301      	adds	r3, #1
 800607c:	e7e4      	b.n	8006048 <_svfprintf_r+0x6b8>
 800607e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006080:	9b03      	ldr	r3, [sp, #12]
 8006082:	429a      	cmp	r2, r3
 8006084:	db06      	blt.n	8006094 <_svfprintf_r+0x704>
 8006086:	07ef      	lsls	r7, r5, #31
 8006088:	d50e      	bpl.n	80060a8 <_svfprintf_r+0x718>
 800608a:	9b08      	ldr	r3, [sp, #32]
 800608c:	4413      	add	r3, r2
 800608e:	2267      	movs	r2, #103	; 0x67
 8006090:	9202      	str	r2, [sp, #8]
 8006092:	e7da      	b.n	800604a <_svfprintf_r+0x6ba>
 8006094:	9b03      	ldr	r3, [sp, #12]
 8006096:	9908      	ldr	r1, [sp, #32]
 8006098:	2a00      	cmp	r2, #0
 800609a:	440b      	add	r3, r1
 800609c:	dcf7      	bgt.n	800608e <_svfprintf_r+0x6fe>
 800609e:	f1c2 0201 	rsb	r2, r2, #1
 80060a2:	e7f3      	b.n	800608c <_svfprintf_r+0x6fc>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e7d0      	b.n	800604a <_svfprintf_r+0x6ba>
 80060a8:	4613      	mov	r3, r2
 80060aa:	e7f0      	b.n	800608e <_svfprintf_r+0x6fe>
 80060ac:	b10b      	cbz	r3, 80060b2 <_svfprintf_r+0x722>
 80060ae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80060b2:	f015 0f20 	tst.w	r5, #32
 80060b6:	f107 0304 	add.w	r3, r7, #4
 80060ba:	d008      	beq.n	80060ce <_svfprintf_r+0x73e>
 80060bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	17ce      	asrs	r6, r1, #31
 80060c2:	4608      	mov	r0, r1
 80060c4:	4631      	mov	r1, r6
 80060c6:	e9c2 0100 	strd	r0, r1, [r2]
 80060ca:	461f      	mov	r7, r3
 80060cc:	e49a      	b.n	8005a04 <_svfprintf_r+0x74>
 80060ce:	06ee      	lsls	r6, r5, #27
 80060d0:	d503      	bpl.n	80060da <_svfprintf_r+0x74a>
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060d6:	6011      	str	r1, [r2, #0]
 80060d8:	e7f7      	b.n	80060ca <_svfprintf_r+0x73a>
 80060da:	0668      	lsls	r0, r5, #25
 80060dc:	d5f9      	bpl.n	80060d2 <_svfprintf_r+0x742>
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80060e4:	8011      	strh	r1, [r2, #0]
 80060e6:	e7f0      	b.n	80060ca <_svfprintf_r+0x73a>
 80060e8:	f045 0510 	orr.w	r5, r5, #16
 80060ec:	f015 0320 	ands.w	r3, r5, #32
 80060f0:	d022      	beq.n	8006138 <_svfprintf_r+0x7a8>
 80060f2:	3707      	adds	r7, #7
 80060f4:	f027 0707 	bic.w	r7, r7, #7
 80060f8:	f107 0308 	add.w	r3, r7, #8
 80060fc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006100:	9304      	str	r3, [sp, #16]
 8006102:	2300      	movs	r3, #0
 8006104:	2200      	movs	r2, #0
 8006106:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800610a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800610e:	f000 83db 	beq.w	80068c8 <_svfprintf_r+0xf38>
 8006112:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8006116:	920b      	str	r2, [sp, #44]	; 0x2c
 8006118:	ea56 0207 	orrs.w	r2, r6, r7
 800611c:	f040 83d9 	bne.w	80068d2 <_svfprintf_r+0xf42>
 8006120:	f1b9 0f00 	cmp.w	r9, #0
 8006124:	f000 80aa 	beq.w	800627c <_svfprintf_r+0x8ec>
 8006128:	2b01      	cmp	r3, #1
 800612a:	d076      	beq.n	800621a <_svfprintf_r+0x88a>
 800612c:	2b02      	cmp	r3, #2
 800612e:	f000 8091 	beq.w	8006254 <_svfprintf_r+0x8c4>
 8006132:	2600      	movs	r6, #0
 8006134:	2700      	movs	r7, #0
 8006136:	e3d2      	b.n	80068de <_svfprintf_r+0xf4e>
 8006138:	1d3a      	adds	r2, r7, #4
 800613a:	f015 0110 	ands.w	r1, r5, #16
 800613e:	9204      	str	r2, [sp, #16]
 8006140:	d002      	beq.n	8006148 <_svfprintf_r+0x7b8>
 8006142:	683e      	ldr	r6, [r7, #0]
 8006144:	2700      	movs	r7, #0
 8006146:	e7dd      	b.n	8006104 <_svfprintf_r+0x774>
 8006148:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800614c:	d0f9      	beq.n	8006142 <_svfprintf_r+0x7b2>
 800614e:	883e      	ldrh	r6, [r7, #0]
 8006150:	2700      	movs	r7, #0
 8006152:	e7d6      	b.n	8006102 <_svfprintf_r+0x772>
 8006154:	1d3b      	adds	r3, r7, #4
 8006156:	9304      	str	r3, [sp, #16]
 8006158:	2330      	movs	r3, #48	; 0x30
 800615a:	2278      	movs	r2, #120	; 0x78
 800615c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8006160:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <_svfprintf_r+0x824>)
 8006162:	683e      	ldr	r6, [r7, #0]
 8006164:	9311      	str	r3, [sp, #68]	; 0x44
 8006166:	2700      	movs	r7, #0
 8006168:	f045 0502 	orr.w	r5, r5, #2
 800616c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8006170:	2302      	movs	r3, #2
 8006172:	9202      	str	r2, [sp, #8]
 8006174:	e7c6      	b.n	8006104 <_svfprintf_r+0x774>
 8006176:	1d3b      	adds	r3, r7, #4
 8006178:	2600      	movs	r6, #0
 800617a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800617e:	9304      	str	r3, [sp, #16]
 8006180:	f8d7 8000 	ldr.w	r8, [r7]
 8006184:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8006188:	d00a      	beq.n	80061a0 <_svfprintf_r+0x810>
 800618a:	464a      	mov	r2, r9
 800618c:	4631      	mov	r1, r6
 800618e:	4640      	mov	r0, r8
 8006190:	f7fa f846 	bl	8000220 <memchr>
 8006194:	2800      	cmp	r0, #0
 8006196:	f000 808d 	beq.w	80062b4 <_svfprintf_r+0x924>
 800619a:	eba0 0908 	sub.w	r9, r0, r8
 800619e:	e5cb      	b.n	8005d38 <_svfprintf_r+0x3a8>
 80061a0:	4640      	mov	r0, r8
 80061a2:	f7fa f835 	bl	8000210 <strlen>
 80061a6:	4681      	mov	r9, r0
 80061a8:	e5c6      	b.n	8005d38 <_svfprintf_r+0x3a8>
 80061aa:	bf00      	nop
 80061ac:	0800b738 	.word	0x0800b738
 80061b0:	0800b748 	.word	0x0800b748
 80061b4:	0800b725 	.word	0x0800b725
 80061b8:	f045 0510 	orr.w	r5, r5, #16
 80061bc:	06a9      	lsls	r1, r5, #26
 80061be:	d509      	bpl.n	80061d4 <_svfprintf_r+0x844>
 80061c0:	3707      	adds	r7, #7
 80061c2:	f027 0707 	bic.w	r7, r7, #7
 80061c6:	f107 0308 	add.w	r3, r7, #8
 80061ca:	e9d7 6700 	ldrd	r6, r7, [r7]
 80061ce:	9304      	str	r3, [sp, #16]
 80061d0:	2301      	movs	r3, #1
 80061d2:	e797      	b.n	8006104 <_svfprintf_r+0x774>
 80061d4:	1d3b      	adds	r3, r7, #4
 80061d6:	f015 0f10 	tst.w	r5, #16
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	d001      	beq.n	80061e2 <_svfprintf_r+0x852>
 80061de:	683e      	ldr	r6, [r7, #0]
 80061e0:	e002      	b.n	80061e8 <_svfprintf_r+0x858>
 80061e2:	066a      	lsls	r2, r5, #25
 80061e4:	d5fb      	bpl.n	80061de <_svfprintf_r+0x84e>
 80061e6:	883e      	ldrh	r6, [r7, #0]
 80061e8:	2700      	movs	r7, #0
 80061ea:	e7f1      	b.n	80061d0 <_svfprintf_r+0x840>
 80061ec:	b10b      	cbz	r3, 80061f2 <_svfprintf_r+0x862>
 80061ee:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80061f2:	4ba3      	ldr	r3, [pc, #652]	; (8006480 <_svfprintf_r+0xaf0>)
 80061f4:	e4c2      	b.n	8005b7c <_svfprintf_r+0x1ec>
 80061f6:	1d3b      	adds	r3, r7, #4
 80061f8:	f015 0f10 	tst.w	r5, #16
 80061fc:	9304      	str	r3, [sp, #16]
 80061fe:	d001      	beq.n	8006204 <_svfprintf_r+0x874>
 8006200:	683e      	ldr	r6, [r7, #0]
 8006202:	e002      	b.n	800620a <_svfprintf_r+0x87a>
 8006204:	066e      	lsls	r6, r5, #25
 8006206:	d5fb      	bpl.n	8006200 <_svfprintf_r+0x870>
 8006208:	883e      	ldrh	r6, [r7, #0]
 800620a:	2700      	movs	r7, #0
 800620c:	e4c2      	b.n	8005b94 <_svfprintf_r+0x204>
 800620e:	4643      	mov	r3, r8
 8006210:	e366      	b.n	80068e0 <_svfprintf_r+0xf50>
 8006212:	2f00      	cmp	r7, #0
 8006214:	bf08      	it	eq
 8006216:	2e0a      	cmpeq	r6, #10
 8006218:	d205      	bcs.n	8006226 <_svfprintf_r+0x896>
 800621a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800621e:	3630      	adds	r6, #48	; 0x30
 8006220:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8006224:	e377      	b.n	8006916 <_svfprintf_r+0xf86>
 8006226:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800622a:	4630      	mov	r0, r6
 800622c:	4639      	mov	r1, r7
 800622e:	220a      	movs	r2, #10
 8006230:	2300      	movs	r3, #0
 8006232:	f7fa fd45 	bl	8000cc0 <__aeabi_uldivmod>
 8006236:	3230      	adds	r2, #48	; 0x30
 8006238:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800623c:	2300      	movs	r3, #0
 800623e:	4630      	mov	r0, r6
 8006240:	4639      	mov	r1, r7
 8006242:	220a      	movs	r2, #10
 8006244:	f7fa fd3c 	bl	8000cc0 <__aeabi_uldivmod>
 8006248:	4606      	mov	r6, r0
 800624a:	460f      	mov	r7, r1
 800624c:	ea56 0307 	orrs.w	r3, r6, r7
 8006250:	d1eb      	bne.n	800622a <_svfprintf_r+0x89a>
 8006252:	e360      	b.n	8006916 <_svfprintf_r+0xf86>
 8006254:	2600      	movs	r6, #0
 8006256:	2700      	movs	r7, #0
 8006258:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800625c:	f006 030f 	and.w	r3, r6, #15
 8006260:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006262:	5cd3      	ldrb	r3, [r2, r3]
 8006264:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8006268:	0933      	lsrs	r3, r6, #4
 800626a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800626e:	093a      	lsrs	r2, r7, #4
 8006270:	461e      	mov	r6, r3
 8006272:	4617      	mov	r7, r2
 8006274:	ea56 0307 	orrs.w	r3, r6, r7
 8006278:	d1f0      	bne.n	800625c <_svfprintf_r+0x8cc>
 800627a:	e34c      	b.n	8006916 <_svfprintf_r+0xf86>
 800627c:	b93b      	cbnz	r3, 800628e <_svfprintf_r+0x8fe>
 800627e:	07ea      	lsls	r2, r5, #31
 8006280:	d505      	bpl.n	800628e <_svfprintf_r+0x8fe>
 8006282:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8006286:	2330      	movs	r3, #48	; 0x30
 8006288:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800628c:	e343      	b.n	8006916 <_svfprintf_r+0xf86>
 800628e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8006292:	e340      	b.n	8006916 <_svfprintf_r+0xf86>
 8006294:	b10b      	cbz	r3, 800629a <_svfprintf_r+0x90a>
 8006296:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800629a:	9b02      	ldr	r3, [sp, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 82f7 	beq.w	8006890 <_svfprintf_r+0xf00>
 80062a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80062a6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80062aa:	2600      	movs	r6, #0
 80062ac:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80062b0:	9704      	str	r7, [sp, #16]
 80062b2:	e4e8      	b.n	8005c86 <_svfprintf_r+0x2f6>
 80062b4:	4606      	mov	r6, r0
 80062b6:	e53f      	b.n	8005d38 <_svfprintf_r+0x3a8>
 80062b8:	2310      	movs	r3, #16
 80062ba:	6063      	str	r3, [r4, #4]
 80062bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062be:	3310      	adds	r3, #16
 80062c0:	9321      	str	r3, [sp, #132]	; 0x84
 80062c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80062c4:	3301      	adds	r3, #1
 80062c6:	2b07      	cmp	r3, #7
 80062c8:	9320      	str	r3, [sp, #128]	; 0x80
 80062ca:	dc04      	bgt.n	80062d6 <_svfprintf_r+0x946>
 80062cc:	3408      	adds	r4, #8
 80062ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062d0:	3b10      	subs	r3, #16
 80062d2:	930c      	str	r3, [sp, #48]	; 0x30
 80062d4:	e615      	b.n	8005f02 <_svfprintf_r+0x572>
 80062d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80062d8:	4651      	mov	r1, sl
 80062da:	4658      	mov	r0, fp
 80062dc:	f003 fe96 	bl	800a00c <__ssprint_r>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	f040 82b6 	bne.w	8006852 <_svfprintf_r+0xec2>
 80062e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80062e8:	e7f1      	b.n	80062ce <_svfprintf_r+0x93e>
 80062ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80062ec:	4651      	mov	r1, sl
 80062ee:	4658      	mov	r0, fp
 80062f0:	f003 fe8c 	bl	800a00c <__ssprint_r>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f040 82ac 	bne.w	8006852 <_svfprintf_r+0xec2>
 80062fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80062fc:	e614      	b.n	8005f28 <_svfprintf_r+0x598>
 80062fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8006300:	4651      	mov	r1, sl
 8006302:	4658      	mov	r0, fp
 8006304:	f003 fe82 	bl	800a00c <__ssprint_r>
 8006308:	2800      	cmp	r0, #0
 800630a:	f040 82a2 	bne.w	8006852 <_svfprintf_r+0xec2>
 800630e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006310:	e61c      	b.n	8005f4c <_svfprintf_r+0x5bc>
 8006312:	aa1f      	add	r2, sp, #124	; 0x7c
 8006314:	4651      	mov	r1, sl
 8006316:	4658      	mov	r0, fp
 8006318:	f003 fe78 	bl	800a00c <__ssprint_r>
 800631c:	2800      	cmp	r0, #0
 800631e:	f040 8298 	bne.w	8006852 <_svfprintf_r+0xec2>
 8006322:	ac2c      	add	r4, sp, #176	; 0xb0
 8006324:	e622      	b.n	8005f6c <_svfprintf_r+0x5dc>
 8006326:	2210      	movs	r2, #16
 8006328:	6062      	str	r2, [r4, #4]
 800632a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800632c:	3210      	adds	r2, #16
 800632e:	9221      	str	r2, [sp, #132]	; 0x84
 8006330:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006332:	3201      	adds	r2, #1
 8006334:	2a07      	cmp	r2, #7
 8006336:	9220      	str	r2, [sp, #128]	; 0x80
 8006338:	dc02      	bgt.n	8006340 <_svfprintf_r+0x9b0>
 800633a:	3408      	adds	r4, #8
 800633c:	3b10      	subs	r3, #16
 800633e:	e61d      	b.n	8005f7c <_svfprintf_r+0x5ec>
 8006340:	aa1f      	add	r2, sp, #124	; 0x7c
 8006342:	4651      	mov	r1, sl
 8006344:	4658      	mov	r0, fp
 8006346:	930c      	str	r3, [sp, #48]	; 0x30
 8006348:	f003 fe60 	bl	800a00c <__ssprint_r>
 800634c:	2800      	cmp	r0, #0
 800634e:	f040 8280 	bne.w	8006852 <_svfprintf_r+0xec2>
 8006352:	ac2c      	add	r4, sp, #176	; 0xb0
 8006354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006356:	e7f1      	b.n	800633c <_svfprintf_r+0x9ac>
 8006358:	aa1f      	add	r2, sp, #124	; 0x7c
 800635a:	4651      	mov	r1, sl
 800635c:	4658      	mov	r0, fp
 800635e:	f003 fe55 	bl	800a00c <__ssprint_r>
 8006362:	2800      	cmp	r0, #0
 8006364:	f040 8275 	bne.w	8006852 <_svfprintf_r+0xec2>
 8006368:	ac2c      	add	r4, sp, #176	; 0xb0
 800636a:	e617      	b.n	8005f9c <_svfprintf_r+0x60c>
 800636c:	2310      	movs	r3, #16
 800636e:	6063      	str	r3, [r4, #4]
 8006370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006372:	3310      	adds	r3, #16
 8006374:	9321      	str	r3, [sp, #132]	; 0x84
 8006376:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006378:	3301      	adds	r3, #1
 800637a:	2b07      	cmp	r3, #7
 800637c:	9320      	str	r3, [sp, #128]	; 0x80
 800637e:	dc02      	bgt.n	8006386 <_svfprintf_r+0x9f6>
 8006380:	3408      	adds	r4, #8
 8006382:	3e10      	subs	r6, #16
 8006384:	e60e      	b.n	8005fa4 <_svfprintf_r+0x614>
 8006386:	aa1f      	add	r2, sp, #124	; 0x7c
 8006388:	4651      	mov	r1, sl
 800638a:	4658      	mov	r0, fp
 800638c:	f003 fe3e 	bl	800a00c <__ssprint_r>
 8006390:	2800      	cmp	r0, #0
 8006392:	f040 825e 	bne.w	8006852 <_svfprintf_r+0xec2>
 8006396:	ac2c      	add	r4, sp, #176	; 0xb0
 8006398:	e7f3      	b.n	8006382 <_svfprintf_r+0x9f2>
 800639a:	aa1f      	add	r2, sp, #124	; 0x7c
 800639c:	4651      	mov	r1, sl
 800639e:	4658      	mov	r0, fp
 80063a0:	f003 fe34 	bl	800a00c <__ssprint_r>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f040 8254 	bne.w	8006852 <_svfprintf_r+0xec2>
 80063aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80063ac:	e60a      	b.n	8005fc4 <_svfprintf_r+0x634>
 80063ae:	9b02      	ldr	r3, [sp, #8]
 80063b0:	2b65      	cmp	r3, #101	; 0x65
 80063b2:	f340 81a9 	ble.w	8006708 <_svfprintf_r+0xd78>
 80063b6:	2200      	movs	r2, #0
 80063b8:	2300      	movs	r3, #0
 80063ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063be:	f7fa fb9f 	bl	8000b00 <__aeabi_dcmpeq>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d062      	beq.n	800648c <_svfprintf_r+0xafc>
 80063c6:	4b2f      	ldr	r3, [pc, #188]	; (8006484 <_svfprintf_r+0xaf4>)
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	2301      	movs	r3, #1
 80063cc:	6063      	str	r3, [r4, #4]
 80063ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063d0:	3301      	adds	r3, #1
 80063d2:	9321      	str	r3, [sp, #132]	; 0x84
 80063d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063d6:	3301      	adds	r3, #1
 80063d8:	2b07      	cmp	r3, #7
 80063da:	9320      	str	r3, [sp, #128]	; 0x80
 80063dc:	dc25      	bgt.n	800642a <_svfprintf_r+0xa9a>
 80063de:	3408      	adds	r4, #8
 80063e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063e2:	9a03      	ldr	r2, [sp, #12]
 80063e4:	4293      	cmp	r3, r2
 80063e6:	db02      	blt.n	80063ee <_svfprintf_r+0xa5e>
 80063e8:	07ee      	lsls	r6, r5, #31
 80063ea:	f57f ae02 	bpl.w	8005ff2 <_svfprintf_r+0x662>
 80063ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	9b08      	ldr	r3, [sp, #32]
 80063f4:	6063      	str	r3, [r4, #4]
 80063f6:	9a08      	ldr	r2, [sp, #32]
 80063f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063fa:	4413      	add	r3, r2
 80063fc:	9321      	str	r3, [sp, #132]	; 0x84
 80063fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006400:	3301      	adds	r3, #1
 8006402:	2b07      	cmp	r3, #7
 8006404:	9320      	str	r3, [sp, #128]	; 0x80
 8006406:	dc1a      	bgt.n	800643e <_svfprintf_r+0xaae>
 8006408:	3408      	adds	r4, #8
 800640a:	9b03      	ldr	r3, [sp, #12]
 800640c:	1e5e      	subs	r6, r3, #1
 800640e:	2e00      	cmp	r6, #0
 8006410:	f77f adef 	ble.w	8005ff2 <_svfprintf_r+0x662>
 8006414:	4f1c      	ldr	r7, [pc, #112]	; (8006488 <_svfprintf_r+0xaf8>)
 8006416:	f04f 0810 	mov.w	r8, #16
 800641a:	2e10      	cmp	r6, #16
 800641c:	6027      	str	r7, [r4, #0]
 800641e:	dc18      	bgt.n	8006452 <_svfprintf_r+0xac2>
 8006420:	6066      	str	r6, [r4, #4]
 8006422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006424:	441e      	add	r6, r3
 8006426:	9621      	str	r6, [sp, #132]	; 0x84
 8006428:	e5d4      	b.n	8005fd4 <_svfprintf_r+0x644>
 800642a:	aa1f      	add	r2, sp, #124	; 0x7c
 800642c:	4651      	mov	r1, sl
 800642e:	4658      	mov	r0, fp
 8006430:	f003 fdec 	bl	800a00c <__ssprint_r>
 8006434:	2800      	cmp	r0, #0
 8006436:	f040 820c 	bne.w	8006852 <_svfprintf_r+0xec2>
 800643a:	ac2c      	add	r4, sp, #176	; 0xb0
 800643c:	e7d0      	b.n	80063e0 <_svfprintf_r+0xa50>
 800643e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006440:	4651      	mov	r1, sl
 8006442:	4658      	mov	r0, fp
 8006444:	f003 fde2 	bl	800a00c <__ssprint_r>
 8006448:	2800      	cmp	r0, #0
 800644a:	f040 8202 	bne.w	8006852 <_svfprintf_r+0xec2>
 800644e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006450:	e7db      	b.n	800640a <_svfprintf_r+0xa7a>
 8006452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006454:	f8c4 8004 	str.w	r8, [r4, #4]
 8006458:	3310      	adds	r3, #16
 800645a:	9321      	str	r3, [sp, #132]	; 0x84
 800645c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800645e:	3301      	adds	r3, #1
 8006460:	2b07      	cmp	r3, #7
 8006462:	9320      	str	r3, [sp, #128]	; 0x80
 8006464:	dc02      	bgt.n	800646c <_svfprintf_r+0xadc>
 8006466:	3408      	adds	r4, #8
 8006468:	3e10      	subs	r6, #16
 800646a:	e7d6      	b.n	800641a <_svfprintf_r+0xa8a>
 800646c:	aa1f      	add	r2, sp, #124	; 0x7c
 800646e:	4651      	mov	r1, sl
 8006470:	4658      	mov	r0, fp
 8006472:	f003 fdcb 	bl	800a00c <__ssprint_r>
 8006476:	2800      	cmp	r0, #0
 8006478:	f040 81eb 	bne.w	8006852 <_svfprintf_r+0xec2>
 800647c:	ac2c      	add	r4, sp, #176	; 0xb0
 800647e:	e7f3      	b.n	8006468 <_svfprintf_r+0xad8>
 8006480:	0800b725 	.word	0x0800b725
 8006484:	0800b736 	.word	0x0800b736
 8006488:	0800b748 	.word	0x0800b748
 800648c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800648e:	2b00      	cmp	r3, #0
 8006490:	dc7a      	bgt.n	8006588 <_svfprintf_r+0xbf8>
 8006492:	4b9b      	ldr	r3, [pc, #620]	; (8006700 <_svfprintf_r+0xd70>)
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	2301      	movs	r3, #1
 8006498:	6063      	str	r3, [r4, #4]
 800649a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800649c:	3301      	adds	r3, #1
 800649e:	9321      	str	r3, [sp, #132]	; 0x84
 80064a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80064a2:	3301      	adds	r3, #1
 80064a4:	2b07      	cmp	r3, #7
 80064a6:	9320      	str	r3, [sp, #128]	; 0x80
 80064a8:	dc44      	bgt.n	8006534 <_svfprintf_r+0xba4>
 80064aa:	3408      	adds	r4, #8
 80064ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064ae:	b923      	cbnz	r3, 80064ba <_svfprintf_r+0xb2a>
 80064b0:	9b03      	ldr	r3, [sp, #12]
 80064b2:	b913      	cbnz	r3, 80064ba <_svfprintf_r+0xb2a>
 80064b4:	07e8      	lsls	r0, r5, #31
 80064b6:	f57f ad9c 	bpl.w	8005ff2 <_svfprintf_r+0x662>
 80064ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	9b08      	ldr	r3, [sp, #32]
 80064c0:	6063      	str	r3, [r4, #4]
 80064c2:	9a08      	ldr	r2, [sp, #32]
 80064c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064c6:	4413      	add	r3, r2
 80064c8:	9321      	str	r3, [sp, #132]	; 0x84
 80064ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80064cc:	3301      	adds	r3, #1
 80064ce:	2b07      	cmp	r3, #7
 80064d0:	9320      	str	r3, [sp, #128]	; 0x80
 80064d2:	dc39      	bgt.n	8006548 <_svfprintf_r+0xbb8>
 80064d4:	f104 0308 	add.w	r3, r4, #8
 80064d8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80064da:	2e00      	cmp	r6, #0
 80064dc:	da19      	bge.n	8006512 <_svfprintf_r+0xb82>
 80064de:	4f89      	ldr	r7, [pc, #548]	; (8006704 <_svfprintf_r+0xd74>)
 80064e0:	4276      	negs	r6, r6
 80064e2:	2410      	movs	r4, #16
 80064e4:	2e10      	cmp	r6, #16
 80064e6:	601f      	str	r7, [r3, #0]
 80064e8:	dc38      	bgt.n	800655c <_svfprintf_r+0xbcc>
 80064ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064ec:	605e      	str	r6, [r3, #4]
 80064ee:	4416      	add	r6, r2
 80064f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80064f2:	9621      	str	r6, [sp, #132]	; 0x84
 80064f4:	3201      	adds	r2, #1
 80064f6:	2a07      	cmp	r2, #7
 80064f8:	f103 0308 	add.w	r3, r3, #8
 80064fc:	9220      	str	r2, [sp, #128]	; 0x80
 80064fe:	dd08      	ble.n	8006512 <_svfprintf_r+0xb82>
 8006500:	aa1f      	add	r2, sp, #124	; 0x7c
 8006502:	4651      	mov	r1, sl
 8006504:	4658      	mov	r0, fp
 8006506:	f003 fd81 	bl	800a00c <__ssprint_r>
 800650a:	2800      	cmp	r0, #0
 800650c:	f040 81a1 	bne.w	8006852 <_svfprintf_r+0xec2>
 8006510:	ab2c      	add	r3, sp, #176	; 0xb0
 8006512:	9a03      	ldr	r2, [sp, #12]
 8006514:	605a      	str	r2, [r3, #4]
 8006516:	9903      	ldr	r1, [sp, #12]
 8006518:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800651a:	f8c3 8000 	str.w	r8, [r3]
 800651e:	440a      	add	r2, r1
 8006520:	9221      	str	r2, [sp, #132]	; 0x84
 8006522:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006524:	3201      	adds	r2, #1
 8006526:	2a07      	cmp	r2, #7
 8006528:	9220      	str	r2, [sp, #128]	; 0x80
 800652a:	f73f ad59 	bgt.w	8005fe0 <_svfprintf_r+0x650>
 800652e:	f103 0408 	add.w	r4, r3, #8
 8006532:	e55e      	b.n	8005ff2 <_svfprintf_r+0x662>
 8006534:	aa1f      	add	r2, sp, #124	; 0x7c
 8006536:	4651      	mov	r1, sl
 8006538:	4658      	mov	r0, fp
 800653a:	f003 fd67 	bl	800a00c <__ssprint_r>
 800653e:	2800      	cmp	r0, #0
 8006540:	f040 8187 	bne.w	8006852 <_svfprintf_r+0xec2>
 8006544:	ac2c      	add	r4, sp, #176	; 0xb0
 8006546:	e7b1      	b.n	80064ac <_svfprintf_r+0xb1c>
 8006548:	aa1f      	add	r2, sp, #124	; 0x7c
 800654a:	4651      	mov	r1, sl
 800654c:	4658      	mov	r0, fp
 800654e:	f003 fd5d 	bl	800a00c <__ssprint_r>
 8006552:	2800      	cmp	r0, #0
 8006554:	f040 817d 	bne.w	8006852 <_svfprintf_r+0xec2>
 8006558:	ab2c      	add	r3, sp, #176	; 0xb0
 800655a:	e7bd      	b.n	80064d8 <_svfprintf_r+0xb48>
 800655c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800655e:	605c      	str	r4, [r3, #4]
 8006560:	3210      	adds	r2, #16
 8006562:	9221      	str	r2, [sp, #132]	; 0x84
 8006564:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006566:	3201      	adds	r2, #1
 8006568:	2a07      	cmp	r2, #7
 800656a:	9220      	str	r2, [sp, #128]	; 0x80
 800656c:	dc02      	bgt.n	8006574 <_svfprintf_r+0xbe4>
 800656e:	3308      	adds	r3, #8
 8006570:	3e10      	subs	r6, #16
 8006572:	e7b7      	b.n	80064e4 <_svfprintf_r+0xb54>
 8006574:	aa1f      	add	r2, sp, #124	; 0x7c
 8006576:	4651      	mov	r1, sl
 8006578:	4658      	mov	r0, fp
 800657a:	f003 fd47 	bl	800a00c <__ssprint_r>
 800657e:	2800      	cmp	r0, #0
 8006580:	f040 8167 	bne.w	8006852 <_svfprintf_r+0xec2>
 8006584:	ab2c      	add	r3, sp, #176	; 0xb0
 8006586:	e7f3      	b.n	8006570 <_svfprintf_r+0xbe0>
 8006588:	9b03      	ldr	r3, [sp, #12]
 800658a:	42bb      	cmp	r3, r7
 800658c:	bfa8      	it	ge
 800658e:	463b      	movge	r3, r7
 8006590:	2b00      	cmp	r3, #0
 8006592:	461e      	mov	r6, r3
 8006594:	dd0b      	ble.n	80065ae <_svfprintf_r+0xc1e>
 8006596:	6063      	str	r3, [r4, #4]
 8006598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800659a:	f8c4 8000 	str.w	r8, [r4]
 800659e:	4433      	add	r3, r6
 80065a0:	9321      	str	r3, [sp, #132]	; 0x84
 80065a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065a4:	3301      	adds	r3, #1
 80065a6:	2b07      	cmp	r3, #7
 80065a8:	9320      	str	r3, [sp, #128]	; 0x80
 80065aa:	dc5f      	bgt.n	800666c <_svfprintf_r+0xcdc>
 80065ac:	3408      	adds	r4, #8
 80065ae:	2e00      	cmp	r6, #0
 80065b0:	bfac      	ite	ge
 80065b2:	1bbe      	subge	r6, r7, r6
 80065b4:	463e      	movlt	r6, r7
 80065b6:	2e00      	cmp	r6, #0
 80065b8:	dd0f      	ble.n	80065da <_svfprintf_r+0xc4a>
 80065ba:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8006704 <_svfprintf_r+0xd74>
 80065be:	f8c4 9000 	str.w	r9, [r4]
 80065c2:	2e10      	cmp	r6, #16
 80065c4:	dc5c      	bgt.n	8006680 <_svfprintf_r+0xcf0>
 80065c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065c8:	6066      	str	r6, [r4, #4]
 80065ca:	441e      	add	r6, r3
 80065cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065ce:	9621      	str	r6, [sp, #132]	; 0x84
 80065d0:	3301      	adds	r3, #1
 80065d2:	2b07      	cmp	r3, #7
 80065d4:	9320      	str	r3, [sp, #128]	; 0x80
 80065d6:	dc6a      	bgt.n	80066ae <_svfprintf_r+0xd1e>
 80065d8:	3408      	adds	r4, #8
 80065da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065dc:	9a03      	ldr	r2, [sp, #12]
 80065de:	4293      	cmp	r3, r2
 80065e0:	db01      	blt.n	80065e6 <_svfprintf_r+0xc56>
 80065e2:	07e9      	lsls	r1, r5, #31
 80065e4:	d50d      	bpl.n	8006602 <_svfprintf_r+0xc72>
 80065e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	9b08      	ldr	r3, [sp, #32]
 80065ec:	6063      	str	r3, [r4, #4]
 80065ee:	9a08      	ldr	r2, [sp, #32]
 80065f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065f2:	4413      	add	r3, r2
 80065f4:	9321      	str	r3, [sp, #132]	; 0x84
 80065f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065f8:	3301      	adds	r3, #1
 80065fa:	2b07      	cmp	r3, #7
 80065fc:	9320      	str	r3, [sp, #128]	; 0x80
 80065fe:	dc60      	bgt.n	80066c2 <_svfprintf_r+0xd32>
 8006600:	3408      	adds	r4, #8
 8006602:	9b03      	ldr	r3, [sp, #12]
 8006604:	9a03      	ldr	r2, [sp, #12]
 8006606:	1bde      	subs	r6, r3, r7
 8006608:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	429e      	cmp	r6, r3
 800660e:	bfa8      	it	ge
 8006610:	461e      	movge	r6, r3
 8006612:	2e00      	cmp	r6, #0
 8006614:	dd0b      	ble.n	800662e <_svfprintf_r+0xc9e>
 8006616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006618:	6066      	str	r6, [r4, #4]
 800661a:	4433      	add	r3, r6
 800661c:	9321      	str	r3, [sp, #132]	; 0x84
 800661e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006620:	3301      	adds	r3, #1
 8006622:	4447      	add	r7, r8
 8006624:	2b07      	cmp	r3, #7
 8006626:	6027      	str	r7, [r4, #0]
 8006628:	9320      	str	r3, [sp, #128]	; 0x80
 800662a:	dc54      	bgt.n	80066d6 <_svfprintf_r+0xd46>
 800662c:	3408      	adds	r4, #8
 800662e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006630:	9a03      	ldr	r2, [sp, #12]
 8006632:	2e00      	cmp	r6, #0
 8006634:	eba2 0303 	sub.w	r3, r2, r3
 8006638:	bfac      	ite	ge
 800663a:	1b9e      	subge	r6, r3, r6
 800663c:	461e      	movlt	r6, r3
 800663e:	2e00      	cmp	r6, #0
 8006640:	f77f acd7 	ble.w	8005ff2 <_svfprintf_r+0x662>
 8006644:	4f2f      	ldr	r7, [pc, #188]	; (8006704 <_svfprintf_r+0xd74>)
 8006646:	f04f 0810 	mov.w	r8, #16
 800664a:	2e10      	cmp	r6, #16
 800664c:	6027      	str	r7, [r4, #0]
 800664e:	f77f aee7 	ble.w	8006420 <_svfprintf_r+0xa90>
 8006652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006654:	f8c4 8004 	str.w	r8, [r4, #4]
 8006658:	3310      	adds	r3, #16
 800665a:	9321      	str	r3, [sp, #132]	; 0x84
 800665c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800665e:	3301      	adds	r3, #1
 8006660:	2b07      	cmp	r3, #7
 8006662:	9320      	str	r3, [sp, #128]	; 0x80
 8006664:	dc41      	bgt.n	80066ea <_svfprintf_r+0xd5a>
 8006666:	3408      	adds	r4, #8
 8006668:	3e10      	subs	r6, #16
 800666a:	e7ee      	b.n	800664a <_svfprintf_r+0xcba>
 800666c:	aa1f      	add	r2, sp, #124	; 0x7c
 800666e:	4651      	mov	r1, sl
 8006670:	4658      	mov	r0, fp
 8006672:	f003 fccb 	bl	800a00c <__ssprint_r>
 8006676:	2800      	cmp	r0, #0
 8006678:	f040 80eb 	bne.w	8006852 <_svfprintf_r+0xec2>
 800667c:	ac2c      	add	r4, sp, #176	; 0xb0
 800667e:	e796      	b.n	80065ae <_svfprintf_r+0xc1e>
 8006680:	2310      	movs	r3, #16
 8006682:	6063      	str	r3, [r4, #4]
 8006684:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006686:	3310      	adds	r3, #16
 8006688:	9321      	str	r3, [sp, #132]	; 0x84
 800668a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800668c:	3301      	adds	r3, #1
 800668e:	2b07      	cmp	r3, #7
 8006690:	9320      	str	r3, [sp, #128]	; 0x80
 8006692:	dc02      	bgt.n	800669a <_svfprintf_r+0xd0a>
 8006694:	3408      	adds	r4, #8
 8006696:	3e10      	subs	r6, #16
 8006698:	e791      	b.n	80065be <_svfprintf_r+0xc2e>
 800669a:	aa1f      	add	r2, sp, #124	; 0x7c
 800669c:	4651      	mov	r1, sl
 800669e:	4658      	mov	r0, fp
 80066a0:	f003 fcb4 	bl	800a00c <__ssprint_r>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	f040 80d4 	bne.w	8006852 <_svfprintf_r+0xec2>
 80066aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80066ac:	e7f3      	b.n	8006696 <_svfprintf_r+0xd06>
 80066ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80066b0:	4651      	mov	r1, sl
 80066b2:	4658      	mov	r0, fp
 80066b4:	f003 fcaa 	bl	800a00c <__ssprint_r>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	f040 80ca 	bne.w	8006852 <_svfprintf_r+0xec2>
 80066be:	ac2c      	add	r4, sp, #176	; 0xb0
 80066c0:	e78b      	b.n	80065da <_svfprintf_r+0xc4a>
 80066c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80066c4:	4651      	mov	r1, sl
 80066c6:	4658      	mov	r0, fp
 80066c8:	f003 fca0 	bl	800a00c <__ssprint_r>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	f040 80c0 	bne.w	8006852 <_svfprintf_r+0xec2>
 80066d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80066d4:	e795      	b.n	8006602 <_svfprintf_r+0xc72>
 80066d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80066d8:	4651      	mov	r1, sl
 80066da:	4658      	mov	r0, fp
 80066dc:	f003 fc96 	bl	800a00c <__ssprint_r>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	f040 80b6 	bne.w	8006852 <_svfprintf_r+0xec2>
 80066e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80066e8:	e7a1      	b.n	800662e <_svfprintf_r+0xc9e>
 80066ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80066ec:	4651      	mov	r1, sl
 80066ee:	4658      	mov	r0, fp
 80066f0:	f003 fc8c 	bl	800a00c <__ssprint_r>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	f040 80ac 	bne.w	8006852 <_svfprintf_r+0xec2>
 80066fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80066fc:	e7b4      	b.n	8006668 <_svfprintf_r+0xcd8>
 80066fe:	bf00      	nop
 8006700:	0800b736 	.word	0x0800b736
 8006704:	0800b748 	.word	0x0800b748
 8006708:	9b03      	ldr	r3, [sp, #12]
 800670a:	2b01      	cmp	r3, #1
 800670c:	dc01      	bgt.n	8006712 <_svfprintf_r+0xd82>
 800670e:	07ea      	lsls	r2, r5, #31
 8006710:	d576      	bpl.n	8006800 <_svfprintf_r+0xe70>
 8006712:	2301      	movs	r3, #1
 8006714:	6063      	str	r3, [r4, #4]
 8006716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006718:	f8c4 8000 	str.w	r8, [r4]
 800671c:	3301      	adds	r3, #1
 800671e:	9321      	str	r3, [sp, #132]	; 0x84
 8006720:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006722:	3301      	adds	r3, #1
 8006724:	2b07      	cmp	r3, #7
 8006726:	9320      	str	r3, [sp, #128]	; 0x80
 8006728:	dc36      	bgt.n	8006798 <_svfprintf_r+0xe08>
 800672a:	3408      	adds	r4, #8
 800672c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800672e:	6023      	str	r3, [r4, #0]
 8006730:	9b08      	ldr	r3, [sp, #32]
 8006732:	6063      	str	r3, [r4, #4]
 8006734:	9a08      	ldr	r2, [sp, #32]
 8006736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006738:	4413      	add	r3, r2
 800673a:	9321      	str	r3, [sp, #132]	; 0x84
 800673c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800673e:	3301      	adds	r3, #1
 8006740:	2b07      	cmp	r3, #7
 8006742:	9320      	str	r3, [sp, #128]	; 0x80
 8006744:	dc31      	bgt.n	80067aa <_svfprintf_r+0xe1a>
 8006746:	3408      	adds	r4, #8
 8006748:	2300      	movs	r3, #0
 800674a:	2200      	movs	r2, #0
 800674c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006750:	f7fa f9d6 	bl	8000b00 <__aeabi_dcmpeq>
 8006754:	9b03      	ldr	r3, [sp, #12]
 8006756:	1e5e      	subs	r6, r3, #1
 8006758:	2800      	cmp	r0, #0
 800675a:	d12f      	bne.n	80067bc <_svfprintf_r+0xe2c>
 800675c:	f108 0301 	add.w	r3, r8, #1
 8006760:	e884 0048 	stmia.w	r4, {r3, r6}
 8006764:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006766:	9a03      	ldr	r2, [sp, #12]
 8006768:	3b01      	subs	r3, #1
 800676a:	4413      	add	r3, r2
 800676c:	9321      	str	r3, [sp, #132]	; 0x84
 800676e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006770:	3301      	adds	r3, #1
 8006772:	2b07      	cmp	r3, #7
 8006774:	9320      	str	r3, [sp, #128]	; 0x80
 8006776:	dd4a      	ble.n	800680e <_svfprintf_r+0xe7e>
 8006778:	aa1f      	add	r2, sp, #124	; 0x7c
 800677a:	4651      	mov	r1, sl
 800677c:	4658      	mov	r0, fp
 800677e:	f003 fc45 	bl	800a00c <__ssprint_r>
 8006782:	2800      	cmp	r0, #0
 8006784:	d165      	bne.n	8006852 <_svfprintf_r+0xec2>
 8006786:	ac2c      	add	r4, sp, #176	; 0xb0
 8006788:	ab1b      	add	r3, sp, #108	; 0x6c
 800678a:	6023      	str	r3, [r4, #0]
 800678c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800678e:	6063      	str	r3, [r4, #4]
 8006790:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006794:	4413      	add	r3, r2
 8006796:	e41c      	b.n	8005fd2 <_svfprintf_r+0x642>
 8006798:	aa1f      	add	r2, sp, #124	; 0x7c
 800679a:	4651      	mov	r1, sl
 800679c:	4658      	mov	r0, fp
 800679e:	f003 fc35 	bl	800a00c <__ssprint_r>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d155      	bne.n	8006852 <_svfprintf_r+0xec2>
 80067a6:	ac2c      	add	r4, sp, #176	; 0xb0
 80067a8:	e7c0      	b.n	800672c <_svfprintf_r+0xd9c>
 80067aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80067ac:	4651      	mov	r1, sl
 80067ae:	4658      	mov	r0, fp
 80067b0:	f003 fc2c 	bl	800a00c <__ssprint_r>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d14c      	bne.n	8006852 <_svfprintf_r+0xec2>
 80067b8:	ac2c      	add	r4, sp, #176	; 0xb0
 80067ba:	e7c5      	b.n	8006748 <_svfprintf_r+0xdb8>
 80067bc:	2e00      	cmp	r6, #0
 80067be:	dde3      	ble.n	8006788 <_svfprintf_r+0xdf8>
 80067c0:	4f59      	ldr	r7, [pc, #356]	; (8006928 <_svfprintf_r+0xf98>)
 80067c2:	f04f 0810 	mov.w	r8, #16
 80067c6:	2e10      	cmp	r6, #16
 80067c8:	6027      	str	r7, [r4, #0]
 80067ca:	dc04      	bgt.n	80067d6 <_svfprintf_r+0xe46>
 80067cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067ce:	6066      	str	r6, [r4, #4]
 80067d0:	441e      	add	r6, r3
 80067d2:	9621      	str	r6, [sp, #132]	; 0x84
 80067d4:	e7cb      	b.n	800676e <_svfprintf_r+0xdde>
 80067d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067d8:	f8c4 8004 	str.w	r8, [r4, #4]
 80067dc:	3310      	adds	r3, #16
 80067de:	9321      	str	r3, [sp, #132]	; 0x84
 80067e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80067e2:	3301      	adds	r3, #1
 80067e4:	2b07      	cmp	r3, #7
 80067e6:	9320      	str	r3, [sp, #128]	; 0x80
 80067e8:	dc02      	bgt.n	80067f0 <_svfprintf_r+0xe60>
 80067ea:	3408      	adds	r4, #8
 80067ec:	3e10      	subs	r6, #16
 80067ee:	e7ea      	b.n	80067c6 <_svfprintf_r+0xe36>
 80067f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80067f2:	4651      	mov	r1, sl
 80067f4:	4658      	mov	r0, fp
 80067f6:	f003 fc09 	bl	800a00c <__ssprint_r>
 80067fa:	bb50      	cbnz	r0, 8006852 <_svfprintf_r+0xec2>
 80067fc:	ac2c      	add	r4, sp, #176	; 0xb0
 80067fe:	e7f5      	b.n	80067ec <_svfprintf_r+0xe5c>
 8006800:	2301      	movs	r3, #1
 8006802:	6063      	str	r3, [r4, #4]
 8006804:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006806:	f8c4 8000 	str.w	r8, [r4]
 800680a:	3301      	adds	r3, #1
 800680c:	e7ae      	b.n	800676c <_svfprintf_r+0xddc>
 800680e:	3408      	adds	r4, #8
 8006810:	e7ba      	b.n	8006788 <_svfprintf_r+0xdf8>
 8006812:	3408      	adds	r4, #8
 8006814:	f7ff bbed 	b.w	8005ff2 <_svfprintf_r+0x662>
 8006818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800681a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800681c:	1a9d      	subs	r5, r3, r2
 800681e:	2d00      	cmp	r5, #0
 8006820:	f77f abea 	ble.w	8005ff8 <_svfprintf_r+0x668>
 8006824:	2610      	movs	r6, #16
 8006826:	4b41      	ldr	r3, [pc, #260]	; (800692c <_svfprintf_r+0xf9c>)
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	2d10      	cmp	r5, #16
 800682c:	dc1b      	bgt.n	8006866 <_svfprintf_r+0xed6>
 800682e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006830:	6065      	str	r5, [r4, #4]
 8006832:	441d      	add	r5, r3
 8006834:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006836:	9521      	str	r5, [sp, #132]	; 0x84
 8006838:	3301      	adds	r3, #1
 800683a:	2b07      	cmp	r3, #7
 800683c:	9320      	str	r3, [sp, #128]	; 0x80
 800683e:	f77f abdb 	ble.w	8005ff8 <_svfprintf_r+0x668>
 8006842:	aa1f      	add	r2, sp, #124	; 0x7c
 8006844:	4651      	mov	r1, sl
 8006846:	4658      	mov	r0, fp
 8006848:	f003 fbe0 	bl	800a00c <__ssprint_r>
 800684c:	2800      	cmp	r0, #0
 800684e:	f43f abd3 	beq.w	8005ff8 <_svfprintf_r+0x668>
 8006852:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006856:	f013 0f40 	tst.w	r3, #64	; 0x40
 800685a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800685c:	bf18      	it	ne
 800685e:	f04f 33ff 	movne.w	r3, #4294967295
 8006862:	f7ff b8b9 	b.w	80059d8 <_svfprintf_r+0x48>
 8006866:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006868:	6066      	str	r6, [r4, #4]
 800686a:	3310      	adds	r3, #16
 800686c:	9321      	str	r3, [sp, #132]	; 0x84
 800686e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006870:	3301      	adds	r3, #1
 8006872:	2b07      	cmp	r3, #7
 8006874:	9320      	str	r3, [sp, #128]	; 0x80
 8006876:	dc02      	bgt.n	800687e <_svfprintf_r+0xeee>
 8006878:	3408      	adds	r4, #8
 800687a:	3d10      	subs	r5, #16
 800687c:	e7d3      	b.n	8006826 <_svfprintf_r+0xe96>
 800687e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006880:	4651      	mov	r1, sl
 8006882:	4658      	mov	r0, fp
 8006884:	f003 fbc2 	bl	800a00c <__ssprint_r>
 8006888:	2800      	cmp	r0, #0
 800688a:	d1e2      	bne.n	8006852 <_svfprintf_r+0xec2>
 800688c:	ac2c      	add	r4, sp, #176	; 0xb0
 800688e:	e7f4      	b.n	800687a <_svfprintf_r+0xeea>
 8006890:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0dd      	beq.n	8006852 <_svfprintf_r+0xec2>
 8006896:	aa1f      	add	r2, sp, #124	; 0x7c
 8006898:	4651      	mov	r1, sl
 800689a:	4658      	mov	r0, fp
 800689c:	f003 fbb6 	bl	800a00c <__ssprint_r>
 80068a0:	e7d7      	b.n	8006852 <_svfprintf_r+0xec2>
 80068a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	f7fa f95b 	bl	8000b64 <__aeabi_dcmpun>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f43f aa44 	beq.w	8005d3c <_svfprintf_r+0x3ac>
 80068b4:	4b1e      	ldr	r3, [pc, #120]	; (8006930 <_svfprintf_r+0xfa0>)
 80068b6:	4a1f      	ldr	r2, [pc, #124]	; (8006934 <_svfprintf_r+0xfa4>)
 80068b8:	f7ff ba34 	b.w	8005d24 <_svfprintf_r+0x394>
 80068bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068be:	eba3 0308 	sub.w	r3, r3, r8
 80068c2:	9303      	str	r3, [sp, #12]
 80068c4:	f7ff bab5 	b.w	8005e32 <_svfprintf_r+0x4a2>
 80068c8:	ea56 0207 	orrs.w	r2, r6, r7
 80068cc:	950b      	str	r5, [sp, #44]	; 0x2c
 80068ce:	f43f ac2b 	beq.w	8006128 <_svfprintf_r+0x798>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	f43f ac9d 	beq.w	8006212 <_svfprintf_r+0x882>
 80068d8:	2b02      	cmp	r3, #2
 80068da:	f43f acbd 	beq.w	8006258 <_svfprintf_r+0x8c8>
 80068de:	ab2c      	add	r3, sp, #176	; 0xb0
 80068e0:	08f1      	lsrs	r1, r6, #3
 80068e2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80068e6:	08f8      	lsrs	r0, r7, #3
 80068e8:	f006 0207 	and.w	r2, r6, #7
 80068ec:	4607      	mov	r7, r0
 80068ee:	460e      	mov	r6, r1
 80068f0:	3230      	adds	r2, #48	; 0x30
 80068f2:	ea56 0107 	orrs.w	r1, r6, r7
 80068f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80068fa:	f803 2c01 	strb.w	r2, [r3, #-1]
 80068fe:	f47f ac86 	bne.w	800620e <_svfprintf_r+0x87e>
 8006902:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006904:	07c9      	lsls	r1, r1, #31
 8006906:	d506      	bpl.n	8006916 <_svfprintf_r+0xf86>
 8006908:	2a30      	cmp	r2, #48	; 0x30
 800690a:	d004      	beq.n	8006916 <_svfprintf_r+0xf86>
 800690c:	2230      	movs	r2, #48	; 0x30
 800690e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8006912:	f1a3 0802 	sub.w	r8, r3, #2
 8006916:	464e      	mov	r6, r9
 8006918:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800691c:	eba9 0908 	sub.w	r9, r9, r8
 8006920:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006922:	2700      	movs	r7, #0
 8006924:	f7ff bad1 	b.w	8005eca <_svfprintf_r+0x53a>
 8006928:	0800b748 	.word	0x0800b748
 800692c:	0800b738 	.word	0x0800b738
 8006930:	0800b70c 	.word	0x0800b70c
 8006934:	0800b710 	.word	0x0800b710

08006938 <__ssvfscanf_r>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	461f      	mov	r7, r3
 800693e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8006942:	460d      	mov	r5, r1
 8006944:	0499      	lsls	r1, r3, #18
 8006946:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
 800694a:	4680      	mov	r8, r0
 800694c:	d406      	bmi.n	800695c <__ssvfscanf_r+0x24>
 800694e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006952:	81ab      	strh	r3, [r5, #12]
 8006954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800695a:	666b      	str	r3, [r5, #100]	; 0x64
 800695c:	2300      	movs	r3, #0
 800695e:	9206      	str	r2, [sp, #24]
 8006960:	9305      	str	r3, [sp, #20]
 8006962:	9303      	str	r3, [sp, #12]
 8006964:	469b      	mov	fp, r3
 8006966:	9304      	str	r3, [sp, #16]
 8006968:	9a06      	ldr	r2, [sp, #24]
 800696a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800696e:	9206      	str	r2, [sp, #24]
 8006970:	930f      	str	r3, [sp, #60]	; 0x3c
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 80c8 	beq.w	8006b08 <__ssvfscanf_r+0x1d0>
 8006978:	f001 fbd0 	bl	800811c <__locale_ctype_ptr>
 800697c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800697e:	4418      	add	r0, r3
 8006980:	f890 9001 	ldrb.w	r9, [r0, #1]
 8006984:	f019 0908 	ands.w	r9, r9, #8
 8006988:	d019      	beq.n	80069be <__ssvfscanf_r+0x86>
 800698a:	686b      	ldr	r3, [r5, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	dd0f      	ble.n	80069b0 <__ssvfscanf_r+0x78>
 8006990:	f001 fbc4 	bl	800811c <__locale_ctype_ptr>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	781a      	ldrb	r2, [r3, #0]
 8006998:	4410      	add	r0, r2
 800699a:	7842      	ldrb	r2, [r0, #1]
 800699c:	0712      	lsls	r2, r2, #28
 800699e:	d5e3      	bpl.n	8006968 <__ssvfscanf_r+0x30>
 80069a0:	686a      	ldr	r2, [r5, #4]
 80069a2:	3301      	adds	r3, #1
 80069a4:	3a01      	subs	r2, #1
 80069a6:	f10b 0b01 	add.w	fp, fp, #1
 80069aa:	606a      	str	r2, [r5, #4]
 80069ac:	602b      	str	r3, [r5, #0]
 80069ae:	e7ec      	b.n	800698a <__ssvfscanf_r+0x52>
 80069b0:	4629      	mov	r1, r5
 80069b2:	4640      	mov	r0, r8
 80069b4:	f003 fbe1 	bl	800a17a <__ssrefill_r>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d0e9      	beq.n	8006990 <__ssvfscanf_r+0x58>
 80069bc:	e7d4      	b.n	8006968 <__ssvfscanf_r+0x30>
 80069be:	2b25      	cmp	r3, #37	; 0x25
 80069c0:	f040 8098 	bne.w	8006af4 <__ssvfscanf_r+0x1bc>
 80069c4:	9b06      	ldr	r3, [sp, #24]
 80069c6:	464c      	mov	r4, r9
 80069c8:	464e      	mov	r6, r9
 80069ca:	220a      	movs	r2, #10
 80069cc:	9906      	ldr	r1, [sp, #24]
 80069ce:	f893 a000 	ldrb.w	sl, [r3]
 80069d2:	3101      	adds	r1, #1
 80069d4:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
 80069d8:	9106      	str	r1, [sp, #24]
 80069da:	f000 80db 	beq.w	8006b94 <__ssvfscanf_r+0x25c>
 80069de:	d856      	bhi.n	8006a8e <__ssvfscanf_r+0x156>
 80069e0:	f1ba 0f44 	cmp.w	sl, #68	; 0x44
 80069e4:	d014      	beq.n	8006a10 <__ssvfscanf_r+0xd8>
 80069e6:	d81e      	bhi.n	8006a26 <__ssvfscanf_r+0xee>
 80069e8:	f1ba 0f2a 	cmp.w	sl, #42	; 0x2a
 80069ec:	f000 80ac 	beq.w	8006b48 <__ssvfscanf_r+0x210>
 80069f0:	d811      	bhi.n	8006a16 <__ssvfscanf_r+0xde>
 80069f2:	f1ba 0f00 	cmp.w	sl, #0
 80069f6:	f000 850f 	beq.w	8007418 <__ssvfscanf_r+0xae0>
 80069fa:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80069fe:	d079      	beq.n	8006af4 <__ssvfscanf_r+0x1bc>
 8006a00:	f001 fb8c 	bl	800811c <__locale_ctype_ptr>
 8006a04:	4450      	add	r0, sl
 8006a06:	7843      	ldrb	r3, [r0, #1]
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d148      	bne.n	8006aa2 <__ssvfscanf_r+0x16a>
 8006a10:	f044 0401 	orr.w	r4, r4, #1
 8006a14:	e045      	b.n	8006aa2 <__ssvfscanf_r+0x16a>
 8006a16:	f1aa 0330 	sub.w	r3, sl, #48	; 0x30
 8006a1a:	2b09      	cmp	r3, #9
 8006a1c:	d8f0      	bhi.n	8006a00 <__ssvfscanf_r+0xc8>
 8006a1e:	fb02 a606 	mla	r6, r2, r6, sl
 8006a22:	3e30      	subs	r6, #48	; 0x30
 8006a24:	e092      	b.n	8006b4c <__ssvfscanf_r+0x214>
 8006a26:	f1ba 0f4c 	cmp.w	sl, #76	; 0x4c
 8006a2a:	f000 8096 	beq.w	8006b5a <__ssvfscanf_r+0x222>
 8006a2e:	d822      	bhi.n	8006a76 <__ssvfscanf_r+0x13e>
 8006a30:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 8006a34:	d002      	beq.n	8006a3c <__ssvfscanf_r+0x104>
 8006a36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006a3a:	d1e1      	bne.n	8006a00 <__ssvfscanf_r+0xc8>
 8006a3c:	f04f 0a04 	mov.w	sl, #4
 8006a40:	686b      	ldr	r3, [r5, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f340 80c7 	ble.w	8006bd6 <__ssvfscanf_r+0x29e>
 8006a48:	0663      	lsls	r3, r4, #25
 8006a4a:	d408      	bmi.n	8006a5e <__ssvfscanf_r+0x126>
 8006a4c:	f001 fb66 	bl	800811c <__locale_ctype_ptr>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	4410      	add	r0, r2
 8006a56:	7842      	ldrb	r2, [r0, #1]
 8006a58:	0710      	lsls	r0, r2, #28
 8006a5a:	f100 80c4 	bmi.w	8006be6 <__ssvfscanf_r+0x2ae>
 8006a5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a62:	f1ba 0f03 	cmp.w	sl, #3
 8006a66:	f200 80d0 	bhi.w	8006c0a <__ssvfscanf_r+0x2d2>
 8006a6a:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8006a6e:	0150      	.short	0x0150
 8006a70:	025a01a3 	.word	0x025a01a3
 8006a74:	0323      	.short	0x0323
 8006a76:	f1ba 0f58 	cmp.w	sl, #88	; 0x58
 8006a7a:	d07b      	beq.n	8006b74 <__ssvfscanf_r+0x23c>
 8006a7c:	f1ba 0f5b 	cmp.w	sl, #91	; 0x5b
 8006a80:	d07e      	beq.n	8006b80 <__ssvfscanf_r+0x248>
 8006a82:	f1ba 0f4f 	cmp.w	sl, #79	; 0x4f
 8006a86:	d1bb      	bne.n	8006a00 <__ssvfscanf_r+0xc8>
 8006a88:	f044 0401 	orr.w	r4, r4, #1
 8006a8c:	e022      	b.n	8006ad4 <__ssvfscanf_r+0x19c>
 8006a8e:	f1ba 0f6c 	cmp.w	sl, #108	; 0x6c
 8006a92:	d05d      	beq.n	8006b50 <__ssvfscanf_r+0x218>
 8006a94:	d814      	bhi.n	8006ac0 <__ssvfscanf_r+0x188>
 8006a96:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006a9a:	d804      	bhi.n	8006aa6 <__ssvfscanf_r+0x16e>
 8006a9c:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006aa0:	d2cc      	bcs.n	8006a3c <__ssvfscanf_r+0x104>
 8006aa2:	4bac      	ldr	r3, [pc, #688]	; (8006d54 <__ssvfscanf_r+0x41c>)
 8006aa4:	e063      	b.n	8006b6e <__ssvfscanf_r+0x236>
 8006aa6:	f1ba 0f68 	cmp.w	sl, #104	; 0x68
 8006aaa:	d05c      	beq.n	8006b66 <__ssvfscanf_r+0x22e>
 8006aac:	f1ba 0f69 	cmp.w	sl, #105	; 0x69
 8006ab0:	d1a6      	bne.n	8006a00 <__ssvfscanf_r+0xc8>
 8006ab2:	4ba8      	ldr	r3, [pc, #672]	; (8006d54 <__ssvfscanf_r+0x41c>)
 8006ab4:	9305      	str	r3, [sp, #20]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9303      	str	r3, [sp, #12]
 8006aba:	f04f 0a03 	mov.w	sl, #3
 8006abe:	e7bf      	b.n	8006a40 <__ssvfscanf_r+0x108>
 8006ac0:	f1ba 0f70 	cmp.w	sl, #112	; 0x70
 8006ac4:	d06b      	beq.n	8006b9e <__ssvfscanf_r+0x266>
 8006ac6:	d809      	bhi.n	8006adc <__ssvfscanf_r+0x1a4>
 8006ac8:	f1ba 0f6e 	cmp.w	sl, #110	; 0x6e
 8006acc:	d06a      	beq.n	8006ba4 <__ssvfscanf_r+0x26c>
 8006ace:	f1ba 0f6f 	cmp.w	sl, #111	; 0x6f
 8006ad2:	d195      	bne.n	8006a00 <__ssvfscanf_r+0xc8>
 8006ad4:	4ba0      	ldr	r3, [pc, #640]	; (8006d58 <__ssvfscanf_r+0x420>)
 8006ad6:	9305      	str	r3, [sp, #20]
 8006ad8:	2308      	movs	r3, #8
 8006ada:	e7ed      	b.n	8006ab8 <__ssvfscanf_r+0x180>
 8006adc:	f1ba 0f75 	cmp.w	sl, #117	; 0x75
 8006ae0:	d044      	beq.n	8006b6c <__ssvfscanf_r+0x234>
 8006ae2:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
 8006ae6:	d045      	beq.n	8006b74 <__ssvfscanf_r+0x23c>
 8006ae8:	f1ba 0f73 	cmp.w	sl, #115	; 0x73
 8006aec:	d188      	bne.n	8006a00 <__ssvfscanf_r+0xc8>
 8006aee:	f04f 0a02 	mov.w	sl, #2
 8006af2:	e7a5      	b.n	8006a40 <__ssvfscanf_r+0x108>
 8006af4:	686b      	ldr	r3, [r5, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	dd0b      	ble.n	8006b12 <__ssvfscanf_r+0x1da>
 8006afa:	9a06      	ldr	r2, [sp, #24]
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8006b02:	781a      	ldrb	r2, [r3, #0]
 8006b04:	4291      	cmp	r1, r2
 8006b06:	d017      	beq.n	8006b38 <__ssvfscanf_r+0x200>
 8006b08:	9804      	ldr	r0, [sp, #16]
 8006b0a:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
 8006b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b12:	4629      	mov	r1, r5
 8006b14:	4640      	mov	r0, r8
 8006b16:	f003 fb30 	bl	800a17a <__ssrefill_r>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d0ed      	beq.n	8006afa <__ssvfscanf_r+0x1c2>
 8006b1e:	9b04      	ldr	r3, [sp, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8479 	beq.w	8007418 <__ssvfscanf_r+0xae0>
 8006b26:	89ab      	ldrh	r3, [r5, #12]
 8006b28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b2c:	9b04      	ldr	r3, [sp, #16]
 8006b2e:	bf18      	it	ne
 8006b30:	f04f 33ff 	movne.w	r3, #4294967295
 8006b34:	9304      	str	r3, [sp, #16]
 8006b36:	e7e7      	b.n	8006b08 <__ssvfscanf_r+0x1d0>
 8006b38:	686a      	ldr	r2, [r5, #4]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	3a01      	subs	r2, #1
 8006b3e:	606a      	str	r2, [r5, #4]
 8006b40:	602b      	str	r3, [r5, #0]
 8006b42:	f10b 0b01 	add.w	fp, fp, #1
 8006b46:	e70f      	b.n	8006968 <__ssvfscanf_r+0x30>
 8006b48:	f044 0410 	orr.w	r4, r4, #16
 8006b4c:	9b06      	ldr	r3, [sp, #24]
 8006b4e:	e73d      	b.n	80069cc <__ssvfscanf_r+0x94>
 8006b50:	7859      	ldrb	r1, [r3, #1]
 8006b52:	296c      	cmp	r1, #108	; 0x6c
 8006b54:	d104      	bne.n	8006b60 <__ssvfscanf_r+0x228>
 8006b56:	3302      	adds	r3, #2
 8006b58:	9306      	str	r3, [sp, #24]
 8006b5a:	f044 0402 	orr.w	r4, r4, #2
 8006b5e:	e7f5      	b.n	8006b4c <__ssvfscanf_r+0x214>
 8006b60:	f044 0401 	orr.w	r4, r4, #1
 8006b64:	e7f2      	b.n	8006b4c <__ssvfscanf_r+0x214>
 8006b66:	f044 0404 	orr.w	r4, r4, #4
 8006b6a:	e7ef      	b.n	8006b4c <__ssvfscanf_r+0x214>
 8006b6c:	4b7a      	ldr	r3, [pc, #488]	; (8006d58 <__ssvfscanf_r+0x420>)
 8006b6e:	9305      	str	r3, [sp, #20]
 8006b70:	230a      	movs	r3, #10
 8006b72:	e7a1      	b.n	8006ab8 <__ssvfscanf_r+0x180>
 8006b74:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8006b78:	4b77      	ldr	r3, [pc, #476]	; (8006d58 <__ssvfscanf_r+0x420>)
 8006b7a:	9305      	str	r3, [sp, #20]
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	e79b      	b.n	8006ab8 <__ssvfscanf_r+0x180>
 8006b80:	9906      	ldr	r1, [sp, #24]
 8006b82:	a812      	add	r0, sp, #72	; 0x48
 8006b84:	f002 f944 	bl	8008e10 <__sccl>
 8006b88:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8006b8c:	9006      	str	r0, [sp, #24]
 8006b8e:	f04f 0a01 	mov.w	sl, #1
 8006b92:	e755      	b.n	8006a40 <__ssvfscanf_r+0x108>
 8006b94:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8006b98:	f04f 0a00 	mov.w	sl, #0
 8006b9c:	e750      	b.n	8006a40 <__ssvfscanf_r+0x108>
 8006b9e:	f444 7408 	orr.w	r4, r4, #544	; 0x220
 8006ba2:	e7e9      	b.n	8006b78 <__ssvfscanf_r+0x240>
 8006ba4:	06e6      	lsls	r6, r4, #27
 8006ba6:	f53f aedf 	bmi.w	8006968 <__ssvfscanf_r+0x30>
 8006baa:	f014 0f04 	tst.w	r4, #4
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	f107 0304 	add.w	r3, r7, #4
 8006bb4:	d003      	beq.n	8006bbe <__ssvfscanf_r+0x286>
 8006bb6:	f8a2 b000 	strh.w	fp, [r2]
 8006bba:	461f      	mov	r7, r3
 8006bbc:	e6d4      	b.n	8006968 <__ssvfscanf_r+0x30>
 8006bbe:	07e0      	lsls	r0, r4, #31
 8006bc0:	d502      	bpl.n	8006bc8 <__ssvfscanf_r+0x290>
 8006bc2:	f8c2 b000 	str.w	fp, [r2]
 8006bc6:	e7f8      	b.n	8006bba <__ssvfscanf_r+0x282>
 8006bc8:	07a1      	lsls	r1, r4, #30
 8006bca:	d5fa      	bpl.n	8006bc2 <__ssvfscanf_r+0x28a>
 8006bcc:	4658      	mov	r0, fp
 8006bce:	17c1      	asrs	r1, r0, #31
 8006bd0:	e9c2 0100 	strd	r0, r1, [r2]
 8006bd4:	e7f1      	b.n	8006bba <__ssvfscanf_r+0x282>
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	4640      	mov	r0, r8
 8006bda:	f003 face 	bl	800a17a <__ssrefill_r>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	f43f af32 	beq.w	8006a48 <__ssvfscanf_r+0x110>
 8006be4:	e79b      	b.n	8006b1e <__ssvfscanf_r+0x1e6>
 8006be6:	686a      	ldr	r2, [r5, #4]
 8006be8:	3a01      	subs	r2, #1
 8006bea:	2a00      	cmp	r2, #0
 8006bec:	f10b 0b01 	add.w	fp, fp, #1
 8006bf0:	606a      	str	r2, [r5, #4]
 8006bf2:	dd02      	ble.n	8006bfa <__ssvfscanf_r+0x2c2>
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	e728      	b.n	8006a4c <__ssvfscanf_r+0x114>
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	f003 fabc 	bl	800a17a <__ssrefill_r>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f43f af22 	beq.w	8006a4c <__ssvfscanf_r+0x114>
 8006c08:	e789      	b.n	8006b1e <__ssvfscanf_r+0x1e6>
 8006c0a:	2e00      	cmp	r6, #0
 8006c0c:	bf08      	it	eq
 8006c0e:	2601      	moveq	r6, #1
 8006c10:	f014 0301 	ands.w	r3, r4, #1
 8006c14:	f004 0410 	and.w	r4, r4, #16
 8006c18:	d04d      	beq.n	8006cb6 <__ssvfscanf_r+0x37e>
 8006c1a:	2208      	movs	r2, #8
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	a810      	add	r0, sp, #64	; 0x40
 8006c20:	f7fe fe5b 	bl	80058da <memset>
 8006c24:	bb74      	cbnz	r4, 8006c84 <__ssvfscanf_r+0x34c>
 8006c26:	f8d7 a000 	ldr.w	sl, [r7]
 8006c2a:	3704      	adds	r7, #4
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	2e00      	cmp	r6, #0
 8006c30:	d039      	beq.n	8006ca6 <__ssvfscanf_r+0x36e>
 8006c32:	9307      	str	r3, [sp, #28]
 8006c34:	f001 fa60 	bl	80080f8 <__locale_mb_cur_max>
 8006c38:	9b07      	ldr	r3, [sp, #28]
 8006c3a:	4283      	cmp	r3, r0
 8006c3c:	f43f af6f 	beq.w	8006b1e <__ssvfscanf_r+0x1e6>
 8006c40:	682a      	ldr	r2, [r5, #0]
 8006c42:	a852      	add	r0, sp, #328	; 0x148
 8006c44:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006c48:	54c1      	strb	r1, [r0, r3]
 8006c4a:	f103 0901 	add.w	r9, r3, #1
 8006c4e:	686b      	ldr	r3, [r5, #4]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	e885 000c 	stmia.w	r5, {r2, r3}
 8006c56:	ab10      	add	r3, sp, #64	; 0x40
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	464b      	mov	r3, r9
 8006c60:	4640      	mov	r0, r8
 8006c62:	f001 fc8f 	bl	8008584 <_mbrtowc_r>
 8006c66:	1c41      	adds	r1, r0, #1
 8006c68:	f43f af59 	beq.w	8006b1e <__ssvfscanf_r+0x1e6>
 8006c6c:	b968      	cbnz	r0, 8006c8a <__ssvfscanf_r+0x352>
 8006c6e:	b90c      	cbnz	r4, 8006c74 <__ssvfscanf_r+0x33c>
 8006c70:	f8ca 4000 	str.w	r4, [sl]
 8006c74:	44cb      	add	fp, r9
 8006c76:	3e01      	subs	r6, #1
 8006c78:	b90c      	cbnz	r4, 8006c7e <__ssvfscanf_r+0x346>
 8006c7a:	f10a 0a04 	add.w	sl, sl, #4
 8006c7e:	f04f 0900 	mov.w	r9, #0
 8006c82:	e004      	b.n	8006c8e <__ssvfscanf_r+0x356>
 8006c84:	f04f 0a00 	mov.w	sl, #0
 8006c88:	e7d0      	b.n	8006c2c <__ssvfscanf_r+0x2f4>
 8006c8a:	3002      	adds	r0, #2
 8006c8c:	d1f2      	bne.n	8006c74 <__ssvfscanf_r+0x33c>
 8006c8e:	686b      	ldr	r3, [r5, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dc0e      	bgt.n	8006cb2 <__ssvfscanf_r+0x37a>
 8006c94:	4629      	mov	r1, r5
 8006c96:	4640      	mov	r0, r8
 8006c98:	f003 fa6f 	bl	800a17a <__ssrefill_r>
 8006c9c:	b148      	cbz	r0, 8006cb2 <__ssvfscanf_r+0x37a>
 8006c9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ca2:	f47f af3c 	bne.w	8006b1e <__ssvfscanf_r+0x1e6>
 8006ca6:	2c00      	cmp	r4, #0
 8006ca8:	f47f ae5e 	bne.w	8006968 <__ssvfscanf_r+0x30>
 8006cac:	9b04      	ldr	r3, [sp, #16]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	e659      	b.n	8006966 <__ssvfscanf_r+0x2e>
 8006cb2:	464b      	mov	r3, r9
 8006cb4:	e7bb      	b.n	8006c2e <__ssvfscanf_r+0x2f6>
 8006cb6:	b1cc      	cbz	r4, 8006cec <__ssvfscanf_r+0x3b4>
 8006cb8:	461c      	mov	r4, r3
 8006cba:	686b      	ldr	r3, [r5, #4]
 8006cbc:	682a      	ldr	r2, [r5, #0]
 8006cbe:	42b3      	cmp	r3, r6
 8006cc0:	da0e      	bge.n	8006ce0 <__ssvfscanf_r+0x3a8>
 8006cc2:	441c      	add	r4, r3
 8006cc4:	1af6      	subs	r6, r6, r3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4640      	mov	r0, r8
 8006cce:	f003 fa54 	bl	800a17a <__ssrefill_r>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d0f1      	beq.n	8006cba <__ssvfscanf_r+0x382>
 8006cd6:	2c00      	cmp	r4, #0
 8006cd8:	f43f af21 	beq.w	8006b1e <__ssvfscanf_r+0x1e6>
 8006cdc:	44a3      	add	fp, r4
 8006cde:	e643      	b.n	8006968 <__ssvfscanf_r+0x30>
 8006ce0:	1b9b      	subs	r3, r3, r6
 8006ce2:	4434      	add	r4, r6
 8006ce4:	4416      	add	r6, r2
 8006ce6:	606b      	str	r3, [r5, #4]
 8006ce8:	602e      	str	r6, [r5, #0]
 8006cea:	e7f7      	b.n	8006cdc <__ssvfscanf_r+0x3a4>
 8006cec:	9500      	str	r5, [sp, #0]
 8006cee:	4633      	mov	r3, r6
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	1d3c      	adds	r4, r7, #4
 8006cf8:	f003 fa5c 	bl	800a1b4 <_sfread_r>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	f43f af0e 	beq.w	8006b1e <__ssvfscanf_r+0x1e6>
 8006d02:	4483      	add	fp, r0
 8006d04:	9b04      	ldr	r3, [sp, #16]
 8006d06:	3301      	adds	r3, #1
 8006d08:	9304      	str	r3, [sp, #16]
 8006d0a:	4627      	mov	r7, r4
 8006d0c:	e62c      	b.n	8006968 <__ssvfscanf_r+0x30>
 8006d0e:	2e00      	cmp	r6, #0
 8006d10:	bf08      	it	eq
 8006d12:	f04f 36ff 	moveq.w	r6, #4294967295
 8006d16:	06e2      	lsls	r2, r4, #27
 8006d18:	d520      	bpl.n	8006d5c <__ssvfscanf_r+0x424>
 8006d1a:	2400      	movs	r4, #0
 8006d1c:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	f819 2002 	ldrb.w	r2, [r9, r2]
 8006d28:	b912      	cbnz	r2, 8006d30 <__ssvfscanf_r+0x3f8>
 8006d2a:	2c00      	cmp	r4, #0
 8006d2c:	d1d6      	bne.n	8006cdc <__ssvfscanf_r+0x3a4>
 8006d2e:	e6eb      	b.n	8006b08 <__ssvfscanf_r+0x1d0>
 8006d30:	686a      	ldr	r2, [r5, #4]
 8006d32:	3401      	adds	r4, #1
 8006d34:	3a01      	subs	r2, #1
 8006d36:	3301      	adds	r3, #1
 8006d38:	42a6      	cmp	r6, r4
 8006d3a:	606a      	str	r2, [r5, #4]
 8006d3c:	602b      	str	r3, [r5, #0]
 8006d3e:	d0cd      	beq.n	8006cdc <__ssvfscanf_r+0x3a4>
 8006d40:	2a00      	cmp	r2, #0
 8006d42:	dced      	bgt.n	8006d20 <__ssvfscanf_r+0x3e8>
 8006d44:	4629      	mov	r1, r5
 8006d46:	4640      	mov	r0, r8
 8006d48:	f003 fa17 	bl	800a17a <__ssrefill_r>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d0e7      	beq.n	8006d20 <__ssvfscanf_r+0x3e8>
 8006d50:	e7c4      	b.n	8006cdc <__ssvfscanf_r+0x3a4>
 8006d52:	bf00      	nop
 8006d54:	08009bf9 	.word	0x08009bf9
 8006d58:	08009e85 	.word	0x08009e85
 8006d5c:	683c      	ldr	r4, [r7, #0]
 8006d5e:	f107 0904 	add.w	r9, r7, #4
 8006d62:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
 8006d66:	4627      	mov	r7, r4
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	781a      	ldrb	r2, [r3, #0]
 8006d6c:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8006d70:	b1b2      	cbz	r2, 8006da0 <__ssvfscanf_r+0x468>
 8006d72:	686a      	ldr	r2, [r5, #4]
 8006d74:	3a01      	subs	r2, #1
 8006d76:	606a      	str	r2, [r5, #4]
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	602a      	str	r2, [r5, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	f807 3b01 	strb.w	r3, [r7], #1
 8006d82:	1bf3      	subs	r3, r6, r7
 8006d84:	42dc      	cmn	r4, r3
 8006d86:	d00b      	beq.n	8006da0 <__ssvfscanf_r+0x468>
 8006d88:	686b      	ldr	r3, [r5, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	dcec      	bgt.n	8006d68 <__ssvfscanf_r+0x430>
 8006d8e:	4629      	mov	r1, r5
 8006d90:	4640      	mov	r0, r8
 8006d92:	f003 f9f2 	bl	800a17a <__ssrefill_r>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d0e6      	beq.n	8006d68 <__ssvfscanf_r+0x430>
 8006d9a:	42bc      	cmp	r4, r7
 8006d9c:	f43f aebf 	beq.w	8006b1e <__ssvfscanf_r+0x1e6>
 8006da0:	1b3c      	subs	r4, r7, r4
 8006da2:	f43f aeb1 	beq.w	8006b08 <__ssvfscanf_r+0x1d0>
 8006da6:	2300      	movs	r3, #0
 8006da8:	703b      	strb	r3, [r7, #0]
 8006daa:	9b04      	ldr	r3, [sp, #16]
 8006dac:	3301      	adds	r3, #1
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	464f      	mov	r7, r9
 8006db2:	e793      	b.n	8006cdc <__ssvfscanf_r+0x3a4>
 8006db4:	2e00      	cmp	r6, #0
 8006db6:	bf08      	it	eq
 8006db8:	f04f 36ff 	moveq.w	r6, #4294967295
 8006dbc:	f014 0901 	ands.w	r9, r4, #1
 8006dc0:	f004 0410 	and.w	r4, r4, #16
 8006dc4:	d06a      	beq.n	8006e9c <__ssvfscanf_r+0x564>
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	2100      	movs	r1, #0
 8006dca:	a810      	add	r0, sp, #64	; 0x40
 8006dcc:	f7fe fd85 	bl	80058da <memset>
 8006dd0:	2c00      	cmp	r4, #0
 8006dd2:	d13e      	bne.n	8006e52 <__ssvfscanf_r+0x51a>
 8006dd4:	f8d7 9000 	ldr.w	r9, [r7]
 8006dd8:	3704      	adds	r7, #4
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9307      	str	r3, [sp, #28]
 8006dde:	f001 f99d 	bl	800811c <__locale_ctype_ptr>
 8006de2:	682a      	ldr	r2, [r5, #0]
 8006de4:	7812      	ldrb	r2, [r2, #0]
 8006de6:	4410      	add	r0, r2
 8006de8:	7842      	ldrb	r2, [r0, #1]
 8006dea:	0711      	lsls	r1, r2, #28
 8006dec:	d42b      	bmi.n	8006e46 <__ssvfscanf_r+0x50e>
 8006dee:	9b07      	ldr	r3, [sp, #28]
 8006df0:	b34e      	cbz	r6, 8006e46 <__ssvfscanf_r+0x50e>
 8006df2:	9307      	str	r3, [sp, #28]
 8006df4:	f001 f980 	bl	80080f8 <__locale_mb_cur_max>
 8006df8:	9b07      	ldr	r3, [sp, #28]
 8006dfa:	4283      	cmp	r3, r0
 8006dfc:	f43f ae8f 	beq.w	8006b1e <__ssvfscanf_r+0x1e6>
 8006e00:	682a      	ldr	r2, [r5, #0]
 8006e02:	a852      	add	r0, sp, #328	; 0x148
 8006e04:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006e08:	54c1      	strb	r1, [r0, r3]
 8006e0a:	f103 0a01 	add.w	sl, r3, #1
 8006e0e:	686b      	ldr	r3, [r5, #4]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	e885 000c 	stmia.w	r5, {r2, r3}
 8006e16:	ab10      	add	r3, sp, #64	; 0x40
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4653      	mov	r3, sl
 8006e1e:	4649      	mov	r1, r9
 8006e20:	4640      	mov	r0, r8
 8006e22:	f001 fbaf 	bl	8008584 <_mbrtowc_r>
 8006e26:	1c43      	adds	r3, r0, #1
 8006e28:	f43f ae79 	beq.w	8006b1e <__ssvfscanf_r+0x1e6>
 8006e2c:	b9a0      	cbnz	r0, 8006e58 <__ssvfscanf_r+0x520>
 8006e2e:	f8c9 0000 	str.w	r0, [r9]
 8006e32:	f8d9 0000 	ldr.w	r0, [r9]
 8006e36:	f001 f951 	bl	80080dc <iswspace>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	b1c8      	cbz	r0, 8006e72 <__ssvfscanf_r+0x53a>
 8006e3e:	ae52      	add	r6, sp, #328	; 0x148
 8006e40:	f1ba 0f00 	cmp.w	sl, #0
 8006e44:	d10c      	bne.n	8006e60 <__ssvfscanf_r+0x528>
 8006e46:	2c00      	cmp	r4, #0
 8006e48:	f47f ad8e 	bne.w	8006968 <__ssvfscanf_r+0x30>
 8006e4c:	f8c9 4000 	str.w	r4, [r9]
 8006e50:	e72c      	b.n	8006cac <__ssvfscanf_r+0x374>
 8006e52:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
 8006e56:	e7c0      	b.n	8006dda <__ssvfscanf_r+0x4a2>
 8006e58:	3002      	adds	r0, #2
 8006e5a:	d1ea      	bne.n	8006e32 <__ssvfscanf_r+0x4fa>
 8006e5c:	4653      	mov	r3, sl
 8006e5e:	e00e      	b.n	8006e7e <__ssvfscanf_r+0x546>
 8006e60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e64:	462a      	mov	r2, r5
 8006e66:	f816 100a 	ldrb.w	r1, [r6, sl]
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	f003 f948 	bl	800a100 <_sungetc_r>
 8006e70:	e7e6      	b.n	8006e40 <__ssvfscanf_r+0x508>
 8006e72:	44d3      	add	fp, sl
 8006e74:	3e01      	subs	r6, #1
 8006e76:	b914      	cbnz	r4, 8006e7e <__ssvfscanf_r+0x546>
 8006e78:	f109 0904 	add.w	r9, r9, #4
 8006e7c:	4623      	mov	r3, r4
 8006e7e:	686a      	ldr	r2, [r5, #4]
 8006e80:	2a00      	cmp	r2, #0
 8006e82:	dcab      	bgt.n	8006ddc <__ssvfscanf_r+0x4a4>
 8006e84:	4629      	mov	r1, r5
 8006e86:	4640      	mov	r0, r8
 8006e88:	9307      	str	r3, [sp, #28]
 8006e8a:	f003 f976 	bl	800a17a <__ssrefill_r>
 8006e8e:	9b07      	ldr	r3, [sp, #28]
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d0a3      	beq.n	8006ddc <__ssvfscanf_r+0x4a4>
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f47f ae42 	bne.w	8006b1e <__ssvfscanf_r+0x1e6>
 8006e9a:	e7d4      	b.n	8006e46 <__ssvfscanf_r+0x50e>
 8006e9c:	2c00      	cmp	r4, #0
 8006e9e:	d136      	bne.n	8006f0e <__ssvfscanf_r+0x5d6>
 8006ea0:	f8d7 9000 	ldr.w	r9, [r7]
 8006ea4:	1d3c      	adds	r4, r7, #4
 8006ea6:	464f      	mov	r7, r9
 8006ea8:	f001 f938 	bl	800811c <__locale_ctype_ptr>
 8006eac:	682a      	ldr	r2, [r5, #0]
 8006eae:	7813      	ldrb	r3, [r2, #0]
 8006eb0:	4418      	add	r0, r3
 8006eb2:	7843      	ldrb	r3, [r0, #1]
 8006eb4:	071b      	lsls	r3, r3, #28
 8006eb6:	d414      	bmi.n	8006ee2 <__ssvfscanf_r+0x5aa>
 8006eb8:	686b      	ldr	r3, [r5, #4]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	606b      	str	r3, [r5, #4]
 8006ebe:	1c53      	adds	r3, r2, #1
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	7813      	ldrb	r3, [r2, #0]
 8006ec4:	f807 3b01 	strb.w	r3, [r7], #1
 8006ec8:	1bf3      	subs	r3, r6, r7
 8006eca:	eb19 0f03 	cmn.w	r9, r3
 8006ece:	d008      	beq.n	8006ee2 <__ssvfscanf_r+0x5aa>
 8006ed0:	686b      	ldr	r3, [r5, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	dce8      	bgt.n	8006ea8 <__ssvfscanf_r+0x570>
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	4640      	mov	r0, r8
 8006eda:	f003 f94e 	bl	800a17a <__ssrefill_r>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d0e2      	beq.n	8006ea8 <__ssvfscanf_r+0x570>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	703b      	strb	r3, [r7, #0]
 8006ee6:	eba7 0709 	sub.w	r7, r7, r9
 8006eea:	44bb      	add	fp, r7
 8006eec:	e70a      	b.n	8006d04 <__ssvfscanf_r+0x3cc>
 8006eee:	686a      	ldr	r2, [r5, #4]
 8006ef0:	f109 0901 	add.w	r9, r9, #1
 8006ef4:	3a01      	subs	r2, #1
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	454e      	cmp	r6, r9
 8006efa:	606a      	str	r2, [r5, #4]
 8006efc:	602b      	str	r3, [r5, #0]
 8006efe:	d00e      	beq.n	8006f1e <__ssvfscanf_r+0x5e6>
 8006f00:	2a00      	cmp	r2, #0
 8006f02:	dc04      	bgt.n	8006f0e <__ssvfscanf_r+0x5d6>
 8006f04:	4629      	mov	r1, r5
 8006f06:	4640      	mov	r0, r8
 8006f08:	f003 f937 	bl	800a17a <__ssrefill_r>
 8006f0c:	b938      	cbnz	r0, 8006f1e <__ssvfscanf_r+0x5e6>
 8006f0e:	f001 f905 	bl	800811c <__locale_ctype_ptr>
 8006f12:	682b      	ldr	r3, [r5, #0]
 8006f14:	781a      	ldrb	r2, [r3, #0]
 8006f16:	4410      	add	r0, r2
 8006f18:	7842      	ldrb	r2, [r0, #1]
 8006f1a:	0712      	lsls	r2, r2, #28
 8006f1c:	d5e7      	bpl.n	8006eee <__ssvfscanf_r+0x5b6>
 8006f1e:	44cb      	add	fp, r9
 8006f20:	e522      	b.n	8006968 <__ssvfscanf_r+0x30>
 8006f22:	1e73      	subs	r3, r6, #1
 8006f24:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8006f28:	bf88      	it	hi
 8006f2a:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 8006f2e:	f04f 0300 	mov.w	r3, #0
 8006f32:	bf8a      	itet	hi
 8006f34:	eb06 0a00 	addhi.w	sl, r6, r0
 8006f38:	f04f 0a00 	movls.w	sl, #0
 8006f3c:	f240 165d 	movwhi	r6, #349	; 0x15d
 8006f40:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
 8006f44:	9307      	str	r3, [sp, #28]
 8006f46:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8006f4a:	682a      	ldr	r2, [r5, #0]
 8006f4c:	7813      	ldrb	r3, [r2, #0]
 8006f4e:	2b39      	cmp	r3, #57	; 0x39
 8006f50:	d82d      	bhi.n	8006fae <__ssvfscanf_r+0x676>
 8006f52:	2b38      	cmp	r3, #56	; 0x38
 8006f54:	d275      	bcs.n	8007042 <__ssvfscanf_r+0x70a>
 8006f56:	2b30      	cmp	r3, #48	; 0x30
 8006f58:	d045      	beq.n	8006fe6 <__ssvfscanf_r+0x6ae>
 8006f5a:	d86a      	bhi.n	8007032 <__ssvfscanf_r+0x6fa>
 8006f5c:	2b2b      	cmp	r3, #43	; 0x2b
 8006f5e:	d078      	beq.n	8007052 <__ssvfscanf_r+0x71a>
 8006f60:	2b2d      	cmp	r3, #45	; 0x2d
 8006f62:	d076      	beq.n	8007052 <__ssvfscanf_r+0x71a>
 8006f64:	05e3      	lsls	r3, r4, #23
 8006f66:	d50f      	bpl.n	8006f88 <__ssvfscanf_r+0x650>
 8006f68:	ab52      	add	r3, sp, #328	; 0x148
 8006f6a:	4599      	cmp	r9, r3
 8006f6c:	d908      	bls.n	8006f80 <__ssvfscanf_r+0x648>
 8006f6e:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8006f72:	462a      	mov	r2, r5
 8006f74:	4640      	mov	r0, r8
 8006f76:	f003 f8c3 	bl	800a100 <_sungetc_r>
 8006f7a:	f109 36ff 	add.w	r6, r9, #4294967295
 8006f7e:	46b1      	mov	r9, r6
 8006f80:	ab52      	add	r3, sp, #328	; 0x148
 8006f82:	4599      	cmp	r9, r3
 8006f84:	f43f adc0 	beq.w	8006b08 <__ssvfscanf_r+0x1d0>
 8006f88:	f014 0210 	ands.w	r2, r4, #16
 8006f8c:	f040 8088 	bne.w	80070a0 <__ssvfscanf_r+0x768>
 8006f90:	9b03      	ldr	r3, [sp, #12]
 8006f92:	9e05      	ldr	r6, [sp, #20]
 8006f94:	f889 2000 	strb.w	r2, [r9]
 8006f98:	a952      	add	r1, sp, #328	; 0x148
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	47b0      	blx	r6
 8006f9e:	f014 0f20 	tst.w	r4, #32
 8006fa2:	f107 0304 	add.w	r3, r7, #4
 8006fa6:	d060      	beq.n	800706a <__ssvfscanf_r+0x732>
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	6010      	str	r0, [r2, #0]
 8006fac:	e061      	b.n	8007072 <__ssvfscanf_r+0x73a>
 8006fae:	2b58      	cmp	r3, #88	; 0x58
 8006fb0:	d00d      	beq.n	8006fce <__ssvfscanf_r+0x696>
 8006fb2:	d806      	bhi.n	8006fc2 <__ssvfscanf_r+0x68a>
 8006fb4:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 8006fb8:	2905      	cmp	r1, #5
 8006fba:	d8d3      	bhi.n	8006f64 <__ssvfscanf_r+0x62c>
 8006fbc:	9903      	ldr	r1, [sp, #12]
 8006fbe:	290a      	cmp	r1, #10
 8006fc0:	e045      	b.n	800704e <__ssvfscanf_r+0x716>
 8006fc2:	2b61      	cmp	r3, #97	; 0x61
 8006fc4:	d3ce      	bcc.n	8006f64 <__ssvfscanf_r+0x62c>
 8006fc6:	2b66      	cmp	r3, #102	; 0x66
 8006fc8:	d9f8      	bls.n	8006fbc <__ssvfscanf_r+0x684>
 8006fca:	2b78      	cmp	r3, #120	; 0x78
 8006fcc:	d1ca      	bne.n	8006f64 <__ssvfscanf_r+0x62c>
 8006fce:	f404 61c0 	and.w	r1, r4, #1536	; 0x600
 8006fd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006fd6:	d1c5      	bne.n	8006f64 <__ssvfscanf_r+0x62c>
 8006fd8:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8006fdc:	2110      	movs	r1, #16
 8006fde:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
 8006fe2:	9103      	str	r1, [sp, #12]
 8006fe4:	e00b      	b.n	8006ffe <__ssvfscanf_r+0x6c6>
 8006fe6:	0521      	lsls	r1, r4, #20
 8006fe8:	d509      	bpl.n	8006ffe <__ssvfscanf_r+0x6c6>
 8006fea:	9903      	ldr	r1, [sp, #12]
 8006fec:	b919      	cbnz	r1, 8006ff6 <__ssvfscanf_r+0x6be>
 8006fee:	2108      	movs	r1, #8
 8006ff0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8006ff4:	9103      	str	r1, [sp, #12]
 8006ff6:	0560      	lsls	r0, r4, #21
 8006ff8:	d506      	bpl.n	8007008 <__ssvfscanf_r+0x6d0>
 8006ffa:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
 8006ffe:	f889 3000 	strb.w	r3, [r9]
 8007002:	f109 0901 	add.w	r9, r9, #1
 8007006:	e00a      	b.n	800701e <__ssvfscanf_r+0x6e6>
 8007008:	f424 7460 	bic.w	r4, r4, #896	; 0x380
 800700c:	f1ba 0f00 	cmp.w	sl, #0
 8007010:	d002      	beq.n	8007018 <__ssvfscanf_r+0x6e0>
 8007012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007016:	3601      	adds	r6, #1
 8007018:	9b07      	ldr	r3, [sp, #28]
 800701a:	3301      	adds	r3, #1
 800701c:	9307      	str	r3, [sp, #28]
 800701e:	686b      	ldr	r3, [r5, #4]
 8007020:	3b01      	subs	r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	606b      	str	r3, [r5, #4]
 8007026:	dd19      	ble.n	800705c <__ssvfscanf_r+0x724>
 8007028:	3201      	adds	r2, #1
 800702a:	602a      	str	r2, [r5, #0]
 800702c:	3e01      	subs	r6, #1
 800702e:	d18c      	bne.n	8006f4a <__ssvfscanf_r+0x612>
 8007030:	e798      	b.n	8006f64 <__ssvfscanf_r+0x62c>
 8007032:	9803      	ldr	r0, [sp, #12]
 8007034:	49ae      	ldr	r1, [pc, #696]	; (80072f0 <__ssvfscanf_r+0x9b8>)
 8007036:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 800703a:	9103      	str	r1, [sp, #12]
 800703c:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
 8007040:	e7dd      	b.n	8006ffe <__ssvfscanf_r+0x6c6>
 8007042:	9803      	ldr	r0, [sp, #12]
 8007044:	49aa      	ldr	r1, [pc, #680]	; (80072f0 <__ssvfscanf_r+0x9b8>)
 8007046:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 800704a:	9103      	str	r1, [sp, #12]
 800704c:	2908      	cmp	r1, #8
 800704e:	dcf5      	bgt.n	800703c <__ssvfscanf_r+0x704>
 8007050:	e788      	b.n	8006f64 <__ssvfscanf_r+0x62c>
 8007052:	0621      	lsls	r1, r4, #24
 8007054:	d586      	bpl.n	8006f64 <__ssvfscanf_r+0x62c>
 8007056:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 800705a:	e7d0      	b.n	8006ffe <__ssvfscanf_r+0x6c6>
 800705c:	4629      	mov	r1, r5
 800705e:	4640      	mov	r0, r8
 8007060:	f003 f88b 	bl	800a17a <__ssrefill_r>
 8007064:	2800      	cmp	r0, #0
 8007066:	d0e1      	beq.n	800702c <__ssvfscanf_r+0x6f4>
 8007068:	e77c      	b.n	8006f64 <__ssvfscanf_r+0x62c>
 800706a:	0766      	lsls	r6, r4, #29
 800706c:	d503      	bpl.n	8007076 <__ssvfscanf_r+0x73e>
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	8010      	strh	r0, [r2, #0]
 8007072:	461f      	mov	r7, r3
 8007074:	e011      	b.n	800709a <__ssvfscanf_r+0x762>
 8007076:	f014 0201 	ands.w	r2, r4, #1
 800707a:	d195      	bne.n	8006fa8 <__ssvfscanf_r+0x670>
 800707c:	07a1      	lsls	r1, r4, #30
 800707e:	d593      	bpl.n	8006fa8 <__ssvfscanf_r+0x670>
 8007080:	4b9c      	ldr	r3, [pc, #624]	; (80072f4 <__ssvfscanf_r+0x9bc>)
 8007082:	9905      	ldr	r1, [sp, #20]
 8007084:	4299      	cmp	r1, r3
 8007086:	4640      	mov	r0, r8
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	a952      	add	r1, sp, #328	; 0x148
 800708c:	d10f      	bne.n	80070ae <__ssvfscanf_r+0x776>
 800708e:	f002 ffab 	bl	8009fe8 <_strtoull_r>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	e9c3 0100 	strd	r0, r1, [r3]
 8007098:	3704      	adds	r7, #4
 800709a:	9b04      	ldr	r3, [sp, #16]
 800709c:	3301      	adds	r3, #1
 800709e:	9304      	str	r3, [sp, #16]
 80070a0:	ab52      	add	r3, sp, #328	; 0x148
 80070a2:	eba9 0903 	sub.w	r9, r9, r3
 80070a6:	9b07      	ldr	r3, [sp, #28]
 80070a8:	444b      	add	r3, r9
 80070aa:	449b      	add	fp, r3
 80070ac:	e45c      	b.n	8006968 <__ssvfscanf_r+0x30>
 80070ae:	f002 fe59 	bl	8009d64 <_strtoll_r>
 80070b2:	e7ee      	b.n	8007092 <__ssvfscanf_r+0x75a>
 80070b4:	4640      	mov	r0, r8
 80070b6:	f001 f841 	bl	800813c <_localeconv_r>
 80070ba:	6803      	ldr	r3, [r0, #0]
 80070bc:	930c      	str	r3, [sp, #48]	; 0x30
 80070be:	1e73      	subs	r3, r6, #1
 80070c0:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80070c4:	bf88      	it	hi
 80070c6:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 80070ca:	f04f 0300 	mov.w	r3, #0
 80070ce:	bf8a      	itet	hi
 80070d0:	44b4      	addhi	ip, r6
 80070d2:	f04f 0c00 	movls.w	ip, #0
 80070d6:	f240 165d 	movwhi	r6, #349	; 0x15d
 80070da:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
 80070de:	930a      	str	r3, [sp, #40]	; 0x28
 80070e0:	9309      	str	r3, [sp, #36]	; 0x24
 80070e2:	9307      	str	r3, [sp, #28]
 80070e4:	9308      	str	r3, [sp, #32]
 80070e6:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 80070ea:	682a      	ldr	r2, [r5, #0]
 80070ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80070ee:	7811      	ldrb	r1, [r2, #0]
 80070f0:	294e      	cmp	r1, #78	; 0x4e
 80070f2:	f000 80a0 	beq.w	8007236 <__ssvfscanf_r+0x8fe>
 80070f6:	d83c      	bhi.n	8007172 <__ssvfscanf_r+0x83a>
 80070f8:	2939      	cmp	r1, #57	; 0x39
 80070fa:	d80e      	bhi.n	800711a <__ssvfscanf_r+0x7e2>
 80070fc:	2931      	cmp	r1, #49	; 0x31
 80070fe:	f080 8090 	bcs.w	8007222 <__ssvfscanf_r+0x8ea>
 8007102:	292d      	cmp	r1, #45	; 0x2d
 8007104:	d003      	beq.n	800710e <__ssvfscanf_r+0x7d6>
 8007106:	2930      	cmp	r1, #48	; 0x30
 8007108:	d06e      	beq.n	80071e8 <__ssvfscanf_r+0x8b0>
 800710a:	292b      	cmp	r1, #43	; 0x2b
 800710c:	d10b      	bne.n	8007126 <__ssvfscanf_r+0x7ee>
 800710e:	0622      	lsls	r2, r4, #24
 8007110:	f140 80ac 	bpl.w	800726c <__ssvfscanf_r+0x934>
 8007114:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8007118:	e088      	b.n	800722c <__ssvfscanf_r+0x8f4>
 800711a:	2945      	cmp	r1, #69	; 0x45
 800711c:	d03c      	beq.n	8007198 <__ssvfscanf_r+0x860>
 800711e:	d810      	bhi.n	8007142 <__ssvfscanf_r+0x80a>
 8007120:	2941      	cmp	r1, #65	; 0x41
 8007122:	f000 80a1 	beq.w	8007268 <__ssvfscanf_r+0x930>
 8007126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007128:	f892 e000 	ldrb.w	lr, [r2]
 800712c:	458e      	cmp	lr, r1
 800712e:	f040 809d 	bne.w	800726c <__ssvfscanf_r+0x934>
 8007132:	05a0      	lsls	r0, r4, #22
 8007134:	f140 809a 	bpl.w	800726c <__ssvfscanf_r+0x934>
 8007138:	9a07      	ldr	r2, [sp, #28]
 800713a:	9208      	str	r2, [sp, #32]
 800713c:	f424 7420 	bic.w	r4, r4, #640	; 0x280
 8007140:	e074      	b.n	800722c <__ssvfscanf_r+0x8f4>
 8007142:	2946      	cmp	r1, #70	; 0x46
 8007144:	f000 80aa 	beq.w	800729c <__ssvfscanf_r+0x964>
 8007148:	2949      	cmp	r1, #73	; 0x49
 800714a:	d1ec      	bne.n	8007126 <__ssvfscanf_r+0x7ee>
 800714c:	f1b9 0f00 	cmp.w	r9, #0
 8007150:	f040 809e 	bne.w	8007290 <__ssvfscanf_r+0x958>
 8007154:	9807      	ldr	r0, [sp, #28]
 8007156:	2800      	cmp	r0, #0
 8007158:	f040 808a 	bne.w	8007270 <__ssvfscanf_r+0x938>
 800715c:	f404 6ee0 	and.w	lr, r4, #1792	; 0x700
 8007160:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 8007164:	f040 8086 	bne.w	8007274 <__ssvfscanf_r+0x93c>
 8007168:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 800716c:	f04f 0901 	mov.w	r9, #1
 8007170:	e05c      	b.n	800722c <__ssvfscanf_r+0x8f4>
 8007172:	2966      	cmp	r1, #102	; 0x66
 8007174:	f000 8092 	beq.w	800729c <__ssvfscanf_r+0x964>
 8007178:	d827      	bhi.n	80071ca <__ssvfscanf_r+0x892>
 800717a:	2959      	cmp	r1, #89	; 0x59
 800717c:	d02e      	beq.n	80071dc <__ssvfscanf_r+0x8a4>
 800717e:	d807      	bhi.n	8007190 <__ssvfscanf_r+0x858>
 8007180:	2954      	cmp	r1, #84	; 0x54
 8007182:	d1d0      	bne.n	8007126 <__ssvfscanf_r+0x7ee>
 8007184:	f1b9 0f06 	cmp.w	r9, #6
 8007188:	d170      	bne.n	800726c <__ssvfscanf_r+0x934>
 800718a:	f04f 0907 	mov.w	r9, #7
 800718e:	e04d      	b.n	800722c <__ssvfscanf_r+0x8f4>
 8007190:	2961      	cmp	r1, #97	; 0x61
 8007192:	d069      	beq.n	8007268 <__ssvfscanf_r+0x930>
 8007194:	2965      	cmp	r1, #101	; 0x65
 8007196:	d1c6      	bne.n	8007126 <__ssvfscanf_r+0x7ee>
 8007198:	f404 6ea0 	and.w	lr, r4, #1280	; 0x500
 800719c:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 80071a0:	d004      	beq.n	80071ac <__ssvfscanf_r+0x874>
 80071a2:	0560      	lsls	r0, r4, #21
 80071a4:	d562      	bpl.n	800726c <__ssvfscanf_r+0x934>
 80071a6:	9807      	ldr	r0, [sp, #28]
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d063      	beq.n	8007274 <__ssvfscanf_r+0x93c>
 80071ac:	05a2      	lsls	r2, r4, #22
 80071ae:	d405      	bmi.n	80071bc <__ssvfscanf_r+0x884>
 80071b0:	9807      	ldr	r0, [sp, #28]
 80071b2:	9a08      	ldr	r2, [sp, #32]
 80071b4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80071b8:	1a80      	subs	r0, r0, r2
 80071ba:	9009      	str	r0, [sp, #36]	; 0x24
 80071bc:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 80071c0:	2200      	movs	r2, #0
 80071c2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
 80071c6:	9207      	str	r2, [sp, #28]
 80071c8:	e030      	b.n	800722c <__ssvfscanf_r+0x8f4>
 80071ca:	296e      	cmp	r1, #110	; 0x6e
 80071cc:	d033      	beq.n	8007236 <__ssvfscanf_r+0x8fe>
 80071ce:	d801      	bhi.n	80071d4 <__ssvfscanf_r+0x89c>
 80071d0:	2969      	cmp	r1, #105	; 0x69
 80071d2:	e7ba      	b.n	800714a <__ssvfscanf_r+0x812>
 80071d4:	2974      	cmp	r1, #116	; 0x74
 80071d6:	d0d5      	beq.n	8007184 <__ssvfscanf_r+0x84c>
 80071d8:	2979      	cmp	r1, #121	; 0x79
 80071da:	d1a4      	bne.n	8007126 <__ssvfscanf_r+0x7ee>
 80071dc:	f1b9 0f07 	cmp.w	r9, #7
 80071e0:	d144      	bne.n	800726c <__ssvfscanf_r+0x934>
 80071e2:	f04f 0908 	mov.w	r9, #8
 80071e6:	e021      	b.n	800722c <__ssvfscanf_r+0x8f4>
 80071e8:	05e0      	lsls	r0, r4, #23
 80071ea:	d51a      	bpl.n	8007222 <__ssvfscanf_r+0x8ea>
 80071ec:	9907      	ldr	r1, [sp, #28]
 80071ee:	3101      	adds	r1, #1
 80071f0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80071f4:	9107      	str	r1, [sp, #28]
 80071f6:	f1bc 0f00 	cmp.w	ip, #0
 80071fa:	d002      	beq.n	8007202 <__ssvfscanf_r+0x8ca>
 80071fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007200:	3601      	adds	r6, #1
 8007202:	6869      	ldr	r1, [r5, #4]
 8007204:	3901      	subs	r1, #1
 8007206:	2900      	cmp	r1, #0
 8007208:	f106 36ff 	add.w	r6, r6, #4294967295
 800720c:	f10b 0b01 	add.w	fp, fp, #1
 8007210:	6069      	str	r1, [r5, #4]
 8007212:	dd4d      	ble.n	80072b0 <__ssvfscanf_r+0x978>
 8007214:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007216:	3001      	adds	r0, #1
 8007218:	6028      	str	r0, [r5, #0]
 800721a:	2e00      	cmp	r6, #0
 800721c:	f47f af65 	bne.w	80070ea <__ssvfscanf_r+0x7b2>
 8007220:	e024      	b.n	800726c <__ssvfscanf_r+0x934>
 8007222:	eb13 0f09 	cmn.w	r3, r9
 8007226:	d121      	bne.n	800726c <__ssvfscanf_r+0x934>
 8007228:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
 800722c:	f88a 1000 	strb.w	r1, [sl]
 8007230:	f10a 0a01 	add.w	sl, sl, #1
 8007234:	e7e5      	b.n	8007202 <__ssvfscanf_r+0x8ca>
 8007236:	b953      	cbnz	r3, 800724e <__ssvfscanf_r+0x916>
 8007238:	9807      	ldr	r0, [sp, #28]
 800723a:	b950      	cbnz	r0, 8007252 <__ssvfscanf_r+0x91a>
 800723c:	f404 6ee0 	and.w	lr, r4, #1792	; 0x700
 8007240:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 8007244:	d105      	bne.n	8007252 <__ssvfscanf_r+0x91a>
 8007246:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 800724a:	2301      	movs	r3, #1
 800724c:	e7ee      	b.n	800722c <__ssvfscanf_r+0x8f4>
 800724e:	2b02      	cmp	r3, #2
 8007250:	d02a      	beq.n	80072a8 <__ssvfscanf_r+0x970>
 8007252:	f1b9 0f01 	cmp.w	r9, #1
 8007256:	d002      	beq.n	800725e <__ssvfscanf_r+0x926>
 8007258:	f1b9 0f04 	cmp.w	r9, #4
 800725c:	d106      	bne.n	800726c <__ssvfscanf_r+0x934>
 800725e:	f109 0901 	add.w	r9, r9, #1
 8007262:	fa5f f989 	uxtb.w	r9, r9
 8007266:	e7e1      	b.n	800722c <__ssvfscanf_r+0x8f4>
 8007268:	2b01      	cmp	r3, #1
 800726a:	d01f      	beq.n	80072ac <__ssvfscanf_r+0x974>
 800726c:	9a07      	ldr	r2, [sp, #28]
 800726e:	b10a      	cbz	r2, 8007274 <__ssvfscanf_r+0x93c>
 8007270:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8007274:	3b01      	subs	r3, #1
 8007276:	2b01      	cmp	r3, #1
 8007278:	d827      	bhi.n	80072ca <__ssvfscanf_r+0x992>
 800727a:	ac52      	add	r4, sp, #328	; 0x148
 800727c:	45a2      	cmp	sl, r4
 800727e:	f67f ac43 	bls.w	8006b08 <__ssvfscanf_r+0x1d0>
 8007282:	462a      	mov	r2, r5
 8007284:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 8007288:	4640      	mov	r0, r8
 800728a:	f002 ff39 	bl	800a100 <_sungetc_r>
 800728e:	e7f5      	b.n	800727c <__ssvfscanf_r+0x944>
 8007290:	f1b9 0f03 	cmp.w	r9, #3
 8007294:	d0e3      	beq.n	800725e <__ssvfscanf_r+0x926>
 8007296:	f1b9 0f05 	cmp.w	r9, #5
 800729a:	e7df      	b.n	800725c <__ssvfscanf_r+0x924>
 800729c:	f1b9 0f02 	cmp.w	r9, #2
 80072a0:	d1e4      	bne.n	800726c <__ssvfscanf_r+0x934>
 80072a2:	f04f 0903 	mov.w	r9, #3
 80072a6:	e7c1      	b.n	800722c <__ssvfscanf_r+0x8f4>
 80072a8:	2303      	movs	r3, #3
 80072aa:	e7bf      	b.n	800722c <__ssvfscanf_r+0x8f4>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e7bd      	b.n	800722c <__ssvfscanf_r+0x8f4>
 80072b0:	4629      	mov	r1, r5
 80072b2:	4640      	mov	r0, r8
 80072b4:	930d      	str	r3, [sp, #52]	; 0x34
 80072b6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80072ba:	f002 ff5e 	bl	800a17a <__ssrefill_r>
 80072be:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80072c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d0a8      	beq.n	800721a <__ssvfscanf_r+0x8e2>
 80072c8:	e7d0      	b.n	800726c <__ssvfscanf_r+0x934>
 80072ca:	f109 33ff 	add.w	r3, r9, #4294967295
 80072ce:	2b06      	cmp	r3, #6
 80072d0:	d81c      	bhi.n	800730c <__ssvfscanf_r+0x9d4>
 80072d2:	f1b9 0f02 	cmp.w	r9, #2
 80072d6:	d80f      	bhi.n	80072f8 <__ssvfscanf_r+0x9c0>
 80072d8:	ac52      	add	r4, sp, #328	; 0x148
 80072da:	45a2      	cmp	sl, r4
 80072dc:	f67f ac14 	bls.w	8006b08 <__ssvfscanf_r+0x1d0>
 80072e0:	462a      	mov	r2, r5
 80072e2:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 80072e6:	4640      	mov	r0, r8
 80072e8:	f002 ff0a 	bl	800a100 <_sungetc_r>
 80072ec:	e7f5      	b.n	80072da <__ssvfscanf_r+0x9a2>
 80072ee:	bf00      	nop
 80072f0:	0800b75e 	.word	0x0800b75e
 80072f4:	08009e85 	.word	0x08009e85
 80072f8:	f1a9 0903 	sub.w	r9, r9, #3
 80072fc:	fa5f f989 	uxtb.w	r9, r9
 8007300:	ebaa 0609 	sub.w	r6, sl, r9
 8007304:	45b2      	cmp	sl, r6
 8007306:	d110      	bne.n	800732a <__ssvfscanf_r+0x9f2>
 8007308:	ebab 0b09 	sub.w	fp, fp, r9
 800730c:	05e2      	lsls	r2, r4, #23
 800730e:	d52d      	bpl.n	800736c <__ssvfscanf_r+0xa34>
 8007310:	0563      	lsls	r3, r4, #21
 8007312:	d511      	bpl.n	8007338 <__ssvfscanf_r+0xa00>
 8007314:	ac52      	add	r4, sp, #328	; 0x148
 8007316:	45a2      	cmp	sl, r4
 8007318:	f67f abf6 	bls.w	8006b08 <__ssvfscanf_r+0x1d0>
 800731c:	462a      	mov	r2, r5
 800731e:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 8007322:	4640      	mov	r0, r8
 8007324:	f002 feec 	bl	800a100 <_sungetc_r>
 8007328:	e7f5      	b.n	8007316 <__ssvfscanf_r+0x9de>
 800732a:	462a      	mov	r2, r5
 800732c:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 8007330:	4640      	mov	r0, r8
 8007332:	f002 fee5 	bl	800a100 <_sungetc_r>
 8007336:	e7e5      	b.n	8007304 <__ssvfscanf_r+0x9cc>
 8007338:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 800733c:	2965      	cmp	r1, #101	; 0x65
 800733e:	f10a 36ff 	add.w	r6, sl, #4294967295
 8007342:	f10b 39ff 	add.w	r9, fp, #4294967295
 8007346:	d00b      	beq.n	8007360 <__ssvfscanf_r+0xa28>
 8007348:	2945      	cmp	r1, #69	; 0x45
 800734a:	d009      	beq.n	8007360 <__ssvfscanf_r+0xa28>
 800734c:	462a      	mov	r2, r5
 800734e:	4640      	mov	r0, r8
 8007350:	f002 fed6 	bl	800a100 <_sungetc_r>
 8007354:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
 8007358:	f1aa 0602 	sub.w	r6, sl, #2
 800735c:	f1ab 0902 	sub.w	r9, fp, #2
 8007360:	462a      	mov	r2, r5
 8007362:	4640      	mov	r0, r8
 8007364:	f002 fecc 	bl	800a100 <_sungetc_r>
 8007368:	46cb      	mov	fp, r9
 800736a:	46b2      	mov	sl, r6
 800736c:	f014 0210 	ands.w	r2, r4, #16
 8007370:	f47f aafa 	bne.w	8006968 <__ssvfscanf_r+0x30>
 8007374:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
 8007378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800737c:	f88a 2000 	strb.w	r2, [sl]
 8007380:	d119      	bne.n	80073b6 <__ssvfscanf_r+0xa7e>
 8007382:	9a08      	ldr	r2, [sp, #32]
 8007384:	9b07      	ldr	r3, [sp, #28]
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	425a      	negs	r2, r3
 800738a:	bb0b      	cbnz	r3, 80073d0 <__ssvfscanf_r+0xa98>
 800738c:	2200      	movs	r2, #0
 800738e:	a952      	add	r1, sp, #328	; 0x148
 8007390:	4640      	mov	r0, r8
 8007392:	f002 fba1 	bl	8009ad8 <_strtod_r>
 8007396:	f014 0f01 	tst.w	r4, #1
 800739a:	ec5a 9b10 	vmov	r9, sl, d0
 800739e:	f107 0604 	add.w	r6, r7, #4
 80073a2:	d020      	beq.n	80073e6 <__ssvfscanf_r+0xaae>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	e883 0600 	stmia.w	r3, {r9, sl}
 80073aa:	9b04      	ldr	r3, [sp, #16]
 80073ac:	3301      	adds	r3, #1
 80073ae:	9304      	str	r3, [sp, #16]
 80073b0:	4637      	mov	r7, r6
 80073b2:	f7ff bad9 	b.w	8006968 <__ssvfscanf_r+0x30>
 80073b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0e7      	beq.n	800738c <__ssvfscanf_r+0xa54>
 80073bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073be:	230a      	movs	r3, #10
 80073c0:	3101      	adds	r1, #1
 80073c2:	4640      	mov	r0, r8
 80073c4:	f002 fc18 	bl	8009bf8 <_strtol_r>
 80073c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ca:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80073ce:	1ac2      	subs	r2, r0, r3
 80073d0:	f20d 239b 	addw	r3, sp, #667	; 0x29b
 80073d4:	459a      	cmp	sl, r3
 80073d6:	bf28      	it	cs
 80073d8:	f20d 2a9a 	addwcs	sl, sp, #666	; 0x29a
 80073dc:	4910      	ldr	r1, [pc, #64]	; (8007420 <__ssvfscanf_r+0xae8>)
 80073de:	4650      	mov	r0, sl
 80073e0:	f001 fd4c 	bl	8008e7c <sprintf>
 80073e4:	e7d2      	b.n	800738c <__ssvfscanf_r+0xa54>
 80073e6:	f014 0402 	ands.w	r4, r4, #2
 80073ea:	d1db      	bne.n	80073a4 <__ssvfscanf_r+0xa6c>
 80073ec:	ee10 2a10 	vmov	r2, s0
 80073f0:	4653      	mov	r3, sl
 80073f2:	ee10 0a10 	vmov	r0, s0
 80073f6:	4651      	mov	r1, sl
 80073f8:	683f      	ldr	r7, [r7, #0]
 80073fa:	f7f9 fbb3 	bl	8000b64 <__aeabi_dcmpun>
 80073fe:	b128      	cbz	r0, 800740c <__ssvfscanf_r+0xad4>
 8007400:	4620      	mov	r0, r4
 8007402:	f001 fd35 	bl	8008e70 <nanf>
 8007406:	ed87 0a00 	vstr	s0, [r7]
 800740a:	e7ce      	b.n	80073aa <__ssvfscanf_r+0xa72>
 800740c:	4648      	mov	r0, r9
 800740e:	4651      	mov	r1, sl
 8007410:	f7f9 fc06 	bl	8000c20 <__aeabi_d2f>
 8007414:	6038      	str	r0, [r7, #0]
 8007416:	e7c8      	b.n	80073aa <__ssvfscanf_r+0xa72>
 8007418:	f04f 33ff 	mov.w	r3, #4294967295
 800741c:	f7ff bb8a 	b.w	8006b34 <__ssvfscanf_r+0x1fc>
 8007420:	0800b758 	.word	0x0800b758

08007424 <quorem>:
 8007424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	6903      	ldr	r3, [r0, #16]
 800742a:	690c      	ldr	r4, [r1, #16]
 800742c:	429c      	cmp	r4, r3
 800742e:	4680      	mov	r8, r0
 8007430:	f300 8082 	bgt.w	8007538 <quorem+0x114>
 8007434:	3c01      	subs	r4, #1
 8007436:	f101 0714 	add.w	r7, r1, #20
 800743a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800743e:	f100 0614 	add.w	r6, r0, #20
 8007442:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007446:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800744a:	eb06 030e 	add.w	r3, r6, lr
 800744e:	3501      	adds	r5, #1
 8007450:	eb07 090e 	add.w	r9, r7, lr
 8007454:	9301      	str	r3, [sp, #4]
 8007456:	fbb0 f5f5 	udiv	r5, r0, r5
 800745a:	b395      	cbz	r5, 80074c2 <quorem+0x9e>
 800745c:	f04f 0a00 	mov.w	sl, #0
 8007460:	4638      	mov	r0, r7
 8007462:	46b4      	mov	ip, r6
 8007464:	46d3      	mov	fp, sl
 8007466:	f850 2b04 	ldr.w	r2, [r0], #4
 800746a:	b293      	uxth	r3, r2
 800746c:	fb05 a303 	mla	r3, r5, r3, sl
 8007470:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007474:	b29b      	uxth	r3, r3
 8007476:	ebab 0303 	sub.w	r3, fp, r3
 800747a:	0c12      	lsrs	r2, r2, #16
 800747c:	f8bc b000 	ldrh.w	fp, [ip]
 8007480:	fb05 a202 	mla	r2, r5, r2, sl
 8007484:	fa13 f38b 	uxtah	r3, r3, fp
 8007488:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800748c:	fa1f fb82 	uxth.w	fp, r2
 8007490:	f8dc 2000 	ldr.w	r2, [ip]
 8007494:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007498:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800749c:	b29b      	uxth	r3, r3
 800749e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074a2:	4581      	cmp	r9, r0
 80074a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80074a8:	f84c 3b04 	str.w	r3, [ip], #4
 80074ac:	d2db      	bcs.n	8007466 <quorem+0x42>
 80074ae:	f856 300e 	ldr.w	r3, [r6, lr]
 80074b2:	b933      	cbnz	r3, 80074c2 <quorem+0x9e>
 80074b4:	9b01      	ldr	r3, [sp, #4]
 80074b6:	3b04      	subs	r3, #4
 80074b8:	429e      	cmp	r6, r3
 80074ba:	461a      	mov	r2, r3
 80074bc:	d330      	bcc.n	8007520 <quorem+0xfc>
 80074be:	f8c8 4010 	str.w	r4, [r8, #16]
 80074c2:	4640      	mov	r0, r8
 80074c4:	f001 faef 	bl	8008aa6 <__mcmp>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	db25      	blt.n	8007518 <quorem+0xf4>
 80074cc:	3501      	adds	r5, #1
 80074ce:	4630      	mov	r0, r6
 80074d0:	f04f 0e00 	mov.w	lr, #0
 80074d4:	f857 2b04 	ldr.w	r2, [r7], #4
 80074d8:	f8d0 c000 	ldr.w	ip, [r0]
 80074dc:	b293      	uxth	r3, r2
 80074de:	ebae 0303 	sub.w	r3, lr, r3
 80074e2:	0c12      	lsrs	r2, r2, #16
 80074e4:	fa13 f38c 	uxtah	r3, r3, ip
 80074e8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80074ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074f6:	45b9      	cmp	r9, r7
 80074f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80074fc:	f840 3b04 	str.w	r3, [r0], #4
 8007500:	d2e8      	bcs.n	80074d4 <quorem+0xb0>
 8007502:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007506:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800750a:	b92a      	cbnz	r2, 8007518 <quorem+0xf4>
 800750c:	3b04      	subs	r3, #4
 800750e:	429e      	cmp	r6, r3
 8007510:	461a      	mov	r2, r3
 8007512:	d30b      	bcc.n	800752c <quorem+0x108>
 8007514:	f8c8 4010 	str.w	r4, [r8, #16]
 8007518:	4628      	mov	r0, r5
 800751a:	b003      	add	sp, #12
 800751c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007520:	6812      	ldr	r2, [r2, #0]
 8007522:	3b04      	subs	r3, #4
 8007524:	2a00      	cmp	r2, #0
 8007526:	d1ca      	bne.n	80074be <quorem+0x9a>
 8007528:	3c01      	subs	r4, #1
 800752a:	e7c5      	b.n	80074b8 <quorem+0x94>
 800752c:	6812      	ldr	r2, [r2, #0]
 800752e:	3b04      	subs	r3, #4
 8007530:	2a00      	cmp	r2, #0
 8007532:	d1ef      	bne.n	8007514 <quorem+0xf0>
 8007534:	3c01      	subs	r4, #1
 8007536:	e7ea      	b.n	800750e <quorem+0xea>
 8007538:	2000      	movs	r0, #0
 800753a:	e7ee      	b.n	800751a <quorem+0xf6>
 800753c:	0000      	movs	r0, r0
	...

08007540 <_dtoa_r>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	ec57 6b10 	vmov	r6, r7, d0
 8007548:	b097      	sub	sp, #92	; 0x5c
 800754a:	e9cd 6700 	strd	r6, r7, [sp]
 800754e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007550:	9107      	str	r1, [sp, #28]
 8007552:	4604      	mov	r4, r0
 8007554:	920a      	str	r2, [sp, #40]	; 0x28
 8007556:	930f      	str	r3, [sp, #60]	; 0x3c
 8007558:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800755a:	b93e      	cbnz	r6, 800756c <_dtoa_r+0x2c>
 800755c:	2010      	movs	r0, #16
 800755e:	f000 fdfb 	bl	8008158 <malloc>
 8007562:	6260      	str	r0, [r4, #36]	; 0x24
 8007564:	6046      	str	r6, [r0, #4]
 8007566:	6086      	str	r6, [r0, #8]
 8007568:	6006      	str	r6, [r0, #0]
 800756a:	60c6      	str	r6, [r0, #12]
 800756c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800756e:	6819      	ldr	r1, [r3, #0]
 8007570:	b151      	cbz	r1, 8007588 <_dtoa_r+0x48>
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	604a      	str	r2, [r1, #4]
 8007576:	2301      	movs	r3, #1
 8007578:	4093      	lsls	r3, r2
 800757a:	608b      	str	r3, [r1, #8]
 800757c:	4620      	mov	r0, r4
 800757e:	f001 f87f 	bl	8008680 <_Bfree>
 8007582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007584:	2200      	movs	r2, #0
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	9b01      	ldr	r3, [sp, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	bfbf      	itttt	lt
 800758e:	2301      	movlt	r3, #1
 8007590:	602b      	strlt	r3, [r5, #0]
 8007592:	9b01      	ldrlt	r3, [sp, #4]
 8007594:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007598:	bfb2      	itee	lt
 800759a:	9301      	strlt	r3, [sp, #4]
 800759c:	2300      	movge	r3, #0
 800759e:	602b      	strge	r3, [r5, #0]
 80075a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80075a4:	4ba8      	ldr	r3, [pc, #672]	; (8007848 <_dtoa_r+0x308>)
 80075a6:	ea33 0308 	bics.w	r3, r3, r8
 80075aa:	d11b      	bne.n	80075e4 <_dtoa_r+0xa4>
 80075ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	b923      	cbnz	r3, 80075c2 <_dtoa_r+0x82>
 80075b8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80075bc:	2800      	cmp	r0, #0
 80075be:	f000 8578 	beq.w	80080b2 <_dtoa_r+0xb72>
 80075c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075c4:	b953      	cbnz	r3, 80075dc <_dtoa_r+0x9c>
 80075c6:	4ba1      	ldr	r3, [pc, #644]	; (800784c <_dtoa_r+0x30c>)
 80075c8:	e021      	b.n	800760e <_dtoa_r+0xce>
 80075ca:	4ba1      	ldr	r3, [pc, #644]	; (8007850 <_dtoa_r+0x310>)
 80075cc:	9302      	str	r3, [sp, #8]
 80075ce:	3308      	adds	r3, #8
 80075d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	9802      	ldr	r0, [sp, #8]
 80075d6:	b017      	add	sp, #92	; 0x5c
 80075d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075dc:	4b9b      	ldr	r3, [pc, #620]	; (800784c <_dtoa_r+0x30c>)
 80075de:	9302      	str	r3, [sp, #8]
 80075e0:	3303      	adds	r3, #3
 80075e2:	e7f5      	b.n	80075d0 <_dtoa_r+0x90>
 80075e4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80075e8:	2200      	movs	r2, #0
 80075ea:	2300      	movs	r3, #0
 80075ec:	4630      	mov	r0, r6
 80075ee:	4639      	mov	r1, r7
 80075f0:	f7f9 fa86 	bl	8000b00 <__aeabi_dcmpeq>
 80075f4:	4681      	mov	r9, r0
 80075f6:	b160      	cbz	r0, 8007612 <_dtoa_r+0xd2>
 80075f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075fa:	2301      	movs	r3, #1
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 8553 	beq.w	80080ac <_dtoa_r+0xb6c>
 8007606:	4b93      	ldr	r3, [pc, #588]	; (8007854 <_dtoa_r+0x314>)
 8007608:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	3b01      	subs	r3, #1
 800760e:	9302      	str	r3, [sp, #8]
 8007610:	e7e0      	b.n	80075d4 <_dtoa_r+0x94>
 8007612:	aa14      	add	r2, sp, #80	; 0x50
 8007614:	a915      	add	r1, sp, #84	; 0x54
 8007616:	ec47 6b10 	vmov	d0, r6, r7
 800761a:	4620      	mov	r0, r4
 800761c:	f001 fb32 	bl	8008c84 <__d2b>
 8007620:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007624:	4682      	mov	sl, r0
 8007626:	2d00      	cmp	r5, #0
 8007628:	d07e      	beq.n	8007728 <_dtoa_r+0x1e8>
 800762a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800762e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007632:	4630      	mov	r0, r6
 8007634:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007638:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800763c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8007640:	2200      	movs	r2, #0
 8007642:	4b85      	ldr	r3, [pc, #532]	; (8007858 <_dtoa_r+0x318>)
 8007644:	f7f8 fe40 	bl	80002c8 <__aeabi_dsub>
 8007648:	a379      	add	r3, pc, #484	; (adr r3, 8007830 <_dtoa_r+0x2f0>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f7f8 ffef 	bl	8000630 <__aeabi_dmul>
 8007652:	a379      	add	r3, pc, #484	; (adr r3, 8007838 <_dtoa_r+0x2f8>)
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	f7f8 fe38 	bl	80002cc <__adddf3>
 800765c:	4606      	mov	r6, r0
 800765e:	4628      	mov	r0, r5
 8007660:	460f      	mov	r7, r1
 8007662:	f7f8 ff7f 	bl	8000564 <__aeabi_i2d>
 8007666:	a376      	add	r3, pc, #472	; (adr r3, 8007840 <_dtoa_r+0x300>)
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f7f8 ffe0 	bl	8000630 <__aeabi_dmul>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4630      	mov	r0, r6
 8007676:	4639      	mov	r1, r7
 8007678:	f7f8 fe28 	bl	80002cc <__adddf3>
 800767c:	4606      	mov	r6, r0
 800767e:	460f      	mov	r7, r1
 8007680:	f7f9 fa86 	bl	8000b90 <__aeabi_d2iz>
 8007684:	2200      	movs	r2, #0
 8007686:	4683      	mov	fp, r0
 8007688:	2300      	movs	r3, #0
 800768a:	4630      	mov	r0, r6
 800768c:	4639      	mov	r1, r7
 800768e:	f7f9 fa41 	bl	8000b14 <__aeabi_dcmplt>
 8007692:	b158      	cbz	r0, 80076ac <_dtoa_r+0x16c>
 8007694:	4658      	mov	r0, fp
 8007696:	f7f8 ff65 	bl	8000564 <__aeabi_i2d>
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	4630      	mov	r0, r6
 80076a0:	4639      	mov	r1, r7
 80076a2:	f7f9 fa2d 	bl	8000b00 <__aeabi_dcmpeq>
 80076a6:	b908      	cbnz	r0, 80076ac <_dtoa_r+0x16c>
 80076a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076ac:	f1bb 0f16 	cmp.w	fp, #22
 80076b0:	d859      	bhi.n	8007766 <_dtoa_r+0x226>
 80076b2:	496a      	ldr	r1, [pc, #424]	; (800785c <_dtoa_r+0x31c>)
 80076b4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80076b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076c0:	f7f9 fa46 	bl	8000b50 <__aeabi_dcmpgt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d050      	beq.n	800776a <_dtoa_r+0x22a>
 80076c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076cc:	2300      	movs	r3, #0
 80076ce:	930e      	str	r3, [sp, #56]	; 0x38
 80076d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076d2:	1b5d      	subs	r5, r3, r5
 80076d4:	1e6b      	subs	r3, r5, #1
 80076d6:	9306      	str	r3, [sp, #24]
 80076d8:	bf45      	ittet	mi
 80076da:	f1c5 0301 	rsbmi	r3, r5, #1
 80076de:	9305      	strmi	r3, [sp, #20]
 80076e0:	2300      	movpl	r3, #0
 80076e2:	2300      	movmi	r3, #0
 80076e4:	bf4c      	ite	mi
 80076e6:	9306      	strmi	r3, [sp, #24]
 80076e8:	9305      	strpl	r3, [sp, #20]
 80076ea:	f1bb 0f00 	cmp.w	fp, #0
 80076ee:	db3e      	blt.n	800776e <_dtoa_r+0x22e>
 80076f0:	9b06      	ldr	r3, [sp, #24]
 80076f2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80076f6:	445b      	add	r3, fp
 80076f8:	9306      	str	r3, [sp, #24]
 80076fa:	2300      	movs	r3, #0
 80076fc:	9308      	str	r3, [sp, #32]
 80076fe:	9b07      	ldr	r3, [sp, #28]
 8007700:	2b09      	cmp	r3, #9
 8007702:	f200 80af 	bhi.w	8007864 <_dtoa_r+0x324>
 8007706:	2b05      	cmp	r3, #5
 8007708:	bfc4      	itt	gt
 800770a:	3b04      	subgt	r3, #4
 800770c:	9307      	strgt	r3, [sp, #28]
 800770e:	9b07      	ldr	r3, [sp, #28]
 8007710:	f1a3 0302 	sub.w	r3, r3, #2
 8007714:	bfcc      	ite	gt
 8007716:	2600      	movgt	r6, #0
 8007718:	2601      	movle	r6, #1
 800771a:	2b03      	cmp	r3, #3
 800771c:	f200 80ae 	bhi.w	800787c <_dtoa_r+0x33c>
 8007720:	e8df f003 	tbb	[pc, r3]
 8007724:	772f8482 	.word	0x772f8482
 8007728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800772a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800772c:	441d      	add	r5, r3
 800772e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007732:	2b20      	cmp	r3, #32
 8007734:	dd11      	ble.n	800775a <_dtoa_r+0x21a>
 8007736:	9a00      	ldr	r2, [sp, #0]
 8007738:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800773c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007740:	fa22 f000 	lsr.w	r0, r2, r0
 8007744:	fa08 f303 	lsl.w	r3, r8, r3
 8007748:	4318      	orrs	r0, r3
 800774a:	f7f8 fefb 	bl	8000544 <__aeabi_ui2d>
 800774e:	2301      	movs	r3, #1
 8007750:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007754:	3d01      	subs	r5, #1
 8007756:	9312      	str	r3, [sp, #72]	; 0x48
 8007758:	e772      	b.n	8007640 <_dtoa_r+0x100>
 800775a:	f1c3 0020 	rsb	r0, r3, #32
 800775e:	9b00      	ldr	r3, [sp, #0]
 8007760:	fa03 f000 	lsl.w	r0, r3, r0
 8007764:	e7f1      	b.n	800774a <_dtoa_r+0x20a>
 8007766:	2301      	movs	r3, #1
 8007768:	e7b1      	b.n	80076ce <_dtoa_r+0x18e>
 800776a:	900e      	str	r0, [sp, #56]	; 0x38
 800776c:	e7b0      	b.n	80076d0 <_dtoa_r+0x190>
 800776e:	9b05      	ldr	r3, [sp, #20]
 8007770:	eba3 030b 	sub.w	r3, r3, fp
 8007774:	9305      	str	r3, [sp, #20]
 8007776:	f1cb 0300 	rsb	r3, fp, #0
 800777a:	9308      	str	r3, [sp, #32]
 800777c:	2300      	movs	r3, #0
 800777e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007780:	e7bd      	b.n	80076fe <_dtoa_r+0x1be>
 8007782:	2301      	movs	r3, #1
 8007784:	9309      	str	r3, [sp, #36]	; 0x24
 8007786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007788:	2b00      	cmp	r3, #0
 800778a:	dd7a      	ble.n	8007882 <_dtoa_r+0x342>
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	9303      	str	r3, [sp, #12]
 8007790:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007792:	2200      	movs	r2, #0
 8007794:	606a      	str	r2, [r5, #4]
 8007796:	2104      	movs	r1, #4
 8007798:	f101 0214 	add.w	r2, r1, #20
 800779c:	429a      	cmp	r2, r3
 800779e:	d975      	bls.n	800788c <_dtoa_r+0x34c>
 80077a0:	6869      	ldr	r1, [r5, #4]
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 ff38 	bl	8008618 <_Balloc>
 80077a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077aa:	6028      	str	r0, [r5, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	9302      	str	r3, [sp, #8]
 80077b0:	9b03      	ldr	r3, [sp, #12]
 80077b2:	2b0e      	cmp	r3, #14
 80077b4:	f200 80e5 	bhi.w	8007982 <_dtoa_r+0x442>
 80077b8:	2e00      	cmp	r6, #0
 80077ba:	f000 80e2 	beq.w	8007982 <_dtoa_r+0x442>
 80077be:	ed9d 7b00 	vldr	d7, [sp]
 80077c2:	f1bb 0f00 	cmp.w	fp, #0
 80077c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80077ca:	dd74      	ble.n	80078b6 <_dtoa_r+0x376>
 80077cc:	4a23      	ldr	r2, [pc, #140]	; (800785c <_dtoa_r+0x31c>)
 80077ce:	f00b 030f 	and.w	r3, fp, #15
 80077d2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80077d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077da:	06f0      	lsls	r0, r6, #27
 80077dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077e0:	d559      	bpl.n	8007896 <_dtoa_r+0x356>
 80077e2:	4b1f      	ldr	r3, [pc, #124]	; (8007860 <_dtoa_r+0x320>)
 80077e4:	ec51 0b17 	vmov	r0, r1, d7
 80077e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077ec:	f7f9 f84a 	bl	8000884 <__aeabi_ddiv>
 80077f0:	e9cd 0100 	strd	r0, r1, [sp]
 80077f4:	f006 060f 	and.w	r6, r6, #15
 80077f8:	2503      	movs	r5, #3
 80077fa:	4f19      	ldr	r7, [pc, #100]	; (8007860 <_dtoa_r+0x320>)
 80077fc:	2e00      	cmp	r6, #0
 80077fe:	d14c      	bne.n	800789a <_dtoa_r+0x35a>
 8007800:	4642      	mov	r2, r8
 8007802:	464b      	mov	r3, r9
 8007804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007808:	f7f9 f83c 	bl	8000884 <__aeabi_ddiv>
 800780c:	e9cd 0100 	strd	r0, r1, [sp]
 8007810:	e06a      	b.n	80078e8 <_dtoa_r+0x3a8>
 8007812:	2301      	movs	r3, #1
 8007814:	9309      	str	r3, [sp, #36]	; 0x24
 8007816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007818:	445b      	add	r3, fp
 800781a:	9304      	str	r3, [sp, #16]
 800781c:	3301      	adds	r3, #1
 800781e:	2b01      	cmp	r3, #1
 8007820:	9303      	str	r3, [sp, #12]
 8007822:	bfb8      	it	lt
 8007824:	2301      	movlt	r3, #1
 8007826:	e7b3      	b.n	8007790 <_dtoa_r+0x250>
 8007828:	2300      	movs	r3, #0
 800782a:	e7ab      	b.n	8007784 <_dtoa_r+0x244>
 800782c:	2300      	movs	r3, #0
 800782e:	e7f1      	b.n	8007814 <_dtoa_r+0x2d4>
 8007830:	636f4361 	.word	0x636f4361
 8007834:	3fd287a7 	.word	0x3fd287a7
 8007838:	8b60c8b3 	.word	0x8b60c8b3
 800783c:	3fc68a28 	.word	0x3fc68a28
 8007840:	509f79fb 	.word	0x509f79fb
 8007844:	3fd34413 	.word	0x3fd34413
 8007848:	7ff00000 	.word	0x7ff00000
 800784c:	0800b789 	.word	0x0800b789
 8007850:	0800b780 	.word	0x0800b780
 8007854:	0800b737 	.word	0x0800b737
 8007858:	3ff80000 	.word	0x3ff80000
 800785c:	0800b7c0 	.word	0x0800b7c0
 8007860:	0800b798 	.word	0x0800b798
 8007864:	2601      	movs	r6, #1
 8007866:	2300      	movs	r3, #0
 8007868:	9307      	str	r3, [sp, #28]
 800786a:	9609      	str	r6, [sp, #36]	; 0x24
 800786c:	f04f 33ff 	mov.w	r3, #4294967295
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	9303      	str	r3, [sp, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	2312      	movs	r3, #18
 8007878:	920a      	str	r2, [sp, #40]	; 0x28
 800787a:	e789      	b.n	8007790 <_dtoa_r+0x250>
 800787c:	2301      	movs	r3, #1
 800787e:	9309      	str	r3, [sp, #36]	; 0x24
 8007880:	e7f4      	b.n	800786c <_dtoa_r+0x32c>
 8007882:	2301      	movs	r3, #1
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	9303      	str	r3, [sp, #12]
 8007888:	461a      	mov	r2, r3
 800788a:	e7f5      	b.n	8007878 <_dtoa_r+0x338>
 800788c:	686a      	ldr	r2, [r5, #4]
 800788e:	3201      	adds	r2, #1
 8007890:	606a      	str	r2, [r5, #4]
 8007892:	0049      	lsls	r1, r1, #1
 8007894:	e780      	b.n	8007798 <_dtoa_r+0x258>
 8007896:	2502      	movs	r5, #2
 8007898:	e7af      	b.n	80077fa <_dtoa_r+0x2ba>
 800789a:	07f1      	lsls	r1, r6, #31
 800789c:	d508      	bpl.n	80078b0 <_dtoa_r+0x370>
 800789e:	4640      	mov	r0, r8
 80078a0:	4649      	mov	r1, r9
 80078a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a6:	f7f8 fec3 	bl	8000630 <__aeabi_dmul>
 80078aa:	3501      	adds	r5, #1
 80078ac:	4680      	mov	r8, r0
 80078ae:	4689      	mov	r9, r1
 80078b0:	1076      	asrs	r6, r6, #1
 80078b2:	3708      	adds	r7, #8
 80078b4:	e7a2      	b.n	80077fc <_dtoa_r+0x2bc>
 80078b6:	f000 809d 	beq.w	80079f4 <_dtoa_r+0x4b4>
 80078ba:	f1cb 0600 	rsb	r6, fp, #0
 80078be:	4b9f      	ldr	r3, [pc, #636]	; (8007b3c <_dtoa_r+0x5fc>)
 80078c0:	4f9f      	ldr	r7, [pc, #636]	; (8007b40 <_dtoa_r+0x600>)
 80078c2:	f006 020f 	and.w	r2, r6, #15
 80078c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078d2:	f7f8 fead 	bl	8000630 <__aeabi_dmul>
 80078d6:	e9cd 0100 	strd	r0, r1, [sp]
 80078da:	1136      	asrs	r6, r6, #4
 80078dc:	2300      	movs	r3, #0
 80078de:	2502      	movs	r5, #2
 80078e0:	2e00      	cmp	r6, #0
 80078e2:	d17c      	bne.n	80079de <_dtoa_r+0x49e>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d191      	bne.n	800780c <_dtoa_r+0x2cc>
 80078e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 8084 	beq.w	80079f8 <_dtoa_r+0x4b8>
 80078f0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80078f4:	2200      	movs	r2, #0
 80078f6:	4b93      	ldr	r3, [pc, #588]	; (8007b44 <_dtoa_r+0x604>)
 80078f8:	4640      	mov	r0, r8
 80078fa:	4649      	mov	r1, r9
 80078fc:	f7f9 f90a 	bl	8000b14 <__aeabi_dcmplt>
 8007900:	2800      	cmp	r0, #0
 8007902:	d079      	beq.n	80079f8 <_dtoa_r+0x4b8>
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d076      	beq.n	80079f8 <_dtoa_r+0x4b8>
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	dd34      	ble.n	800797a <_dtoa_r+0x43a>
 8007910:	2200      	movs	r2, #0
 8007912:	4b8d      	ldr	r3, [pc, #564]	; (8007b48 <_dtoa_r+0x608>)
 8007914:	4640      	mov	r0, r8
 8007916:	4649      	mov	r1, r9
 8007918:	f7f8 fe8a 	bl	8000630 <__aeabi_dmul>
 800791c:	e9cd 0100 	strd	r0, r1, [sp]
 8007920:	9e04      	ldr	r6, [sp, #16]
 8007922:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007926:	3501      	adds	r5, #1
 8007928:	4628      	mov	r0, r5
 800792a:	f7f8 fe1b 	bl	8000564 <__aeabi_i2d>
 800792e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007932:	f7f8 fe7d 	bl	8000630 <__aeabi_dmul>
 8007936:	2200      	movs	r2, #0
 8007938:	4b84      	ldr	r3, [pc, #528]	; (8007b4c <_dtoa_r+0x60c>)
 800793a:	f7f8 fcc7 	bl	80002cc <__adddf3>
 800793e:	4680      	mov	r8, r0
 8007940:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8007944:	2e00      	cmp	r6, #0
 8007946:	d15a      	bne.n	80079fe <_dtoa_r+0x4be>
 8007948:	2200      	movs	r2, #0
 800794a:	4b81      	ldr	r3, [pc, #516]	; (8007b50 <_dtoa_r+0x610>)
 800794c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007950:	f7f8 fcba 	bl	80002c8 <__aeabi_dsub>
 8007954:	4642      	mov	r2, r8
 8007956:	464b      	mov	r3, r9
 8007958:	e9cd 0100 	strd	r0, r1, [sp]
 800795c:	f7f9 f8f8 	bl	8000b50 <__aeabi_dcmpgt>
 8007960:	2800      	cmp	r0, #0
 8007962:	f040 829b 	bne.w	8007e9c <_dtoa_r+0x95c>
 8007966:	4642      	mov	r2, r8
 8007968:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800796c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007970:	f7f9 f8d0 	bl	8000b14 <__aeabi_dcmplt>
 8007974:	2800      	cmp	r0, #0
 8007976:	f040 828f 	bne.w	8007e98 <_dtoa_r+0x958>
 800797a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800797e:	e9cd 2300 	strd	r2, r3, [sp]
 8007982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007984:	2b00      	cmp	r3, #0
 8007986:	f2c0 8150 	blt.w	8007c2a <_dtoa_r+0x6ea>
 800798a:	f1bb 0f0e 	cmp.w	fp, #14
 800798e:	f300 814c 	bgt.w	8007c2a <_dtoa_r+0x6ea>
 8007992:	4b6a      	ldr	r3, [pc, #424]	; (8007b3c <_dtoa_r+0x5fc>)
 8007994:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007998:	e9d3 8900 	ldrd	r8, r9, [r3]
 800799c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f280 80da 	bge.w	8007b58 <_dtoa_r+0x618>
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f300 80d6 	bgt.w	8007b58 <_dtoa_r+0x618>
 80079ac:	f040 8273 	bne.w	8007e96 <_dtoa_r+0x956>
 80079b0:	2200      	movs	r2, #0
 80079b2:	4b67      	ldr	r3, [pc, #412]	; (8007b50 <_dtoa_r+0x610>)
 80079b4:	4640      	mov	r0, r8
 80079b6:	4649      	mov	r1, r9
 80079b8:	f7f8 fe3a 	bl	8000630 <__aeabi_dmul>
 80079bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079c0:	f7f9 f8bc 	bl	8000b3c <__aeabi_dcmpge>
 80079c4:	9e03      	ldr	r6, [sp, #12]
 80079c6:	4637      	mov	r7, r6
 80079c8:	2800      	cmp	r0, #0
 80079ca:	f040 824a 	bne.w	8007e62 <_dtoa_r+0x922>
 80079ce:	9b02      	ldr	r3, [sp, #8]
 80079d0:	9a02      	ldr	r2, [sp, #8]
 80079d2:	1c5d      	adds	r5, r3, #1
 80079d4:	2331      	movs	r3, #49	; 0x31
 80079d6:	7013      	strb	r3, [r2, #0]
 80079d8:	f10b 0b01 	add.w	fp, fp, #1
 80079dc:	e245      	b.n	8007e6a <_dtoa_r+0x92a>
 80079de:	07f2      	lsls	r2, r6, #31
 80079e0:	d505      	bpl.n	80079ee <_dtoa_r+0x4ae>
 80079e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e6:	f7f8 fe23 	bl	8000630 <__aeabi_dmul>
 80079ea:	3501      	adds	r5, #1
 80079ec:	2301      	movs	r3, #1
 80079ee:	1076      	asrs	r6, r6, #1
 80079f0:	3708      	adds	r7, #8
 80079f2:	e775      	b.n	80078e0 <_dtoa_r+0x3a0>
 80079f4:	2502      	movs	r5, #2
 80079f6:	e777      	b.n	80078e8 <_dtoa_r+0x3a8>
 80079f8:	465f      	mov	r7, fp
 80079fa:	9e03      	ldr	r6, [sp, #12]
 80079fc:	e794      	b.n	8007928 <_dtoa_r+0x3e8>
 80079fe:	9a02      	ldr	r2, [sp, #8]
 8007a00:	4b4e      	ldr	r3, [pc, #312]	; (8007b3c <_dtoa_r+0x5fc>)
 8007a02:	4432      	add	r2, r6
 8007a04:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a08:	1e71      	subs	r1, r6, #1
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	d048      	beq.n	8007aa0 <_dtoa_r+0x560>
 8007a0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	2000      	movs	r0, #0
 8007a18:	494e      	ldr	r1, [pc, #312]	; (8007b54 <_dtoa_r+0x614>)
 8007a1a:	f7f8 ff33 	bl	8000884 <__aeabi_ddiv>
 8007a1e:	4642      	mov	r2, r8
 8007a20:	464b      	mov	r3, r9
 8007a22:	f7f8 fc51 	bl	80002c8 <__aeabi_dsub>
 8007a26:	9d02      	ldr	r5, [sp, #8]
 8007a28:	4680      	mov	r8, r0
 8007a2a:	4689      	mov	r9, r1
 8007a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a30:	f7f9 f8ae 	bl	8000b90 <__aeabi_d2iz>
 8007a34:	4606      	mov	r6, r0
 8007a36:	f7f8 fd95 	bl	8000564 <__aeabi_i2d>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a42:	f7f8 fc41 	bl	80002c8 <__aeabi_dsub>
 8007a46:	3630      	adds	r6, #48	; 0x30
 8007a48:	f805 6b01 	strb.w	r6, [r5], #1
 8007a4c:	4642      	mov	r2, r8
 8007a4e:	464b      	mov	r3, r9
 8007a50:	e9cd 0100 	strd	r0, r1, [sp]
 8007a54:	f7f9 f85e 	bl	8000b14 <__aeabi_dcmplt>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d165      	bne.n	8007b28 <_dtoa_r+0x5e8>
 8007a5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a60:	2000      	movs	r0, #0
 8007a62:	4938      	ldr	r1, [pc, #224]	; (8007b44 <_dtoa_r+0x604>)
 8007a64:	f7f8 fc30 	bl	80002c8 <__aeabi_dsub>
 8007a68:	4642      	mov	r2, r8
 8007a6a:	464b      	mov	r3, r9
 8007a6c:	f7f9 f852 	bl	8000b14 <__aeabi_dcmplt>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	f040 80ba 	bne.w	8007bea <_dtoa_r+0x6aa>
 8007a76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a78:	429d      	cmp	r5, r3
 8007a7a:	f43f af7e 	beq.w	800797a <_dtoa_r+0x43a>
 8007a7e:	2200      	movs	r2, #0
 8007a80:	4b31      	ldr	r3, [pc, #196]	; (8007b48 <_dtoa_r+0x608>)
 8007a82:	4640      	mov	r0, r8
 8007a84:	4649      	mov	r1, r9
 8007a86:	f7f8 fdd3 	bl	8000630 <__aeabi_dmul>
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	4680      	mov	r8, r0
 8007a8e:	4689      	mov	r9, r1
 8007a90:	4b2d      	ldr	r3, [pc, #180]	; (8007b48 <_dtoa_r+0x608>)
 8007a92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a96:	f7f8 fdcb 	bl	8000630 <__aeabi_dmul>
 8007a9a:	e9cd 0100 	strd	r0, r1, [sp]
 8007a9e:	e7c5      	b.n	8007a2c <_dtoa_r+0x4ec>
 8007aa0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aac:	f7f8 fdc0 	bl	8000630 <__aeabi_dmul>
 8007ab0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ab4:	9d02      	ldr	r5, [sp, #8]
 8007ab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007aba:	f7f9 f869 	bl	8000b90 <__aeabi_d2iz>
 8007abe:	4606      	mov	r6, r0
 8007ac0:	f7f8 fd50 	bl	8000564 <__aeabi_i2d>
 8007ac4:	3630      	adds	r6, #48	; 0x30
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ace:	f7f8 fbfb 	bl	80002c8 <__aeabi_dsub>
 8007ad2:	f805 6b01 	strb.w	r6, [r5], #1
 8007ad6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ad8:	42ab      	cmp	r3, r5
 8007ada:	4680      	mov	r8, r0
 8007adc:	4689      	mov	r9, r1
 8007ade:	f04f 0200 	mov.w	r2, #0
 8007ae2:	d125      	bne.n	8007b30 <_dtoa_r+0x5f0>
 8007ae4:	4b1b      	ldr	r3, [pc, #108]	; (8007b54 <_dtoa_r+0x614>)
 8007ae6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007aea:	f7f8 fbef 	bl	80002cc <__adddf3>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4640      	mov	r0, r8
 8007af4:	4649      	mov	r1, r9
 8007af6:	f7f9 f82b 	bl	8000b50 <__aeabi_dcmpgt>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d175      	bne.n	8007bea <_dtoa_r+0x6aa>
 8007afe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b02:	2000      	movs	r0, #0
 8007b04:	4913      	ldr	r1, [pc, #76]	; (8007b54 <_dtoa_r+0x614>)
 8007b06:	f7f8 fbdf 	bl	80002c8 <__aeabi_dsub>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4640      	mov	r0, r8
 8007b10:	4649      	mov	r1, r9
 8007b12:	f7f8 ffff 	bl	8000b14 <__aeabi_dcmplt>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f43f af2f 	beq.w	800797a <_dtoa_r+0x43a>
 8007b1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b20:	2b30      	cmp	r3, #48	; 0x30
 8007b22:	f105 32ff 	add.w	r2, r5, #4294967295
 8007b26:	d001      	beq.n	8007b2c <_dtoa_r+0x5ec>
 8007b28:	46bb      	mov	fp, r7
 8007b2a:	e04d      	b.n	8007bc8 <_dtoa_r+0x688>
 8007b2c:	4615      	mov	r5, r2
 8007b2e:	e7f5      	b.n	8007b1c <_dtoa_r+0x5dc>
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <_dtoa_r+0x608>)
 8007b32:	f7f8 fd7d 	bl	8000630 <__aeabi_dmul>
 8007b36:	e9cd 0100 	strd	r0, r1, [sp]
 8007b3a:	e7bc      	b.n	8007ab6 <_dtoa_r+0x576>
 8007b3c:	0800b7c0 	.word	0x0800b7c0
 8007b40:	0800b798 	.word	0x0800b798
 8007b44:	3ff00000 	.word	0x3ff00000
 8007b48:	40240000 	.word	0x40240000
 8007b4c:	401c0000 	.word	0x401c0000
 8007b50:	40140000 	.word	0x40140000
 8007b54:	3fe00000 	.word	0x3fe00000
 8007b58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b5c:	9d02      	ldr	r5, [sp, #8]
 8007b5e:	4642      	mov	r2, r8
 8007b60:	464b      	mov	r3, r9
 8007b62:	4630      	mov	r0, r6
 8007b64:	4639      	mov	r1, r7
 8007b66:	f7f8 fe8d 	bl	8000884 <__aeabi_ddiv>
 8007b6a:	f7f9 f811 	bl	8000b90 <__aeabi_d2iz>
 8007b6e:	9000      	str	r0, [sp, #0]
 8007b70:	f7f8 fcf8 	bl	8000564 <__aeabi_i2d>
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	f7f8 fd5a 	bl	8000630 <__aeabi_dmul>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 fba0 	bl	80002c8 <__aeabi_dsub>
 8007b88:	9e00      	ldr	r6, [sp, #0]
 8007b8a:	9f03      	ldr	r7, [sp, #12]
 8007b8c:	3630      	adds	r6, #48	; 0x30
 8007b8e:	f805 6b01 	strb.w	r6, [r5], #1
 8007b92:	9e02      	ldr	r6, [sp, #8]
 8007b94:	1bae      	subs	r6, r5, r6
 8007b96:	42b7      	cmp	r7, r6
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	d138      	bne.n	8007c10 <_dtoa_r+0x6d0>
 8007b9e:	f7f8 fb95 	bl	80002cc <__adddf3>
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	460f      	mov	r7, r1
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	f7f8 ffb1 	bl	8000b14 <__aeabi_dcmplt>
 8007bb2:	b9c8      	cbnz	r0, 8007be8 <_dtoa_r+0x6a8>
 8007bb4:	4632      	mov	r2, r6
 8007bb6:	463b      	mov	r3, r7
 8007bb8:	4640      	mov	r0, r8
 8007bba:	4649      	mov	r1, r9
 8007bbc:	f7f8 ffa0 	bl	8000b00 <__aeabi_dcmpeq>
 8007bc0:	b110      	cbz	r0, 8007bc8 <_dtoa_r+0x688>
 8007bc2:	9b00      	ldr	r3, [sp, #0]
 8007bc4:	07db      	lsls	r3, r3, #31
 8007bc6:	d40f      	bmi.n	8007be8 <_dtoa_r+0x6a8>
 8007bc8:	4651      	mov	r1, sl
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 fd58 	bl	8008680 <_Bfree>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bd4:	702b      	strb	r3, [r5, #0]
 8007bd6:	f10b 0301 	add.w	r3, fp, #1
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f43f acf8 	beq.w	80075d4 <_dtoa_r+0x94>
 8007be4:	601d      	str	r5, [r3, #0]
 8007be6:	e4f5      	b.n	80075d4 <_dtoa_r+0x94>
 8007be8:	465f      	mov	r7, fp
 8007bea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007bee:	2a39      	cmp	r2, #57	; 0x39
 8007bf0:	f105 33ff 	add.w	r3, r5, #4294967295
 8007bf4:	d106      	bne.n	8007c04 <_dtoa_r+0x6c4>
 8007bf6:	9a02      	ldr	r2, [sp, #8]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d107      	bne.n	8007c0c <_dtoa_r+0x6cc>
 8007bfc:	2330      	movs	r3, #48	; 0x30
 8007bfe:	7013      	strb	r3, [r2, #0]
 8007c00:	3701      	adds	r7, #1
 8007c02:	4613      	mov	r3, r2
 8007c04:	781a      	ldrb	r2, [r3, #0]
 8007c06:	3201      	adds	r2, #1
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	e78d      	b.n	8007b28 <_dtoa_r+0x5e8>
 8007c0c:	461d      	mov	r5, r3
 8007c0e:	e7ec      	b.n	8007bea <_dtoa_r+0x6aa>
 8007c10:	2200      	movs	r2, #0
 8007c12:	4ba4      	ldr	r3, [pc, #656]	; (8007ea4 <_dtoa_r+0x964>)
 8007c14:	f7f8 fd0c 	bl	8000630 <__aeabi_dmul>
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	460f      	mov	r7, r1
 8007c20:	f7f8 ff6e 	bl	8000b00 <__aeabi_dcmpeq>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d09a      	beq.n	8007b5e <_dtoa_r+0x61e>
 8007c28:	e7ce      	b.n	8007bc8 <_dtoa_r+0x688>
 8007c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c2c:	2a00      	cmp	r2, #0
 8007c2e:	f000 80cd 	beq.w	8007dcc <_dtoa_r+0x88c>
 8007c32:	9a07      	ldr	r2, [sp, #28]
 8007c34:	2a01      	cmp	r2, #1
 8007c36:	f300 80af 	bgt.w	8007d98 <_dtoa_r+0x858>
 8007c3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c3c:	2a00      	cmp	r2, #0
 8007c3e:	f000 80a7 	beq.w	8007d90 <_dtoa_r+0x850>
 8007c42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c46:	9e08      	ldr	r6, [sp, #32]
 8007c48:	9d05      	ldr	r5, [sp, #20]
 8007c4a:	9a05      	ldr	r2, [sp, #20]
 8007c4c:	441a      	add	r2, r3
 8007c4e:	9205      	str	r2, [sp, #20]
 8007c50:	9a06      	ldr	r2, [sp, #24]
 8007c52:	2101      	movs	r1, #1
 8007c54:	441a      	add	r2, r3
 8007c56:	4620      	mov	r0, r4
 8007c58:	9206      	str	r2, [sp, #24]
 8007c5a:	f000 fdef 	bl	800883c <__i2b>
 8007c5e:	4607      	mov	r7, r0
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	dd0c      	ble.n	8007c7e <_dtoa_r+0x73e>
 8007c64:	9b06      	ldr	r3, [sp, #24]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dd09      	ble.n	8007c7e <_dtoa_r+0x73e>
 8007c6a:	42ab      	cmp	r3, r5
 8007c6c:	9a05      	ldr	r2, [sp, #20]
 8007c6e:	bfa8      	it	ge
 8007c70:	462b      	movge	r3, r5
 8007c72:	1ad2      	subs	r2, r2, r3
 8007c74:	9205      	str	r2, [sp, #20]
 8007c76:	9a06      	ldr	r2, [sp, #24]
 8007c78:	1aed      	subs	r5, r5, r3
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	9306      	str	r3, [sp, #24]
 8007c7e:	9b08      	ldr	r3, [sp, #32]
 8007c80:	b1f3      	cbz	r3, 8007cc0 <_dtoa_r+0x780>
 8007c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 80a5 	beq.w	8007dd4 <_dtoa_r+0x894>
 8007c8a:	2e00      	cmp	r6, #0
 8007c8c:	dd10      	ble.n	8007cb0 <_dtoa_r+0x770>
 8007c8e:	4639      	mov	r1, r7
 8007c90:	4632      	mov	r2, r6
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 fe68 	bl	8008968 <__pow5mult>
 8007c98:	4652      	mov	r2, sl
 8007c9a:	4601      	mov	r1, r0
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f000 fdd5 	bl	800884e <__multiply>
 8007ca4:	4651      	mov	r1, sl
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f000 fce9 	bl	8008680 <_Bfree>
 8007cae:	46c2      	mov	sl, r8
 8007cb0:	9b08      	ldr	r3, [sp, #32]
 8007cb2:	1b9a      	subs	r2, r3, r6
 8007cb4:	d004      	beq.n	8007cc0 <_dtoa_r+0x780>
 8007cb6:	4651      	mov	r1, sl
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 fe55 	bl	8008968 <__pow5mult>
 8007cbe:	4682      	mov	sl, r0
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f000 fdba 	bl	800883c <__i2b>
 8007cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	4606      	mov	r6, r0
 8007cce:	f340 8083 	ble.w	8007dd8 <_dtoa_r+0x898>
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	4601      	mov	r1, r0
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f000 fe46 	bl	8008968 <__pow5mult>
 8007cdc:	9b07      	ldr	r3, [sp, #28]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	dd7c      	ble.n	8007dde <_dtoa_r+0x89e>
 8007ce4:	f04f 0800 	mov.w	r8, #0
 8007ce8:	6933      	ldr	r3, [r6, #16]
 8007cea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007cee:	6918      	ldr	r0, [r3, #16]
 8007cf0:	f000 fd56 	bl	80087a0 <__hi0bits>
 8007cf4:	f1c0 0020 	rsb	r0, r0, #32
 8007cf8:	9b06      	ldr	r3, [sp, #24]
 8007cfa:	4418      	add	r0, r3
 8007cfc:	f010 001f 	ands.w	r0, r0, #31
 8007d00:	f000 8096 	beq.w	8007e30 <_dtoa_r+0x8f0>
 8007d04:	f1c0 0320 	rsb	r3, r0, #32
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	f340 8087 	ble.w	8007e1c <_dtoa_r+0x8dc>
 8007d0e:	9b05      	ldr	r3, [sp, #20]
 8007d10:	f1c0 001c 	rsb	r0, r0, #28
 8007d14:	4403      	add	r3, r0
 8007d16:	9305      	str	r3, [sp, #20]
 8007d18:	9b06      	ldr	r3, [sp, #24]
 8007d1a:	4405      	add	r5, r0
 8007d1c:	4403      	add	r3, r0
 8007d1e:	9306      	str	r3, [sp, #24]
 8007d20:	9b05      	ldr	r3, [sp, #20]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	dd05      	ble.n	8007d32 <_dtoa_r+0x7f2>
 8007d26:	4651      	mov	r1, sl
 8007d28:	461a      	mov	r2, r3
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 fe6a 	bl	8008a04 <__lshift>
 8007d30:	4682      	mov	sl, r0
 8007d32:	9b06      	ldr	r3, [sp, #24]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	dd05      	ble.n	8007d44 <_dtoa_r+0x804>
 8007d38:	4631      	mov	r1, r6
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f000 fe61 	bl	8008a04 <__lshift>
 8007d42:	4606      	mov	r6, r0
 8007d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d074      	beq.n	8007e34 <_dtoa_r+0x8f4>
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4650      	mov	r0, sl
 8007d4e:	f000 feaa 	bl	8008aa6 <__mcmp>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	da6e      	bge.n	8007e34 <_dtoa_r+0x8f4>
 8007d56:	2300      	movs	r3, #0
 8007d58:	4651      	mov	r1, sl
 8007d5a:	220a      	movs	r2, #10
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f000 fca6 	bl	80086ae <__multadd>
 8007d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d68:	4682      	mov	sl, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 81a8 	beq.w	80080c0 <_dtoa_r+0xb80>
 8007d70:	2300      	movs	r3, #0
 8007d72:	4639      	mov	r1, r7
 8007d74:	220a      	movs	r2, #10
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 fc99 	bl	80086ae <__multadd>
 8007d7c:	9b04      	ldr	r3, [sp, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	4607      	mov	r7, r0
 8007d82:	f300 80c8 	bgt.w	8007f16 <_dtoa_r+0x9d6>
 8007d86:	9b07      	ldr	r3, [sp, #28]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	f340 80c4 	ble.w	8007f16 <_dtoa_r+0x9d6>
 8007d8e:	e059      	b.n	8007e44 <_dtoa_r+0x904>
 8007d90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d96:	e756      	b.n	8007c46 <_dtoa_r+0x706>
 8007d98:	9b03      	ldr	r3, [sp, #12]
 8007d9a:	1e5e      	subs	r6, r3, #1
 8007d9c:	9b08      	ldr	r3, [sp, #32]
 8007d9e:	42b3      	cmp	r3, r6
 8007da0:	bfbf      	itttt	lt
 8007da2:	9b08      	ldrlt	r3, [sp, #32]
 8007da4:	9608      	strlt	r6, [sp, #32]
 8007da6:	1af2      	sublt	r2, r6, r3
 8007da8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8007daa:	bfb6      	itet	lt
 8007dac:	189b      	addlt	r3, r3, r2
 8007dae:	1b9e      	subge	r6, r3, r6
 8007db0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8007db2:	9b03      	ldr	r3, [sp, #12]
 8007db4:	bfb8      	it	lt
 8007db6:	2600      	movlt	r6, #0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bfb9      	ittee	lt
 8007dbc:	9b05      	ldrlt	r3, [sp, #20]
 8007dbe:	9a03      	ldrlt	r2, [sp, #12]
 8007dc0:	9d05      	ldrge	r5, [sp, #20]
 8007dc2:	9b03      	ldrge	r3, [sp, #12]
 8007dc4:	bfbc      	itt	lt
 8007dc6:	1a9d      	sublt	r5, r3, r2
 8007dc8:	2300      	movlt	r3, #0
 8007dca:	e73e      	b.n	8007c4a <_dtoa_r+0x70a>
 8007dcc:	9e08      	ldr	r6, [sp, #32]
 8007dce:	9d05      	ldr	r5, [sp, #20]
 8007dd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007dd2:	e745      	b.n	8007c60 <_dtoa_r+0x720>
 8007dd4:	9a08      	ldr	r2, [sp, #32]
 8007dd6:	e76e      	b.n	8007cb6 <_dtoa_r+0x776>
 8007dd8:	9b07      	ldr	r3, [sp, #28]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	dc19      	bgt.n	8007e12 <_dtoa_r+0x8d2>
 8007dde:	9b00      	ldr	r3, [sp, #0]
 8007de0:	b9bb      	cbnz	r3, 8007e12 <_dtoa_r+0x8d2>
 8007de2:	9b01      	ldr	r3, [sp, #4]
 8007de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007de8:	b99b      	cbnz	r3, 8007e12 <_dtoa_r+0x8d2>
 8007dea:	9b01      	ldr	r3, [sp, #4]
 8007dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007df0:	0d1b      	lsrs	r3, r3, #20
 8007df2:	051b      	lsls	r3, r3, #20
 8007df4:	b183      	cbz	r3, 8007e18 <_dtoa_r+0x8d8>
 8007df6:	9b05      	ldr	r3, [sp, #20]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	9305      	str	r3, [sp, #20]
 8007dfc:	9b06      	ldr	r3, [sp, #24]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	9306      	str	r3, [sp, #24]
 8007e02:	f04f 0801 	mov.w	r8, #1
 8007e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f47f af6d 	bne.w	8007ce8 <_dtoa_r+0x7a8>
 8007e0e:	2001      	movs	r0, #1
 8007e10:	e772      	b.n	8007cf8 <_dtoa_r+0x7b8>
 8007e12:	f04f 0800 	mov.w	r8, #0
 8007e16:	e7f6      	b.n	8007e06 <_dtoa_r+0x8c6>
 8007e18:	4698      	mov	r8, r3
 8007e1a:	e7f4      	b.n	8007e06 <_dtoa_r+0x8c6>
 8007e1c:	d080      	beq.n	8007d20 <_dtoa_r+0x7e0>
 8007e1e:	9a05      	ldr	r2, [sp, #20]
 8007e20:	331c      	adds	r3, #28
 8007e22:	441a      	add	r2, r3
 8007e24:	9205      	str	r2, [sp, #20]
 8007e26:	9a06      	ldr	r2, [sp, #24]
 8007e28:	441a      	add	r2, r3
 8007e2a:	441d      	add	r5, r3
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	e776      	b.n	8007d1e <_dtoa_r+0x7de>
 8007e30:	4603      	mov	r3, r0
 8007e32:	e7f4      	b.n	8007e1e <_dtoa_r+0x8de>
 8007e34:	9b03      	ldr	r3, [sp, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	dc36      	bgt.n	8007ea8 <_dtoa_r+0x968>
 8007e3a:	9b07      	ldr	r3, [sp, #28]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	dd33      	ble.n	8007ea8 <_dtoa_r+0x968>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	9b04      	ldr	r3, [sp, #16]
 8007e46:	b963      	cbnz	r3, 8007e62 <_dtoa_r+0x922>
 8007e48:	4631      	mov	r1, r6
 8007e4a:	2205      	movs	r2, #5
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 fc2e 	bl	80086ae <__multadd>
 8007e52:	4601      	mov	r1, r0
 8007e54:	4606      	mov	r6, r0
 8007e56:	4650      	mov	r0, sl
 8007e58:	f000 fe25 	bl	8008aa6 <__mcmp>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	f73f adb6 	bgt.w	80079ce <_dtoa_r+0x48e>
 8007e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e64:	9d02      	ldr	r5, [sp, #8]
 8007e66:	ea6f 0b03 	mvn.w	fp, r3
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	4631      	mov	r1, r6
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 fc05 	bl	8008680 <_Bfree>
 8007e76:	2f00      	cmp	r7, #0
 8007e78:	f43f aea6 	beq.w	8007bc8 <_dtoa_r+0x688>
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	b12b      	cbz	r3, 8007e8c <_dtoa_r+0x94c>
 8007e80:	42bb      	cmp	r3, r7
 8007e82:	d003      	beq.n	8007e8c <_dtoa_r+0x94c>
 8007e84:	4619      	mov	r1, r3
 8007e86:	4620      	mov	r0, r4
 8007e88:	f000 fbfa 	bl	8008680 <_Bfree>
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 fbf6 	bl	8008680 <_Bfree>
 8007e94:	e698      	b.n	8007bc8 <_dtoa_r+0x688>
 8007e96:	2600      	movs	r6, #0
 8007e98:	4637      	mov	r7, r6
 8007e9a:	e7e2      	b.n	8007e62 <_dtoa_r+0x922>
 8007e9c:	46bb      	mov	fp, r7
 8007e9e:	4637      	mov	r7, r6
 8007ea0:	e595      	b.n	80079ce <_dtoa_r+0x48e>
 8007ea2:	bf00      	nop
 8007ea4:	40240000 	.word	0x40240000
 8007ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eaa:	bb93      	cbnz	r3, 8007f12 <_dtoa_r+0x9d2>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	9304      	str	r3, [sp, #16]
 8007eb0:	9d02      	ldr	r5, [sp, #8]
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4650      	mov	r0, sl
 8007eb6:	f7ff fab5 	bl	8007424 <quorem>
 8007eba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007ebe:	f805 9b01 	strb.w	r9, [r5], #1
 8007ec2:	9b02      	ldr	r3, [sp, #8]
 8007ec4:	9a04      	ldr	r2, [sp, #16]
 8007ec6:	1aeb      	subs	r3, r5, r3
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	f300 80dc 	bgt.w	8008086 <_dtoa_r+0xb46>
 8007ece:	9b02      	ldr	r3, [sp, #8]
 8007ed0:	2a01      	cmp	r2, #1
 8007ed2:	bfac      	ite	ge
 8007ed4:	189b      	addge	r3, r3, r2
 8007ed6:	3301      	addlt	r3, #1
 8007ed8:	4698      	mov	r8, r3
 8007eda:	2300      	movs	r3, #0
 8007edc:	9303      	str	r3, [sp, #12]
 8007ede:	4651      	mov	r1, sl
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f000 fd8e 	bl	8008a04 <__lshift>
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4682      	mov	sl, r0
 8007eec:	f000 fddb 	bl	8008aa6 <__mcmp>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f300 808d 	bgt.w	8008010 <_dtoa_r+0xad0>
 8007ef6:	d103      	bne.n	8007f00 <_dtoa_r+0x9c0>
 8007ef8:	f019 0f01 	tst.w	r9, #1
 8007efc:	f040 8088 	bne.w	8008010 <_dtoa_r+0xad0>
 8007f00:	4645      	mov	r5, r8
 8007f02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f06:	2b30      	cmp	r3, #48	; 0x30
 8007f08:	f105 32ff 	add.w	r2, r5, #4294967295
 8007f0c:	d1af      	bne.n	8007e6e <_dtoa_r+0x92e>
 8007f0e:	4615      	mov	r5, r2
 8007f10:	e7f7      	b.n	8007f02 <_dtoa_r+0x9c2>
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	9304      	str	r3, [sp, #16]
 8007f16:	2d00      	cmp	r5, #0
 8007f18:	dd05      	ble.n	8007f26 <_dtoa_r+0x9e6>
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	462a      	mov	r2, r5
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 fd70 	bl	8008a04 <__lshift>
 8007f24:	4607      	mov	r7, r0
 8007f26:	f1b8 0f00 	cmp.w	r8, #0
 8007f2a:	d04c      	beq.n	8007fc6 <_dtoa_r+0xa86>
 8007f2c:	6879      	ldr	r1, [r7, #4]
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f000 fb72 	bl	8008618 <_Balloc>
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	3202      	adds	r2, #2
 8007f38:	4605      	mov	r5, r0
 8007f3a:	0092      	lsls	r2, r2, #2
 8007f3c:	f107 010c 	add.w	r1, r7, #12
 8007f40:	300c      	adds	r0, #12
 8007f42:	f7fd fcbf 	bl	80058c4 <memcpy>
 8007f46:	2201      	movs	r2, #1
 8007f48:	4629      	mov	r1, r5
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 fd5a 	bl	8008a04 <__lshift>
 8007f50:	9b00      	ldr	r3, [sp, #0]
 8007f52:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007f56:	9703      	str	r7, [sp, #12]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	9305      	str	r3, [sp, #20]
 8007f60:	4631      	mov	r1, r6
 8007f62:	4650      	mov	r0, sl
 8007f64:	f7ff fa5e 	bl	8007424 <quorem>
 8007f68:	9903      	ldr	r1, [sp, #12]
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f70:	4650      	mov	r0, sl
 8007f72:	f000 fd98 	bl	8008aa6 <__mcmp>
 8007f76:	463a      	mov	r2, r7
 8007f78:	9000      	str	r0, [sp, #0]
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f000 fdac 	bl	8008ada <__mdiff>
 8007f82:	68c3      	ldr	r3, [r0, #12]
 8007f84:	4602      	mov	r2, r0
 8007f86:	bb03      	cbnz	r3, 8007fca <_dtoa_r+0xa8a>
 8007f88:	4601      	mov	r1, r0
 8007f8a:	9006      	str	r0, [sp, #24]
 8007f8c:	4650      	mov	r0, sl
 8007f8e:	f000 fd8a 	bl	8008aa6 <__mcmp>
 8007f92:	9a06      	ldr	r2, [sp, #24]
 8007f94:	4603      	mov	r3, r0
 8007f96:	4611      	mov	r1, r2
 8007f98:	4620      	mov	r0, r4
 8007f9a:	9306      	str	r3, [sp, #24]
 8007f9c:	f000 fb70 	bl	8008680 <_Bfree>
 8007fa0:	9b06      	ldr	r3, [sp, #24]
 8007fa2:	b9a3      	cbnz	r3, 8007fce <_dtoa_r+0xa8e>
 8007fa4:	9a07      	ldr	r2, [sp, #28]
 8007fa6:	b992      	cbnz	r2, 8007fce <_dtoa_r+0xa8e>
 8007fa8:	9a05      	ldr	r2, [sp, #20]
 8007faa:	b982      	cbnz	r2, 8007fce <_dtoa_r+0xa8e>
 8007fac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007fb0:	d029      	beq.n	8008006 <_dtoa_r+0xac6>
 8007fb2:	9b00      	ldr	r3, [sp, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	dd01      	ble.n	8007fbc <_dtoa_r+0xa7c>
 8007fb8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8007fbc:	f108 0501 	add.w	r5, r8, #1
 8007fc0:	f888 9000 	strb.w	r9, [r8]
 8007fc4:	e753      	b.n	8007e6e <_dtoa_r+0x92e>
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	e7c2      	b.n	8007f50 <_dtoa_r+0xa10>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e7e3      	b.n	8007f96 <_dtoa_r+0xa56>
 8007fce:	9a00      	ldr	r2, [sp, #0]
 8007fd0:	2a00      	cmp	r2, #0
 8007fd2:	db04      	blt.n	8007fde <_dtoa_r+0xa9e>
 8007fd4:	d125      	bne.n	8008022 <_dtoa_r+0xae2>
 8007fd6:	9a07      	ldr	r2, [sp, #28]
 8007fd8:	bb1a      	cbnz	r2, 8008022 <_dtoa_r+0xae2>
 8007fda:	9a05      	ldr	r2, [sp, #20]
 8007fdc:	bb0a      	cbnz	r2, 8008022 <_dtoa_r+0xae2>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	ddec      	ble.n	8007fbc <_dtoa_r+0xa7c>
 8007fe2:	4651      	mov	r1, sl
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 fd0c 	bl	8008a04 <__lshift>
 8007fec:	4631      	mov	r1, r6
 8007fee:	4682      	mov	sl, r0
 8007ff0:	f000 fd59 	bl	8008aa6 <__mcmp>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	dc03      	bgt.n	8008000 <_dtoa_r+0xac0>
 8007ff8:	d1e0      	bne.n	8007fbc <_dtoa_r+0xa7c>
 8007ffa:	f019 0f01 	tst.w	r9, #1
 8007ffe:	d0dd      	beq.n	8007fbc <_dtoa_r+0xa7c>
 8008000:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008004:	d1d8      	bne.n	8007fb8 <_dtoa_r+0xa78>
 8008006:	2339      	movs	r3, #57	; 0x39
 8008008:	f888 3000 	strb.w	r3, [r8]
 800800c:	f108 0801 	add.w	r8, r8, #1
 8008010:	4645      	mov	r5, r8
 8008012:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008016:	2b39      	cmp	r3, #57	; 0x39
 8008018:	f105 32ff 	add.w	r2, r5, #4294967295
 800801c:	d03b      	beq.n	8008096 <_dtoa_r+0xb56>
 800801e:	3301      	adds	r3, #1
 8008020:	e040      	b.n	80080a4 <_dtoa_r+0xb64>
 8008022:	2b00      	cmp	r3, #0
 8008024:	f108 0501 	add.w	r5, r8, #1
 8008028:	dd05      	ble.n	8008036 <_dtoa_r+0xaf6>
 800802a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800802e:	d0ea      	beq.n	8008006 <_dtoa_r+0xac6>
 8008030:	f109 0901 	add.w	r9, r9, #1
 8008034:	e7c4      	b.n	8007fc0 <_dtoa_r+0xa80>
 8008036:	9b02      	ldr	r3, [sp, #8]
 8008038:	9a04      	ldr	r2, [sp, #16]
 800803a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800803e:	1aeb      	subs	r3, r5, r3
 8008040:	4293      	cmp	r3, r2
 8008042:	46a8      	mov	r8, r5
 8008044:	f43f af4b 	beq.w	8007ede <_dtoa_r+0x99e>
 8008048:	4651      	mov	r1, sl
 800804a:	2300      	movs	r3, #0
 800804c:	220a      	movs	r2, #10
 800804e:	4620      	mov	r0, r4
 8008050:	f000 fb2d 	bl	80086ae <__multadd>
 8008054:	9b03      	ldr	r3, [sp, #12]
 8008056:	9903      	ldr	r1, [sp, #12]
 8008058:	42bb      	cmp	r3, r7
 800805a:	4682      	mov	sl, r0
 800805c:	f04f 0300 	mov.w	r3, #0
 8008060:	f04f 020a 	mov.w	r2, #10
 8008064:	4620      	mov	r0, r4
 8008066:	d104      	bne.n	8008072 <_dtoa_r+0xb32>
 8008068:	f000 fb21 	bl	80086ae <__multadd>
 800806c:	9003      	str	r0, [sp, #12]
 800806e:	4607      	mov	r7, r0
 8008070:	e776      	b.n	8007f60 <_dtoa_r+0xa20>
 8008072:	f000 fb1c 	bl	80086ae <__multadd>
 8008076:	2300      	movs	r3, #0
 8008078:	9003      	str	r0, [sp, #12]
 800807a:	220a      	movs	r2, #10
 800807c:	4639      	mov	r1, r7
 800807e:	4620      	mov	r0, r4
 8008080:	f000 fb15 	bl	80086ae <__multadd>
 8008084:	e7f3      	b.n	800806e <_dtoa_r+0xb2e>
 8008086:	4651      	mov	r1, sl
 8008088:	2300      	movs	r3, #0
 800808a:	220a      	movs	r2, #10
 800808c:	4620      	mov	r0, r4
 800808e:	f000 fb0e 	bl	80086ae <__multadd>
 8008092:	4682      	mov	sl, r0
 8008094:	e70d      	b.n	8007eb2 <_dtoa_r+0x972>
 8008096:	9b02      	ldr	r3, [sp, #8]
 8008098:	4293      	cmp	r3, r2
 800809a:	d105      	bne.n	80080a8 <_dtoa_r+0xb68>
 800809c:	9a02      	ldr	r2, [sp, #8]
 800809e:	f10b 0b01 	add.w	fp, fp, #1
 80080a2:	2331      	movs	r3, #49	; 0x31
 80080a4:	7013      	strb	r3, [r2, #0]
 80080a6:	e6e2      	b.n	8007e6e <_dtoa_r+0x92e>
 80080a8:	4615      	mov	r5, r2
 80080aa:	e7b2      	b.n	8008012 <_dtoa_r+0xad2>
 80080ac:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <_dtoa_r+0xb94>)
 80080ae:	f7ff baae 	b.w	800760e <_dtoa_r+0xce>
 80080b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f47f aa88 	bne.w	80075ca <_dtoa_r+0x8a>
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <_dtoa_r+0xb98>)
 80080bc:	f7ff baa7 	b.w	800760e <_dtoa_r+0xce>
 80080c0:	9b04      	ldr	r3, [sp, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f73f aef4 	bgt.w	8007eb0 <_dtoa_r+0x970>
 80080c8:	9b07      	ldr	r3, [sp, #28]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	f77f aef0 	ble.w	8007eb0 <_dtoa_r+0x970>
 80080d0:	e6b8      	b.n	8007e44 <_dtoa_r+0x904>
 80080d2:	bf00      	nop
 80080d4:	0800b736 	.word	0x0800b736
 80080d8:	0800b780 	.word	0x0800b780

080080dc <iswspace>:
 80080dc:	28ff      	cmp	r0, #255	; 0xff
 80080de:	b510      	push	{r4, lr}
 80080e0:	4604      	mov	r4, r0
 80080e2:	d806      	bhi.n	80080f2 <iswspace+0x16>
 80080e4:	f000 f81a 	bl	800811c <__locale_ctype_ptr>
 80080e8:	4420      	add	r0, r4
 80080ea:	7840      	ldrb	r0, [r0, #1]
 80080ec:	f000 0008 	and.w	r0, r0, #8
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	2000      	movs	r0, #0
 80080f4:	bd10      	pop	{r4, pc}
	...

080080f8 <__locale_mb_cur_max>:
 80080f8:	4b04      	ldr	r3, [pc, #16]	; (800810c <__locale_mb_cur_max+0x14>)
 80080fa:	4a05      	ldr	r2, [pc, #20]	; (8008110 <__locale_mb_cur_max+0x18>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	2b00      	cmp	r3, #0
 8008102:	bf08      	it	eq
 8008104:	4613      	moveq	r3, r2
 8008106:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800810a:	4770      	bx	lr
 800810c:	2000000c 	.word	0x2000000c
 8008110:	20000100 	.word	0x20000100

08008114 <__locale_ctype_ptr_l>:
 8008114:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008118:	4770      	bx	lr
	...

0800811c <__locale_ctype_ptr>:
 800811c:	4b04      	ldr	r3, [pc, #16]	; (8008130 <__locale_ctype_ptr+0x14>)
 800811e:	4a05      	ldr	r2, [pc, #20]	; (8008134 <__locale_ctype_ptr+0x18>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	2b00      	cmp	r3, #0
 8008126:	bf08      	it	eq
 8008128:	4613      	moveq	r3, r2
 800812a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800812e:	4770      	bx	lr
 8008130:	2000000c 	.word	0x2000000c
 8008134:	20000100 	.word	0x20000100

08008138 <__localeconv_l>:
 8008138:	30f0      	adds	r0, #240	; 0xf0
 800813a:	4770      	bx	lr

0800813c <_localeconv_r>:
 800813c:	4b04      	ldr	r3, [pc, #16]	; (8008150 <_localeconv_r+0x14>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6a18      	ldr	r0, [r3, #32]
 8008142:	4b04      	ldr	r3, [pc, #16]	; (8008154 <_localeconv_r+0x18>)
 8008144:	2800      	cmp	r0, #0
 8008146:	bf08      	it	eq
 8008148:	4618      	moveq	r0, r3
 800814a:	30f0      	adds	r0, #240	; 0xf0
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	2000000c 	.word	0x2000000c
 8008154:	20000100 	.word	0x20000100

08008158 <malloc>:
 8008158:	4b02      	ldr	r3, [pc, #8]	; (8008164 <malloc+0xc>)
 800815a:	4601      	mov	r1, r0
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	f000 b803 	b.w	8008168 <_malloc_r>
 8008162:	bf00      	nop
 8008164:	2000000c 	.word	0x2000000c

08008168 <_malloc_r>:
 8008168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	f101 040b 	add.w	r4, r1, #11
 8008170:	2c16      	cmp	r4, #22
 8008172:	4681      	mov	r9, r0
 8008174:	d907      	bls.n	8008186 <_malloc_r+0x1e>
 8008176:	f034 0407 	bics.w	r4, r4, #7
 800817a:	d505      	bpl.n	8008188 <_malloc_r+0x20>
 800817c:	230c      	movs	r3, #12
 800817e:	f8c9 3000 	str.w	r3, [r9]
 8008182:	2600      	movs	r6, #0
 8008184:	e131      	b.n	80083ea <_malloc_r+0x282>
 8008186:	2410      	movs	r4, #16
 8008188:	428c      	cmp	r4, r1
 800818a:	d3f7      	bcc.n	800817c <_malloc_r+0x14>
 800818c:	4648      	mov	r0, r9
 800818e:	f000 fa37 	bl	8008600 <__malloc_lock>
 8008192:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8008196:	4d9c      	ldr	r5, [pc, #624]	; (8008408 <_malloc_r+0x2a0>)
 8008198:	d236      	bcs.n	8008208 <_malloc_r+0xa0>
 800819a:	f104 0208 	add.w	r2, r4, #8
 800819e:	442a      	add	r2, r5
 80081a0:	f1a2 0108 	sub.w	r1, r2, #8
 80081a4:	6856      	ldr	r6, [r2, #4]
 80081a6:	428e      	cmp	r6, r1
 80081a8:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80081ac:	d102      	bne.n	80081b4 <_malloc_r+0x4c>
 80081ae:	68d6      	ldr	r6, [r2, #12]
 80081b0:	42b2      	cmp	r2, r6
 80081b2:	d010      	beq.n	80081d6 <_malloc_r+0x6e>
 80081b4:	6873      	ldr	r3, [r6, #4]
 80081b6:	68f2      	ldr	r2, [r6, #12]
 80081b8:	68b1      	ldr	r1, [r6, #8]
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	60ca      	str	r2, [r1, #12]
 80081c0:	4433      	add	r3, r6
 80081c2:	6091      	str	r1, [r2, #8]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	f042 0201 	orr.w	r2, r2, #1
 80081ca:	605a      	str	r2, [r3, #4]
 80081cc:	4648      	mov	r0, r9
 80081ce:	f000 fa1d 	bl	800860c <__malloc_unlock>
 80081d2:	3608      	adds	r6, #8
 80081d4:	e109      	b.n	80083ea <_malloc_r+0x282>
 80081d6:	3302      	adds	r3, #2
 80081d8:	4a8c      	ldr	r2, [pc, #560]	; (800840c <_malloc_r+0x2a4>)
 80081da:	692e      	ldr	r6, [r5, #16]
 80081dc:	4296      	cmp	r6, r2
 80081de:	4611      	mov	r1, r2
 80081e0:	d06d      	beq.n	80082be <_malloc_r+0x156>
 80081e2:	6870      	ldr	r0, [r6, #4]
 80081e4:	f020 0003 	bic.w	r0, r0, #3
 80081e8:	1b07      	subs	r7, r0, r4
 80081ea:	2f0f      	cmp	r7, #15
 80081ec:	dd47      	ble.n	800827e <_malloc_r+0x116>
 80081ee:	1933      	adds	r3, r6, r4
 80081f0:	f044 0401 	orr.w	r4, r4, #1
 80081f4:	6074      	str	r4, [r6, #4]
 80081f6:	616b      	str	r3, [r5, #20]
 80081f8:	612b      	str	r3, [r5, #16]
 80081fa:	60da      	str	r2, [r3, #12]
 80081fc:	609a      	str	r2, [r3, #8]
 80081fe:	f047 0201 	orr.w	r2, r7, #1
 8008202:	605a      	str	r2, [r3, #4]
 8008204:	5037      	str	r7, [r6, r0]
 8008206:	e7e1      	b.n	80081cc <_malloc_r+0x64>
 8008208:	0a63      	lsrs	r3, r4, #9
 800820a:	d02a      	beq.n	8008262 <_malloc_r+0xfa>
 800820c:	2b04      	cmp	r3, #4
 800820e:	d812      	bhi.n	8008236 <_malloc_r+0xce>
 8008210:	09a3      	lsrs	r3, r4, #6
 8008212:	3338      	adds	r3, #56	; 0x38
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800821a:	f1a2 0008 	sub.w	r0, r2, #8
 800821e:	6856      	ldr	r6, [r2, #4]
 8008220:	4286      	cmp	r6, r0
 8008222:	d006      	beq.n	8008232 <_malloc_r+0xca>
 8008224:	6872      	ldr	r2, [r6, #4]
 8008226:	f022 0203 	bic.w	r2, r2, #3
 800822a:	1b11      	subs	r1, r2, r4
 800822c:	290f      	cmp	r1, #15
 800822e:	dd1c      	ble.n	800826a <_malloc_r+0x102>
 8008230:	3b01      	subs	r3, #1
 8008232:	3301      	adds	r3, #1
 8008234:	e7d0      	b.n	80081d8 <_malloc_r+0x70>
 8008236:	2b14      	cmp	r3, #20
 8008238:	d801      	bhi.n	800823e <_malloc_r+0xd6>
 800823a:	335b      	adds	r3, #91	; 0x5b
 800823c:	e7ea      	b.n	8008214 <_malloc_r+0xac>
 800823e:	2b54      	cmp	r3, #84	; 0x54
 8008240:	d802      	bhi.n	8008248 <_malloc_r+0xe0>
 8008242:	0b23      	lsrs	r3, r4, #12
 8008244:	336e      	adds	r3, #110	; 0x6e
 8008246:	e7e5      	b.n	8008214 <_malloc_r+0xac>
 8008248:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800824c:	d802      	bhi.n	8008254 <_malloc_r+0xec>
 800824e:	0be3      	lsrs	r3, r4, #15
 8008250:	3377      	adds	r3, #119	; 0x77
 8008252:	e7df      	b.n	8008214 <_malloc_r+0xac>
 8008254:	f240 5254 	movw	r2, #1364	; 0x554
 8008258:	4293      	cmp	r3, r2
 800825a:	d804      	bhi.n	8008266 <_malloc_r+0xfe>
 800825c:	0ca3      	lsrs	r3, r4, #18
 800825e:	337c      	adds	r3, #124	; 0x7c
 8008260:	e7d8      	b.n	8008214 <_malloc_r+0xac>
 8008262:	233f      	movs	r3, #63	; 0x3f
 8008264:	e7d6      	b.n	8008214 <_malloc_r+0xac>
 8008266:	237e      	movs	r3, #126	; 0x7e
 8008268:	e7d4      	b.n	8008214 <_malloc_r+0xac>
 800826a:	2900      	cmp	r1, #0
 800826c:	68f1      	ldr	r1, [r6, #12]
 800826e:	db04      	blt.n	800827a <_malloc_r+0x112>
 8008270:	68b3      	ldr	r3, [r6, #8]
 8008272:	60d9      	str	r1, [r3, #12]
 8008274:	608b      	str	r3, [r1, #8]
 8008276:	18b3      	adds	r3, r6, r2
 8008278:	e7a4      	b.n	80081c4 <_malloc_r+0x5c>
 800827a:	460e      	mov	r6, r1
 800827c:	e7d0      	b.n	8008220 <_malloc_r+0xb8>
 800827e:	2f00      	cmp	r7, #0
 8008280:	616a      	str	r2, [r5, #20]
 8008282:	612a      	str	r2, [r5, #16]
 8008284:	db05      	blt.n	8008292 <_malloc_r+0x12a>
 8008286:	4430      	add	r0, r6
 8008288:	6843      	ldr	r3, [r0, #4]
 800828a:	f043 0301 	orr.w	r3, r3, #1
 800828e:	6043      	str	r3, [r0, #4]
 8008290:	e79c      	b.n	80081cc <_malloc_r+0x64>
 8008292:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008296:	d244      	bcs.n	8008322 <_malloc_r+0x1ba>
 8008298:	08c0      	lsrs	r0, r0, #3
 800829a:	1087      	asrs	r7, r0, #2
 800829c:	2201      	movs	r2, #1
 800829e:	fa02 f707 	lsl.w	r7, r2, r7
 80082a2:	686a      	ldr	r2, [r5, #4]
 80082a4:	3001      	adds	r0, #1
 80082a6:	433a      	orrs	r2, r7
 80082a8:	606a      	str	r2, [r5, #4]
 80082aa:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80082ae:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80082b2:	60b7      	str	r7, [r6, #8]
 80082b4:	3a08      	subs	r2, #8
 80082b6:	60f2      	str	r2, [r6, #12]
 80082b8:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80082bc:	60fe      	str	r6, [r7, #12]
 80082be:	2001      	movs	r0, #1
 80082c0:	109a      	asrs	r2, r3, #2
 80082c2:	fa00 f202 	lsl.w	r2, r0, r2
 80082c6:	6868      	ldr	r0, [r5, #4]
 80082c8:	4282      	cmp	r2, r0
 80082ca:	f200 80a1 	bhi.w	8008410 <_malloc_r+0x2a8>
 80082ce:	4202      	tst	r2, r0
 80082d0:	d106      	bne.n	80082e0 <_malloc_r+0x178>
 80082d2:	f023 0303 	bic.w	r3, r3, #3
 80082d6:	0052      	lsls	r2, r2, #1
 80082d8:	4202      	tst	r2, r0
 80082da:	f103 0304 	add.w	r3, r3, #4
 80082de:	d0fa      	beq.n	80082d6 <_malloc_r+0x16e>
 80082e0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80082e4:	46e0      	mov	r8, ip
 80082e6:	469e      	mov	lr, r3
 80082e8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80082ec:	4546      	cmp	r6, r8
 80082ee:	d153      	bne.n	8008398 <_malloc_r+0x230>
 80082f0:	f10e 0e01 	add.w	lr, lr, #1
 80082f4:	f01e 0f03 	tst.w	lr, #3
 80082f8:	f108 0808 	add.w	r8, r8, #8
 80082fc:	d1f4      	bne.n	80082e8 <_malloc_r+0x180>
 80082fe:	0798      	lsls	r0, r3, #30
 8008300:	d179      	bne.n	80083f6 <_malloc_r+0x28e>
 8008302:	686b      	ldr	r3, [r5, #4]
 8008304:	ea23 0302 	bic.w	r3, r3, r2
 8008308:	606b      	str	r3, [r5, #4]
 800830a:	6868      	ldr	r0, [r5, #4]
 800830c:	0052      	lsls	r2, r2, #1
 800830e:	4282      	cmp	r2, r0
 8008310:	d87e      	bhi.n	8008410 <_malloc_r+0x2a8>
 8008312:	2a00      	cmp	r2, #0
 8008314:	d07c      	beq.n	8008410 <_malloc_r+0x2a8>
 8008316:	4673      	mov	r3, lr
 8008318:	4202      	tst	r2, r0
 800831a:	d1e1      	bne.n	80082e0 <_malloc_r+0x178>
 800831c:	3304      	adds	r3, #4
 800831e:	0052      	lsls	r2, r2, #1
 8008320:	e7fa      	b.n	8008318 <_malloc_r+0x1b0>
 8008322:	0a42      	lsrs	r2, r0, #9
 8008324:	2a04      	cmp	r2, #4
 8008326:	d815      	bhi.n	8008354 <_malloc_r+0x1ec>
 8008328:	0982      	lsrs	r2, r0, #6
 800832a:	3238      	adds	r2, #56	; 0x38
 800832c:	1c57      	adds	r7, r2, #1
 800832e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8008332:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8008336:	45be      	cmp	lr, r7
 8008338:	d126      	bne.n	8008388 <_malloc_r+0x220>
 800833a:	2001      	movs	r0, #1
 800833c:	1092      	asrs	r2, r2, #2
 800833e:	fa00 f202 	lsl.w	r2, r0, r2
 8008342:	6868      	ldr	r0, [r5, #4]
 8008344:	4310      	orrs	r0, r2
 8008346:	6068      	str	r0, [r5, #4]
 8008348:	f8c6 e00c 	str.w	lr, [r6, #12]
 800834c:	60b7      	str	r7, [r6, #8]
 800834e:	f8ce 6008 	str.w	r6, [lr, #8]
 8008352:	e7b3      	b.n	80082bc <_malloc_r+0x154>
 8008354:	2a14      	cmp	r2, #20
 8008356:	d801      	bhi.n	800835c <_malloc_r+0x1f4>
 8008358:	325b      	adds	r2, #91	; 0x5b
 800835a:	e7e7      	b.n	800832c <_malloc_r+0x1c4>
 800835c:	2a54      	cmp	r2, #84	; 0x54
 800835e:	d802      	bhi.n	8008366 <_malloc_r+0x1fe>
 8008360:	0b02      	lsrs	r2, r0, #12
 8008362:	326e      	adds	r2, #110	; 0x6e
 8008364:	e7e2      	b.n	800832c <_malloc_r+0x1c4>
 8008366:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800836a:	d802      	bhi.n	8008372 <_malloc_r+0x20a>
 800836c:	0bc2      	lsrs	r2, r0, #15
 800836e:	3277      	adds	r2, #119	; 0x77
 8008370:	e7dc      	b.n	800832c <_malloc_r+0x1c4>
 8008372:	f240 5754 	movw	r7, #1364	; 0x554
 8008376:	42ba      	cmp	r2, r7
 8008378:	bf9a      	itte	ls
 800837a:	0c82      	lsrls	r2, r0, #18
 800837c:	327c      	addls	r2, #124	; 0x7c
 800837e:	227e      	movhi	r2, #126	; 0x7e
 8008380:	e7d4      	b.n	800832c <_malloc_r+0x1c4>
 8008382:	68bf      	ldr	r7, [r7, #8]
 8008384:	45be      	cmp	lr, r7
 8008386:	d004      	beq.n	8008392 <_malloc_r+0x22a>
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	f022 0203 	bic.w	r2, r2, #3
 800838e:	4290      	cmp	r0, r2
 8008390:	d3f7      	bcc.n	8008382 <_malloc_r+0x21a>
 8008392:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8008396:	e7d7      	b.n	8008348 <_malloc_r+0x1e0>
 8008398:	6870      	ldr	r0, [r6, #4]
 800839a:	68f7      	ldr	r7, [r6, #12]
 800839c:	f020 0003 	bic.w	r0, r0, #3
 80083a0:	eba0 0a04 	sub.w	sl, r0, r4
 80083a4:	f1ba 0f0f 	cmp.w	sl, #15
 80083a8:	dd10      	ble.n	80083cc <_malloc_r+0x264>
 80083aa:	68b2      	ldr	r2, [r6, #8]
 80083ac:	1933      	adds	r3, r6, r4
 80083ae:	f044 0401 	orr.w	r4, r4, #1
 80083b2:	6074      	str	r4, [r6, #4]
 80083b4:	60d7      	str	r7, [r2, #12]
 80083b6:	60ba      	str	r2, [r7, #8]
 80083b8:	f04a 0201 	orr.w	r2, sl, #1
 80083bc:	616b      	str	r3, [r5, #20]
 80083be:	612b      	str	r3, [r5, #16]
 80083c0:	60d9      	str	r1, [r3, #12]
 80083c2:	6099      	str	r1, [r3, #8]
 80083c4:	605a      	str	r2, [r3, #4]
 80083c6:	f846 a000 	str.w	sl, [r6, r0]
 80083ca:	e6ff      	b.n	80081cc <_malloc_r+0x64>
 80083cc:	f1ba 0f00 	cmp.w	sl, #0
 80083d0:	db0f      	blt.n	80083f2 <_malloc_r+0x28a>
 80083d2:	4430      	add	r0, r6
 80083d4:	6843      	ldr	r3, [r0, #4]
 80083d6:	f043 0301 	orr.w	r3, r3, #1
 80083da:	6043      	str	r3, [r0, #4]
 80083dc:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80083e0:	4648      	mov	r0, r9
 80083e2:	60df      	str	r7, [r3, #12]
 80083e4:	60bb      	str	r3, [r7, #8]
 80083e6:	f000 f911 	bl	800860c <__malloc_unlock>
 80083ea:	4630      	mov	r0, r6
 80083ec:	b003      	add	sp, #12
 80083ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f2:	463e      	mov	r6, r7
 80083f4:	e77a      	b.n	80082ec <_malloc_r+0x184>
 80083f6:	f85c 0908 	ldr.w	r0, [ip], #-8
 80083fa:	4584      	cmp	ip, r0
 80083fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8008400:	f43f af7d 	beq.w	80082fe <_malloc_r+0x196>
 8008404:	e781      	b.n	800830a <_malloc_r+0x1a2>
 8008406:	bf00      	nop
 8008408:	2000026c 	.word	0x2000026c
 800840c:	20000274 	.word	0x20000274
 8008410:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8008414:	f8db 6004 	ldr.w	r6, [fp, #4]
 8008418:	f026 0603 	bic.w	r6, r6, #3
 800841c:	42b4      	cmp	r4, r6
 800841e:	d803      	bhi.n	8008428 <_malloc_r+0x2c0>
 8008420:	1b33      	subs	r3, r6, r4
 8008422:	2b0f      	cmp	r3, #15
 8008424:	f300 8096 	bgt.w	8008554 <_malloc_r+0x3ec>
 8008428:	4a4f      	ldr	r2, [pc, #316]	; (8008568 <_malloc_r+0x400>)
 800842a:	6817      	ldr	r7, [r2, #0]
 800842c:	4a4f      	ldr	r2, [pc, #316]	; (800856c <_malloc_r+0x404>)
 800842e:	6811      	ldr	r1, [r2, #0]
 8008430:	3710      	adds	r7, #16
 8008432:	3101      	adds	r1, #1
 8008434:	eb0b 0306 	add.w	r3, fp, r6
 8008438:	4427      	add	r7, r4
 800843a:	d005      	beq.n	8008448 <_malloc_r+0x2e0>
 800843c:	494c      	ldr	r1, [pc, #304]	; (8008570 <_malloc_r+0x408>)
 800843e:	3901      	subs	r1, #1
 8008440:	440f      	add	r7, r1
 8008442:	3101      	adds	r1, #1
 8008444:	4249      	negs	r1, r1
 8008446:	400f      	ands	r7, r1
 8008448:	4639      	mov	r1, r7
 800844a:	4648      	mov	r0, r9
 800844c:	9201      	str	r2, [sp, #4]
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	f000 fcce 	bl	8008df0 <_sbrk_r>
 8008454:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008458:	4680      	mov	r8, r0
 800845a:	d056      	beq.n	800850a <_malloc_r+0x3a2>
 800845c:	9b00      	ldr	r3, [sp, #0]
 800845e:	9a01      	ldr	r2, [sp, #4]
 8008460:	4283      	cmp	r3, r0
 8008462:	d901      	bls.n	8008468 <_malloc_r+0x300>
 8008464:	45ab      	cmp	fp, r5
 8008466:	d150      	bne.n	800850a <_malloc_r+0x3a2>
 8008468:	4842      	ldr	r0, [pc, #264]	; (8008574 <_malloc_r+0x40c>)
 800846a:	6801      	ldr	r1, [r0, #0]
 800846c:	4543      	cmp	r3, r8
 800846e:	eb07 0e01 	add.w	lr, r7, r1
 8008472:	f8c0 e000 	str.w	lr, [r0]
 8008476:	4940      	ldr	r1, [pc, #256]	; (8008578 <_malloc_r+0x410>)
 8008478:	4682      	mov	sl, r0
 800847a:	d113      	bne.n	80084a4 <_malloc_r+0x33c>
 800847c:	420b      	tst	r3, r1
 800847e:	d111      	bne.n	80084a4 <_malloc_r+0x33c>
 8008480:	68ab      	ldr	r3, [r5, #8]
 8008482:	443e      	add	r6, r7
 8008484:	f046 0601 	orr.w	r6, r6, #1
 8008488:	605e      	str	r6, [r3, #4]
 800848a:	4a3c      	ldr	r2, [pc, #240]	; (800857c <_malloc_r+0x414>)
 800848c:	f8da 3000 	ldr.w	r3, [sl]
 8008490:	6811      	ldr	r1, [r2, #0]
 8008492:	428b      	cmp	r3, r1
 8008494:	bf88      	it	hi
 8008496:	6013      	strhi	r3, [r2, #0]
 8008498:	4a39      	ldr	r2, [pc, #228]	; (8008580 <_malloc_r+0x418>)
 800849a:	6811      	ldr	r1, [r2, #0]
 800849c:	428b      	cmp	r3, r1
 800849e:	bf88      	it	hi
 80084a0:	6013      	strhi	r3, [r2, #0]
 80084a2:	e032      	b.n	800850a <_malloc_r+0x3a2>
 80084a4:	6810      	ldr	r0, [r2, #0]
 80084a6:	3001      	adds	r0, #1
 80084a8:	bf1b      	ittet	ne
 80084aa:	eba8 0303 	subne.w	r3, r8, r3
 80084ae:	4473      	addne	r3, lr
 80084b0:	f8c2 8000 	streq.w	r8, [r2]
 80084b4:	f8ca 3000 	strne.w	r3, [sl]
 80084b8:	f018 0007 	ands.w	r0, r8, #7
 80084bc:	bf1c      	itt	ne
 80084be:	f1c0 0008 	rsbne	r0, r0, #8
 80084c2:	4480      	addne	r8, r0
 80084c4:	4b2a      	ldr	r3, [pc, #168]	; (8008570 <_malloc_r+0x408>)
 80084c6:	4447      	add	r7, r8
 80084c8:	4418      	add	r0, r3
 80084ca:	400f      	ands	r7, r1
 80084cc:	1bc7      	subs	r7, r0, r7
 80084ce:	4639      	mov	r1, r7
 80084d0:	4648      	mov	r0, r9
 80084d2:	f000 fc8d 	bl	8008df0 <_sbrk_r>
 80084d6:	1c43      	adds	r3, r0, #1
 80084d8:	bf08      	it	eq
 80084da:	4640      	moveq	r0, r8
 80084dc:	f8da 3000 	ldr.w	r3, [sl]
 80084e0:	f8c5 8008 	str.w	r8, [r5, #8]
 80084e4:	bf08      	it	eq
 80084e6:	2700      	moveq	r7, #0
 80084e8:	eba0 0008 	sub.w	r0, r0, r8
 80084ec:	443b      	add	r3, r7
 80084ee:	4407      	add	r7, r0
 80084f0:	f047 0701 	orr.w	r7, r7, #1
 80084f4:	45ab      	cmp	fp, r5
 80084f6:	f8ca 3000 	str.w	r3, [sl]
 80084fa:	f8c8 7004 	str.w	r7, [r8, #4]
 80084fe:	d0c4      	beq.n	800848a <_malloc_r+0x322>
 8008500:	2e0f      	cmp	r6, #15
 8008502:	d810      	bhi.n	8008526 <_malloc_r+0x3be>
 8008504:	2301      	movs	r3, #1
 8008506:	f8c8 3004 	str.w	r3, [r8, #4]
 800850a:	68ab      	ldr	r3, [r5, #8]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	f022 0203 	bic.w	r2, r2, #3
 8008512:	4294      	cmp	r4, r2
 8008514:	eba2 0304 	sub.w	r3, r2, r4
 8008518:	d801      	bhi.n	800851e <_malloc_r+0x3b6>
 800851a:	2b0f      	cmp	r3, #15
 800851c:	dc1a      	bgt.n	8008554 <_malloc_r+0x3ec>
 800851e:	4648      	mov	r0, r9
 8008520:	f000 f874 	bl	800860c <__malloc_unlock>
 8008524:	e62d      	b.n	8008182 <_malloc_r+0x1a>
 8008526:	f8db 3004 	ldr.w	r3, [fp, #4]
 800852a:	3e0c      	subs	r6, #12
 800852c:	f026 0607 	bic.w	r6, r6, #7
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	4333      	orrs	r3, r6
 8008536:	f8cb 3004 	str.w	r3, [fp, #4]
 800853a:	eb0b 0306 	add.w	r3, fp, r6
 800853e:	2205      	movs	r2, #5
 8008540:	2e0f      	cmp	r6, #15
 8008542:	605a      	str	r2, [r3, #4]
 8008544:	609a      	str	r2, [r3, #8]
 8008546:	d9a0      	bls.n	800848a <_malloc_r+0x322>
 8008548:	f10b 0108 	add.w	r1, fp, #8
 800854c:	4648      	mov	r0, r9
 800854e:	f001 ff33 	bl	800a3b8 <_free_r>
 8008552:	e79a      	b.n	800848a <_malloc_r+0x322>
 8008554:	68ae      	ldr	r6, [r5, #8]
 8008556:	f044 0201 	orr.w	r2, r4, #1
 800855a:	4434      	add	r4, r6
 800855c:	f043 0301 	orr.w	r3, r3, #1
 8008560:	6072      	str	r2, [r6, #4]
 8008562:	60ac      	str	r4, [r5, #8]
 8008564:	6063      	str	r3, [r4, #4]
 8008566:	e631      	b.n	80081cc <_malloc_r+0x64>
 8008568:	200006cc 	.word	0x200006cc
 800856c:	20000674 	.word	0x20000674
 8008570:	00000080 	.word	0x00000080
 8008574:	2000069c 	.word	0x2000069c
 8008578:	0000007f 	.word	0x0000007f
 800857c:	200006c4 	.word	0x200006c4
 8008580:	200006c8 	.word	0x200006c8

08008584 <_mbrtowc_r>:
 8008584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008586:	9d08      	ldr	r5, [sp, #32]
 8008588:	4c11      	ldr	r4, [pc, #68]	; (80085d0 <_mbrtowc_r+0x4c>)
 800858a:	4606      	mov	r6, r0
 800858c:	4617      	mov	r7, r2
 800858e:	b9a2      	cbnz	r2, 80085ba <_mbrtowc_r+0x36>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	4a10      	ldr	r2, [pc, #64]	; (80085d4 <_mbrtowc_r+0x50>)
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	9500      	str	r5, [sp, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	bf08      	it	eq
 800859c:	4613      	moveq	r3, r2
 800859e:	4a0e      	ldr	r2, [pc, #56]	; (80085d8 <_mbrtowc_r+0x54>)
 80085a0:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 80085a4:	4639      	mov	r1, r7
 80085a6:	2301      	movs	r3, #1
 80085a8:	47a0      	blx	r4
 80085aa:	1c43      	adds	r3, r0, #1
 80085ac:	bf01      	itttt	eq
 80085ae:	2300      	moveq	r3, #0
 80085b0:	602b      	streq	r3, [r5, #0]
 80085b2:	238a      	moveq	r3, #138	; 0x8a
 80085b4:	6033      	streq	r3, [r6, #0]
 80085b6:	b003      	add	sp, #12
 80085b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ba:	6824      	ldr	r4, [r4, #0]
 80085bc:	4f05      	ldr	r7, [pc, #20]	; (80085d4 <_mbrtowc_r+0x50>)
 80085be:	6a24      	ldr	r4, [r4, #32]
 80085c0:	9500      	str	r5, [sp, #0]
 80085c2:	2c00      	cmp	r4, #0
 80085c4:	bf08      	it	eq
 80085c6:	463c      	moveq	r4, r7
 80085c8:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 80085cc:	e7ec      	b.n	80085a8 <_mbrtowc_r+0x24>
 80085ce:	bf00      	nop
 80085d0:	2000000c 	.word	0x2000000c
 80085d4:	20000100 	.word	0x20000100
 80085d8:	0800b796 	.word	0x0800b796

080085dc <__ascii_mbtowc>:
 80085dc:	b082      	sub	sp, #8
 80085de:	b901      	cbnz	r1, 80085e2 <__ascii_mbtowc+0x6>
 80085e0:	a901      	add	r1, sp, #4
 80085e2:	b142      	cbz	r2, 80085f6 <__ascii_mbtowc+0x1a>
 80085e4:	b14b      	cbz	r3, 80085fa <__ascii_mbtowc+0x1e>
 80085e6:	7813      	ldrb	r3, [r2, #0]
 80085e8:	600b      	str	r3, [r1, #0]
 80085ea:	7812      	ldrb	r2, [r2, #0]
 80085ec:	1c10      	adds	r0, r2, #0
 80085ee:	bf18      	it	ne
 80085f0:	2001      	movne	r0, #1
 80085f2:	b002      	add	sp, #8
 80085f4:	4770      	bx	lr
 80085f6:	4610      	mov	r0, r2
 80085f8:	e7fb      	b.n	80085f2 <__ascii_mbtowc+0x16>
 80085fa:	f06f 0001 	mvn.w	r0, #1
 80085fe:	e7f8      	b.n	80085f2 <__ascii_mbtowc+0x16>

08008600 <__malloc_lock>:
 8008600:	4801      	ldr	r0, [pc, #4]	; (8008608 <__malloc_lock+0x8>)
 8008602:	f002 bab2 	b.w	800ab6a <__retarget_lock_acquire_recursive>
 8008606:	bf00      	nop
 8008608:	20000e94 	.word	0x20000e94

0800860c <__malloc_unlock>:
 800860c:	4801      	ldr	r0, [pc, #4]	; (8008614 <__malloc_unlock+0x8>)
 800860e:	f002 baad 	b.w	800ab6c <__retarget_lock_release_recursive>
 8008612:	bf00      	nop
 8008614:	20000e94 	.word	0x20000e94

08008618 <_Balloc>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800861c:	4604      	mov	r4, r0
 800861e:	460e      	mov	r6, r1
 8008620:	b93d      	cbnz	r5, 8008632 <_Balloc+0x1a>
 8008622:	2010      	movs	r0, #16
 8008624:	f7ff fd98 	bl	8008158 <malloc>
 8008628:	6260      	str	r0, [r4, #36]	; 0x24
 800862a:	6045      	str	r5, [r0, #4]
 800862c:	6085      	str	r5, [r0, #8]
 800862e:	6005      	str	r5, [r0, #0]
 8008630:	60c5      	str	r5, [r0, #12]
 8008632:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008634:	68eb      	ldr	r3, [r5, #12]
 8008636:	b183      	cbz	r3, 800865a <_Balloc+0x42>
 8008638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008640:	b9b8      	cbnz	r0, 8008672 <_Balloc+0x5a>
 8008642:	2101      	movs	r1, #1
 8008644:	fa01 f506 	lsl.w	r5, r1, r6
 8008648:	1d6a      	adds	r2, r5, #5
 800864a:	0092      	lsls	r2, r2, #2
 800864c:	4620      	mov	r0, r4
 800864e:	f001 fe30 	bl	800a2b2 <_calloc_r>
 8008652:	b160      	cbz	r0, 800866e <_Balloc+0x56>
 8008654:	6046      	str	r6, [r0, #4]
 8008656:	6085      	str	r5, [r0, #8]
 8008658:	e00e      	b.n	8008678 <_Balloc+0x60>
 800865a:	2221      	movs	r2, #33	; 0x21
 800865c:	2104      	movs	r1, #4
 800865e:	4620      	mov	r0, r4
 8008660:	f001 fe27 	bl	800a2b2 <_calloc_r>
 8008664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008666:	60e8      	str	r0, [r5, #12]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e4      	bne.n	8008638 <_Balloc+0x20>
 800866e:	2000      	movs	r0, #0
 8008670:	bd70      	pop	{r4, r5, r6, pc}
 8008672:	6802      	ldr	r2, [r0, #0]
 8008674:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008678:	2300      	movs	r3, #0
 800867a:	6103      	str	r3, [r0, #16]
 800867c:	60c3      	str	r3, [r0, #12]
 800867e:	bd70      	pop	{r4, r5, r6, pc}

08008680 <_Bfree>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008684:	4606      	mov	r6, r0
 8008686:	460d      	mov	r5, r1
 8008688:	b93c      	cbnz	r4, 800869a <_Bfree+0x1a>
 800868a:	2010      	movs	r0, #16
 800868c:	f7ff fd64 	bl	8008158 <malloc>
 8008690:	6270      	str	r0, [r6, #36]	; 0x24
 8008692:	6044      	str	r4, [r0, #4]
 8008694:	6084      	str	r4, [r0, #8]
 8008696:	6004      	str	r4, [r0, #0]
 8008698:	60c4      	str	r4, [r0, #12]
 800869a:	b13d      	cbz	r5, 80086ac <_Bfree+0x2c>
 800869c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800869e:	686a      	ldr	r2, [r5, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086a6:	6029      	str	r1, [r5, #0]
 80086a8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80086ac:	bd70      	pop	{r4, r5, r6, pc}

080086ae <__multadd>:
 80086ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b2:	690d      	ldr	r5, [r1, #16]
 80086b4:	461f      	mov	r7, r3
 80086b6:	4606      	mov	r6, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	f101 0e14 	add.w	lr, r1, #20
 80086be:	2300      	movs	r3, #0
 80086c0:	f8de 0000 	ldr.w	r0, [lr]
 80086c4:	b281      	uxth	r1, r0
 80086c6:	fb02 7101 	mla	r1, r2, r1, r7
 80086ca:	0c0f      	lsrs	r7, r1, #16
 80086cc:	0c00      	lsrs	r0, r0, #16
 80086ce:	fb02 7000 	mla	r0, r2, r0, r7
 80086d2:	b289      	uxth	r1, r1
 80086d4:	3301      	adds	r3, #1
 80086d6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80086da:	429d      	cmp	r5, r3
 80086dc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80086e0:	f84e 1b04 	str.w	r1, [lr], #4
 80086e4:	dcec      	bgt.n	80086c0 <__multadd+0x12>
 80086e6:	b1d7      	cbz	r7, 800871e <__multadd+0x70>
 80086e8:	68a3      	ldr	r3, [r4, #8]
 80086ea:	429d      	cmp	r5, r3
 80086ec:	db12      	blt.n	8008714 <__multadd+0x66>
 80086ee:	6861      	ldr	r1, [r4, #4]
 80086f0:	4630      	mov	r0, r6
 80086f2:	3101      	adds	r1, #1
 80086f4:	f7ff ff90 	bl	8008618 <_Balloc>
 80086f8:	6922      	ldr	r2, [r4, #16]
 80086fa:	3202      	adds	r2, #2
 80086fc:	f104 010c 	add.w	r1, r4, #12
 8008700:	4680      	mov	r8, r0
 8008702:	0092      	lsls	r2, r2, #2
 8008704:	300c      	adds	r0, #12
 8008706:	f7fd f8dd 	bl	80058c4 <memcpy>
 800870a:	4621      	mov	r1, r4
 800870c:	4630      	mov	r0, r6
 800870e:	f7ff ffb7 	bl	8008680 <_Bfree>
 8008712:	4644      	mov	r4, r8
 8008714:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008718:	3501      	adds	r5, #1
 800871a:	615f      	str	r7, [r3, #20]
 800871c:	6125      	str	r5, [r4, #16]
 800871e:	4620      	mov	r0, r4
 8008720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008724 <__s2b>:
 8008724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008728:	460c      	mov	r4, r1
 800872a:	4615      	mov	r5, r2
 800872c:	461f      	mov	r7, r3
 800872e:	2209      	movs	r2, #9
 8008730:	3308      	adds	r3, #8
 8008732:	4606      	mov	r6, r0
 8008734:	fb93 f3f2 	sdiv	r3, r3, r2
 8008738:	2100      	movs	r1, #0
 800873a:	2201      	movs	r2, #1
 800873c:	429a      	cmp	r2, r3
 800873e:	db20      	blt.n	8008782 <__s2b+0x5e>
 8008740:	4630      	mov	r0, r6
 8008742:	f7ff ff69 	bl	8008618 <_Balloc>
 8008746:	9b08      	ldr	r3, [sp, #32]
 8008748:	6143      	str	r3, [r0, #20]
 800874a:	2d09      	cmp	r5, #9
 800874c:	f04f 0301 	mov.w	r3, #1
 8008750:	6103      	str	r3, [r0, #16]
 8008752:	dd19      	ble.n	8008788 <__s2b+0x64>
 8008754:	f104 0909 	add.w	r9, r4, #9
 8008758:	46c8      	mov	r8, r9
 800875a:	442c      	add	r4, r5
 800875c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008760:	4601      	mov	r1, r0
 8008762:	3b30      	subs	r3, #48	; 0x30
 8008764:	220a      	movs	r2, #10
 8008766:	4630      	mov	r0, r6
 8008768:	f7ff ffa1 	bl	80086ae <__multadd>
 800876c:	45a0      	cmp	r8, r4
 800876e:	d1f5      	bne.n	800875c <__s2b+0x38>
 8008770:	f1a5 0408 	sub.w	r4, r5, #8
 8008774:	444c      	add	r4, r9
 8008776:	1b2d      	subs	r5, r5, r4
 8008778:	1963      	adds	r3, r4, r5
 800877a:	42bb      	cmp	r3, r7
 800877c:	db07      	blt.n	800878e <__s2b+0x6a>
 800877e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008782:	0052      	lsls	r2, r2, #1
 8008784:	3101      	adds	r1, #1
 8008786:	e7d9      	b.n	800873c <__s2b+0x18>
 8008788:	340a      	adds	r4, #10
 800878a:	2509      	movs	r5, #9
 800878c:	e7f3      	b.n	8008776 <__s2b+0x52>
 800878e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008792:	4601      	mov	r1, r0
 8008794:	3b30      	subs	r3, #48	; 0x30
 8008796:	220a      	movs	r2, #10
 8008798:	4630      	mov	r0, r6
 800879a:	f7ff ff88 	bl	80086ae <__multadd>
 800879e:	e7eb      	b.n	8008778 <__s2b+0x54>

080087a0 <__hi0bits>:
 80087a0:	0c02      	lsrs	r2, r0, #16
 80087a2:	0412      	lsls	r2, r2, #16
 80087a4:	4603      	mov	r3, r0
 80087a6:	b9b2      	cbnz	r2, 80087d6 <__hi0bits+0x36>
 80087a8:	0403      	lsls	r3, r0, #16
 80087aa:	2010      	movs	r0, #16
 80087ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80087b0:	bf04      	itt	eq
 80087b2:	021b      	lsleq	r3, r3, #8
 80087b4:	3008      	addeq	r0, #8
 80087b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80087ba:	bf04      	itt	eq
 80087bc:	011b      	lsleq	r3, r3, #4
 80087be:	3004      	addeq	r0, #4
 80087c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80087c4:	bf04      	itt	eq
 80087c6:	009b      	lsleq	r3, r3, #2
 80087c8:	3002      	addeq	r0, #2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	db06      	blt.n	80087dc <__hi0bits+0x3c>
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	d503      	bpl.n	80087da <__hi0bits+0x3a>
 80087d2:	3001      	adds	r0, #1
 80087d4:	4770      	bx	lr
 80087d6:	2000      	movs	r0, #0
 80087d8:	e7e8      	b.n	80087ac <__hi0bits+0xc>
 80087da:	2020      	movs	r0, #32
 80087dc:	4770      	bx	lr

080087de <__lo0bits>:
 80087de:	6803      	ldr	r3, [r0, #0]
 80087e0:	f013 0207 	ands.w	r2, r3, #7
 80087e4:	4601      	mov	r1, r0
 80087e6:	d00b      	beq.n	8008800 <__lo0bits+0x22>
 80087e8:	07da      	lsls	r2, r3, #31
 80087ea:	d423      	bmi.n	8008834 <__lo0bits+0x56>
 80087ec:	0798      	lsls	r0, r3, #30
 80087ee:	bf49      	itett	mi
 80087f0:	085b      	lsrmi	r3, r3, #1
 80087f2:	089b      	lsrpl	r3, r3, #2
 80087f4:	2001      	movmi	r0, #1
 80087f6:	600b      	strmi	r3, [r1, #0]
 80087f8:	bf5c      	itt	pl
 80087fa:	600b      	strpl	r3, [r1, #0]
 80087fc:	2002      	movpl	r0, #2
 80087fe:	4770      	bx	lr
 8008800:	b298      	uxth	r0, r3
 8008802:	b9a8      	cbnz	r0, 8008830 <__lo0bits+0x52>
 8008804:	0c1b      	lsrs	r3, r3, #16
 8008806:	2010      	movs	r0, #16
 8008808:	f013 0fff 	tst.w	r3, #255	; 0xff
 800880c:	bf04      	itt	eq
 800880e:	0a1b      	lsreq	r3, r3, #8
 8008810:	3008      	addeq	r0, #8
 8008812:	071a      	lsls	r2, r3, #28
 8008814:	bf04      	itt	eq
 8008816:	091b      	lsreq	r3, r3, #4
 8008818:	3004      	addeq	r0, #4
 800881a:	079a      	lsls	r2, r3, #30
 800881c:	bf04      	itt	eq
 800881e:	089b      	lsreq	r3, r3, #2
 8008820:	3002      	addeq	r0, #2
 8008822:	07da      	lsls	r2, r3, #31
 8008824:	d402      	bmi.n	800882c <__lo0bits+0x4e>
 8008826:	085b      	lsrs	r3, r3, #1
 8008828:	d006      	beq.n	8008838 <__lo0bits+0x5a>
 800882a:	3001      	adds	r0, #1
 800882c:	600b      	str	r3, [r1, #0]
 800882e:	4770      	bx	lr
 8008830:	4610      	mov	r0, r2
 8008832:	e7e9      	b.n	8008808 <__lo0bits+0x2a>
 8008834:	2000      	movs	r0, #0
 8008836:	4770      	bx	lr
 8008838:	2020      	movs	r0, #32
 800883a:	4770      	bx	lr

0800883c <__i2b>:
 800883c:	b510      	push	{r4, lr}
 800883e:	460c      	mov	r4, r1
 8008840:	2101      	movs	r1, #1
 8008842:	f7ff fee9 	bl	8008618 <_Balloc>
 8008846:	2201      	movs	r2, #1
 8008848:	6144      	str	r4, [r0, #20]
 800884a:	6102      	str	r2, [r0, #16]
 800884c:	bd10      	pop	{r4, pc}

0800884e <__multiply>:
 800884e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008852:	4614      	mov	r4, r2
 8008854:	690a      	ldr	r2, [r1, #16]
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	429a      	cmp	r2, r3
 800885a:	bfb8      	it	lt
 800885c:	460b      	movlt	r3, r1
 800885e:	4689      	mov	r9, r1
 8008860:	bfbc      	itt	lt
 8008862:	46a1      	movlt	r9, r4
 8008864:	461c      	movlt	r4, r3
 8008866:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800886a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800886e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008872:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008876:	eb07 060a 	add.w	r6, r7, sl
 800887a:	429e      	cmp	r6, r3
 800887c:	bfc8      	it	gt
 800887e:	3101      	addgt	r1, #1
 8008880:	f7ff feca 	bl	8008618 <_Balloc>
 8008884:	f100 0514 	add.w	r5, r0, #20
 8008888:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800888c:	462b      	mov	r3, r5
 800888e:	2200      	movs	r2, #0
 8008890:	4543      	cmp	r3, r8
 8008892:	d316      	bcc.n	80088c2 <__multiply+0x74>
 8008894:	f104 0214 	add.w	r2, r4, #20
 8008898:	f109 0114 	add.w	r1, r9, #20
 800889c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80088a0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	9c01      	ldr	r4, [sp, #4]
 80088a8:	4294      	cmp	r4, r2
 80088aa:	4613      	mov	r3, r2
 80088ac:	d80c      	bhi.n	80088c8 <__multiply+0x7a>
 80088ae:	2e00      	cmp	r6, #0
 80088b0:	dd03      	ble.n	80088ba <__multiply+0x6c>
 80088b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d054      	beq.n	8008964 <__multiply+0x116>
 80088ba:	6106      	str	r6, [r0, #16]
 80088bc:	b003      	add	sp, #12
 80088be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c2:	f843 2b04 	str.w	r2, [r3], #4
 80088c6:	e7e3      	b.n	8008890 <__multiply+0x42>
 80088c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80088cc:	3204      	adds	r2, #4
 80088ce:	f1ba 0f00 	cmp.w	sl, #0
 80088d2:	d020      	beq.n	8008916 <__multiply+0xc8>
 80088d4:	46ae      	mov	lr, r5
 80088d6:	4689      	mov	r9, r1
 80088d8:	f04f 0c00 	mov.w	ip, #0
 80088dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80088e0:	f8be b000 	ldrh.w	fp, [lr]
 80088e4:	b2a3      	uxth	r3, r4
 80088e6:	fb0a b303 	mla	r3, sl, r3, fp
 80088ea:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80088ee:	f8de 4000 	ldr.w	r4, [lr]
 80088f2:	4463      	add	r3, ip
 80088f4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80088f8:	fb0a c40b 	mla	r4, sl, fp, ip
 80088fc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008900:	b29b      	uxth	r3, r3
 8008902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008906:	454f      	cmp	r7, r9
 8008908:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800890c:	f84e 3b04 	str.w	r3, [lr], #4
 8008910:	d8e4      	bhi.n	80088dc <__multiply+0x8e>
 8008912:	f8ce c000 	str.w	ip, [lr]
 8008916:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800891a:	f1b9 0f00 	cmp.w	r9, #0
 800891e:	d01f      	beq.n	8008960 <__multiply+0x112>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	46ae      	mov	lr, r5
 8008924:	468c      	mov	ip, r1
 8008926:	f04f 0a00 	mov.w	sl, #0
 800892a:	f8bc 4000 	ldrh.w	r4, [ip]
 800892e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008932:	fb09 b404 	mla	r4, r9, r4, fp
 8008936:	44a2      	add	sl, r4
 8008938:	b29b      	uxth	r3, r3
 800893a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800893e:	f84e 3b04 	str.w	r3, [lr], #4
 8008942:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008946:	f8be 4000 	ldrh.w	r4, [lr]
 800894a:	0c1b      	lsrs	r3, r3, #16
 800894c:	fb09 4303 	mla	r3, r9, r3, r4
 8008950:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8008954:	4567      	cmp	r7, ip
 8008956:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800895a:	d8e6      	bhi.n	800892a <__multiply+0xdc>
 800895c:	f8ce 3000 	str.w	r3, [lr]
 8008960:	3504      	adds	r5, #4
 8008962:	e7a0      	b.n	80088a6 <__multiply+0x58>
 8008964:	3e01      	subs	r6, #1
 8008966:	e7a2      	b.n	80088ae <__multiply+0x60>

08008968 <__pow5mult>:
 8008968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800896c:	4615      	mov	r5, r2
 800896e:	f012 0203 	ands.w	r2, r2, #3
 8008972:	4606      	mov	r6, r0
 8008974:	460f      	mov	r7, r1
 8008976:	d007      	beq.n	8008988 <__pow5mult+0x20>
 8008978:	3a01      	subs	r2, #1
 800897a:	4c21      	ldr	r4, [pc, #132]	; (8008a00 <__pow5mult+0x98>)
 800897c:	2300      	movs	r3, #0
 800897e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008982:	f7ff fe94 	bl	80086ae <__multadd>
 8008986:	4607      	mov	r7, r0
 8008988:	10ad      	asrs	r5, r5, #2
 800898a:	d035      	beq.n	80089f8 <__pow5mult+0x90>
 800898c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800898e:	b93c      	cbnz	r4, 80089a0 <__pow5mult+0x38>
 8008990:	2010      	movs	r0, #16
 8008992:	f7ff fbe1 	bl	8008158 <malloc>
 8008996:	6270      	str	r0, [r6, #36]	; 0x24
 8008998:	6044      	str	r4, [r0, #4]
 800899a:	6084      	str	r4, [r0, #8]
 800899c:	6004      	str	r4, [r0, #0]
 800899e:	60c4      	str	r4, [r0, #12]
 80089a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089a8:	b94c      	cbnz	r4, 80089be <__pow5mult+0x56>
 80089aa:	f240 2171 	movw	r1, #625	; 0x271
 80089ae:	4630      	mov	r0, r6
 80089b0:	f7ff ff44 	bl	800883c <__i2b>
 80089b4:	2300      	movs	r3, #0
 80089b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80089ba:	4604      	mov	r4, r0
 80089bc:	6003      	str	r3, [r0, #0]
 80089be:	f04f 0800 	mov.w	r8, #0
 80089c2:	07eb      	lsls	r3, r5, #31
 80089c4:	d50a      	bpl.n	80089dc <__pow5mult+0x74>
 80089c6:	4639      	mov	r1, r7
 80089c8:	4622      	mov	r2, r4
 80089ca:	4630      	mov	r0, r6
 80089cc:	f7ff ff3f 	bl	800884e <__multiply>
 80089d0:	4639      	mov	r1, r7
 80089d2:	4681      	mov	r9, r0
 80089d4:	4630      	mov	r0, r6
 80089d6:	f7ff fe53 	bl	8008680 <_Bfree>
 80089da:	464f      	mov	r7, r9
 80089dc:	106d      	asrs	r5, r5, #1
 80089de:	d00b      	beq.n	80089f8 <__pow5mult+0x90>
 80089e0:	6820      	ldr	r0, [r4, #0]
 80089e2:	b938      	cbnz	r0, 80089f4 <__pow5mult+0x8c>
 80089e4:	4622      	mov	r2, r4
 80089e6:	4621      	mov	r1, r4
 80089e8:	4630      	mov	r0, r6
 80089ea:	f7ff ff30 	bl	800884e <__multiply>
 80089ee:	6020      	str	r0, [r4, #0]
 80089f0:	f8c0 8000 	str.w	r8, [r0]
 80089f4:	4604      	mov	r4, r0
 80089f6:	e7e4      	b.n	80089c2 <__pow5mult+0x5a>
 80089f8:	4638      	mov	r0, r7
 80089fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fe:	bf00      	nop
 8008a00:	0800b888 	.word	0x0800b888

08008a04 <__lshift>:
 8008a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a08:	460c      	mov	r4, r1
 8008a0a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a0e:	6923      	ldr	r3, [r4, #16]
 8008a10:	6849      	ldr	r1, [r1, #4]
 8008a12:	eb0a 0903 	add.w	r9, sl, r3
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	4607      	mov	r7, r0
 8008a1a:	4616      	mov	r6, r2
 8008a1c:	f109 0501 	add.w	r5, r9, #1
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	db31      	blt.n	8008a88 <__lshift+0x84>
 8008a24:	4638      	mov	r0, r7
 8008a26:	f7ff fdf7 	bl	8008618 <_Balloc>
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4680      	mov	r8, r0
 8008a2e:	f100 0314 	add.w	r3, r0, #20
 8008a32:	4611      	mov	r1, r2
 8008a34:	4552      	cmp	r2, sl
 8008a36:	db2a      	blt.n	8008a8e <__lshift+0x8a>
 8008a38:	6920      	ldr	r0, [r4, #16]
 8008a3a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a3e:	f104 0114 	add.w	r1, r4, #20
 8008a42:	f016 021f 	ands.w	r2, r6, #31
 8008a46:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008a4a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8008a4e:	d022      	beq.n	8008a96 <__lshift+0x92>
 8008a50:	f1c2 0c20 	rsb	ip, r2, #32
 8008a54:	2000      	movs	r0, #0
 8008a56:	680e      	ldr	r6, [r1, #0]
 8008a58:	4096      	lsls	r6, r2
 8008a5a:	4330      	orrs	r0, r6
 8008a5c:	f843 0b04 	str.w	r0, [r3], #4
 8008a60:	f851 0b04 	ldr.w	r0, [r1], #4
 8008a64:	458e      	cmp	lr, r1
 8008a66:	fa20 f00c 	lsr.w	r0, r0, ip
 8008a6a:	d8f4      	bhi.n	8008a56 <__lshift+0x52>
 8008a6c:	6018      	str	r0, [r3, #0]
 8008a6e:	b108      	cbz	r0, 8008a74 <__lshift+0x70>
 8008a70:	f109 0502 	add.w	r5, r9, #2
 8008a74:	3d01      	subs	r5, #1
 8008a76:	4638      	mov	r0, r7
 8008a78:	f8c8 5010 	str.w	r5, [r8, #16]
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	f7ff fdff 	bl	8008680 <_Bfree>
 8008a82:	4640      	mov	r0, r8
 8008a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a88:	3101      	adds	r1, #1
 8008a8a:	005b      	lsls	r3, r3, #1
 8008a8c:	e7c8      	b.n	8008a20 <__lshift+0x1c>
 8008a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008a92:	3201      	adds	r2, #1
 8008a94:	e7ce      	b.n	8008a34 <__lshift+0x30>
 8008a96:	3b04      	subs	r3, #4
 8008a98:	f851 2b04 	ldr.w	r2, [r1], #4
 8008a9c:	f843 2f04 	str.w	r2, [r3, #4]!
 8008aa0:	458e      	cmp	lr, r1
 8008aa2:	d8f9      	bhi.n	8008a98 <__lshift+0x94>
 8008aa4:	e7e6      	b.n	8008a74 <__lshift+0x70>

08008aa6 <__mcmp>:
 8008aa6:	6903      	ldr	r3, [r0, #16]
 8008aa8:	690a      	ldr	r2, [r1, #16]
 8008aaa:	1a9b      	subs	r3, r3, r2
 8008aac:	b530      	push	{r4, r5, lr}
 8008aae:	d10c      	bne.n	8008aca <__mcmp+0x24>
 8008ab0:	0092      	lsls	r2, r2, #2
 8008ab2:	3014      	adds	r0, #20
 8008ab4:	3114      	adds	r1, #20
 8008ab6:	1884      	adds	r4, r0, r2
 8008ab8:	4411      	add	r1, r2
 8008aba:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008abe:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ac2:	4295      	cmp	r5, r2
 8008ac4:	d003      	beq.n	8008ace <__mcmp+0x28>
 8008ac6:	d305      	bcc.n	8008ad4 <__mcmp+0x2e>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4618      	mov	r0, r3
 8008acc:	bd30      	pop	{r4, r5, pc}
 8008ace:	42a0      	cmp	r0, r4
 8008ad0:	d3f3      	bcc.n	8008aba <__mcmp+0x14>
 8008ad2:	e7fa      	b.n	8008aca <__mcmp+0x24>
 8008ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad8:	e7f7      	b.n	8008aca <__mcmp+0x24>

08008ada <__mdiff>:
 8008ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ade:	460d      	mov	r5, r1
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	4614      	mov	r4, r2
 8008ae8:	f7ff ffdd 	bl	8008aa6 <__mcmp>
 8008aec:	1e06      	subs	r6, r0, #0
 8008aee:	d108      	bne.n	8008b02 <__mdiff+0x28>
 8008af0:	4631      	mov	r1, r6
 8008af2:	4638      	mov	r0, r7
 8008af4:	f7ff fd90 	bl	8008618 <_Balloc>
 8008af8:	2301      	movs	r3, #1
 8008afa:	6103      	str	r3, [r0, #16]
 8008afc:	6146      	str	r6, [r0, #20]
 8008afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b02:	bfa4      	itt	ge
 8008b04:	4623      	movge	r3, r4
 8008b06:	462c      	movge	r4, r5
 8008b08:	4638      	mov	r0, r7
 8008b0a:	6861      	ldr	r1, [r4, #4]
 8008b0c:	bfa6      	itte	ge
 8008b0e:	461d      	movge	r5, r3
 8008b10:	2600      	movge	r6, #0
 8008b12:	2601      	movlt	r6, #1
 8008b14:	f7ff fd80 	bl	8008618 <_Balloc>
 8008b18:	692b      	ldr	r3, [r5, #16]
 8008b1a:	60c6      	str	r6, [r0, #12]
 8008b1c:	6926      	ldr	r6, [r4, #16]
 8008b1e:	f105 0914 	add.w	r9, r5, #20
 8008b22:	f104 0214 	add.w	r2, r4, #20
 8008b26:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008b2a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008b2e:	f100 0514 	add.w	r5, r0, #20
 8008b32:	f04f 0c00 	mov.w	ip, #0
 8008b36:	f852 ab04 	ldr.w	sl, [r2], #4
 8008b3a:	f859 4b04 	ldr.w	r4, [r9], #4
 8008b3e:	fa1c f18a 	uxtah	r1, ip, sl
 8008b42:	b2a3      	uxth	r3, r4
 8008b44:	1ac9      	subs	r1, r1, r3
 8008b46:	0c23      	lsrs	r3, r4, #16
 8008b48:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008b4c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008b50:	b289      	uxth	r1, r1
 8008b52:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008b56:	45c8      	cmp	r8, r9
 8008b58:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008b5c:	4696      	mov	lr, r2
 8008b5e:	f845 3b04 	str.w	r3, [r5], #4
 8008b62:	d8e8      	bhi.n	8008b36 <__mdiff+0x5c>
 8008b64:	45be      	cmp	lr, r7
 8008b66:	d305      	bcc.n	8008b74 <__mdiff+0x9a>
 8008b68:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008b6c:	b18b      	cbz	r3, 8008b92 <__mdiff+0xb8>
 8008b6e:	6106      	str	r6, [r0, #16]
 8008b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b74:	f85e 1b04 	ldr.w	r1, [lr], #4
 8008b78:	fa1c f381 	uxtah	r3, ip, r1
 8008b7c:	141a      	asrs	r2, r3, #16
 8008b7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b8c:	f845 3b04 	str.w	r3, [r5], #4
 8008b90:	e7e8      	b.n	8008b64 <__mdiff+0x8a>
 8008b92:	3e01      	subs	r6, #1
 8008b94:	e7e8      	b.n	8008b68 <__mdiff+0x8e>
	...

08008b98 <__ulp>:
 8008b98:	4b12      	ldr	r3, [pc, #72]	; (8008be4 <__ulp+0x4c>)
 8008b9a:	ee10 2a90 	vmov	r2, s1
 8008b9e:	401a      	ands	r2, r3
 8008ba0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	dd04      	ble.n	8008bb2 <__ulp+0x1a>
 8008ba8:	2000      	movs	r0, #0
 8008baa:	4619      	mov	r1, r3
 8008bac:	ec41 0b10 	vmov	d0, r0, r1
 8008bb0:	4770      	bx	lr
 8008bb2:	425b      	negs	r3, r3
 8008bb4:	151b      	asrs	r3, r3, #20
 8008bb6:	2b13      	cmp	r3, #19
 8008bb8:	f04f 0000 	mov.w	r0, #0
 8008bbc:	f04f 0100 	mov.w	r1, #0
 8008bc0:	dc04      	bgt.n	8008bcc <__ulp+0x34>
 8008bc2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008bc6:	fa42 f103 	asr.w	r1, r2, r3
 8008bca:	e7ef      	b.n	8008bac <__ulp+0x14>
 8008bcc:	3b14      	subs	r3, #20
 8008bce:	2b1e      	cmp	r3, #30
 8008bd0:	f04f 0201 	mov.w	r2, #1
 8008bd4:	bfda      	itte	le
 8008bd6:	f1c3 031f 	rsble	r3, r3, #31
 8008bda:	fa02 f303 	lslle.w	r3, r2, r3
 8008bde:	4613      	movgt	r3, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	e7e3      	b.n	8008bac <__ulp+0x14>
 8008be4:	7ff00000 	.word	0x7ff00000

08008be8 <__b2d>:
 8008be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bea:	6905      	ldr	r5, [r0, #16]
 8008bec:	f100 0714 	add.w	r7, r0, #20
 8008bf0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008bf4:	1f2e      	subs	r6, r5, #4
 8008bf6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f7ff fdd0 	bl	80087a0 <__hi0bits>
 8008c00:	f1c0 0320 	rsb	r3, r0, #32
 8008c04:	280a      	cmp	r0, #10
 8008c06:	600b      	str	r3, [r1, #0]
 8008c08:	f8df e074 	ldr.w	lr, [pc, #116]	; 8008c80 <__b2d+0x98>
 8008c0c:	dc14      	bgt.n	8008c38 <__b2d+0x50>
 8008c0e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008c12:	fa24 f10c 	lsr.w	r1, r4, ip
 8008c16:	42b7      	cmp	r7, r6
 8008c18:	ea41 030e 	orr.w	r3, r1, lr
 8008c1c:	bf34      	ite	cc
 8008c1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c22:	2100      	movcs	r1, #0
 8008c24:	3015      	adds	r0, #21
 8008c26:	fa04 f000 	lsl.w	r0, r4, r0
 8008c2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8008c2e:	ea40 0201 	orr.w	r2, r0, r1
 8008c32:	ec43 2b10 	vmov	d0, r2, r3
 8008c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c38:	42b7      	cmp	r7, r6
 8008c3a:	bf3a      	itte	cc
 8008c3c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008c40:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c44:	2100      	movcs	r1, #0
 8008c46:	380b      	subs	r0, #11
 8008c48:	d015      	beq.n	8008c76 <__b2d+0x8e>
 8008c4a:	4084      	lsls	r4, r0
 8008c4c:	f1c0 0520 	rsb	r5, r0, #32
 8008c50:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008c54:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008c58:	42be      	cmp	r6, r7
 8008c5a:	fa21 fe05 	lsr.w	lr, r1, r5
 8008c5e:	ea44 030e 	orr.w	r3, r4, lr
 8008c62:	bf8c      	ite	hi
 8008c64:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008c68:	2400      	movls	r4, #0
 8008c6a:	fa01 f000 	lsl.w	r0, r1, r0
 8008c6e:	40ec      	lsrs	r4, r5
 8008c70:	ea40 0204 	orr.w	r2, r0, r4
 8008c74:	e7dd      	b.n	8008c32 <__b2d+0x4a>
 8008c76:	ea44 030e 	orr.w	r3, r4, lr
 8008c7a:	460a      	mov	r2, r1
 8008c7c:	e7d9      	b.n	8008c32 <__b2d+0x4a>
 8008c7e:	bf00      	nop
 8008c80:	3ff00000 	.word	0x3ff00000

08008c84 <__d2b>:
 8008c84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c88:	460e      	mov	r6, r1
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	ec59 8b10 	vmov	r8, r9, d0
 8008c90:	4615      	mov	r5, r2
 8008c92:	f7ff fcc1 	bl	8008618 <_Balloc>
 8008c96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008c9a:	4607      	mov	r7, r0
 8008c9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ca0:	bb34      	cbnz	r4, 8008cf0 <__d2b+0x6c>
 8008ca2:	9301      	str	r3, [sp, #4]
 8008ca4:	f1b8 0f00 	cmp.w	r8, #0
 8008ca8:	d027      	beq.n	8008cfa <__d2b+0x76>
 8008caa:	a802      	add	r0, sp, #8
 8008cac:	f840 8d08 	str.w	r8, [r0, #-8]!
 8008cb0:	f7ff fd95 	bl	80087de <__lo0bits>
 8008cb4:	9900      	ldr	r1, [sp, #0]
 8008cb6:	b1f0      	cbz	r0, 8008cf6 <__d2b+0x72>
 8008cb8:	9a01      	ldr	r2, [sp, #4]
 8008cba:	f1c0 0320 	rsb	r3, r0, #32
 8008cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc2:	430b      	orrs	r3, r1
 8008cc4:	40c2      	lsrs	r2, r0
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	9201      	str	r2, [sp, #4]
 8008cca:	9b01      	ldr	r3, [sp, #4]
 8008ccc:	61bb      	str	r3, [r7, #24]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	bf14      	ite	ne
 8008cd2:	2102      	movne	r1, #2
 8008cd4:	2101      	moveq	r1, #1
 8008cd6:	6139      	str	r1, [r7, #16]
 8008cd8:	b1c4      	cbz	r4, 8008d0c <__d2b+0x88>
 8008cda:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008cde:	4404      	add	r4, r0
 8008ce0:	6034      	str	r4, [r6, #0]
 8008ce2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ce6:	6028      	str	r0, [r5, #0]
 8008ce8:	4638      	mov	r0, r7
 8008cea:	b003      	add	sp, #12
 8008cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cf4:	e7d5      	b.n	8008ca2 <__d2b+0x1e>
 8008cf6:	6179      	str	r1, [r7, #20]
 8008cf8:	e7e7      	b.n	8008cca <__d2b+0x46>
 8008cfa:	a801      	add	r0, sp, #4
 8008cfc:	f7ff fd6f 	bl	80087de <__lo0bits>
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	2101      	movs	r1, #1
 8008d06:	6139      	str	r1, [r7, #16]
 8008d08:	3020      	adds	r0, #32
 8008d0a:	e7e5      	b.n	8008cd8 <__d2b+0x54>
 8008d0c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008d10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d14:	6030      	str	r0, [r6, #0]
 8008d16:	6918      	ldr	r0, [r3, #16]
 8008d18:	f7ff fd42 	bl	80087a0 <__hi0bits>
 8008d1c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008d20:	e7e1      	b.n	8008ce6 <__d2b+0x62>

08008d22 <__ratio>:
 8008d22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d26:	4688      	mov	r8, r1
 8008d28:	4669      	mov	r1, sp
 8008d2a:	4681      	mov	r9, r0
 8008d2c:	f7ff ff5c 	bl	8008be8 <__b2d>
 8008d30:	a901      	add	r1, sp, #4
 8008d32:	4640      	mov	r0, r8
 8008d34:	ec55 4b10 	vmov	r4, r5, d0
 8008d38:	f7ff ff56 	bl	8008be8 <__b2d>
 8008d3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d40:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d44:	1a9a      	subs	r2, r3, r2
 8008d46:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8008d4a:	1acb      	subs	r3, r1, r3
 8008d4c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008d50:	ec57 6b10 	vmov	r6, r7, d0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	bfd6      	itet	le
 8008d58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d5c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8008d60:	eb07 5703 	addle.w	r7, r7, r3, lsl #20
 8008d64:	4632      	mov	r2, r6
 8008d66:	463b      	mov	r3, r7
 8008d68:	4620      	mov	r0, r4
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	f7f7 fd8a 	bl	8000884 <__aeabi_ddiv>
 8008d70:	ec41 0b10 	vmov	d0, r0, r1
 8008d74:	b003      	add	sp, #12
 8008d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008d7a <__copybits>:
 8008d7a:	3901      	subs	r1, #1
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	1149      	asrs	r1, r1, #5
 8008d80:	6914      	ldr	r4, [r2, #16]
 8008d82:	3101      	adds	r1, #1
 8008d84:	f102 0314 	add.w	r3, r2, #20
 8008d88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	4602      	mov	r2, r0
 8008d94:	d303      	bcc.n	8008d9e <__copybits+0x24>
 8008d96:	2300      	movs	r3, #0
 8008d98:	428a      	cmp	r2, r1
 8008d9a:	d305      	bcc.n	8008da8 <__copybits+0x2e>
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008da2:	f840 2b04 	str.w	r2, [r0], #4
 8008da6:	e7f3      	b.n	8008d90 <__copybits+0x16>
 8008da8:	f842 3b04 	str.w	r3, [r2], #4
 8008dac:	e7f4      	b.n	8008d98 <__copybits+0x1e>

08008dae <__any_on>:
 8008dae:	f100 0214 	add.w	r2, r0, #20
 8008db2:	6900      	ldr	r0, [r0, #16]
 8008db4:	114b      	asrs	r3, r1, #5
 8008db6:	4298      	cmp	r0, r3
 8008db8:	b510      	push	{r4, lr}
 8008dba:	db11      	blt.n	8008de0 <__any_on+0x32>
 8008dbc:	dd0a      	ble.n	8008dd4 <__any_on+0x26>
 8008dbe:	f011 011f 	ands.w	r1, r1, #31
 8008dc2:	d007      	beq.n	8008dd4 <__any_on+0x26>
 8008dc4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008dc8:	fa24 f001 	lsr.w	r0, r4, r1
 8008dcc:	fa00 f101 	lsl.w	r1, r0, r1
 8008dd0:	428c      	cmp	r4, r1
 8008dd2:	d10b      	bne.n	8008dec <__any_on+0x3e>
 8008dd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d803      	bhi.n	8008de4 <__any_on+0x36>
 8008ddc:	2000      	movs	r0, #0
 8008dde:	bd10      	pop	{r4, pc}
 8008de0:	4603      	mov	r3, r0
 8008de2:	e7f7      	b.n	8008dd4 <__any_on+0x26>
 8008de4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008de8:	2900      	cmp	r1, #0
 8008dea:	d0f5      	beq.n	8008dd8 <__any_on+0x2a>
 8008dec:	2001      	movs	r0, #1
 8008dee:	bd10      	pop	{r4, pc}

08008df0 <_sbrk_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4c06      	ldr	r4, [pc, #24]	; (8008e0c <_sbrk_r+0x1c>)
 8008df4:	2300      	movs	r3, #0
 8008df6:	4605      	mov	r5, r0
 8008df8:	4608      	mov	r0, r1
 8008dfa:	6023      	str	r3, [r4, #0]
 8008dfc:	f002 f864 	bl	800aec8 <_sbrk>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d102      	bne.n	8008e0a <_sbrk_r+0x1a>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	b103      	cbz	r3, 8008e0a <_sbrk_r+0x1a>
 8008e08:	602b      	str	r3, [r5, #0]
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
 8008e0c:	20000e8c 	.word	0x20000e8c

08008e10 <__sccl>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	780b      	ldrb	r3, [r1, #0]
 8008e14:	2b5e      	cmp	r3, #94	; 0x5e
 8008e16:	bf13      	iteet	ne
 8008e18:	1c4a      	addne	r2, r1, #1
 8008e1a:	1c8a      	addeq	r2, r1, #2
 8008e1c:	784b      	ldrbeq	r3, [r1, #1]
 8008e1e:	2100      	movne	r1, #0
 8008e20:	bf08      	it	eq
 8008e22:	2101      	moveq	r1, #1
 8008e24:	1e44      	subs	r4, r0, #1
 8008e26:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8008e2a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8008e2e:	42a5      	cmp	r5, r4
 8008e30:	d1fb      	bne.n	8008e2a <__sccl+0x1a>
 8008e32:	b913      	cbnz	r3, 8008e3a <__sccl+0x2a>
 8008e34:	3a01      	subs	r2, #1
 8008e36:	4610      	mov	r0, r2
 8008e38:	bd70      	pop	{r4, r5, r6, pc}
 8008e3a:	f081 0401 	eor.w	r4, r1, #1
 8008e3e:	54c4      	strb	r4, [r0, r3]
 8008e40:	4611      	mov	r1, r2
 8008e42:	780d      	ldrb	r5, [r1, #0]
 8008e44:	2d2d      	cmp	r5, #45	; 0x2d
 8008e46:	f101 0201 	add.w	r2, r1, #1
 8008e4a:	d006      	beq.n	8008e5a <__sccl+0x4a>
 8008e4c:	2d5d      	cmp	r5, #93	; 0x5d
 8008e4e:	d0f2      	beq.n	8008e36 <__sccl+0x26>
 8008e50:	b90d      	cbnz	r5, 8008e56 <__sccl+0x46>
 8008e52:	460a      	mov	r2, r1
 8008e54:	e7ef      	b.n	8008e36 <__sccl+0x26>
 8008e56:	462b      	mov	r3, r5
 8008e58:	e7f1      	b.n	8008e3e <__sccl+0x2e>
 8008e5a:	784e      	ldrb	r6, [r1, #1]
 8008e5c:	2e5d      	cmp	r6, #93	; 0x5d
 8008e5e:	d0fa      	beq.n	8008e56 <__sccl+0x46>
 8008e60:	42b3      	cmp	r3, r6
 8008e62:	dcf8      	bgt.n	8008e56 <__sccl+0x46>
 8008e64:	3102      	adds	r1, #2
 8008e66:	3301      	adds	r3, #1
 8008e68:	429e      	cmp	r6, r3
 8008e6a:	54c4      	strb	r4, [r0, r3]
 8008e6c:	dcfb      	bgt.n	8008e66 <__sccl+0x56>
 8008e6e:	e7e8      	b.n	8008e42 <__sccl+0x32>

08008e70 <nanf>:
 8008e70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e78 <nanf+0x8>
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	7fc00000 	.word	0x7fc00000

08008e7c <sprintf>:
 8008e7c:	b40e      	push	{r1, r2, r3}
 8008e7e:	b500      	push	{lr}
 8008e80:	b09c      	sub	sp, #112	; 0x70
 8008e82:	f44f 7102 	mov.w	r1, #520	; 0x208
 8008e86:	ab1d      	add	r3, sp, #116	; 0x74
 8008e88:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008e8c:	9002      	str	r0, [sp, #8]
 8008e8e:	9006      	str	r0, [sp, #24]
 8008e90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e94:	480a      	ldr	r0, [pc, #40]	; (8008ec0 <sprintf+0x44>)
 8008e96:	9104      	str	r1, [sp, #16]
 8008e98:	9107      	str	r1, [sp, #28]
 8008e9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8008ea6:	6800      	ldr	r0, [r0, #0]
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	a902      	add	r1, sp, #8
 8008eac:	f7fc fd70 	bl	8005990 <_svfprintf_r>
 8008eb0:	9b02      	ldr	r3, [sp, #8]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	701a      	strb	r2, [r3, #0]
 8008eb6:	b01c      	add	sp, #112	; 0x70
 8008eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ebc:	b003      	add	sp, #12
 8008ebe:	4770      	bx	lr
 8008ec0:	2000000c 	.word	0x2000000c

08008ec4 <sulp>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	460d      	mov	r5, r1
 8008eca:	ec45 4b10 	vmov	d0, r4, r5
 8008ece:	4616      	mov	r6, r2
 8008ed0:	f7ff fe62 	bl	8008b98 <__ulp>
 8008ed4:	ec51 0b10 	vmov	r0, r1, d0
 8008ed8:	b17e      	cbz	r6, 8008efa <sulp+0x36>
 8008eda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ede:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	dd09      	ble.n	8008efa <sulp+0x36>
 8008ee6:	051b      	lsls	r3, r3, #20
 8008ee8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008eec:	2400      	movs	r4, #0
 8008eee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	462b      	mov	r3, r5
 8008ef6:	f7f7 fb9b 	bl	8000630 <__aeabi_dmul>
 8008efa:	bd70      	pop	{r4, r5, r6, pc}
 8008efc:	0000      	movs	r0, r0
	...

08008f00 <_strtod_l>:
 8008f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	b09f      	sub	sp, #124	; 0x7c
 8008f06:	4698      	mov	r8, r3
 8008f08:	9004      	str	r0, [sp, #16]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	460c      	mov	r4, r1
 8008f10:	9215      	str	r2, [sp, #84]	; 0x54
 8008f12:	931a      	str	r3, [sp, #104]	; 0x68
 8008f14:	f7ff f910 	bl	8008138 <__localeconv_l>
 8008f18:	4607      	mov	r7, r0
 8008f1a:	6800      	ldr	r0, [r0, #0]
 8008f1c:	f7f7 f978 	bl	8000210 <strlen>
 8008f20:	f04f 0a00 	mov.w	sl, #0
 8008f24:	4605      	mov	r5, r0
 8008f26:	f04f 0b00 	mov.w	fp, #0
 8008f2a:	9419      	str	r4, [sp, #100]	; 0x64
 8008f2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f2e:	781a      	ldrb	r2, [r3, #0]
 8008f30:	2a0d      	cmp	r2, #13
 8008f32:	d833      	bhi.n	8008f9c <_strtod_l+0x9c>
 8008f34:	2a09      	cmp	r2, #9
 8008f36:	d237      	bcs.n	8008fa8 <_strtod_l+0xa8>
 8008f38:	2a00      	cmp	r2, #0
 8008f3a:	d03f      	beq.n	8008fbc <_strtod_l+0xbc>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f40:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008f42:	7833      	ldrb	r3, [r6, #0]
 8008f44:	2b30      	cmp	r3, #48	; 0x30
 8008f46:	f040 8103 	bne.w	8009150 <_strtod_l+0x250>
 8008f4a:	7873      	ldrb	r3, [r6, #1]
 8008f4c:	2b58      	cmp	r3, #88	; 0x58
 8008f4e:	d001      	beq.n	8008f54 <_strtod_l+0x54>
 8008f50:	2b78      	cmp	r3, #120	; 0x78
 8008f52:	d16b      	bne.n	800902c <_strtod_l+0x12c>
 8008f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	ab1a      	add	r3, sp, #104	; 0x68
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	f8cd 8008 	str.w	r8, [sp, #8]
 8008f60:	ab1b      	add	r3, sp, #108	; 0x6c
 8008f62:	4aad      	ldr	r2, [pc, #692]	; (8009218 <_strtod_l+0x318>)
 8008f64:	9804      	ldr	r0, [sp, #16]
 8008f66:	a919      	add	r1, sp, #100	; 0x64
 8008f68:	f001 fb2c 	bl	800a5c4 <__gethex>
 8008f6c:	f010 0407 	ands.w	r4, r0, #7
 8008f70:	4605      	mov	r5, r0
 8008f72:	d005      	beq.n	8008f80 <_strtod_l+0x80>
 8008f74:	2c06      	cmp	r4, #6
 8008f76:	d12b      	bne.n	8008fd0 <_strtod_l+0xd0>
 8008f78:	3601      	adds	r6, #1
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9619      	str	r6, [sp, #100]	; 0x64
 8008f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f040 8590 	bne.w	8009aa8 <_strtod_l+0xba8>
 8008f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8a:	b1e3      	cbz	r3, 8008fc6 <_strtod_l+0xc6>
 8008f8c:	4652      	mov	r2, sl
 8008f8e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f92:	ec43 2b10 	vmov	d0, r2, r3
 8008f96:	b01f      	add	sp, #124	; 0x7c
 8008f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9c:	2a2b      	cmp	r2, #43	; 0x2b
 8008f9e:	d006      	beq.n	8008fae <_strtod_l+0xae>
 8008fa0:	2a2d      	cmp	r2, #45	; 0x2d
 8008fa2:	d013      	beq.n	8008fcc <_strtod_l+0xcc>
 8008fa4:	2a20      	cmp	r2, #32
 8008fa6:	d1c9      	bne.n	8008f3c <_strtod_l+0x3c>
 8008fa8:	3301      	adds	r3, #1
 8008faa:	9319      	str	r3, [sp, #100]	; 0x64
 8008fac:	e7be      	b.n	8008f2c <_strtod_l+0x2c>
 8008fae:	2200      	movs	r2, #0
 8008fb0:	9209      	str	r2, [sp, #36]	; 0x24
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	9219      	str	r2, [sp, #100]	; 0x64
 8008fb6:	785b      	ldrb	r3, [r3, #1]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1c1      	bne.n	8008f40 <_strtod_l+0x40>
 8008fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fbe:	9419      	str	r4, [sp, #100]	; 0x64
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f040 856f 	bne.w	8009aa4 <_strtod_l+0xba4>
 8008fc6:	4652      	mov	r2, sl
 8008fc8:	465b      	mov	r3, fp
 8008fca:	e7e2      	b.n	8008f92 <_strtod_l+0x92>
 8008fcc:	2201      	movs	r2, #1
 8008fce:	e7ef      	b.n	8008fb0 <_strtod_l+0xb0>
 8008fd0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008fd2:	b13a      	cbz	r2, 8008fe4 <_strtod_l+0xe4>
 8008fd4:	2135      	movs	r1, #53	; 0x35
 8008fd6:	a81c      	add	r0, sp, #112	; 0x70
 8008fd8:	f7ff fecf 	bl	8008d7a <__copybits>
 8008fdc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008fde:	9804      	ldr	r0, [sp, #16]
 8008fe0:	f7ff fb4e 	bl	8008680 <_Bfree>
 8008fe4:	3c01      	subs	r4, #1
 8008fe6:	2c04      	cmp	r4, #4
 8008fe8:	d808      	bhi.n	8008ffc <_strtod_l+0xfc>
 8008fea:	e8df f004 	tbb	[pc, r4]
 8008fee:	030c      	.short	0x030c
 8008ff0:	1a17      	.short	0x1a17
 8008ff2:	0c          	.byte	0x0c
 8008ff3:	00          	.byte	0x00
 8008ff4:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8008ff8:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8008ffc:	0729      	lsls	r1, r5, #28
 8008ffe:	d5bf      	bpl.n	8008f80 <_strtod_l+0x80>
 8009000:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009004:	e7bc      	b.n	8008f80 <_strtod_l+0x80>
 8009006:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009008:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800900a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800900e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009012:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009016:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800901a:	e7ef      	b.n	8008ffc <_strtod_l+0xfc>
 800901c:	f8df b204 	ldr.w	fp, [pc, #516]	; 8009224 <_strtod_l+0x324>
 8009020:	e7ec      	b.n	8008ffc <_strtod_l+0xfc>
 8009022:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009026:	f04f 3aff 	mov.w	sl, #4294967295
 800902a:	e7e7      	b.n	8008ffc <_strtod_l+0xfc>
 800902c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	9219      	str	r2, [sp, #100]	; 0x64
 8009032:	785b      	ldrb	r3, [r3, #1]
 8009034:	2b30      	cmp	r3, #48	; 0x30
 8009036:	d0f9      	beq.n	800902c <_strtod_l+0x12c>
 8009038:	2b00      	cmp	r3, #0
 800903a:	d0a1      	beq.n	8008f80 <_strtod_l+0x80>
 800903c:	2301      	movs	r3, #1
 800903e:	f04f 0900 	mov.w	r9, #0
 8009042:	9308      	str	r3, [sp, #32]
 8009044:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009046:	930a      	str	r3, [sp, #40]	; 0x28
 8009048:	f8cd 901c 	str.w	r9, [sp, #28]
 800904c:	f8cd 9018 	str.w	r9, [sp, #24]
 8009050:	220a      	movs	r2, #10
 8009052:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009054:	7806      	ldrb	r6, [r0, #0]
 8009056:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800905a:	b2d9      	uxtb	r1, r3
 800905c:	2909      	cmp	r1, #9
 800905e:	d979      	bls.n	8009154 <_strtod_l+0x254>
 8009060:	462a      	mov	r2, r5
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	f001 ff1e 	bl	800aea4 <strncmp>
 8009068:	2800      	cmp	r0, #0
 800906a:	f000 8082 	beq.w	8009172 <_strtod_l+0x272>
 800906e:	2000      	movs	r0, #0
 8009070:	9d06      	ldr	r5, [sp, #24]
 8009072:	4633      	mov	r3, r6
 8009074:	4602      	mov	r2, r0
 8009076:	4601      	mov	r1, r0
 8009078:	2b65      	cmp	r3, #101	; 0x65
 800907a:	d002      	beq.n	8009082 <_strtod_l+0x182>
 800907c:	2b45      	cmp	r3, #69	; 0x45
 800907e:	f040 80e8 	bne.w	8009252 <_strtod_l+0x352>
 8009082:	b925      	cbnz	r5, 800908e <_strtod_l+0x18e>
 8009084:	b910      	cbnz	r0, 800908c <_strtod_l+0x18c>
 8009086:	9b08      	ldr	r3, [sp, #32]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d097      	beq.n	8008fbc <_strtod_l+0xbc>
 800908c:	2500      	movs	r5, #0
 800908e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8009090:	1c63      	adds	r3, r4, #1
 8009092:	9319      	str	r3, [sp, #100]	; 0x64
 8009094:	7863      	ldrb	r3, [r4, #1]
 8009096:	2b2b      	cmp	r3, #43	; 0x2b
 8009098:	f000 80c8 	beq.w	800922c <_strtod_l+0x32c>
 800909c:	2b2d      	cmp	r3, #45	; 0x2d
 800909e:	f000 80cb 	beq.w	8009238 <_strtod_l+0x338>
 80090a2:	2600      	movs	r6, #0
 80090a4:	9605      	str	r6, [sp, #20]
 80090a6:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80090aa:	2e09      	cmp	r6, #9
 80090ac:	f200 80d0 	bhi.w	8009250 <_strtod_l+0x350>
 80090b0:	2b30      	cmp	r3, #48	; 0x30
 80090b2:	f000 80c3 	beq.w	800923c <_strtod_l+0x33c>
 80090b6:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80090ba:	2e08      	cmp	r6, #8
 80090bc:	f200 80c9 	bhi.w	8009252 <_strtod_l+0x352>
 80090c0:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80090c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090c6:	f04f 0c0a 	mov.w	ip, #10
 80090ca:	461f      	mov	r7, r3
 80090cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090ce:	1c5e      	adds	r6, r3, #1
 80090d0:	9619      	str	r6, [sp, #100]	; 0x64
 80090d2:	785b      	ldrb	r3, [r3, #1]
 80090d4:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80090d8:	f1b8 0f09 	cmp.w	r8, #9
 80090dc:	f240 80b3 	bls.w	8009246 <_strtod_l+0x346>
 80090e0:	1bf6      	subs	r6, r6, r7
 80090e2:	2e08      	cmp	r6, #8
 80090e4:	f644 681f 	movw	r8, #19999	; 0x4e1f
 80090e8:	dc02      	bgt.n	80090f0 <_strtod_l+0x1f0>
 80090ea:	45f0      	cmp	r8, lr
 80090ec:	bfa8      	it	ge
 80090ee:	46f0      	movge	r8, lr
 80090f0:	9e05      	ldr	r6, [sp, #20]
 80090f2:	b10e      	cbz	r6, 80090f8 <_strtod_l+0x1f8>
 80090f4:	f1c8 0800 	rsb	r8, r8, #0
 80090f8:	2d00      	cmp	r5, #0
 80090fa:	f040 80d0 	bne.w	800929e <_strtod_l+0x39e>
 80090fe:	2800      	cmp	r0, #0
 8009100:	f47f af3e 	bne.w	8008f80 <_strtod_l+0x80>
 8009104:	9a08      	ldr	r2, [sp, #32]
 8009106:	2a00      	cmp	r2, #0
 8009108:	f47f af3a 	bne.w	8008f80 <_strtod_l+0x80>
 800910c:	2900      	cmp	r1, #0
 800910e:	f47f af55 	bne.w	8008fbc <_strtod_l+0xbc>
 8009112:	2b4e      	cmp	r3, #78	; 0x4e
 8009114:	f000 80a6 	beq.w	8009264 <_strtod_l+0x364>
 8009118:	f300 809e 	bgt.w	8009258 <_strtod_l+0x358>
 800911c:	2b49      	cmp	r3, #73	; 0x49
 800911e:	f47f af4d 	bne.w	8008fbc <_strtod_l+0xbc>
 8009122:	493e      	ldr	r1, [pc, #248]	; (800921c <_strtod_l+0x31c>)
 8009124:	a819      	add	r0, sp, #100	; 0x64
 8009126:	f001 fc7d 	bl	800aa24 <__match>
 800912a:	2800      	cmp	r0, #0
 800912c:	f43f af46 	beq.w	8008fbc <_strtod_l+0xbc>
 8009130:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009132:	493b      	ldr	r1, [pc, #236]	; (8009220 <_strtod_l+0x320>)
 8009134:	3b01      	subs	r3, #1
 8009136:	a819      	add	r0, sp, #100	; 0x64
 8009138:	9319      	str	r3, [sp, #100]	; 0x64
 800913a:	f001 fc73 	bl	800aa24 <__match>
 800913e:	b910      	cbnz	r0, 8009146 <_strtod_l+0x246>
 8009140:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009142:	3301      	adds	r3, #1
 8009144:	9319      	str	r3, [sp, #100]	; 0x64
 8009146:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8009224 <_strtod_l+0x324>
 800914a:	f04f 0a00 	mov.w	sl, #0
 800914e:	e717      	b.n	8008f80 <_strtod_l+0x80>
 8009150:	2300      	movs	r3, #0
 8009152:	e774      	b.n	800903e <_strtod_l+0x13e>
 8009154:	9906      	ldr	r1, [sp, #24]
 8009156:	2908      	cmp	r1, #8
 8009158:	bfdd      	ittte	le
 800915a:	9907      	ldrle	r1, [sp, #28]
 800915c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009160:	9307      	strle	r3, [sp, #28]
 8009162:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009166:	9b06      	ldr	r3, [sp, #24]
 8009168:	3001      	adds	r0, #1
 800916a:	3301      	adds	r3, #1
 800916c:	9306      	str	r3, [sp, #24]
 800916e:	9019      	str	r0, [sp, #100]	; 0x64
 8009170:	e76f      	b.n	8009052 <_strtod_l+0x152>
 8009172:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009174:	195a      	adds	r2, r3, r5
 8009176:	9219      	str	r2, [sp, #100]	; 0x64
 8009178:	9a06      	ldr	r2, [sp, #24]
 800917a:	5d5b      	ldrb	r3, [r3, r5]
 800917c:	2a00      	cmp	r2, #0
 800917e:	d148      	bne.n	8009212 <_strtod_l+0x312>
 8009180:	4610      	mov	r0, r2
 8009182:	2b30      	cmp	r3, #48	; 0x30
 8009184:	d02a      	beq.n	80091dc <_strtod_l+0x2dc>
 8009186:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800918a:	2a08      	cmp	r2, #8
 800918c:	f200 8491 	bhi.w	8009ab2 <_strtod_l+0xbb2>
 8009190:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009192:	920a      	str	r2, [sp, #40]	; 0x28
 8009194:	4602      	mov	r2, r0
 8009196:	2000      	movs	r0, #0
 8009198:	4605      	mov	r5, r0
 800919a:	3b30      	subs	r3, #48	; 0x30
 800919c:	f100 0101 	add.w	r1, r0, #1
 80091a0:	d011      	beq.n	80091c6 <_strtod_l+0x2c6>
 80091a2:	440a      	add	r2, r1
 80091a4:	eb00 0c05 	add.w	ip, r0, r5
 80091a8:	4629      	mov	r1, r5
 80091aa:	260a      	movs	r6, #10
 80091ac:	4561      	cmp	r1, ip
 80091ae:	d11b      	bne.n	80091e8 <_strtod_l+0x2e8>
 80091b0:	4428      	add	r0, r5
 80091b2:	2808      	cmp	r0, #8
 80091b4:	f100 0501 	add.w	r5, r0, #1
 80091b8:	dc25      	bgt.n	8009206 <_strtod_l+0x306>
 80091ba:	9807      	ldr	r0, [sp, #28]
 80091bc:	210a      	movs	r1, #10
 80091be:	fb01 3300 	mla	r3, r1, r0, r3
 80091c2:	9307      	str	r3, [sp, #28]
 80091c4:	2100      	movs	r1, #0
 80091c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091c8:	1c58      	adds	r0, r3, #1
 80091ca:	9019      	str	r0, [sp, #100]	; 0x64
 80091cc:	785b      	ldrb	r3, [r3, #1]
 80091ce:	4608      	mov	r0, r1
 80091d0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80091d4:	2909      	cmp	r1, #9
 80091d6:	d9e0      	bls.n	800919a <_strtod_l+0x29a>
 80091d8:	2101      	movs	r1, #1
 80091da:	e74d      	b.n	8009078 <_strtod_l+0x178>
 80091dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	9219      	str	r2, [sp, #100]	; 0x64
 80091e2:	3001      	adds	r0, #1
 80091e4:	785b      	ldrb	r3, [r3, #1]
 80091e6:	e7cc      	b.n	8009182 <_strtod_l+0x282>
 80091e8:	3101      	adds	r1, #1
 80091ea:	f101 3eff 	add.w	lr, r1, #4294967295
 80091ee:	f1be 0f08 	cmp.w	lr, #8
 80091f2:	dc03      	bgt.n	80091fc <_strtod_l+0x2fc>
 80091f4:	9f07      	ldr	r7, [sp, #28]
 80091f6:	4377      	muls	r7, r6
 80091f8:	9707      	str	r7, [sp, #28]
 80091fa:	e7d7      	b.n	80091ac <_strtod_l+0x2ac>
 80091fc:	2910      	cmp	r1, #16
 80091fe:	bfd8      	it	le
 8009200:	fb06 f909 	mulle.w	r9, r6, r9
 8009204:	e7d2      	b.n	80091ac <_strtod_l+0x2ac>
 8009206:	2d10      	cmp	r5, #16
 8009208:	bfdc      	itt	le
 800920a:	210a      	movle	r1, #10
 800920c:	fb01 3909 	mlale	r9, r1, r9, r3
 8009210:	e7d8      	b.n	80091c4 <_strtod_l+0x2c4>
 8009212:	4602      	mov	r2, r0
 8009214:	9d06      	ldr	r5, [sp, #24]
 8009216:	e7db      	b.n	80091d0 <_strtod_l+0x2d0>
 8009218:	0800b894 	.word	0x0800b894
 800921c:	0800b709 	.word	0x0800b709
 8009220:	0800b783 	.word	0x0800b783
 8009224:	7ff00000 	.word	0x7ff00000
 8009228:	2101      	movs	r1, #1
 800922a:	e72b      	b.n	8009084 <_strtod_l+0x184>
 800922c:	2300      	movs	r3, #0
 800922e:	9305      	str	r3, [sp, #20]
 8009230:	1ca3      	adds	r3, r4, #2
 8009232:	9319      	str	r3, [sp, #100]	; 0x64
 8009234:	78a3      	ldrb	r3, [r4, #2]
 8009236:	e736      	b.n	80090a6 <_strtod_l+0x1a6>
 8009238:	2301      	movs	r3, #1
 800923a:	e7f8      	b.n	800922e <_strtod_l+0x32e>
 800923c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800923e:	1c5e      	adds	r6, r3, #1
 8009240:	9619      	str	r6, [sp, #100]	; 0x64
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	e734      	b.n	80090b0 <_strtod_l+0x1b0>
 8009246:	fb0c 3e0e 	mla	lr, ip, lr, r3
 800924a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800924e:	e73d      	b.n	80090cc <_strtod_l+0x1cc>
 8009250:	9419      	str	r4, [sp, #100]	; 0x64
 8009252:	f04f 0800 	mov.w	r8, #0
 8009256:	e74f      	b.n	80090f8 <_strtod_l+0x1f8>
 8009258:	2b69      	cmp	r3, #105	; 0x69
 800925a:	f43f af62 	beq.w	8009122 <_strtod_l+0x222>
 800925e:	2b6e      	cmp	r3, #110	; 0x6e
 8009260:	f47f aeac 	bne.w	8008fbc <_strtod_l+0xbc>
 8009264:	4988      	ldr	r1, [pc, #544]	; (8009488 <_strtod_l+0x588>)
 8009266:	a819      	add	r0, sp, #100	; 0x64
 8009268:	f001 fbdc 	bl	800aa24 <__match>
 800926c:	2800      	cmp	r0, #0
 800926e:	f43f aea5 	beq.w	8008fbc <_strtod_l+0xbc>
 8009272:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b28      	cmp	r3, #40	; 0x28
 8009278:	d10e      	bne.n	8009298 <_strtod_l+0x398>
 800927a:	aa1c      	add	r2, sp, #112	; 0x70
 800927c:	4983      	ldr	r1, [pc, #524]	; (800948c <_strtod_l+0x58c>)
 800927e:	a819      	add	r0, sp, #100	; 0x64
 8009280:	f001 fbe3 	bl	800aa4a <__hexnan>
 8009284:	2805      	cmp	r0, #5
 8009286:	d107      	bne.n	8009298 <_strtod_l+0x398>
 8009288:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800928a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800928e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009292:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009296:	e673      	b.n	8008f80 <_strtod_l+0x80>
 8009298:	f8df b200 	ldr.w	fp, [pc, #512]	; 800949c <_strtod_l+0x59c>
 800929c:	e755      	b.n	800914a <_strtod_l+0x24a>
 800929e:	9b06      	ldr	r3, [sp, #24]
 80092a0:	9807      	ldr	r0, [sp, #28]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	bf08      	it	eq
 80092a6:	462b      	moveq	r3, r5
 80092a8:	2d10      	cmp	r5, #16
 80092aa:	462c      	mov	r4, r5
 80092ac:	eba8 0802 	sub.w	r8, r8, r2
 80092b0:	bfa8      	it	ge
 80092b2:	2410      	movge	r4, #16
 80092b4:	9306      	str	r3, [sp, #24]
 80092b6:	f7f7 f945 	bl	8000544 <__aeabi_ui2d>
 80092ba:	2c09      	cmp	r4, #9
 80092bc:	4682      	mov	sl, r0
 80092be:	468b      	mov	fp, r1
 80092c0:	dd13      	ble.n	80092ea <_strtod_l+0x3ea>
 80092c2:	4b73      	ldr	r3, [pc, #460]	; (8009490 <_strtod_l+0x590>)
 80092c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80092cc:	f7f7 f9b0 	bl	8000630 <__aeabi_dmul>
 80092d0:	4606      	mov	r6, r0
 80092d2:	4648      	mov	r0, r9
 80092d4:	460f      	mov	r7, r1
 80092d6:	f7f7 f935 	bl	8000544 <__aeabi_ui2d>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	4630      	mov	r0, r6
 80092e0:	4639      	mov	r1, r7
 80092e2:	f7f6 fff3 	bl	80002cc <__adddf3>
 80092e6:	4682      	mov	sl, r0
 80092e8:	468b      	mov	fp, r1
 80092ea:	2d0f      	cmp	r5, #15
 80092ec:	dc36      	bgt.n	800935c <_strtod_l+0x45c>
 80092ee:	f1b8 0f00 	cmp.w	r8, #0
 80092f2:	f43f ae45 	beq.w	8008f80 <_strtod_l+0x80>
 80092f6:	dd24      	ble.n	8009342 <_strtod_l+0x442>
 80092f8:	f1b8 0f16 	cmp.w	r8, #22
 80092fc:	dc0b      	bgt.n	8009316 <_strtod_l+0x416>
 80092fe:	4d64      	ldr	r5, [pc, #400]	; (8009490 <_strtod_l+0x590>)
 8009300:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 8009304:	e9d8 0100 	ldrd	r0, r1, [r8]
 8009308:	4652      	mov	r2, sl
 800930a:	465b      	mov	r3, fp
 800930c:	f7f7 f990 	bl	8000630 <__aeabi_dmul>
 8009310:	4682      	mov	sl, r0
 8009312:	468b      	mov	fp, r1
 8009314:	e634      	b.n	8008f80 <_strtod_l+0x80>
 8009316:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800931a:	4598      	cmp	r8, r3
 800931c:	dc1e      	bgt.n	800935c <_strtod_l+0x45c>
 800931e:	4c5c      	ldr	r4, [pc, #368]	; (8009490 <_strtod_l+0x590>)
 8009320:	f1c5 050f 	rsb	r5, r5, #15
 8009324:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009328:	eba8 0505 	sub.w	r5, r8, r5
 800932c:	4652      	mov	r2, sl
 800932e:	465b      	mov	r3, fp
 8009330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009334:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009338:	f7f7 f97a 	bl	8000630 <__aeabi_dmul>
 800933c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009340:	e7e4      	b.n	800930c <_strtod_l+0x40c>
 8009342:	f118 0f16 	cmn.w	r8, #22
 8009346:	db09      	blt.n	800935c <_strtod_l+0x45c>
 8009348:	4d51      	ldr	r5, [pc, #324]	; (8009490 <_strtod_l+0x590>)
 800934a:	eba5 08c8 	sub.w	r8, r5, r8, lsl #3
 800934e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009352:	4650      	mov	r0, sl
 8009354:	4659      	mov	r1, fp
 8009356:	f7f7 fa95 	bl	8000884 <__aeabi_ddiv>
 800935a:	e7d9      	b.n	8009310 <_strtod_l+0x410>
 800935c:	1b2c      	subs	r4, r5, r4
 800935e:	4444      	add	r4, r8
 8009360:	2c00      	cmp	r4, #0
 8009362:	dd70      	ble.n	8009446 <_strtod_l+0x546>
 8009364:	f014 030f 	ands.w	r3, r4, #15
 8009368:	d00a      	beq.n	8009380 <_strtod_l+0x480>
 800936a:	4949      	ldr	r1, [pc, #292]	; (8009490 <_strtod_l+0x590>)
 800936c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009370:	4652      	mov	r2, sl
 8009372:	465b      	mov	r3, fp
 8009374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009378:	f7f7 f95a 	bl	8000630 <__aeabi_dmul>
 800937c:	4682      	mov	sl, r0
 800937e:	468b      	mov	fp, r1
 8009380:	f034 040f 	bics.w	r4, r4, #15
 8009384:	d050      	beq.n	8009428 <_strtod_l+0x528>
 8009386:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800938a:	dd23      	ble.n	80093d4 <_strtod_l+0x4d4>
 800938c:	2400      	movs	r4, #0
 800938e:	4625      	mov	r5, r4
 8009390:	9407      	str	r4, [sp, #28]
 8009392:	9406      	str	r4, [sp, #24]
 8009394:	9a04      	ldr	r2, [sp, #16]
 8009396:	f8df b108 	ldr.w	fp, [pc, #264]	; 80094a0 <_strtod_l+0x5a0>
 800939a:	2322      	movs	r3, #34	; 0x22
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	f04f 0a00 	mov.w	sl, #0
 80093a2:	9b07      	ldr	r3, [sp, #28]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f43f adeb 	beq.w	8008f80 <_strtod_l+0x80>
 80093aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093ac:	9804      	ldr	r0, [sp, #16]
 80093ae:	f7ff f967 	bl	8008680 <_Bfree>
 80093b2:	9906      	ldr	r1, [sp, #24]
 80093b4:	9804      	ldr	r0, [sp, #16]
 80093b6:	f7ff f963 	bl	8008680 <_Bfree>
 80093ba:	4629      	mov	r1, r5
 80093bc:	9804      	ldr	r0, [sp, #16]
 80093be:	f7ff f95f 	bl	8008680 <_Bfree>
 80093c2:	9907      	ldr	r1, [sp, #28]
 80093c4:	9804      	ldr	r0, [sp, #16]
 80093c6:	f7ff f95b 	bl	8008680 <_Bfree>
 80093ca:	4621      	mov	r1, r4
 80093cc:	9804      	ldr	r0, [sp, #16]
 80093ce:	f7ff f957 	bl	8008680 <_Bfree>
 80093d2:	e5d5      	b.n	8008f80 <_strtod_l+0x80>
 80093d4:	4e2f      	ldr	r6, [pc, #188]	; (8009494 <_strtod_l+0x594>)
 80093d6:	2300      	movs	r3, #0
 80093d8:	1124      	asrs	r4, r4, #4
 80093da:	4650      	mov	r0, sl
 80093dc:	4659      	mov	r1, fp
 80093de:	4699      	mov	r9, r3
 80093e0:	4637      	mov	r7, r6
 80093e2:	2c01      	cmp	r4, #1
 80093e4:	dc23      	bgt.n	800942e <_strtod_l+0x52e>
 80093e6:	b10b      	cbz	r3, 80093ec <_strtod_l+0x4ec>
 80093e8:	4682      	mov	sl, r0
 80093ea:	468b      	mov	fp, r1
 80093ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80093f0:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
 80093f4:	4652      	mov	r2, sl
 80093f6:	465b      	mov	r3, fp
 80093f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093fc:	f7f7 f918 	bl	8000630 <__aeabi_dmul>
 8009400:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009404:	468b      	mov	fp, r1
 8009406:	460a      	mov	r2, r1
 8009408:	0d1b      	lsrs	r3, r3, #20
 800940a:	4923      	ldr	r1, [pc, #140]	; (8009498 <_strtod_l+0x598>)
 800940c:	051b      	lsls	r3, r3, #20
 800940e:	428b      	cmp	r3, r1
 8009410:	4682      	mov	sl, r0
 8009412:	d8bb      	bhi.n	800938c <_strtod_l+0x48c>
 8009414:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009418:	428b      	cmp	r3, r1
 800941a:	bf86      	itte	hi
 800941c:	f8df b084 	ldrhi.w	fp, [pc, #132]	; 80094a4 <_strtod_l+0x5a4>
 8009420:	f04f 3aff 	movhi.w	sl, #4294967295
 8009424:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009428:	2300      	movs	r3, #0
 800942a:	9305      	str	r3, [sp, #20]
 800942c:	e06d      	b.n	800950a <_strtod_l+0x60a>
 800942e:	07e2      	lsls	r2, r4, #31
 8009430:	d504      	bpl.n	800943c <_strtod_l+0x53c>
 8009432:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009436:	f7f7 f8fb 	bl	8000630 <__aeabi_dmul>
 800943a:	2301      	movs	r3, #1
 800943c:	f109 0901 	add.w	r9, r9, #1
 8009440:	1064      	asrs	r4, r4, #1
 8009442:	3608      	adds	r6, #8
 8009444:	e7cd      	b.n	80093e2 <_strtod_l+0x4e2>
 8009446:	d0ef      	beq.n	8009428 <_strtod_l+0x528>
 8009448:	4264      	negs	r4, r4
 800944a:	f014 020f 	ands.w	r2, r4, #15
 800944e:	d00a      	beq.n	8009466 <_strtod_l+0x566>
 8009450:	4b0f      	ldr	r3, [pc, #60]	; (8009490 <_strtod_l+0x590>)
 8009452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009456:	4650      	mov	r0, sl
 8009458:	4659      	mov	r1, fp
 800945a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945e:	f7f7 fa11 	bl	8000884 <__aeabi_ddiv>
 8009462:	4682      	mov	sl, r0
 8009464:	468b      	mov	fp, r1
 8009466:	1124      	asrs	r4, r4, #4
 8009468:	d0de      	beq.n	8009428 <_strtod_l+0x528>
 800946a:	2c1f      	cmp	r4, #31
 800946c:	dd1c      	ble.n	80094a8 <_strtod_l+0x5a8>
 800946e:	2400      	movs	r4, #0
 8009470:	4625      	mov	r5, r4
 8009472:	9407      	str	r4, [sp, #28]
 8009474:	9406      	str	r4, [sp, #24]
 8009476:	9a04      	ldr	r2, [sp, #16]
 8009478:	2322      	movs	r3, #34	; 0x22
 800947a:	f04f 0a00 	mov.w	sl, #0
 800947e:	f04f 0b00 	mov.w	fp, #0
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	e78d      	b.n	80093a2 <_strtod_l+0x4a2>
 8009486:	bf00      	nop
 8009488:	0800b711 	.word	0x0800b711
 800948c:	0800b8a8 	.word	0x0800b8a8
 8009490:	0800b7c0 	.word	0x0800b7c0
 8009494:	0800b798 	.word	0x0800b798
 8009498:	7ca00000 	.word	0x7ca00000
 800949c:	fff80000 	.word	0xfff80000
 80094a0:	7ff00000 	.word	0x7ff00000
 80094a4:	7fefffff 	.word	0x7fefffff
 80094a8:	f014 0310 	ands.w	r3, r4, #16
 80094ac:	bf18      	it	ne
 80094ae:	236a      	movne	r3, #106	; 0x6a
 80094b0:	4ea0      	ldr	r6, [pc, #640]	; (8009734 <_strtod_l+0x834>)
 80094b2:	9305      	str	r3, [sp, #20]
 80094b4:	4650      	mov	r0, sl
 80094b6:	4659      	mov	r1, fp
 80094b8:	2300      	movs	r3, #0
 80094ba:	2c00      	cmp	r4, #0
 80094bc:	f300 8106 	bgt.w	80096cc <_strtod_l+0x7cc>
 80094c0:	b10b      	cbz	r3, 80094c6 <_strtod_l+0x5c6>
 80094c2:	4682      	mov	sl, r0
 80094c4:	468b      	mov	fp, r1
 80094c6:	9b05      	ldr	r3, [sp, #20]
 80094c8:	b1bb      	cbz	r3, 80094fa <_strtod_l+0x5fa>
 80094ca:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80094ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	4659      	mov	r1, fp
 80094d6:	dd10      	ble.n	80094fa <_strtod_l+0x5fa>
 80094d8:	2b1f      	cmp	r3, #31
 80094da:	f340 8101 	ble.w	80096e0 <_strtod_l+0x7e0>
 80094de:	2b34      	cmp	r3, #52	; 0x34
 80094e0:	bfde      	ittt	le
 80094e2:	3b20      	suble	r3, #32
 80094e4:	f04f 32ff 	movle.w	r2, #4294967295
 80094e8:	fa02 f303 	lslle.w	r3, r2, r3
 80094ec:	f04f 0a00 	mov.w	sl, #0
 80094f0:	bfcc      	ite	gt
 80094f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80094f6:	ea03 0b01 	andle.w	fp, r3, r1
 80094fa:	2200      	movs	r2, #0
 80094fc:	2300      	movs	r3, #0
 80094fe:	4650      	mov	r0, sl
 8009500:	4659      	mov	r1, fp
 8009502:	f7f7 fafd 	bl	8000b00 <__aeabi_dcmpeq>
 8009506:	2800      	cmp	r0, #0
 8009508:	d1b1      	bne.n	800946e <_strtod_l+0x56e>
 800950a:	9b07      	ldr	r3, [sp, #28]
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	9a06      	ldr	r2, [sp, #24]
 8009510:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009512:	9804      	ldr	r0, [sp, #16]
 8009514:	462b      	mov	r3, r5
 8009516:	f7ff f905 	bl	8008724 <__s2b>
 800951a:	9007      	str	r0, [sp, #28]
 800951c:	2800      	cmp	r0, #0
 800951e:	f43f af35 	beq.w	800938c <_strtod_l+0x48c>
 8009522:	f1b8 0f00 	cmp.w	r8, #0
 8009526:	f1c8 0300 	rsb	r3, r8, #0
 800952a:	bfa8      	it	ge
 800952c:	2300      	movge	r3, #0
 800952e:	930e      	str	r3, [sp, #56]	; 0x38
 8009530:	2400      	movs	r4, #0
 8009532:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 8009536:	930f      	str	r3, [sp, #60]	; 0x3c
 8009538:	4625      	mov	r5, r4
 800953a:	9b07      	ldr	r3, [sp, #28]
 800953c:	9804      	ldr	r0, [sp, #16]
 800953e:	6859      	ldr	r1, [r3, #4]
 8009540:	f7ff f86a 	bl	8008618 <_Balloc>
 8009544:	9006      	str	r0, [sp, #24]
 8009546:	2800      	cmp	r0, #0
 8009548:	f43f af24 	beq.w	8009394 <_strtod_l+0x494>
 800954c:	9b07      	ldr	r3, [sp, #28]
 800954e:	691a      	ldr	r2, [r3, #16]
 8009550:	3202      	adds	r2, #2
 8009552:	f103 010c 	add.w	r1, r3, #12
 8009556:	0092      	lsls	r2, r2, #2
 8009558:	300c      	adds	r0, #12
 800955a:	f7fc f9b3 	bl	80058c4 <memcpy>
 800955e:	aa1c      	add	r2, sp, #112	; 0x70
 8009560:	a91b      	add	r1, sp, #108	; 0x6c
 8009562:	ec4b ab10 	vmov	d0, sl, fp
 8009566:	9804      	ldr	r0, [sp, #16]
 8009568:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800956c:	f7ff fb8a 	bl	8008c84 <__d2b>
 8009570:	901a      	str	r0, [sp, #104]	; 0x68
 8009572:	2800      	cmp	r0, #0
 8009574:	f43f af0e 	beq.w	8009394 <_strtod_l+0x494>
 8009578:	2101      	movs	r1, #1
 800957a:	9804      	ldr	r0, [sp, #16]
 800957c:	f7ff f95e 	bl	800883c <__i2b>
 8009580:	4605      	mov	r5, r0
 8009582:	2800      	cmp	r0, #0
 8009584:	f43f af06 	beq.w	8009394 <_strtod_l+0x494>
 8009588:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800958a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800958c:	2e00      	cmp	r6, #0
 800958e:	bfab      	itete	ge
 8009590:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009592:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 8009594:	9f0f      	ldrge	r7, [sp, #60]	; 0x3c
 8009596:	f8dd 8038 	ldrlt.w	r8, [sp, #56]	; 0x38
 800959a:	bfac      	ite	ge
 800959c:	eb03 0806 	addge.w	r8, r3, r6
 80095a0:	1b9f      	sublt	r7, r3, r6
 80095a2:	9b05      	ldr	r3, [sp, #20]
 80095a4:	1af6      	subs	r6, r6, r3
 80095a6:	4416      	add	r6, r2
 80095a8:	4b63      	ldr	r3, [pc, #396]	; (8009738 <_strtod_l+0x838>)
 80095aa:	3e01      	subs	r6, #1
 80095ac:	429e      	cmp	r6, r3
 80095ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80095b2:	f280 80a8 	bge.w	8009706 <_strtod_l+0x806>
 80095b6:	1b9b      	subs	r3, r3, r6
 80095b8:	2b1f      	cmp	r3, #31
 80095ba:	eba2 0203 	sub.w	r2, r2, r3
 80095be:	f04f 0901 	mov.w	r9, #1
 80095c2:	f300 8094 	bgt.w	80096ee <_strtod_l+0x7ee>
 80095c6:	fa09 f303 	lsl.w	r3, r9, r3
 80095ca:	9314      	str	r3, [sp, #80]	; 0x50
 80095cc:	2600      	movs	r6, #0
 80095ce:	eb08 0902 	add.w	r9, r8, r2
 80095d2:	9b05      	ldr	r3, [sp, #20]
 80095d4:	45c8      	cmp	r8, r9
 80095d6:	4417      	add	r7, r2
 80095d8:	441f      	add	r7, r3
 80095da:	4643      	mov	r3, r8
 80095dc:	bfa8      	it	ge
 80095de:	464b      	movge	r3, r9
 80095e0:	42bb      	cmp	r3, r7
 80095e2:	bfa8      	it	ge
 80095e4:	463b      	movge	r3, r7
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	bfc2      	ittt	gt
 80095ea:	eba9 0903 	subgt.w	r9, r9, r3
 80095ee:	1aff      	subgt	r7, r7, r3
 80095f0:	eba8 0803 	subgt.w	r8, r8, r3
 80095f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095f6:	b1bb      	cbz	r3, 8009628 <_strtod_l+0x728>
 80095f8:	4629      	mov	r1, r5
 80095fa:	461a      	mov	r2, r3
 80095fc:	9804      	ldr	r0, [sp, #16]
 80095fe:	f7ff f9b3 	bl	8008968 <__pow5mult>
 8009602:	4605      	mov	r5, r0
 8009604:	2800      	cmp	r0, #0
 8009606:	f43f aec5 	beq.w	8009394 <_strtod_l+0x494>
 800960a:	4601      	mov	r1, r0
 800960c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800960e:	9804      	ldr	r0, [sp, #16]
 8009610:	f7ff f91d 	bl	800884e <__multiply>
 8009614:	9008      	str	r0, [sp, #32]
 8009616:	2800      	cmp	r0, #0
 8009618:	f43f aebc 	beq.w	8009394 <_strtod_l+0x494>
 800961c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800961e:	9804      	ldr	r0, [sp, #16]
 8009620:	f7ff f82e 	bl	8008680 <_Bfree>
 8009624:	9b08      	ldr	r3, [sp, #32]
 8009626:	931a      	str	r3, [sp, #104]	; 0x68
 8009628:	f1b9 0f00 	cmp.w	r9, #0
 800962c:	dc6f      	bgt.n	800970e <_strtod_l+0x80e>
 800962e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d175      	bne.n	8009720 <_strtod_l+0x820>
 8009634:	2f00      	cmp	r7, #0
 8009636:	dd08      	ble.n	800964a <_strtod_l+0x74a>
 8009638:	463a      	mov	r2, r7
 800963a:	9906      	ldr	r1, [sp, #24]
 800963c:	9804      	ldr	r0, [sp, #16]
 800963e:	f7ff f9e1 	bl	8008a04 <__lshift>
 8009642:	9006      	str	r0, [sp, #24]
 8009644:	2800      	cmp	r0, #0
 8009646:	f43f aea5 	beq.w	8009394 <_strtod_l+0x494>
 800964a:	f1b8 0f00 	cmp.w	r8, #0
 800964e:	dd08      	ble.n	8009662 <_strtod_l+0x762>
 8009650:	4629      	mov	r1, r5
 8009652:	4642      	mov	r2, r8
 8009654:	9804      	ldr	r0, [sp, #16]
 8009656:	f7ff f9d5 	bl	8008a04 <__lshift>
 800965a:	4605      	mov	r5, r0
 800965c:	2800      	cmp	r0, #0
 800965e:	f43f ae99 	beq.w	8009394 <_strtod_l+0x494>
 8009662:	9a06      	ldr	r2, [sp, #24]
 8009664:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009666:	9804      	ldr	r0, [sp, #16]
 8009668:	f7ff fa37 	bl	8008ada <__mdiff>
 800966c:	4604      	mov	r4, r0
 800966e:	2800      	cmp	r0, #0
 8009670:	f43f ae90 	beq.w	8009394 <_strtod_l+0x494>
 8009674:	68c3      	ldr	r3, [r0, #12]
 8009676:	9308      	str	r3, [sp, #32]
 8009678:	2300      	movs	r3, #0
 800967a:	60c3      	str	r3, [r0, #12]
 800967c:	4629      	mov	r1, r5
 800967e:	f7ff fa12 	bl	8008aa6 <__mcmp>
 8009682:	2800      	cmp	r0, #0
 8009684:	da5a      	bge.n	800973c <_strtod_l+0x83c>
 8009686:	9b08      	ldr	r3, [sp, #32]
 8009688:	b9e3      	cbnz	r3, 80096c4 <_strtod_l+0x7c4>
 800968a:	f1ba 0f00 	cmp.w	sl, #0
 800968e:	d119      	bne.n	80096c4 <_strtod_l+0x7c4>
 8009690:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009694:	b9b3      	cbnz	r3, 80096c4 <_strtod_l+0x7c4>
 8009696:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800969a:	0d1b      	lsrs	r3, r3, #20
 800969c:	051b      	lsls	r3, r3, #20
 800969e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80096a2:	d90f      	bls.n	80096c4 <_strtod_l+0x7c4>
 80096a4:	6963      	ldr	r3, [r4, #20]
 80096a6:	b913      	cbnz	r3, 80096ae <_strtod_l+0x7ae>
 80096a8:	6923      	ldr	r3, [r4, #16]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	dd0a      	ble.n	80096c4 <_strtod_l+0x7c4>
 80096ae:	4621      	mov	r1, r4
 80096b0:	2201      	movs	r2, #1
 80096b2:	9804      	ldr	r0, [sp, #16]
 80096b4:	f7ff f9a6 	bl	8008a04 <__lshift>
 80096b8:	4629      	mov	r1, r5
 80096ba:	4604      	mov	r4, r0
 80096bc:	f7ff f9f3 	bl	8008aa6 <__mcmp>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	dc6c      	bgt.n	800979e <_strtod_l+0x89e>
 80096c4:	9b05      	ldr	r3, [sp, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d176      	bne.n	80097b8 <_strtod_l+0x8b8>
 80096ca:	e66e      	b.n	80093aa <_strtod_l+0x4aa>
 80096cc:	07e2      	lsls	r2, r4, #31
 80096ce:	d504      	bpl.n	80096da <_strtod_l+0x7da>
 80096d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096d4:	f7f6 ffac 	bl	8000630 <__aeabi_dmul>
 80096d8:	2301      	movs	r3, #1
 80096da:	1064      	asrs	r4, r4, #1
 80096dc:	3608      	adds	r6, #8
 80096de:	e6ec      	b.n	80094ba <_strtod_l+0x5ba>
 80096e0:	f04f 32ff 	mov.w	r2, #4294967295
 80096e4:	fa02 f303 	lsl.w	r3, r2, r3
 80096e8:	ea03 0a0a 	and.w	sl, r3, sl
 80096ec:	e705      	b.n	80094fa <_strtod_l+0x5fa>
 80096ee:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80096f2:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80096f6:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80096fa:	36e2      	adds	r6, #226	; 0xe2
 80096fc:	fa09 f606 	lsl.w	r6, r9, r6
 8009700:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8009704:	e763      	b.n	80095ce <_strtod_l+0x6ce>
 8009706:	2301      	movs	r3, #1
 8009708:	2600      	movs	r6, #0
 800970a:	9314      	str	r3, [sp, #80]	; 0x50
 800970c:	e75f      	b.n	80095ce <_strtod_l+0x6ce>
 800970e:	464a      	mov	r2, r9
 8009710:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009712:	9804      	ldr	r0, [sp, #16]
 8009714:	f7ff f976 	bl	8008a04 <__lshift>
 8009718:	901a      	str	r0, [sp, #104]	; 0x68
 800971a:	2800      	cmp	r0, #0
 800971c:	d187      	bne.n	800962e <_strtod_l+0x72e>
 800971e:	e639      	b.n	8009394 <_strtod_l+0x494>
 8009720:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009722:	9906      	ldr	r1, [sp, #24]
 8009724:	9804      	ldr	r0, [sp, #16]
 8009726:	f7ff f91f 	bl	8008968 <__pow5mult>
 800972a:	9006      	str	r0, [sp, #24]
 800972c:	2800      	cmp	r0, #0
 800972e:	d181      	bne.n	8009634 <_strtod_l+0x734>
 8009730:	e630      	b.n	8009394 <_strtod_l+0x494>
 8009732:	bf00      	nop
 8009734:	0800b8c0 	.word	0x0800b8c0
 8009738:	fffffc02 	.word	0xfffffc02
 800973c:	f040 8086 	bne.w	800984c <_strtod_l+0x94c>
 8009740:	9a08      	ldr	r2, [sp, #32]
 8009742:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009746:	b332      	cbz	r2, 8009796 <_strtod_l+0x896>
 8009748:	4aad      	ldr	r2, [pc, #692]	; (8009a00 <_strtod_l+0xb00>)
 800974a:	4293      	cmp	r3, r2
 800974c:	4659      	mov	r1, fp
 800974e:	d152      	bne.n	80097f6 <_strtod_l+0x8f6>
 8009750:	9b05      	ldr	r3, [sp, #20]
 8009752:	4650      	mov	r0, sl
 8009754:	b1d3      	cbz	r3, 800978c <_strtod_l+0x88c>
 8009756:	4aab      	ldr	r2, [pc, #684]	; (8009a04 <_strtod_l+0xb04>)
 8009758:	400a      	ands	r2, r1
 800975a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800975e:	f04f 37ff 	mov.w	r7, #4294967295
 8009762:	d816      	bhi.n	8009792 <_strtod_l+0x892>
 8009764:	0d12      	lsrs	r2, r2, #20
 8009766:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800976a:	fa07 f303 	lsl.w	r3, r7, r3
 800976e:	4283      	cmp	r3, r0
 8009770:	d141      	bne.n	80097f6 <_strtod_l+0x8f6>
 8009772:	4aa5      	ldr	r2, [pc, #660]	; (8009a08 <_strtod_l+0xb08>)
 8009774:	4291      	cmp	r1, r2
 8009776:	d102      	bne.n	800977e <_strtod_l+0x87e>
 8009778:	3301      	adds	r3, #1
 800977a:	f43f ae0b 	beq.w	8009394 <_strtod_l+0x494>
 800977e:	4ba1      	ldr	r3, [pc, #644]	; (8009a04 <_strtod_l+0xb04>)
 8009780:	400b      	ands	r3, r1
 8009782:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009786:	f04f 0a00 	mov.w	sl, #0
 800978a:	e79b      	b.n	80096c4 <_strtod_l+0x7c4>
 800978c:	f04f 33ff 	mov.w	r3, #4294967295
 8009790:	e7ed      	b.n	800976e <_strtod_l+0x86e>
 8009792:	463b      	mov	r3, r7
 8009794:	e7eb      	b.n	800976e <_strtod_l+0x86e>
 8009796:	bb73      	cbnz	r3, 80097f6 <_strtod_l+0x8f6>
 8009798:	f1ba 0f00 	cmp.w	sl, #0
 800979c:	d12b      	bne.n	80097f6 <_strtod_l+0x8f6>
 800979e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80097a2:	9a05      	ldr	r2, [sp, #20]
 80097a4:	0d1b      	lsrs	r3, r3, #20
 80097a6:	051b      	lsls	r3, r3, #20
 80097a8:	b1e2      	cbz	r2, 80097e4 <_strtod_l+0x8e4>
 80097aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80097ae:	dc19      	bgt.n	80097e4 <_strtod_l+0x8e4>
 80097b0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80097b4:	f77f ae5f 	ble.w	8009476 <_strtod_l+0x576>
 80097b8:	4b94      	ldr	r3, [pc, #592]	; (8009a0c <_strtod_l+0xb0c>)
 80097ba:	930d      	str	r3, [sp, #52]	; 0x34
 80097bc:	2300      	movs	r3, #0
 80097be:	930c      	str	r3, [sp, #48]	; 0x30
 80097c0:	4650      	mov	r0, sl
 80097c2:	4659      	mov	r1, fp
 80097c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80097c8:	f7f6 ff32 	bl	8000630 <__aeabi_dmul>
 80097cc:	4682      	mov	sl, r0
 80097ce:	468b      	mov	fp, r1
 80097d0:	2900      	cmp	r1, #0
 80097d2:	f47f adea 	bne.w	80093aa <_strtod_l+0x4aa>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	f47f ade7 	bne.w	80093aa <_strtod_l+0x4aa>
 80097dc:	9a04      	ldr	r2, [sp, #16]
 80097de:	2322      	movs	r3, #34	; 0x22
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	e5e2      	b.n	80093aa <_strtod_l+0x4aa>
 80097e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80097e8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80097ec:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80097f0:	f04f 3aff 	mov.w	sl, #4294967295
 80097f4:	e766      	b.n	80096c4 <_strtod_l+0x7c4>
 80097f6:	b19e      	cbz	r6, 8009820 <_strtod_l+0x920>
 80097f8:	ea16 0f0b 	tst.w	r6, fp
 80097fc:	f43f af62 	beq.w	80096c4 <_strtod_l+0x7c4>
 8009800:	9b08      	ldr	r3, [sp, #32]
 8009802:	9a05      	ldr	r2, [sp, #20]
 8009804:	4650      	mov	r0, sl
 8009806:	4659      	mov	r1, fp
 8009808:	b173      	cbz	r3, 8009828 <_strtod_l+0x928>
 800980a:	f7ff fb5b 	bl	8008ec4 <sulp>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009816:	f7f6 fd59 	bl	80002cc <__adddf3>
 800981a:	4682      	mov	sl, r0
 800981c:	468b      	mov	fp, r1
 800981e:	e751      	b.n	80096c4 <_strtod_l+0x7c4>
 8009820:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009822:	ea13 0f0a 	tst.w	r3, sl
 8009826:	e7e9      	b.n	80097fc <_strtod_l+0x8fc>
 8009828:	f7ff fb4c 	bl	8008ec4 <sulp>
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009834:	f7f6 fd48 	bl	80002c8 <__aeabi_dsub>
 8009838:	2200      	movs	r2, #0
 800983a:	2300      	movs	r3, #0
 800983c:	4682      	mov	sl, r0
 800983e:	468b      	mov	fp, r1
 8009840:	f7f7 f95e 	bl	8000b00 <__aeabi_dcmpeq>
 8009844:	2800      	cmp	r0, #0
 8009846:	f47f ae16 	bne.w	8009476 <_strtod_l+0x576>
 800984a:	e73b      	b.n	80096c4 <_strtod_l+0x7c4>
 800984c:	4629      	mov	r1, r5
 800984e:	4620      	mov	r0, r4
 8009850:	f7ff fa67 	bl	8008d22 <__ratio>
 8009854:	ec57 6b10 	vmov	r6, r7, d0
 8009858:	2200      	movs	r2, #0
 800985a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800985e:	ee10 0a10 	vmov	r0, s0
 8009862:	4639      	mov	r1, r7
 8009864:	f7f7 f960 	bl	8000b28 <__aeabi_dcmple>
 8009868:	2800      	cmp	r0, #0
 800986a:	d074      	beq.n	8009956 <_strtod_l+0xa56>
 800986c:	9b08      	ldr	r3, [sp, #32]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d046      	beq.n	8009900 <_strtod_l+0xa00>
 8009872:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8009a10 <_strtod_l+0xb10>
 8009876:	f04f 0800 	mov.w	r8, #0
 800987a:	4f65      	ldr	r7, [pc, #404]	; (8009a10 <_strtod_l+0xb10>)
 800987c:	2600      	movs	r6, #0
 800987e:	4b61      	ldr	r3, [pc, #388]	; (8009a04 <_strtod_l+0xb04>)
 8009880:	ea0b 0303 	and.w	r3, fp, r3
 8009884:	9314      	str	r3, [sp, #80]	; 0x50
 8009886:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009888:	4b62      	ldr	r3, [pc, #392]	; (8009a14 <_strtod_l+0xb14>)
 800988a:	429a      	cmp	r2, r3
 800988c:	f040 80ca 	bne.w	8009a24 <_strtod_l+0xb24>
 8009890:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009894:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009898:	ec4b ab10 	vmov	d0, sl, fp
 800989c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80098a0:	f7ff f97a 	bl	8008b98 <__ulp>
 80098a4:	4640      	mov	r0, r8
 80098a6:	ec53 2b10 	vmov	r2, r3, d0
 80098aa:	4649      	mov	r1, r9
 80098ac:	f7f6 fec0 	bl	8000630 <__aeabi_dmul>
 80098b0:	4652      	mov	r2, sl
 80098b2:	465b      	mov	r3, fp
 80098b4:	f7f6 fd0a 	bl	80002cc <__adddf3>
 80098b8:	4a52      	ldr	r2, [pc, #328]	; (8009a04 <_strtod_l+0xb04>)
 80098ba:	4b57      	ldr	r3, [pc, #348]	; (8009a18 <_strtod_l+0xb18>)
 80098bc:	400a      	ands	r2, r1
 80098be:	429a      	cmp	r2, r3
 80098c0:	4682      	mov	sl, r0
 80098c2:	d95c      	bls.n	800997e <_strtod_l+0xa7e>
 80098c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098c6:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d103      	bne.n	80098d6 <_strtod_l+0x9d6>
 80098ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098d0:	3301      	adds	r3, #1
 80098d2:	f43f ad5f 	beq.w	8009394 <_strtod_l+0x494>
 80098d6:	f8df b130 	ldr.w	fp, [pc, #304]	; 8009a08 <_strtod_l+0xb08>
 80098da:	f04f 3aff 	mov.w	sl, #4294967295
 80098de:	991a      	ldr	r1, [sp, #104]	; 0x68
 80098e0:	9804      	ldr	r0, [sp, #16]
 80098e2:	f7fe fecd 	bl	8008680 <_Bfree>
 80098e6:	9906      	ldr	r1, [sp, #24]
 80098e8:	9804      	ldr	r0, [sp, #16]
 80098ea:	f7fe fec9 	bl	8008680 <_Bfree>
 80098ee:	4629      	mov	r1, r5
 80098f0:	9804      	ldr	r0, [sp, #16]
 80098f2:	f7fe fec5 	bl	8008680 <_Bfree>
 80098f6:	4621      	mov	r1, r4
 80098f8:	9804      	ldr	r0, [sp, #16]
 80098fa:	f7fe fec1 	bl	8008680 <_Bfree>
 80098fe:	e61c      	b.n	800953a <_strtod_l+0x63a>
 8009900:	f1ba 0f00 	cmp.w	sl, #0
 8009904:	d118      	bne.n	8009938 <_strtod_l+0xa38>
 8009906:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800990a:	b9e3      	cbnz	r3, 8009946 <_strtod_l+0xa46>
 800990c:	2200      	movs	r2, #0
 800990e:	4b40      	ldr	r3, [pc, #256]	; (8009a10 <_strtod_l+0xb10>)
 8009910:	4630      	mov	r0, r6
 8009912:	4639      	mov	r1, r7
 8009914:	f7f7 f8fe 	bl	8000b14 <__aeabi_dcmplt>
 8009918:	b9d0      	cbnz	r0, 8009950 <_strtod_l+0xa50>
 800991a:	4630      	mov	r0, r6
 800991c:	4639      	mov	r1, r7
 800991e:	2200      	movs	r2, #0
 8009920:	4b3e      	ldr	r3, [pc, #248]	; (8009a1c <_strtod_l+0xb1c>)
 8009922:	f7f6 fe85 	bl	8000630 <__aeabi_dmul>
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800992e:	9616      	str	r6, [sp, #88]	; 0x58
 8009930:	9317      	str	r3, [sp, #92]	; 0x5c
 8009932:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
 8009936:	e7a2      	b.n	800987e <_strtod_l+0x97e>
 8009938:	f1ba 0f01 	cmp.w	sl, #1
 800993c:	d103      	bne.n	8009946 <_strtod_l+0xa46>
 800993e:	f1bb 0f00 	cmp.w	fp, #0
 8009942:	f43f ad98 	beq.w	8009476 <_strtod_l+0x576>
 8009946:	f04f 0800 	mov.w	r8, #0
 800994a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8009a20 <_strtod_l+0xb20>
 800994e:	e794      	b.n	800987a <_strtod_l+0x97a>
 8009950:	2600      	movs	r6, #0
 8009952:	4f32      	ldr	r7, [pc, #200]	; (8009a1c <_strtod_l+0xb1c>)
 8009954:	e7e9      	b.n	800992a <_strtod_l+0xa2a>
 8009956:	4b31      	ldr	r3, [pc, #196]	; (8009a1c <_strtod_l+0xb1c>)
 8009958:	4630      	mov	r0, r6
 800995a:	4639      	mov	r1, r7
 800995c:	2200      	movs	r2, #0
 800995e:	f7f6 fe67 	bl	8000630 <__aeabi_dmul>
 8009962:	9b08      	ldr	r3, [sp, #32]
 8009964:	4606      	mov	r6, r0
 8009966:	460f      	mov	r7, r1
 8009968:	b933      	cbnz	r3, 8009978 <_strtod_l+0xa78>
 800996a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800996e:	9010      	str	r0, [sp, #64]	; 0x40
 8009970:	9311      	str	r3, [sp, #68]	; 0x44
 8009972:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009976:	e782      	b.n	800987e <_strtod_l+0x97e>
 8009978:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800997c:	e7f9      	b.n	8009972 <_strtod_l+0xa72>
 800997e:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8009982:	9b05      	ldr	r3, [sp, #20]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1aa      	bne.n	80098de <_strtod_l+0x9de>
 8009988:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800998c:	0d1b      	lsrs	r3, r3, #20
 800998e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009990:	051b      	lsls	r3, r3, #20
 8009992:	429a      	cmp	r2, r3
 8009994:	46d8      	mov	r8, fp
 8009996:	d1a2      	bne.n	80098de <_strtod_l+0x9de>
 8009998:	4639      	mov	r1, r7
 800999a:	4630      	mov	r0, r6
 800999c:	f7f7 f8f8 	bl	8000b90 <__aeabi_d2iz>
 80099a0:	f7f6 fde0 	bl	8000564 <__aeabi_i2d>
 80099a4:	460b      	mov	r3, r1
 80099a6:	4602      	mov	r2, r0
 80099a8:	4639      	mov	r1, r7
 80099aa:	4630      	mov	r0, r6
 80099ac:	f7f6 fc8c 	bl	80002c8 <__aeabi_dsub>
 80099b0:	9b08      	ldr	r3, [sp, #32]
 80099b2:	4606      	mov	r6, r0
 80099b4:	460f      	mov	r7, r1
 80099b6:	b933      	cbnz	r3, 80099c6 <_strtod_l+0xac6>
 80099b8:	f1ba 0f00 	cmp.w	sl, #0
 80099bc:	d103      	bne.n	80099c6 <_strtod_l+0xac6>
 80099be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d068      	beq.n	8009a98 <_strtod_l+0xb98>
 80099c6:	a30a      	add	r3, pc, #40	; (adr r3, 80099f0 <_strtod_l+0xaf0>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	4630      	mov	r0, r6
 80099ce:	4639      	mov	r1, r7
 80099d0:	f7f7 f8a0 	bl	8000b14 <__aeabi_dcmplt>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f47f ace8 	bne.w	80093aa <_strtod_l+0x4aa>
 80099da:	a307      	add	r3, pc, #28	; (adr r3, 80099f8 <_strtod_l+0xaf8>)
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	f7f7 f8b4 	bl	8000b50 <__aeabi_dcmpgt>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	f43f af78 	beq.w	80098de <_strtod_l+0x9de>
 80099ee:	e4dc      	b.n	80093aa <_strtod_l+0x4aa>
 80099f0:	94a03595 	.word	0x94a03595
 80099f4:	3fdfffff 	.word	0x3fdfffff
 80099f8:	35afe535 	.word	0x35afe535
 80099fc:	3fe00000 	.word	0x3fe00000
 8009a00:	000fffff 	.word	0x000fffff
 8009a04:	7ff00000 	.word	0x7ff00000
 8009a08:	7fefffff 	.word	0x7fefffff
 8009a0c:	39500000 	.word	0x39500000
 8009a10:	3ff00000 	.word	0x3ff00000
 8009a14:	7fe00000 	.word	0x7fe00000
 8009a18:	7c9fffff 	.word	0x7c9fffff
 8009a1c:	3fe00000 	.word	0x3fe00000
 8009a20:	bff00000 	.word	0xbff00000
 8009a24:	9b05      	ldr	r3, [sp, #20]
 8009a26:	b31b      	cbz	r3, 8009a70 <_strtod_l+0xb70>
 8009a28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a2a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a2e:	d81f      	bhi.n	8009a70 <_strtod_l+0xb70>
 8009a30:	a325      	add	r3, pc, #148	; (adr r3, 8009ac8 <_strtod_l+0xbc8>)
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	4630      	mov	r0, r6
 8009a38:	4639      	mov	r1, r7
 8009a3a:	f7f7 f875 	bl	8000b28 <__aeabi_dcmple>
 8009a3e:	b190      	cbz	r0, 8009a66 <_strtod_l+0xb66>
 8009a40:	4639      	mov	r1, r7
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7f7 f8cc 	bl	8000be0 <__aeabi_d2uiz>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	bf08      	it	eq
 8009a4c:	2001      	moveq	r0, #1
 8009a4e:	f7f6 fd79 	bl	8000544 <__aeabi_ui2d>
 8009a52:	9b08      	ldr	r3, [sp, #32]
 8009a54:	4606      	mov	r6, r0
 8009a56:	460f      	mov	r7, r1
 8009a58:	b9db      	cbnz	r3, 8009a92 <_strtod_l+0xb92>
 8009a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a5e:	9012      	str	r0, [sp, #72]	; 0x48
 8009a60:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a62:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 8009a66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a68:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 8009a6c:	eba3 0902 	sub.w	r9, r3, r2
 8009a70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009a74:	f7ff f890 	bl	8008b98 <__ulp>
 8009a78:	4640      	mov	r0, r8
 8009a7a:	ec53 2b10 	vmov	r2, r3, d0
 8009a7e:	4649      	mov	r1, r9
 8009a80:	f7f6 fdd6 	bl	8000630 <__aeabi_dmul>
 8009a84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a88:	f7f6 fc20 	bl	80002cc <__adddf3>
 8009a8c:	4682      	mov	sl, r0
 8009a8e:	468b      	mov	fp, r1
 8009a90:	e777      	b.n	8009982 <_strtod_l+0xa82>
 8009a92:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009a96:	e7e4      	b.n	8009a62 <_strtod_l+0xb62>
 8009a98:	a30d      	add	r3, pc, #52	; (adr r3, 8009ad0 <_strtod_l+0xbd0>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	f7f7 f839 	bl	8000b14 <__aeabi_dcmplt>
 8009aa2:	e7a1      	b.n	80099e8 <_strtod_l+0xae8>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009aaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	f7ff ba6b 	b.w	8008f88 <_strtod_l+0x88>
 8009ab2:	2b65      	cmp	r3, #101	; 0x65
 8009ab4:	f04f 0200 	mov.w	r2, #0
 8009ab8:	f43f abb6 	beq.w	8009228 <_strtod_l+0x328>
 8009abc:	4615      	mov	r5, r2
 8009abe:	2101      	movs	r1, #1
 8009ac0:	f7ff badc 	b.w	800907c <_strtod_l+0x17c>
 8009ac4:	f3af 8000 	nop.w
 8009ac8:	ffc00000 	.word	0xffc00000
 8009acc:	41dfffff 	.word	0x41dfffff
 8009ad0:	94a03595 	.word	0x94a03595
 8009ad4:	3fcfffff 	.word	0x3fcfffff

08009ad8 <_strtod_r>:
 8009ad8:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <_strtod_r+0x18>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	b410      	push	{r4}
 8009ade:	6a1b      	ldr	r3, [r3, #32]
 8009ae0:	4c04      	ldr	r4, [pc, #16]	; (8009af4 <_strtod_r+0x1c>)
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	bf08      	it	eq
 8009ae6:	4623      	moveq	r3, r4
 8009ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aec:	f7ff ba08 	b.w	8008f00 <_strtod_l>
 8009af0:	2000000c 	.word	0x2000000c
 8009af4:	20000100 	.word	0x20000100

08009af8 <_strtol_l.isra.0>:
 8009af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	4680      	mov	r8, r0
 8009afe:	4689      	mov	r9, r1
 8009b00:	4692      	mov	sl, r2
 8009b02:	461f      	mov	r7, r3
 8009b04:	468b      	mov	fp, r1
 8009b06:	465d      	mov	r5, fp
 8009b08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b0e:	f7fe fb01 	bl	8008114 <__locale_ctype_ptr_l>
 8009b12:	4420      	add	r0, r4
 8009b14:	7846      	ldrb	r6, [r0, #1]
 8009b16:	f016 0608 	ands.w	r6, r6, #8
 8009b1a:	d10b      	bne.n	8009b34 <_strtol_l.isra.0+0x3c>
 8009b1c:	2c2d      	cmp	r4, #45	; 0x2d
 8009b1e:	d10b      	bne.n	8009b38 <_strtol_l.isra.0+0x40>
 8009b20:	782c      	ldrb	r4, [r5, #0]
 8009b22:	2601      	movs	r6, #1
 8009b24:	f10b 0502 	add.w	r5, fp, #2
 8009b28:	b167      	cbz	r7, 8009b44 <_strtol_l.isra.0+0x4c>
 8009b2a:	2f10      	cmp	r7, #16
 8009b2c:	d114      	bne.n	8009b58 <_strtol_l.isra.0+0x60>
 8009b2e:	2c30      	cmp	r4, #48	; 0x30
 8009b30:	d00a      	beq.n	8009b48 <_strtol_l.isra.0+0x50>
 8009b32:	e011      	b.n	8009b58 <_strtol_l.isra.0+0x60>
 8009b34:	46ab      	mov	fp, r5
 8009b36:	e7e6      	b.n	8009b06 <_strtol_l.isra.0+0xe>
 8009b38:	2c2b      	cmp	r4, #43	; 0x2b
 8009b3a:	bf04      	itt	eq
 8009b3c:	782c      	ldrbeq	r4, [r5, #0]
 8009b3e:	f10b 0502 	addeq.w	r5, fp, #2
 8009b42:	e7f1      	b.n	8009b28 <_strtol_l.isra.0+0x30>
 8009b44:	2c30      	cmp	r4, #48	; 0x30
 8009b46:	d127      	bne.n	8009b98 <_strtol_l.isra.0+0xa0>
 8009b48:	782b      	ldrb	r3, [r5, #0]
 8009b4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b4e:	2b58      	cmp	r3, #88	; 0x58
 8009b50:	d14b      	bne.n	8009bea <_strtol_l.isra.0+0xf2>
 8009b52:	786c      	ldrb	r4, [r5, #1]
 8009b54:	2710      	movs	r7, #16
 8009b56:	3502      	adds	r5, #2
 8009b58:	2e00      	cmp	r6, #0
 8009b5a:	bf0c      	ite	eq
 8009b5c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009b60:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009b64:	2200      	movs	r2, #0
 8009b66:	fbb1 fef7 	udiv	lr, r1, r7
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	fb07 1c1e 	mls	ip, r7, lr, r1
 8009b70:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009b74:	2b09      	cmp	r3, #9
 8009b76:	d811      	bhi.n	8009b9c <_strtol_l.isra.0+0xa4>
 8009b78:	461c      	mov	r4, r3
 8009b7a:	42a7      	cmp	r7, r4
 8009b7c:	dd1d      	ble.n	8009bba <_strtol_l.isra.0+0xc2>
 8009b7e:	1c53      	adds	r3, r2, #1
 8009b80:	d007      	beq.n	8009b92 <_strtol_l.isra.0+0x9a>
 8009b82:	4586      	cmp	lr, r0
 8009b84:	d316      	bcc.n	8009bb4 <_strtol_l.isra.0+0xbc>
 8009b86:	d101      	bne.n	8009b8c <_strtol_l.isra.0+0x94>
 8009b88:	45a4      	cmp	ip, r4
 8009b8a:	db13      	blt.n	8009bb4 <_strtol_l.isra.0+0xbc>
 8009b8c:	fb00 4007 	mla	r0, r0, r7, r4
 8009b90:	2201      	movs	r2, #1
 8009b92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b96:	e7eb      	b.n	8009b70 <_strtol_l.isra.0+0x78>
 8009b98:	270a      	movs	r7, #10
 8009b9a:	e7dd      	b.n	8009b58 <_strtol_l.isra.0+0x60>
 8009b9c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009ba0:	2b19      	cmp	r3, #25
 8009ba2:	d801      	bhi.n	8009ba8 <_strtol_l.isra.0+0xb0>
 8009ba4:	3c37      	subs	r4, #55	; 0x37
 8009ba6:	e7e8      	b.n	8009b7a <_strtol_l.isra.0+0x82>
 8009ba8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009bac:	2b19      	cmp	r3, #25
 8009bae:	d804      	bhi.n	8009bba <_strtol_l.isra.0+0xc2>
 8009bb0:	3c57      	subs	r4, #87	; 0x57
 8009bb2:	e7e2      	b.n	8009b7a <_strtol_l.isra.0+0x82>
 8009bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bb8:	e7eb      	b.n	8009b92 <_strtol_l.isra.0+0x9a>
 8009bba:	1c53      	adds	r3, r2, #1
 8009bbc:	d108      	bne.n	8009bd0 <_strtol_l.isra.0+0xd8>
 8009bbe:	2322      	movs	r3, #34	; 0x22
 8009bc0:	f8c8 3000 	str.w	r3, [r8]
 8009bc4:	4608      	mov	r0, r1
 8009bc6:	f1ba 0f00 	cmp.w	sl, #0
 8009bca:	d107      	bne.n	8009bdc <_strtol_l.isra.0+0xe4>
 8009bcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd0:	b106      	cbz	r6, 8009bd4 <_strtol_l.isra.0+0xdc>
 8009bd2:	4240      	negs	r0, r0
 8009bd4:	f1ba 0f00 	cmp.w	sl, #0
 8009bd8:	d00c      	beq.n	8009bf4 <_strtol_l.isra.0+0xfc>
 8009bda:	b122      	cbz	r2, 8009be6 <_strtol_l.isra.0+0xee>
 8009bdc:	3d01      	subs	r5, #1
 8009bde:	f8ca 5000 	str.w	r5, [sl]
 8009be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be6:	464d      	mov	r5, r9
 8009be8:	e7f9      	b.n	8009bde <_strtol_l.isra.0+0xe6>
 8009bea:	2430      	movs	r4, #48	; 0x30
 8009bec:	2f00      	cmp	r7, #0
 8009bee:	d1b3      	bne.n	8009b58 <_strtol_l.isra.0+0x60>
 8009bf0:	2708      	movs	r7, #8
 8009bf2:	e7b1      	b.n	8009b58 <_strtol_l.isra.0+0x60>
 8009bf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009bf8 <_strtol_r>:
 8009bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bfa:	4c06      	ldr	r4, [pc, #24]	; (8009c14 <_strtol_r+0x1c>)
 8009bfc:	4d06      	ldr	r5, [pc, #24]	; (8009c18 <_strtol_r+0x20>)
 8009bfe:	6824      	ldr	r4, [r4, #0]
 8009c00:	6a24      	ldr	r4, [r4, #32]
 8009c02:	2c00      	cmp	r4, #0
 8009c04:	bf08      	it	eq
 8009c06:	462c      	moveq	r4, r5
 8009c08:	9400      	str	r4, [sp, #0]
 8009c0a:	f7ff ff75 	bl	8009af8 <_strtol_l.isra.0>
 8009c0e:	b003      	add	sp, #12
 8009c10:	bd30      	pop	{r4, r5, pc}
 8009c12:	bf00      	nop
 8009c14:	2000000c 	.word	0x2000000c
 8009c18:	20000100 	.word	0x20000100

08009c1c <_strtoll_l.isra.0>:
 8009c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c20:	b087      	sub	sp, #28
 8009c22:	4688      	mov	r8, r1
 8009c24:	9005      	str	r0, [sp, #20]
 8009c26:	4693      	mov	fp, r2
 8009c28:	461f      	mov	r7, r3
 8009c2a:	4689      	mov	r9, r1
 8009c2c:	464d      	mov	r5, r9
 8009c2e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009c30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c34:	f7fe fa6e 	bl	8008114 <__locale_ctype_ptr_l>
 8009c38:	4420      	add	r0, r4
 8009c3a:	7846      	ldrb	r6, [r0, #1]
 8009c3c:	f016 0608 	ands.w	r6, r6, #8
 8009c40:	d10b      	bne.n	8009c5a <_strtoll_l.isra.0+0x3e>
 8009c42:	2c2d      	cmp	r4, #45	; 0x2d
 8009c44:	d10b      	bne.n	8009c5e <_strtoll_l.isra.0+0x42>
 8009c46:	782c      	ldrb	r4, [r5, #0]
 8009c48:	2601      	movs	r6, #1
 8009c4a:	f109 0502 	add.w	r5, r9, #2
 8009c4e:	b167      	cbz	r7, 8009c6a <_strtoll_l.isra.0+0x4e>
 8009c50:	2f10      	cmp	r7, #16
 8009c52:	d114      	bne.n	8009c7e <_strtoll_l.isra.0+0x62>
 8009c54:	2c30      	cmp	r4, #48	; 0x30
 8009c56:	d00a      	beq.n	8009c6e <_strtoll_l.isra.0+0x52>
 8009c58:	e011      	b.n	8009c7e <_strtoll_l.isra.0+0x62>
 8009c5a:	46a9      	mov	r9, r5
 8009c5c:	e7e6      	b.n	8009c2c <_strtoll_l.isra.0+0x10>
 8009c5e:	2c2b      	cmp	r4, #43	; 0x2b
 8009c60:	bf04      	itt	eq
 8009c62:	782c      	ldrbeq	r4, [r5, #0]
 8009c64:	f109 0502 	addeq.w	r5, r9, #2
 8009c68:	e7f1      	b.n	8009c4e <_strtoll_l.isra.0+0x32>
 8009c6a:	2c30      	cmp	r4, #48	; 0x30
 8009c6c:	d144      	bne.n	8009cf8 <_strtoll_l.isra.0+0xdc>
 8009c6e:	782b      	ldrb	r3, [r5, #0]
 8009c70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c74:	2b58      	cmp	r3, #88	; 0x58
 8009c76:	d170      	bne.n	8009d5a <_strtoll_l.isra.0+0x13e>
 8009c78:	786c      	ldrb	r4, [r5, #1]
 8009c7a:	2710      	movs	r7, #16
 8009c7c:	3502      	adds	r5, #2
 8009c7e:	2e00      	cmp	r6, #0
 8009c80:	d03c      	beq.n	8009cfc <_strtoll_l.isra.0+0xe0>
 8009c82:	f04f 0a00 	mov.w	sl, #0
 8009c86:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009c8a:	463a      	mov	r2, r7
 8009c8c:	17fb      	asrs	r3, r7, #31
 8009c8e:	4650      	mov	r0, sl
 8009c90:	4649      	mov	r1, r9
 8009c92:	e9cd 2300 	strd	r2, r3, [sp]
 8009c96:	f7f7 f813 	bl	8000cc0 <__aeabi_uldivmod>
 8009c9a:	17fb      	asrs	r3, r7, #31
 8009c9c:	9204      	str	r2, [sp, #16]
 8009c9e:	4650      	mov	r0, sl
 8009ca0:	463a      	mov	r2, r7
 8009ca2:	4649      	mov	r1, r9
 8009ca4:	f7f7 f80c 	bl	8000cc0 <__aeabi_uldivmod>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cae:	2000      	movs	r0, #0
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8009cb6:	2a09      	cmp	r2, #9
 8009cb8:	d825      	bhi.n	8009d06 <_strtoll_l.isra.0+0xea>
 8009cba:	4614      	mov	r4, r2
 8009cbc:	42a7      	cmp	r7, r4
 8009cbe:	dd31      	ble.n	8009d24 <_strtoll_l.isra.0+0x108>
 8009cc0:	1c5a      	adds	r2, r3, #1
 8009cc2:	d016      	beq.n	8009cf2 <_strtoll_l.isra.0+0xd6>
 8009cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cc8:	428b      	cmp	r3, r1
 8009cca:	bf08      	it	eq
 8009ccc:	4282      	cmpeq	r2, r0
 8009cce:	d326      	bcc.n	8009d1e <_strtoll_l.isra.0+0x102>
 8009cd0:	d102      	bne.n	8009cd8 <_strtoll_l.isra.0+0xbc>
 8009cd2:	9b04      	ldr	r3, [sp, #16]
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	db22      	blt.n	8009d1e <_strtoll_l.isra.0+0x102>
 8009cd8:	9b00      	ldr	r3, [sp, #0]
 8009cda:	9a01      	ldr	r2, [sp, #4]
 8009cdc:	434b      	muls	r3, r1
 8009cde:	fb00 3302 	mla	r3, r0, r2, r3
 8009ce2:	9a00      	ldr	r2, [sp, #0]
 8009ce4:	fba2 0100 	umull	r0, r1, r2, r0
 8009ce8:	4419      	add	r1, r3
 8009cea:	1900      	adds	r0, r0, r4
 8009cec:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cf6:	e7dc      	b.n	8009cb2 <_strtoll_l.isra.0+0x96>
 8009cf8:	270a      	movs	r7, #10
 8009cfa:	e7c0      	b.n	8009c7e <_strtoll_l.isra.0+0x62>
 8009cfc:	f04f 3aff 	mov.w	sl, #4294967295
 8009d00:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009d04:	e7c1      	b.n	8009c8a <_strtoll_l.isra.0+0x6e>
 8009d06:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8009d0a:	2a19      	cmp	r2, #25
 8009d0c:	d801      	bhi.n	8009d12 <_strtoll_l.isra.0+0xf6>
 8009d0e:	3c37      	subs	r4, #55	; 0x37
 8009d10:	e7d4      	b.n	8009cbc <_strtoll_l.isra.0+0xa0>
 8009d12:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8009d16:	2a19      	cmp	r2, #25
 8009d18:	d804      	bhi.n	8009d24 <_strtoll_l.isra.0+0x108>
 8009d1a:	3c57      	subs	r4, #87	; 0x57
 8009d1c:	e7ce      	b.n	8009cbc <_strtoll_l.isra.0+0xa0>
 8009d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d22:	e7e6      	b.n	8009cf2 <_strtoll_l.isra.0+0xd6>
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	d10a      	bne.n	8009d3e <_strtoll_l.isra.0+0x122>
 8009d28:	9a05      	ldr	r2, [sp, #20]
 8009d2a:	2322      	movs	r3, #34	; 0x22
 8009d2c:	6013      	str	r3, [r2, #0]
 8009d2e:	4650      	mov	r0, sl
 8009d30:	4649      	mov	r1, r9
 8009d32:	f1bb 0f00 	cmp.w	fp, #0
 8009d36:	d10a      	bne.n	8009d4e <_strtoll_l.isra.0+0x132>
 8009d38:	b007      	add	sp, #28
 8009d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3e:	b116      	cbz	r6, 8009d46 <_strtoll_l.isra.0+0x12a>
 8009d40:	4240      	negs	r0, r0
 8009d42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009d46:	f1bb 0f00 	cmp.w	fp, #0
 8009d4a:	d0f5      	beq.n	8009d38 <_strtoll_l.isra.0+0x11c>
 8009d4c:	b11b      	cbz	r3, 8009d56 <_strtoll_l.isra.0+0x13a>
 8009d4e:	3d01      	subs	r5, #1
 8009d50:	f8cb 5000 	str.w	r5, [fp]
 8009d54:	e7f0      	b.n	8009d38 <_strtoll_l.isra.0+0x11c>
 8009d56:	4645      	mov	r5, r8
 8009d58:	e7fa      	b.n	8009d50 <_strtoll_l.isra.0+0x134>
 8009d5a:	2430      	movs	r4, #48	; 0x30
 8009d5c:	2f00      	cmp	r7, #0
 8009d5e:	d18e      	bne.n	8009c7e <_strtoll_l.isra.0+0x62>
 8009d60:	2708      	movs	r7, #8
 8009d62:	e78c      	b.n	8009c7e <_strtoll_l.isra.0+0x62>

08009d64 <_strtoll_r>:
 8009d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d66:	4c06      	ldr	r4, [pc, #24]	; (8009d80 <_strtoll_r+0x1c>)
 8009d68:	4d06      	ldr	r5, [pc, #24]	; (8009d84 <_strtoll_r+0x20>)
 8009d6a:	6824      	ldr	r4, [r4, #0]
 8009d6c:	6a24      	ldr	r4, [r4, #32]
 8009d6e:	2c00      	cmp	r4, #0
 8009d70:	bf08      	it	eq
 8009d72:	462c      	moveq	r4, r5
 8009d74:	9400      	str	r4, [sp, #0]
 8009d76:	f7ff ff51 	bl	8009c1c <_strtoll_l.isra.0>
 8009d7a:	b003      	add	sp, #12
 8009d7c:	bd30      	pop	{r4, r5, pc}
 8009d7e:	bf00      	nop
 8009d80:	2000000c 	.word	0x2000000c
 8009d84:	20000100 	.word	0x20000100

08009d88 <_strtoul_l.isra.0>:
 8009d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d8c:	4680      	mov	r8, r0
 8009d8e:	4689      	mov	r9, r1
 8009d90:	4692      	mov	sl, r2
 8009d92:	461e      	mov	r6, r3
 8009d94:	460f      	mov	r7, r1
 8009d96:	463d      	mov	r5, r7
 8009d98:	9808      	ldr	r0, [sp, #32]
 8009d9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d9e:	f7fe f9b9 	bl	8008114 <__locale_ctype_ptr_l>
 8009da2:	4420      	add	r0, r4
 8009da4:	7843      	ldrb	r3, [r0, #1]
 8009da6:	f013 0308 	ands.w	r3, r3, #8
 8009daa:	d10a      	bne.n	8009dc2 <_strtoul_l.isra.0+0x3a>
 8009dac:	2c2d      	cmp	r4, #45	; 0x2d
 8009dae:	d10a      	bne.n	8009dc6 <_strtoul_l.isra.0+0x3e>
 8009db0:	782c      	ldrb	r4, [r5, #0]
 8009db2:	2301      	movs	r3, #1
 8009db4:	1cbd      	adds	r5, r7, #2
 8009db6:	b15e      	cbz	r6, 8009dd0 <_strtoul_l.isra.0+0x48>
 8009db8:	2e10      	cmp	r6, #16
 8009dba:	d113      	bne.n	8009de4 <_strtoul_l.isra.0+0x5c>
 8009dbc:	2c30      	cmp	r4, #48	; 0x30
 8009dbe:	d009      	beq.n	8009dd4 <_strtoul_l.isra.0+0x4c>
 8009dc0:	e010      	b.n	8009de4 <_strtoul_l.isra.0+0x5c>
 8009dc2:	462f      	mov	r7, r5
 8009dc4:	e7e7      	b.n	8009d96 <_strtoul_l.isra.0+0xe>
 8009dc6:	2c2b      	cmp	r4, #43	; 0x2b
 8009dc8:	bf04      	itt	eq
 8009dca:	782c      	ldrbeq	r4, [r5, #0]
 8009dcc:	1cbd      	addeq	r5, r7, #2
 8009dce:	e7f2      	b.n	8009db6 <_strtoul_l.isra.0+0x2e>
 8009dd0:	2c30      	cmp	r4, #48	; 0x30
 8009dd2:	d125      	bne.n	8009e20 <_strtoul_l.isra.0+0x98>
 8009dd4:	782a      	ldrb	r2, [r5, #0]
 8009dd6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009dda:	2a58      	cmp	r2, #88	; 0x58
 8009ddc:	d14a      	bne.n	8009e74 <_strtoul_l.isra.0+0xec>
 8009dde:	786c      	ldrb	r4, [r5, #1]
 8009de0:	2610      	movs	r6, #16
 8009de2:	3502      	adds	r5, #2
 8009de4:	f04f 31ff 	mov.w	r1, #4294967295
 8009de8:	2700      	movs	r7, #0
 8009dea:	fbb1 f1f6 	udiv	r1, r1, r6
 8009dee:	fb06 fe01 	mul.w	lr, r6, r1
 8009df2:	ea6f 0e0e 	mvn.w	lr, lr
 8009df6:	4638      	mov	r0, r7
 8009df8:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8009dfc:	2a09      	cmp	r2, #9
 8009dfe:	d811      	bhi.n	8009e24 <_strtoul_l.isra.0+0x9c>
 8009e00:	4614      	mov	r4, r2
 8009e02:	42a6      	cmp	r6, r4
 8009e04:	dd1d      	ble.n	8009e42 <_strtoul_l.isra.0+0xba>
 8009e06:	2f00      	cmp	r7, #0
 8009e08:	db18      	blt.n	8009e3c <_strtoul_l.isra.0+0xb4>
 8009e0a:	4281      	cmp	r1, r0
 8009e0c:	d316      	bcc.n	8009e3c <_strtoul_l.isra.0+0xb4>
 8009e0e:	d101      	bne.n	8009e14 <_strtoul_l.isra.0+0x8c>
 8009e10:	45a6      	cmp	lr, r4
 8009e12:	db13      	blt.n	8009e3c <_strtoul_l.isra.0+0xb4>
 8009e14:	fb00 4006 	mla	r0, r0, r6, r4
 8009e18:	2701      	movs	r7, #1
 8009e1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e1e:	e7eb      	b.n	8009df8 <_strtoul_l.isra.0+0x70>
 8009e20:	260a      	movs	r6, #10
 8009e22:	e7df      	b.n	8009de4 <_strtoul_l.isra.0+0x5c>
 8009e24:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8009e28:	2a19      	cmp	r2, #25
 8009e2a:	d801      	bhi.n	8009e30 <_strtoul_l.isra.0+0xa8>
 8009e2c:	3c37      	subs	r4, #55	; 0x37
 8009e2e:	e7e8      	b.n	8009e02 <_strtoul_l.isra.0+0x7a>
 8009e30:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8009e34:	2a19      	cmp	r2, #25
 8009e36:	d804      	bhi.n	8009e42 <_strtoul_l.isra.0+0xba>
 8009e38:	3c57      	subs	r4, #87	; 0x57
 8009e3a:	e7e2      	b.n	8009e02 <_strtoul_l.isra.0+0x7a>
 8009e3c:	f04f 37ff 	mov.w	r7, #4294967295
 8009e40:	e7eb      	b.n	8009e1a <_strtoul_l.isra.0+0x92>
 8009e42:	2f00      	cmp	r7, #0
 8009e44:	da09      	bge.n	8009e5a <_strtoul_l.isra.0+0xd2>
 8009e46:	2322      	movs	r3, #34	; 0x22
 8009e48:	f8c8 3000 	str.w	r3, [r8]
 8009e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e50:	f1ba 0f00 	cmp.w	sl, #0
 8009e54:	d107      	bne.n	8009e66 <_strtoul_l.isra.0+0xde>
 8009e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e5a:	b103      	cbz	r3, 8009e5e <_strtoul_l.isra.0+0xd6>
 8009e5c:	4240      	negs	r0, r0
 8009e5e:	f1ba 0f00 	cmp.w	sl, #0
 8009e62:	d00c      	beq.n	8009e7e <_strtoul_l.isra.0+0xf6>
 8009e64:	b127      	cbz	r7, 8009e70 <_strtoul_l.isra.0+0xe8>
 8009e66:	3d01      	subs	r5, #1
 8009e68:	f8ca 5000 	str.w	r5, [sl]
 8009e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e70:	464d      	mov	r5, r9
 8009e72:	e7f9      	b.n	8009e68 <_strtoul_l.isra.0+0xe0>
 8009e74:	2430      	movs	r4, #48	; 0x30
 8009e76:	2e00      	cmp	r6, #0
 8009e78:	d1b4      	bne.n	8009de4 <_strtoul_l.isra.0+0x5c>
 8009e7a:	2608      	movs	r6, #8
 8009e7c:	e7b2      	b.n	8009de4 <_strtoul_l.isra.0+0x5c>
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08009e84 <_strtoul_r>:
 8009e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e86:	4c06      	ldr	r4, [pc, #24]	; (8009ea0 <_strtoul_r+0x1c>)
 8009e88:	4d06      	ldr	r5, [pc, #24]	; (8009ea4 <_strtoul_r+0x20>)
 8009e8a:	6824      	ldr	r4, [r4, #0]
 8009e8c:	6a24      	ldr	r4, [r4, #32]
 8009e8e:	2c00      	cmp	r4, #0
 8009e90:	bf08      	it	eq
 8009e92:	462c      	moveq	r4, r5
 8009e94:	9400      	str	r4, [sp, #0]
 8009e96:	f7ff ff77 	bl	8009d88 <_strtoul_l.isra.0>
 8009e9a:	b003      	add	sp, #12
 8009e9c:	bd30      	pop	{r4, r5, pc}
 8009e9e:	bf00      	nop
 8009ea0:	2000000c 	.word	0x2000000c
 8009ea4:	20000100 	.word	0x20000100

08009ea8 <_strtoull_l.isra.0>:
 8009ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	b085      	sub	sp, #20
 8009eae:	4688      	mov	r8, r1
 8009eb0:	9003      	str	r0, [sp, #12]
 8009eb2:	4691      	mov	r9, r2
 8009eb4:	461f      	mov	r7, r3
 8009eb6:	468b      	mov	fp, r1
 8009eb8:	465d      	mov	r5, fp
 8009eba:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009ebc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ec0:	f7fe f928 	bl	8008114 <__locale_ctype_ptr_l>
 8009ec4:	4420      	add	r0, r4
 8009ec6:	7846      	ldrb	r6, [r0, #1]
 8009ec8:	f016 0608 	ands.w	r6, r6, #8
 8009ecc:	d10b      	bne.n	8009ee6 <_strtoull_l.isra.0+0x3e>
 8009ece:	2c2d      	cmp	r4, #45	; 0x2d
 8009ed0:	d10b      	bne.n	8009eea <_strtoull_l.isra.0+0x42>
 8009ed2:	782c      	ldrb	r4, [r5, #0]
 8009ed4:	2601      	movs	r6, #1
 8009ed6:	f10b 0502 	add.w	r5, fp, #2
 8009eda:	b167      	cbz	r7, 8009ef6 <_strtoull_l.isra.0+0x4e>
 8009edc:	2f10      	cmp	r7, #16
 8009ede:	d114      	bne.n	8009f0a <_strtoull_l.isra.0+0x62>
 8009ee0:	2c30      	cmp	r4, #48	; 0x30
 8009ee2:	d00a      	beq.n	8009efa <_strtoull_l.isra.0+0x52>
 8009ee4:	e011      	b.n	8009f0a <_strtoull_l.isra.0+0x62>
 8009ee6:	46ab      	mov	fp, r5
 8009ee8:	e7e6      	b.n	8009eb8 <_strtoull_l.isra.0+0x10>
 8009eea:	2c2b      	cmp	r4, #43	; 0x2b
 8009eec:	bf04      	itt	eq
 8009eee:	782c      	ldrbeq	r4, [r5, #0]
 8009ef0:	f10b 0502 	addeq.w	r5, fp, #2
 8009ef4:	e7f1      	b.n	8009eda <_strtoull_l.isra.0+0x32>
 8009ef6:	2c30      	cmp	r4, #48	; 0x30
 8009ef8:	d141      	bne.n	8009f7e <_strtoull_l.isra.0+0xd6>
 8009efa:	782b      	ldrb	r3, [r5, #0]
 8009efc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f00:	2b58      	cmp	r3, #88	; 0x58
 8009f02:	d16c      	bne.n	8009fde <_strtoull_l.isra.0+0x136>
 8009f04:	786c      	ldrb	r4, [r5, #1]
 8009f06:	2710      	movs	r7, #16
 8009f08:	3502      	adds	r5, #2
 8009f0a:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8009f0e:	463a      	mov	r2, r7
 8009f10:	465b      	mov	r3, fp
 8009f12:	f04f 30ff 	mov.w	r0, #4294967295
 8009f16:	f04f 31ff 	mov.w	r1, #4294967295
 8009f1a:	f7f6 fed1 	bl	8000cc0 <__aeabi_uldivmod>
 8009f1e:	463a      	mov	r2, r7
 8009f20:	e9cd 0100 	strd	r0, r1, [sp]
 8009f24:	465b      	mov	r3, fp
 8009f26:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2a:	f04f 31ff 	mov.w	r1, #4294967295
 8009f2e:	f7f6 fec7 	bl	8000cc0 <__aeabi_uldivmod>
 8009f32:	46ba      	mov	sl, r7
 8009f34:	4694      	mov	ip, r2
 8009f36:	2300      	movs	r3, #0
 8009f38:	2000      	movs	r0, #0
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009f40:	f1be 0f09 	cmp.w	lr, #9
 8009f44:	d81d      	bhi.n	8009f82 <_strtoull_l.isra.0+0xda>
 8009f46:	4674      	mov	r4, lr
 8009f48:	42a7      	cmp	r7, r4
 8009f4a:	dd2b      	ble.n	8009fa4 <_strtoull_l.isra.0+0xfc>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	db26      	blt.n	8009f9e <_strtoull_l.isra.0+0xf6>
 8009f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f54:	428b      	cmp	r3, r1
 8009f56:	bf08      	it	eq
 8009f58:	4282      	cmpeq	r2, r0
 8009f5a:	d320      	bcc.n	8009f9e <_strtoull_l.isra.0+0xf6>
 8009f5c:	d101      	bne.n	8009f62 <_strtoull_l.isra.0+0xba>
 8009f5e:	45a4      	cmp	ip, r4
 8009f60:	db1d      	blt.n	8009f9e <_strtoull_l.isra.0+0xf6>
 8009f62:	fb0a f301 	mul.w	r3, sl, r1
 8009f66:	fb00 330b 	mla	r3, r0, fp, r3
 8009f6a:	fbaa 0100 	umull	r0, r1, sl, r0
 8009f6e:	4419      	add	r1, r3
 8009f70:	1900      	adds	r0, r0, r4
 8009f72:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8009f76:	2301      	movs	r3, #1
 8009f78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f7c:	e7de      	b.n	8009f3c <_strtoull_l.isra.0+0x94>
 8009f7e:	270a      	movs	r7, #10
 8009f80:	e7c3      	b.n	8009f0a <_strtoull_l.isra.0+0x62>
 8009f82:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009f86:	f1be 0f19 	cmp.w	lr, #25
 8009f8a:	d801      	bhi.n	8009f90 <_strtoull_l.isra.0+0xe8>
 8009f8c:	3c37      	subs	r4, #55	; 0x37
 8009f8e:	e7db      	b.n	8009f48 <_strtoull_l.isra.0+0xa0>
 8009f90:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009f94:	f1be 0f19 	cmp.w	lr, #25
 8009f98:	d804      	bhi.n	8009fa4 <_strtoull_l.isra.0+0xfc>
 8009f9a:	3c57      	subs	r4, #87	; 0x57
 8009f9c:	e7d4      	b.n	8009f48 <_strtoull_l.isra.0+0xa0>
 8009f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa2:	e7e9      	b.n	8009f78 <_strtoull_l.isra.0+0xd0>
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	da0c      	bge.n	8009fc2 <_strtoull_l.isra.0+0x11a>
 8009fa8:	9a03      	ldr	r2, [sp, #12]
 8009faa:	2322      	movs	r3, #34	; 0x22
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb2:	f04f 31ff 	mov.w	r1, #4294967295
 8009fb6:	f1b9 0f00 	cmp.w	r9, #0
 8009fba:	d10a      	bne.n	8009fd2 <_strtoull_l.isra.0+0x12a>
 8009fbc:	b005      	add	sp, #20
 8009fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc2:	b116      	cbz	r6, 8009fca <_strtoull_l.isra.0+0x122>
 8009fc4:	4240      	negs	r0, r0
 8009fc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009fca:	f1b9 0f00 	cmp.w	r9, #0
 8009fce:	d0f5      	beq.n	8009fbc <_strtoull_l.isra.0+0x114>
 8009fd0:	b11b      	cbz	r3, 8009fda <_strtoull_l.isra.0+0x132>
 8009fd2:	3d01      	subs	r5, #1
 8009fd4:	f8c9 5000 	str.w	r5, [r9]
 8009fd8:	e7f0      	b.n	8009fbc <_strtoull_l.isra.0+0x114>
 8009fda:	4645      	mov	r5, r8
 8009fdc:	e7fa      	b.n	8009fd4 <_strtoull_l.isra.0+0x12c>
 8009fde:	2430      	movs	r4, #48	; 0x30
 8009fe0:	2f00      	cmp	r7, #0
 8009fe2:	d192      	bne.n	8009f0a <_strtoull_l.isra.0+0x62>
 8009fe4:	2708      	movs	r7, #8
 8009fe6:	e790      	b.n	8009f0a <_strtoull_l.isra.0+0x62>

08009fe8 <_strtoull_r>:
 8009fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fea:	4c06      	ldr	r4, [pc, #24]	; (800a004 <_strtoull_r+0x1c>)
 8009fec:	4d06      	ldr	r5, [pc, #24]	; (800a008 <_strtoull_r+0x20>)
 8009fee:	6824      	ldr	r4, [r4, #0]
 8009ff0:	6a24      	ldr	r4, [r4, #32]
 8009ff2:	2c00      	cmp	r4, #0
 8009ff4:	bf08      	it	eq
 8009ff6:	462c      	moveq	r4, r5
 8009ff8:	9400      	str	r4, [sp, #0]
 8009ffa:	f7ff ff55 	bl	8009ea8 <_strtoull_l.isra.0>
 8009ffe:	b003      	add	sp, #12
 800a000:	bd30      	pop	{r4, r5, pc}
 800a002:	bf00      	nop
 800a004:	2000000c 	.word	0x2000000c
 800a008:	20000100 	.word	0x20000100

0800a00c <__ssprint_r>:
 800a00c:	6893      	ldr	r3, [r2, #8]
 800a00e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a012:	4681      	mov	r9, r0
 800a014:	460c      	mov	r4, r1
 800a016:	4617      	mov	r7, r2
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d060      	beq.n	800a0de <__ssprint_r+0xd2>
 800a01c:	f04f 0b00 	mov.w	fp, #0
 800a020:	f8d2 a000 	ldr.w	sl, [r2]
 800a024:	465e      	mov	r6, fp
 800a026:	b356      	cbz	r6, 800a07e <__ssprint_r+0x72>
 800a028:	68a3      	ldr	r3, [r4, #8]
 800a02a:	429e      	cmp	r6, r3
 800a02c:	d344      	bcc.n	800a0b8 <__ssprint_r+0xac>
 800a02e:	89a2      	ldrh	r2, [r4, #12]
 800a030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a034:	d03e      	beq.n	800a0b4 <__ssprint_r+0xa8>
 800a036:	6825      	ldr	r5, [r4, #0]
 800a038:	6921      	ldr	r1, [r4, #16]
 800a03a:	eba5 0801 	sub.w	r8, r5, r1
 800a03e:	6965      	ldr	r5, [r4, #20]
 800a040:	2302      	movs	r3, #2
 800a042:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a046:	fb95 f5f3 	sdiv	r5, r5, r3
 800a04a:	f108 0301 	add.w	r3, r8, #1
 800a04e:	4433      	add	r3, r6
 800a050:	429d      	cmp	r5, r3
 800a052:	bf38      	it	cc
 800a054:	461d      	movcc	r5, r3
 800a056:	0553      	lsls	r3, r2, #21
 800a058:	d546      	bpl.n	800a0e8 <__ssprint_r+0xdc>
 800a05a:	4629      	mov	r1, r5
 800a05c:	4648      	mov	r0, r9
 800a05e:	f7fe f883 	bl	8008168 <_malloc_r>
 800a062:	b998      	cbnz	r0, 800a08c <__ssprint_r+0x80>
 800a064:	230c      	movs	r3, #12
 800a066:	f8c9 3000 	str.w	r3, [r9]
 800a06a:	89a3      	ldrh	r3, [r4, #12]
 800a06c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a070:	81a3      	strh	r3, [r4, #12]
 800a072:	2300      	movs	r3, #0
 800a074:	60bb      	str	r3, [r7, #8]
 800a076:	607b      	str	r3, [r7, #4]
 800a078:	f04f 30ff 	mov.w	r0, #4294967295
 800a07c:	e031      	b.n	800a0e2 <__ssprint_r+0xd6>
 800a07e:	f8da b000 	ldr.w	fp, [sl]
 800a082:	f8da 6004 	ldr.w	r6, [sl, #4]
 800a086:	f10a 0a08 	add.w	sl, sl, #8
 800a08a:	e7cc      	b.n	800a026 <__ssprint_r+0x1a>
 800a08c:	4642      	mov	r2, r8
 800a08e:	6921      	ldr	r1, [r4, #16]
 800a090:	9001      	str	r0, [sp, #4]
 800a092:	f7fb fc17 	bl	80058c4 <memcpy>
 800a096:	89a2      	ldrh	r2, [r4, #12]
 800a098:	9b01      	ldr	r3, [sp, #4]
 800a09a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a09e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a0a2:	81a2      	strh	r2, [r4, #12]
 800a0a4:	6123      	str	r3, [r4, #16]
 800a0a6:	6165      	str	r5, [r4, #20]
 800a0a8:	4443      	add	r3, r8
 800a0aa:	eba5 0508 	sub.w	r5, r5, r8
 800a0ae:	6023      	str	r3, [r4, #0]
 800a0b0:	60a5      	str	r5, [r4, #8]
 800a0b2:	4633      	mov	r3, r6
 800a0b4:	429e      	cmp	r6, r3
 800a0b6:	d200      	bcs.n	800a0ba <__ssprint_r+0xae>
 800a0b8:	4633      	mov	r3, r6
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	4659      	mov	r1, fp
 800a0be:	6820      	ldr	r0, [r4, #0]
 800a0c0:	9301      	str	r3, [sp, #4]
 800a0c2:	f000 fd54 	bl	800ab6e <memmove>
 800a0c6:	68a2      	ldr	r2, [r4, #8]
 800a0c8:	9b01      	ldr	r3, [sp, #4]
 800a0ca:	1ad2      	subs	r2, r2, r3
 800a0cc:	60a2      	str	r2, [r4, #8]
 800a0ce:	6822      	ldr	r2, [r4, #0]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	6023      	str	r3, [r4, #0]
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	1b9e      	subs	r6, r3, r6
 800a0d8:	60be      	str	r6, [r7, #8]
 800a0da:	2e00      	cmp	r6, #0
 800a0dc:	d1cf      	bne.n	800a07e <__ssprint_r+0x72>
 800a0de:	2000      	movs	r0, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	b003      	add	sp, #12
 800a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e8:	462a      	mov	r2, r5
 800a0ea:	4648      	mov	r0, r9
 800a0ec:	f000 fd5a 	bl	800aba4 <_realloc_r>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d1d6      	bne.n	800a0a4 <__ssprint_r+0x98>
 800a0f6:	6921      	ldr	r1, [r4, #16]
 800a0f8:	4648      	mov	r0, r9
 800a0fa:	f000 f95d 	bl	800a3b8 <_free_r>
 800a0fe:	e7b1      	b.n	800a064 <__ssprint_r+0x58>

0800a100 <_sungetc_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	1c4b      	adds	r3, r1, #1
 800a104:	4614      	mov	r4, r2
 800a106:	d103      	bne.n	800a110 <_sungetc_r+0x10>
 800a108:	f04f 35ff 	mov.w	r5, #4294967295
 800a10c:	4628      	mov	r0, r5
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	8993      	ldrh	r3, [r2, #12]
 800a112:	f023 0320 	bic.w	r3, r3, #32
 800a116:	8193      	strh	r3, [r2, #12]
 800a118:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a11a:	6852      	ldr	r2, [r2, #4]
 800a11c:	b2cd      	uxtb	r5, r1
 800a11e:	b18b      	cbz	r3, 800a144 <_sungetc_r+0x44>
 800a120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a122:	429a      	cmp	r2, r3
 800a124:	da08      	bge.n	800a138 <_sungetc_r+0x38>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	1e5a      	subs	r2, r3, #1
 800a12a:	6022      	str	r2, [r4, #0]
 800a12c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a130:	6863      	ldr	r3, [r4, #4]
 800a132:	3301      	adds	r3, #1
 800a134:	6063      	str	r3, [r4, #4]
 800a136:	e7e9      	b.n	800a10c <_sungetc_r+0xc>
 800a138:	4621      	mov	r1, r4
 800a13a:	f000 f872 	bl	800a222 <__submore>
 800a13e:	2800      	cmp	r0, #0
 800a140:	d0f1      	beq.n	800a126 <_sungetc_r+0x26>
 800a142:	e7e1      	b.n	800a108 <_sungetc_r+0x8>
 800a144:	6921      	ldr	r1, [r4, #16]
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	b151      	cbz	r1, 800a160 <_sungetc_r+0x60>
 800a14a:	4299      	cmp	r1, r3
 800a14c:	d208      	bcs.n	800a160 <_sungetc_r+0x60>
 800a14e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a152:	428d      	cmp	r5, r1
 800a154:	d104      	bne.n	800a160 <_sungetc_r+0x60>
 800a156:	3b01      	subs	r3, #1
 800a158:	3201      	adds	r2, #1
 800a15a:	6023      	str	r3, [r4, #0]
 800a15c:	6062      	str	r2, [r4, #4]
 800a15e:	e7d5      	b.n	800a10c <_sungetc_r+0xc>
 800a160:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a162:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a166:	6363      	str	r3, [r4, #52]	; 0x34
 800a168:	2303      	movs	r3, #3
 800a16a:	63a3      	str	r3, [r4, #56]	; 0x38
 800a16c:	4623      	mov	r3, r4
 800a16e:	6422      	str	r2, [r4, #64]	; 0x40
 800a170:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	2301      	movs	r3, #1
 800a178:	e7dc      	b.n	800a134 <_sungetc_r+0x34>

0800a17a <__ssrefill_r>:
 800a17a:	b510      	push	{r4, lr}
 800a17c:	460c      	mov	r4, r1
 800a17e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a180:	b169      	cbz	r1, 800a19e <__ssrefill_r+0x24>
 800a182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a186:	4299      	cmp	r1, r3
 800a188:	d001      	beq.n	800a18e <__ssrefill_r+0x14>
 800a18a:	f000 f915 	bl	800a3b8 <_free_r>
 800a18e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a190:	6063      	str	r3, [r4, #4]
 800a192:	2000      	movs	r0, #0
 800a194:	6360      	str	r0, [r4, #52]	; 0x34
 800a196:	b113      	cbz	r3, 800a19e <__ssrefill_r+0x24>
 800a198:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a19a:	6023      	str	r3, [r4, #0]
 800a19c:	bd10      	pop	{r4, pc}
 800a19e:	6923      	ldr	r3, [r4, #16]
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	6063      	str	r3, [r4, #4]
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	f043 0320 	orr.w	r3, r3, #32
 800a1ac:	81a3      	strh	r3, [r4, #12]
 800a1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b2:	bd10      	pop	{r4, pc}

0800a1b4 <_sfread_r>:
 800a1b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b8:	4615      	mov	r5, r2
 800a1ba:	435d      	muls	r5, r3
 800a1bc:	4682      	mov	sl, r0
 800a1be:	4691      	mov	r9, r2
 800a1c0:	4698      	mov	r8, r3
 800a1c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a1c4:	d029      	beq.n	800a21a <_sfread_r+0x66>
 800a1c6:	460f      	mov	r7, r1
 800a1c8:	462e      	mov	r6, r5
 800a1ca:	f04f 0b00 	mov.w	fp, #0
 800a1ce:	6863      	ldr	r3, [r4, #4]
 800a1d0:	429e      	cmp	r6, r3
 800a1d2:	d80c      	bhi.n	800a1ee <_sfread_r+0x3a>
 800a1d4:	4632      	mov	r2, r6
 800a1d6:	6821      	ldr	r1, [r4, #0]
 800a1d8:	4638      	mov	r0, r7
 800a1da:	f7fb fb73 	bl	80058c4 <memcpy>
 800a1de:	6863      	ldr	r3, [r4, #4]
 800a1e0:	6825      	ldr	r5, [r4, #0]
 800a1e2:	1b9b      	subs	r3, r3, r6
 800a1e4:	4435      	add	r5, r6
 800a1e6:	6025      	str	r5, [r4, #0]
 800a1e8:	6063      	str	r3, [r4, #4]
 800a1ea:	4645      	mov	r5, r8
 800a1ec:	e015      	b.n	800a21a <_sfread_r+0x66>
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	6821      	ldr	r1, [r4, #0]
 800a1f2:	9301      	str	r3, [sp, #4]
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	f7fb fb65 	bl	80058c4 <memcpy>
 800a1fa:	9b01      	ldr	r3, [sp, #4]
 800a1fc:	6822      	ldr	r2, [r4, #0]
 800a1fe:	441a      	add	r2, r3
 800a200:	e884 0804 	stmia.w	r4, {r2, fp}
 800a204:	4621      	mov	r1, r4
 800a206:	4650      	mov	r0, sl
 800a208:	441f      	add	r7, r3
 800a20a:	1af6      	subs	r6, r6, r3
 800a20c:	f7ff ffb5 	bl	800a17a <__ssrefill_r>
 800a210:	2800      	cmp	r0, #0
 800a212:	d0dc      	beq.n	800a1ce <_sfread_r+0x1a>
 800a214:	1bad      	subs	r5, r5, r6
 800a216:	fbb5 f5f9 	udiv	r5, r5, r9
 800a21a:	4628      	mov	r0, r5
 800a21c:	b003      	add	sp, #12
 800a21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a222 <__submore>:
 800a222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a226:	460c      	mov	r4, r1
 800a228:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a22a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a22e:	4299      	cmp	r1, r3
 800a230:	d11e      	bne.n	800a270 <__submore+0x4e>
 800a232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a236:	f7fd ff97 	bl	8008168 <_malloc_r>
 800a23a:	b918      	cbnz	r0, 800a244 <__submore+0x22>
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a248:	63a3      	str	r3, [r4, #56]	; 0x38
 800a24a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a24e:	6360      	str	r0, [r4, #52]	; 0x34
 800a250:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a254:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a258:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a25c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a260:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a264:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a268:	6020      	str	r0, [r4, #0]
 800a26a:	2000      	movs	r0, #0
 800a26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a270:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a272:	0077      	lsls	r7, r6, #1
 800a274:	463a      	mov	r2, r7
 800a276:	f000 fc95 	bl	800aba4 <_realloc_r>
 800a27a:	4605      	mov	r5, r0
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d0dd      	beq.n	800a23c <__submore+0x1a>
 800a280:	eb00 0806 	add.w	r8, r0, r6
 800a284:	4601      	mov	r1, r0
 800a286:	4632      	mov	r2, r6
 800a288:	4640      	mov	r0, r8
 800a28a:	f7fb fb1b 	bl	80058c4 <memcpy>
 800a28e:	f8c4 8000 	str.w	r8, [r4]
 800a292:	6365      	str	r5, [r4, #52]	; 0x34
 800a294:	63a7      	str	r7, [r4, #56]	; 0x38
 800a296:	e7e8      	b.n	800a26a <__submore+0x48>

0800a298 <__ascii_wctomb>:
 800a298:	b149      	cbz	r1, 800a2ae <__ascii_wctomb+0x16>
 800a29a:	2aff      	cmp	r2, #255	; 0xff
 800a29c:	bf85      	ittet	hi
 800a29e:	238a      	movhi	r3, #138	; 0x8a
 800a2a0:	6003      	strhi	r3, [r0, #0]
 800a2a2:	700a      	strbls	r2, [r1, #0]
 800a2a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a2a8:	bf98      	it	ls
 800a2aa:	2001      	movls	r0, #1
 800a2ac:	4770      	bx	lr
 800a2ae:	4608      	mov	r0, r1
 800a2b0:	4770      	bx	lr

0800a2b2 <_calloc_r>:
 800a2b2:	b510      	push	{r4, lr}
 800a2b4:	4351      	muls	r1, r2
 800a2b6:	f7fd ff57 	bl	8008168 <_malloc_r>
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	b198      	cbz	r0, 800a2e6 <_calloc_r+0x34>
 800a2be:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a2c2:	f022 0203 	bic.w	r2, r2, #3
 800a2c6:	3a04      	subs	r2, #4
 800a2c8:	2a24      	cmp	r2, #36	; 0x24
 800a2ca:	d81b      	bhi.n	800a304 <_calloc_r+0x52>
 800a2cc:	2a13      	cmp	r2, #19
 800a2ce:	d917      	bls.n	800a300 <_calloc_r+0x4e>
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	2a1b      	cmp	r2, #27
 800a2d4:	6001      	str	r1, [r0, #0]
 800a2d6:	6041      	str	r1, [r0, #4]
 800a2d8:	d807      	bhi.n	800a2ea <_calloc_r+0x38>
 800a2da:	f100 0308 	add.w	r3, r0, #8
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	605a      	str	r2, [r3, #4]
 800a2e4:	609a      	str	r2, [r3, #8]
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	2a24      	cmp	r2, #36	; 0x24
 800a2ec:	6081      	str	r1, [r0, #8]
 800a2ee:	60c1      	str	r1, [r0, #12]
 800a2f0:	bf11      	iteee	ne
 800a2f2:	f100 0310 	addne.w	r3, r0, #16
 800a2f6:	6101      	streq	r1, [r0, #16]
 800a2f8:	f100 0318 	addeq.w	r3, r0, #24
 800a2fc:	6141      	streq	r1, [r0, #20]
 800a2fe:	e7ee      	b.n	800a2de <_calloc_r+0x2c>
 800a300:	4603      	mov	r3, r0
 800a302:	e7ec      	b.n	800a2de <_calloc_r+0x2c>
 800a304:	2100      	movs	r1, #0
 800a306:	f7fb fae8 	bl	80058da <memset>
 800a30a:	e7ec      	b.n	800a2e6 <_calloc_r+0x34>

0800a30c <_malloc_trim_r>:
 800a30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a310:	4f25      	ldr	r7, [pc, #148]	; (800a3a8 <_malloc_trim_r+0x9c>)
 800a312:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800a3b4 <_malloc_trim_r+0xa8>
 800a316:	4689      	mov	r9, r1
 800a318:	4606      	mov	r6, r0
 800a31a:	f7fe f971 	bl	8008600 <__malloc_lock>
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	685d      	ldr	r5, [r3, #4]
 800a322:	f1a8 0411 	sub.w	r4, r8, #17
 800a326:	f025 0503 	bic.w	r5, r5, #3
 800a32a:	eba4 0409 	sub.w	r4, r4, r9
 800a32e:	442c      	add	r4, r5
 800a330:	fbb4 f4f8 	udiv	r4, r4, r8
 800a334:	3c01      	subs	r4, #1
 800a336:	fb08 f404 	mul.w	r4, r8, r4
 800a33a:	4544      	cmp	r4, r8
 800a33c:	da05      	bge.n	800a34a <_malloc_trim_r+0x3e>
 800a33e:	4630      	mov	r0, r6
 800a340:	f7fe f964 	bl	800860c <__malloc_unlock>
 800a344:	2000      	movs	r0, #0
 800a346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a34a:	2100      	movs	r1, #0
 800a34c:	4630      	mov	r0, r6
 800a34e:	f7fe fd4f 	bl	8008df0 <_sbrk_r>
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	442b      	add	r3, r5
 800a356:	4298      	cmp	r0, r3
 800a358:	d1f1      	bne.n	800a33e <_malloc_trim_r+0x32>
 800a35a:	4261      	negs	r1, r4
 800a35c:	4630      	mov	r0, r6
 800a35e:	f7fe fd47 	bl	8008df0 <_sbrk_r>
 800a362:	3001      	adds	r0, #1
 800a364:	d110      	bne.n	800a388 <_malloc_trim_r+0x7c>
 800a366:	2100      	movs	r1, #0
 800a368:	4630      	mov	r0, r6
 800a36a:	f7fe fd41 	bl	8008df0 <_sbrk_r>
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	1a83      	subs	r3, r0, r2
 800a372:	2b0f      	cmp	r3, #15
 800a374:	dde3      	ble.n	800a33e <_malloc_trim_r+0x32>
 800a376:	490d      	ldr	r1, [pc, #52]	; (800a3ac <_malloc_trim_r+0xa0>)
 800a378:	6809      	ldr	r1, [r1, #0]
 800a37a:	1a40      	subs	r0, r0, r1
 800a37c:	490c      	ldr	r1, [pc, #48]	; (800a3b0 <_malloc_trim_r+0xa4>)
 800a37e:	f043 0301 	orr.w	r3, r3, #1
 800a382:	6008      	str	r0, [r1, #0]
 800a384:	6053      	str	r3, [r2, #4]
 800a386:	e7da      	b.n	800a33e <_malloc_trim_r+0x32>
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	4a09      	ldr	r2, [pc, #36]	; (800a3b0 <_malloc_trim_r+0xa4>)
 800a38c:	1b2d      	subs	r5, r5, r4
 800a38e:	f045 0501 	orr.w	r5, r5, #1
 800a392:	605d      	str	r5, [r3, #4]
 800a394:	6813      	ldr	r3, [r2, #0]
 800a396:	4630      	mov	r0, r6
 800a398:	1b1c      	subs	r4, r3, r4
 800a39a:	6014      	str	r4, [r2, #0]
 800a39c:	f7fe f936 	bl	800860c <__malloc_unlock>
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3a6:	bf00      	nop
 800a3a8:	2000026c 	.word	0x2000026c
 800a3ac:	20000674 	.word	0x20000674
 800a3b0:	2000069c 	.word	0x2000069c
 800a3b4:	00000080 	.word	0x00000080

0800a3b8 <_free_r>:
 800a3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3bc:	4604      	mov	r4, r0
 800a3be:	4688      	mov	r8, r1
 800a3c0:	2900      	cmp	r1, #0
 800a3c2:	f000 80ab 	beq.w	800a51c <_free_r+0x164>
 800a3c6:	f7fe f91b 	bl	8008600 <__malloc_lock>
 800a3ca:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a3ce:	4d54      	ldr	r5, [pc, #336]	; (800a520 <_free_r+0x168>)
 800a3d0:	f022 0001 	bic.w	r0, r2, #1
 800a3d4:	f1a8 0308 	sub.w	r3, r8, #8
 800a3d8:	181f      	adds	r7, r3, r0
 800a3da:	68a9      	ldr	r1, [r5, #8]
 800a3dc:	687e      	ldr	r6, [r7, #4]
 800a3de:	428f      	cmp	r7, r1
 800a3e0:	f026 0603 	bic.w	r6, r6, #3
 800a3e4:	f002 0201 	and.w	r2, r2, #1
 800a3e8:	d11b      	bne.n	800a422 <_free_r+0x6a>
 800a3ea:	4430      	add	r0, r6
 800a3ec:	b93a      	cbnz	r2, 800a3fe <_free_r+0x46>
 800a3ee:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800a3f2:	1a9b      	subs	r3, r3, r2
 800a3f4:	4410      	add	r0, r2
 800a3f6:	6899      	ldr	r1, [r3, #8]
 800a3f8:	68da      	ldr	r2, [r3, #12]
 800a3fa:	60ca      	str	r2, [r1, #12]
 800a3fc:	6091      	str	r1, [r2, #8]
 800a3fe:	f040 0201 	orr.w	r2, r0, #1
 800a402:	605a      	str	r2, [r3, #4]
 800a404:	60ab      	str	r3, [r5, #8]
 800a406:	4b47      	ldr	r3, [pc, #284]	; (800a524 <_free_r+0x16c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4298      	cmp	r0, r3
 800a40c:	d304      	bcc.n	800a418 <_free_r+0x60>
 800a40e:	4b46      	ldr	r3, [pc, #280]	; (800a528 <_free_r+0x170>)
 800a410:	4620      	mov	r0, r4
 800a412:	6819      	ldr	r1, [r3, #0]
 800a414:	f7ff ff7a 	bl	800a30c <_malloc_trim_r>
 800a418:	4620      	mov	r0, r4
 800a41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a41e:	f7fe b8f5 	b.w	800860c <__malloc_unlock>
 800a422:	607e      	str	r6, [r7, #4]
 800a424:	2a00      	cmp	r2, #0
 800a426:	d139      	bne.n	800a49c <_free_r+0xe4>
 800a428:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800a42c:	1a5b      	subs	r3, r3, r1
 800a42e:	4408      	add	r0, r1
 800a430:	6899      	ldr	r1, [r3, #8]
 800a432:	f105 0e08 	add.w	lr, r5, #8
 800a436:	4571      	cmp	r1, lr
 800a438:	d032      	beq.n	800a4a0 <_free_r+0xe8>
 800a43a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800a43e:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a442:	f8ce 1008 	str.w	r1, [lr, #8]
 800a446:	19b9      	adds	r1, r7, r6
 800a448:	6849      	ldr	r1, [r1, #4]
 800a44a:	07c9      	lsls	r1, r1, #31
 800a44c:	d40a      	bmi.n	800a464 <_free_r+0xac>
 800a44e:	4430      	add	r0, r6
 800a450:	68b9      	ldr	r1, [r7, #8]
 800a452:	bb3a      	cbnz	r2, 800a4a4 <_free_r+0xec>
 800a454:	4e35      	ldr	r6, [pc, #212]	; (800a52c <_free_r+0x174>)
 800a456:	42b1      	cmp	r1, r6
 800a458:	d124      	bne.n	800a4a4 <_free_r+0xec>
 800a45a:	616b      	str	r3, [r5, #20]
 800a45c:	612b      	str	r3, [r5, #16]
 800a45e:	2201      	movs	r2, #1
 800a460:	60d9      	str	r1, [r3, #12]
 800a462:	6099      	str	r1, [r3, #8]
 800a464:	f040 0101 	orr.w	r1, r0, #1
 800a468:	6059      	str	r1, [r3, #4]
 800a46a:	5018      	str	r0, [r3, r0]
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	d1d3      	bne.n	800a418 <_free_r+0x60>
 800a470:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a474:	d21a      	bcs.n	800a4ac <_free_r+0xf4>
 800a476:	08c0      	lsrs	r0, r0, #3
 800a478:	1081      	asrs	r1, r0, #2
 800a47a:	2201      	movs	r2, #1
 800a47c:	408a      	lsls	r2, r1
 800a47e:	6869      	ldr	r1, [r5, #4]
 800a480:	3001      	adds	r0, #1
 800a482:	430a      	orrs	r2, r1
 800a484:	606a      	str	r2, [r5, #4]
 800a486:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a48a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800a48e:	6099      	str	r1, [r3, #8]
 800a490:	3a08      	subs	r2, #8
 800a492:	60da      	str	r2, [r3, #12]
 800a494:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800a498:	60cb      	str	r3, [r1, #12]
 800a49a:	e7bd      	b.n	800a418 <_free_r+0x60>
 800a49c:	2200      	movs	r2, #0
 800a49e:	e7d2      	b.n	800a446 <_free_r+0x8e>
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	e7d0      	b.n	800a446 <_free_r+0x8e>
 800a4a4:	68fe      	ldr	r6, [r7, #12]
 800a4a6:	60ce      	str	r6, [r1, #12]
 800a4a8:	60b1      	str	r1, [r6, #8]
 800a4aa:	e7db      	b.n	800a464 <_free_r+0xac>
 800a4ac:	0a42      	lsrs	r2, r0, #9
 800a4ae:	2a04      	cmp	r2, #4
 800a4b0:	d813      	bhi.n	800a4da <_free_r+0x122>
 800a4b2:	0982      	lsrs	r2, r0, #6
 800a4b4:	3238      	adds	r2, #56	; 0x38
 800a4b6:	1c51      	adds	r1, r2, #1
 800a4b8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800a4bc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800a4c0:	428e      	cmp	r6, r1
 800a4c2:	d124      	bne.n	800a50e <_free_r+0x156>
 800a4c4:	2001      	movs	r0, #1
 800a4c6:	1092      	asrs	r2, r2, #2
 800a4c8:	fa00 f202 	lsl.w	r2, r0, r2
 800a4cc:	6868      	ldr	r0, [r5, #4]
 800a4ce:	4302      	orrs	r2, r0
 800a4d0:	606a      	str	r2, [r5, #4]
 800a4d2:	60de      	str	r6, [r3, #12]
 800a4d4:	6099      	str	r1, [r3, #8]
 800a4d6:	60b3      	str	r3, [r6, #8]
 800a4d8:	e7de      	b.n	800a498 <_free_r+0xe0>
 800a4da:	2a14      	cmp	r2, #20
 800a4dc:	d801      	bhi.n	800a4e2 <_free_r+0x12a>
 800a4de:	325b      	adds	r2, #91	; 0x5b
 800a4e0:	e7e9      	b.n	800a4b6 <_free_r+0xfe>
 800a4e2:	2a54      	cmp	r2, #84	; 0x54
 800a4e4:	d802      	bhi.n	800a4ec <_free_r+0x134>
 800a4e6:	0b02      	lsrs	r2, r0, #12
 800a4e8:	326e      	adds	r2, #110	; 0x6e
 800a4ea:	e7e4      	b.n	800a4b6 <_free_r+0xfe>
 800a4ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a4f0:	d802      	bhi.n	800a4f8 <_free_r+0x140>
 800a4f2:	0bc2      	lsrs	r2, r0, #15
 800a4f4:	3277      	adds	r2, #119	; 0x77
 800a4f6:	e7de      	b.n	800a4b6 <_free_r+0xfe>
 800a4f8:	f240 5154 	movw	r1, #1364	; 0x554
 800a4fc:	428a      	cmp	r2, r1
 800a4fe:	bf9a      	itte	ls
 800a500:	0c82      	lsrls	r2, r0, #18
 800a502:	327c      	addls	r2, #124	; 0x7c
 800a504:	227e      	movhi	r2, #126	; 0x7e
 800a506:	e7d6      	b.n	800a4b6 <_free_r+0xfe>
 800a508:	6889      	ldr	r1, [r1, #8]
 800a50a:	428e      	cmp	r6, r1
 800a50c:	d004      	beq.n	800a518 <_free_r+0x160>
 800a50e:	684a      	ldr	r2, [r1, #4]
 800a510:	f022 0203 	bic.w	r2, r2, #3
 800a514:	4290      	cmp	r0, r2
 800a516:	d3f7      	bcc.n	800a508 <_free_r+0x150>
 800a518:	68ce      	ldr	r6, [r1, #12]
 800a51a:	e7da      	b.n	800a4d2 <_free_r+0x11a>
 800a51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a520:	2000026c 	.word	0x2000026c
 800a524:	20000678 	.word	0x20000678
 800a528:	200006cc 	.word	0x200006cc
 800a52c:	20000274 	.word	0x20000274

0800a530 <rshift>:
 800a530:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a532:	6906      	ldr	r6, [r0, #16]
 800a534:	114b      	asrs	r3, r1, #5
 800a536:	42b3      	cmp	r3, r6
 800a538:	f100 0514 	add.w	r5, r0, #20
 800a53c:	da2b      	bge.n	800a596 <rshift+0x66>
 800a53e:	f011 011f 	ands.w	r1, r1, #31
 800a542:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800a546:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800a54a:	d108      	bne.n	800a55e <rshift+0x2e>
 800a54c:	4629      	mov	r1, r5
 800a54e:	42b2      	cmp	r2, r6
 800a550:	460b      	mov	r3, r1
 800a552:	d210      	bcs.n	800a576 <rshift+0x46>
 800a554:	f852 3b04 	ldr.w	r3, [r2], #4
 800a558:	f841 3b04 	str.w	r3, [r1], #4
 800a55c:	e7f7      	b.n	800a54e <rshift+0x1e>
 800a55e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800a562:	f1c1 0e20 	rsb	lr, r1, #32
 800a566:	3204      	adds	r2, #4
 800a568:	40cc      	lsrs	r4, r1
 800a56a:	462b      	mov	r3, r5
 800a56c:	42b2      	cmp	r2, r6
 800a56e:	d308      	bcc.n	800a582 <rshift+0x52>
 800a570:	601c      	str	r4, [r3, #0]
 800a572:	b104      	cbz	r4, 800a576 <rshift+0x46>
 800a574:	3304      	adds	r3, #4
 800a576:	1b5b      	subs	r3, r3, r5
 800a578:	109b      	asrs	r3, r3, #2
 800a57a:	6103      	str	r3, [r0, #16]
 800a57c:	b903      	cbnz	r3, 800a580 <rshift+0x50>
 800a57e:	6143      	str	r3, [r0, #20]
 800a580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a582:	6817      	ldr	r7, [r2, #0]
 800a584:	fa07 f70e 	lsl.w	r7, r7, lr
 800a588:	433c      	orrs	r4, r7
 800a58a:	f843 4b04 	str.w	r4, [r3], #4
 800a58e:	f852 4b04 	ldr.w	r4, [r2], #4
 800a592:	40cc      	lsrs	r4, r1
 800a594:	e7ea      	b.n	800a56c <rshift+0x3c>
 800a596:	462b      	mov	r3, r5
 800a598:	e7ed      	b.n	800a576 <rshift+0x46>

0800a59a <__hexdig_fun>:
 800a59a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a59e:	2b09      	cmp	r3, #9
 800a5a0:	d802      	bhi.n	800a5a8 <__hexdig_fun+0xe>
 800a5a2:	3820      	subs	r0, #32
 800a5a4:	b2c0      	uxtb	r0, r0
 800a5a6:	4770      	bx	lr
 800a5a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5ac:	2b05      	cmp	r3, #5
 800a5ae:	d801      	bhi.n	800a5b4 <__hexdig_fun+0x1a>
 800a5b0:	3847      	subs	r0, #71	; 0x47
 800a5b2:	e7f7      	b.n	800a5a4 <__hexdig_fun+0xa>
 800a5b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5b8:	2b05      	cmp	r3, #5
 800a5ba:	d801      	bhi.n	800a5c0 <__hexdig_fun+0x26>
 800a5bc:	3827      	subs	r0, #39	; 0x27
 800a5be:	e7f1      	b.n	800a5a4 <__hexdig_fun+0xa>
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	4770      	bx	lr

0800a5c4 <__gethex>:
 800a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c8:	b08b      	sub	sp, #44	; 0x2c
 800a5ca:	468a      	mov	sl, r1
 800a5cc:	9002      	str	r0, [sp, #8]
 800a5ce:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a5d0:	9306      	str	r3, [sp, #24]
 800a5d2:	4690      	mov	r8, r2
 800a5d4:	f7fd fdb0 	bl	8008138 <__localeconv_l>
 800a5d8:	6803      	ldr	r3, [r0, #0]
 800a5da:	9303      	str	r3, [sp, #12]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7f5 fe17 	bl	8000210 <strlen>
 800a5e2:	9b03      	ldr	r3, [sp, #12]
 800a5e4:	9001      	str	r0, [sp, #4]
 800a5e6:	4403      	add	r3, r0
 800a5e8:	f04f 0b00 	mov.w	fp, #0
 800a5ec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a5f0:	9307      	str	r3, [sp, #28]
 800a5f2:	f8da 3000 	ldr.w	r3, [sl]
 800a5f6:	3302      	adds	r3, #2
 800a5f8:	461f      	mov	r7, r3
 800a5fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a5fe:	2830      	cmp	r0, #48	; 0x30
 800a600:	d06c      	beq.n	800a6dc <__gethex+0x118>
 800a602:	f7ff ffca 	bl	800a59a <__hexdig_fun>
 800a606:	4604      	mov	r4, r0
 800a608:	2800      	cmp	r0, #0
 800a60a:	d16a      	bne.n	800a6e2 <__gethex+0x11e>
 800a60c:	9a01      	ldr	r2, [sp, #4]
 800a60e:	9903      	ldr	r1, [sp, #12]
 800a610:	4638      	mov	r0, r7
 800a612:	f000 fc47 	bl	800aea4 <strncmp>
 800a616:	2800      	cmp	r0, #0
 800a618:	d166      	bne.n	800a6e8 <__gethex+0x124>
 800a61a:	9b01      	ldr	r3, [sp, #4]
 800a61c:	5cf8      	ldrb	r0, [r7, r3]
 800a61e:	18fe      	adds	r6, r7, r3
 800a620:	f7ff ffbb 	bl	800a59a <__hexdig_fun>
 800a624:	2800      	cmp	r0, #0
 800a626:	d062      	beq.n	800a6ee <__gethex+0x12a>
 800a628:	4633      	mov	r3, r6
 800a62a:	7818      	ldrb	r0, [r3, #0]
 800a62c:	2830      	cmp	r0, #48	; 0x30
 800a62e:	461f      	mov	r7, r3
 800a630:	f103 0301 	add.w	r3, r3, #1
 800a634:	d0f9      	beq.n	800a62a <__gethex+0x66>
 800a636:	f7ff ffb0 	bl	800a59a <__hexdig_fun>
 800a63a:	fab0 f580 	clz	r5, r0
 800a63e:	096d      	lsrs	r5, r5, #5
 800a640:	4634      	mov	r4, r6
 800a642:	f04f 0b01 	mov.w	fp, #1
 800a646:	463a      	mov	r2, r7
 800a648:	4616      	mov	r6, r2
 800a64a:	3201      	adds	r2, #1
 800a64c:	7830      	ldrb	r0, [r6, #0]
 800a64e:	f7ff ffa4 	bl	800a59a <__hexdig_fun>
 800a652:	2800      	cmp	r0, #0
 800a654:	d1f8      	bne.n	800a648 <__gethex+0x84>
 800a656:	9a01      	ldr	r2, [sp, #4]
 800a658:	9903      	ldr	r1, [sp, #12]
 800a65a:	4630      	mov	r0, r6
 800a65c:	f000 fc22 	bl	800aea4 <strncmp>
 800a660:	b950      	cbnz	r0, 800a678 <__gethex+0xb4>
 800a662:	b954      	cbnz	r4, 800a67a <__gethex+0xb6>
 800a664:	9b01      	ldr	r3, [sp, #4]
 800a666:	18f4      	adds	r4, r6, r3
 800a668:	4622      	mov	r2, r4
 800a66a:	4616      	mov	r6, r2
 800a66c:	3201      	adds	r2, #1
 800a66e:	7830      	ldrb	r0, [r6, #0]
 800a670:	f7ff ff93 	bl	800a59a <__hexdig_fun>
 800a674:	2800      	cmp	r0, #0
 800a676:	d1f8      	bne.n	800a66a <__gethex+0xa6>
 800a678:	b10c      	cbz	r4, 800a67e <__gethex+0xba>
 800a67a:	1ba4      	subs	r4, r4, r6
 800a67c:	00a4      	lsls	r4, r4, #2
 800a67e:	7833      	ldrb	r3, [r6, #0]
 800a680:	2b50      	cmp	r3, #80	; 0x50
 800a682:	d001      	beq.n	800a688 <__gethex+0xc4>
 800a684:	2b70      	cmp	r3, #112	; 0x70
 800a686:	d140      	bne.n	800a70a <__gethex+0x146>
 800a688:	7873      	ldrb	r3, [r6, #1]
 800a68a:	2b2b      	cmp	r3, #43	; 0x2b
 800a68c:	d035      	beq.n	800a6fa <__gethex+0x136>
 800a68e:	2b2d      	cmp	r3, #45	; 0x2d
 800a690:	d02f      	beq.n	800a6f2 <__gethex+0x12e>
 800a692:	1c71      	adds	r1, r6, #1
 800a694:	f04f 0900 	mov.w	r9, #0
 800a698:	7808      	ldrb	r0, [r1, #0]
 800a69a:	f7ff ff7e 	bl	800a59a <__hexdig_fun>
 800a69e:	1e43      	subs	r3, r0, #1
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b18      	cmp	r3, #24
 800a6a4:	d831      	bhi.n	800a70a <__gethex+0x146>
 800a6a6:	f1a0 0210 	sub.w	r2, r0, #16
 800a6aa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6ae:	f7ff ff74 	bl	800a59a <__hexdig_fun>
 800a6b2:	1e43      	subs	r3, r0, #1
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b18      	cmp	r3, #24
 800a6b8:	d922      	bls.n	800a700 <__gethex+0x13c>
 800a6ba:	f1b9 0f00 	cmp.w	r9, #0
 800a6be:	d000      	beq.n	800a6c2 <__gethex+0xfe>
 800a6c0:	4252      	negs	r2, r2
 800a6c2:	4414      	add	r4, r2
 800a6c4:	f8ca 1000 	str.w	r1, [sl]
 800a6c8:	b30d      	cbz	r5, 800a70e <__gethex+0x14a>
 800a6ca:	f1bb 0f00 	cmp.w	fp, #0
 800a6ce:	bf14      	ite	ne
 800a6d0:	2700      	movne	r7, #0
 800a6d2:	2706      	moveq	r7, #6
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	b00b      	add	sp, #44	; 0x2c
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6dc:	f10b 0b01 	add.w	fp, fp, #1
 800a6e0:	e78a      	b.n	800a5f8 <__gethex+0x34>
 800a6e2:	2500      	movs	r5, #0
 800a6e4:	462c      	mov	r4, r5
 800a6e6:	e7ae      	b.n	800a646 <__gethex+0x82>
 800a6e8:	463e      	mov	r6, r7
 800a6ea:	2501      	movs	r5, #1
 800a6ec:	e7c7      	b.n	800a67e <__gethex+0xba>
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	e7fb      	b.n	800a6ea <__gethex+0x126>
 800a6f2:	f04f 0901 	mov.w	r9, #1
 800a6f6:	1cb1      	adds	r1, r6, #2
 800a6f8:	e7ce      	b.n	800a698 <__gethex+0xd4>
 800a6fa:	f04f 0900 	mov.w	r9, #0
 800a6fe:	e7fa      	b.n	800a6f6 <__gethex+0x132>
 800a700:	230a      	movs	r3, #10
 800a702:	fb03 0202 	mla	r2, r3, r2, r0
 800a706:	3a10      	subs	r2, #16
 800a708:	e7cf      	b.n	800a6aa <__gethex+0xe6>
 800a70a:	4631      	mov	r1, r6
 800a70c:	e7da      	b.n	800a6c4 <__gethex+0x100>
 800a70e:	1bf3      	subs	r3, r6, r7
 800a710:	3b01      	subs	r3, #1
 800a712:	4629      	mov	r1, r5
 800a714:	2b07      	cmp	r3, #7
 800a716:	dc49      	bgt.n	800a7ac <__gethex+0x1e8>
 800a718:	9802      	ldr	r0, [sp, #8]
 800a71a:	f7fd ff7d 	bl	8008618 <_Balloc>
 800a71e:	9b01      	ldr	r3, [sp, #4]
 800a720:	f100 0914 	add.w	r9, r0, #20
 800a724:	f04f 0b00 	mov.w	fp, #0
 800a728:	f1c3 0301 	rsb	r3, r3, #1
 800a72c:	4605      	mov	r5, r0
 800a72e:	f8cd 9010 	str.w	r9, [sp, #16]
 800a732:	46da      	mov	sl, fp
 800a734:	9308      	str	r3, [sp, #32]
 800a736:	42b7      	cmp	r7, r6
 800a738:	d33b      	bcc.n	800a7b2 <__gethex+0x1ee>
 800a73a:	9804      	ldr	r0, [sp, #16]
 800a73c:	f840 ab04 	str.w	sl, [r0], #4
 800a740:	eba0 0009 	sub.w	r0, r0, r9
 800a744:	1080      	asrs	r0, r0, #2
 800a746:	6128      	str	r0, [r5, #16]
 800a748:	0147      	lsls	r7, r0, #5
 800a74a:	4650      	mov	r0, sl
 800a74c:	f7fe f828 	bl	80087a0 <__hi0bits>
 800a750:	f8d8 6000 	ldr.w	r6, [r8]
 800a754:	1a3f      	subs	r7, r7, r0
 800a756:	42b7      	cmp	r7, r6
 800a758:	dd64      	ble.n	800a824 <__gethex+0x260>
 800a75a:	1bbf      	subs	r7, r7, r6
 800a75c:	4639      	mov	r1, r7
 800a75e:	4628      	mov	r0, r5
 800a760:	f7fe fb25 	bl	8008dae <__any_on>
 800a764:	4682      	mov	sl, r0
 800a766:	b178      	cbz	r0, 800a788 <__gethex+0x1c4>
 800a768:	1e7b      	subs	r3, r7, #1
 800a76a:	1159      	asrs	r1, r3, #5
 800a76c:	f003 021f 	and.w	r2, r3, #31
 800a770:	f04f 0a01 	mov.w	sl, #1
 800a774:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a778:	fa0a f202 	lsl.w	r2, sl, r2
 800a77c:	420a      	tst	r2, r1
 800a77e:	d003      	beq.n	800a788 <__gethex+0x1c4>
 800a780:	4553      	cmp	r3, sl
 800a782:	dc46      	bgt.n	800a812 <__gethex+0x24e>
 800a784:	f04f 0a02 	mov.w	sl, #2
 800a788:	4639      	mov	r1, r7
 800a78a:	4628      	mov	r0, r5
 800a78c:	f7ff fed0 	bl	800a530 <rshift>
 800a790:	443c      	add	r4, r7
 800a792:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a796:	429c      	cmp	r4, r3
 800a798:	dd52      	ble.n	800a840 <__gethex+0x27c>
 800a79a:	4629      	mov	r1, r5
 800a79c:	9802      	ldr	r0, [sp, #8]
 800a79e:	f7fd ff6f 	bl	8008680 <_Bfree>
 800a7a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	27a3      	movs	r7, #163	; 0xa3
 800a7aa:	e793      	b.n	800a6d4 <__gethex+0x110>
 800a7ac:	3101      	adds	r1, #1
 800a7ae:	105b      	asrs	r3, r3, #1
 800a7b0:	e7b0      	b.n	800a714 <__gethex+0x150>
 800a7b2:	1e73      	subs	r3, r6, #1
 800a7b4:	9305      	str	r3, [sp, #20]
 800a7b6:	9a07      	ldr	r2, [sp, #28]
 800a7b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d018      	beq.n	800a7f2 <__gethex+0x22e>
 800a7c0:	f1bb 0f20 	cmp.w	fp, #32
 800a7c4:	d107      	bne.n	800a7d6 <__gethex+0x212>
 800a7c6:	9b04      	ldr	r3, [sp, #16]
 800a7c8:	f8c3 a000 	str.w	sl, [r3]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	f04f 0a00 	mov.w	sl, #0
 800a7d2:	9304      	str	r3, [sp, #16]
 800a7d4:	46d3      	mov	fp, sl
 800a7d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a7da:	f7ff fede 	bl	800a59a <__hexdig_fun>
 800a7de:	f000 000f 	and.w	r0, r0, #15
 800a7e2:	fa00 f00b 	lsl.w	r0, r0, fp
 800a7e6:	ea4a 0a00 	orr.w	sl, sl, r0
 800a7ea:	f10b 0b04 	add.w	fp, fp, #4
 800a7ee:	9b05      	ldr	r3, [sp, #20]
 800a7f0:	e00d      	b.n	800a80e <__gethex+0x24a>
 800a7f2:	9b05      	ldr	r3, [sp, #20]
 800a7f4:	9a08      	ldr	r2, [sp, #32]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	429f      	cmp	r7, r3
 800a7fa:	d8e1      	bhi.n	800a7c0 <__gethex+0x1fc>
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	9a01      	ldr	r2, [sp, #4]
 800a800:	9903      	ldr	r1, [sp, #12]
 800a802:	9309      	str	r3, [sp, #36]	; 0x24
 800a804:	f000 fb4e 	bl	800aea4 <strncmp>
 800a808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d1d8      	bne.n	800a7c0 <__gethex+0x1fc>
 800a80e:	461e      	mov	r6, r3
 800a810:	e791      	b.n	800a736 <__gethex+0x172>
 800a812:	1eb9      	subs	r1, r7, #2
 800a814:	4628      	mov	r0, r5
 800a816:	f7fe faca 	bl	8008dae <__any_on>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d0b2      	beq.n	800a784 <__gethex+0x1c0>
 800a81e:	f04f 0a03 	mov.w	sl, #3
 800a822:	e7b1      	b.n	800a788 <__gethex+0x1c4>
 800a824:	da09      	bge.n	800a83a <__gethex+0x276>
 800a826:	1bf7      	subs	r7, r6, r7
 800a828:	4629      	mov	r1, r5
 800a82a:	463a      	mov	r2, r7
 800a82c:	9802      	ldr	r0, [sp, #8]
 800a82e:	f7fe f8e9 	bl	8008a04 <__lshift>
 800a832:	1be4      	subs	r4, r4, r7
 800a834:	4605      	mov	r5, r0
 800a836:	f100 0914 	add.w	r9, r0, #20
 800a83a:	f04f 0a00 	mov.w	sl, #0
 800a83e:	e7a8      	b.n	800a792 <__gethex+0x1ce>
 800a840:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a844:	4284      	cmp	r4, r0
 800a846:	da6a      	bge.n	800a91e <__gethex+0x35a>
 800a848:	1b04      	subs	r4, r0, r4
 800a84a:	42a6      	cmp	r6, r4
 800a84c:	dc2e      	bgt.n	800a8ac <__gethex+0x2e8>
 800a84e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a852:	2b02      	cmp	r3, #2
 800a854:	d022      	beq.n	800a89c <__gethex+0x2d8>
 800a856:	2b03      	cmp	r3, #3
 800a858:	d024      	beq.n	800a8a4 <__gethex+0x2e0>
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d115      	bne.n	800a88a <__gethex+0x2c6>
 800a85e:	42a6      	cmp	r6, r4
 800a860:	d113      	bne.n	800a88a <__gethex+0x2c6>
 800a862:	2e01      	cmp	r6, #1
 800a864:	dc0b      	bgt.n	800a87e <__gethex+0x2ba>
 800a866:	9a06      	ldr	r2, [sp, #24]
 800a868:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	2301      	movs	r3, #1
 800a870:	612b      	str	r3, [r5, #16]
 800a872:	f8c9 3000 	str.w	r3, [r9]
 800a876:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a878:	2762      	movs	r7, #98	; 0x62
 800a87a:	601d      	str	r5, [r3, #0]
 800a87c:	e72a      	b.n	800a6d4 <__gethex+0x110>
 800a87e:	1e71      	subs	r1, r6, #1
 800a880:	4628      	mov	r0, r5
 800a882:	f7fe fa94 	bl	8008dae <__any_on>
 800a886:	2800      	cmp	r0, #0
 800a888:	d1ed      	bne.n	800a866 <__gethex+0x2a2>
 800a88a:	4629      	mov	r1, r5
 800a88c:	9802      	ldr	r0, [sp, #8]
 800a88e:	f7fd fef7 	bl	8008680 <_Bfree>
 800a892:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a894:	2300      	movs	r3, #0
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	2750      	movs	r7, #80	; 0x50
 800a89a:	e71b      	b.n	800a6d4 <__gethex+0x110>
 800a89c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0e1      	beq.n	800a866 <__gethex+0x2a2>
 800a8a2:	e7f2      	b.n	800a88a <__gethex+0x2c6>
 800a8a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1dd      	bne.n	800a866 <__gethex+0x2a2>
 800a8aa:	e7ee      	b.n	800a88a <__gethex+0x2c6>
 800a8ac:	1e67      	subs	r7, r4, #1
 800a8ae:	f1ba 0f00 	cmp.w	sl, #0
 800a8b2:	d131      	bne.n	800a918 <__gethex+0x354>
 800a8b4:	b127      	cbz	r7, 800a8c0 <__gethex+0x2fc>
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f7fe fa78 	bl	8008dae <__any_on>
 800a8be:	4682      	mov	sl, r0
 800a8c0:	117a      	asrs	r2, r7, #5
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	f007 071f 	and.w	r7, r7, #31
 800a8c8:	fa03 f707 	lsl.w	r7, r3, r7
 800a8cc:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	421f      	tst	r7, r3
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	bf18      	it	ne
 800a8d8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a8dc:	1b36      	subs	r6, r6, r4
 800a8de:	f7ff fe27 	bl	800a530 <rshift>
 800a8e2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a8e6:	2702      	movs	r7, #2
 800a8e8:	f1ba 0f00 	cmp.w	sl, #0
 800a8ec:	d045      	beq.n	800a97a <__gethex+0x3b6>
 800a8ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d015      	beq.n	800a922 <__gethex+0x35e>
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d017      	beq.n	800a92a <__gethex+0x366>
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d109      	bne.n	800a912 <__gethex+0x34e>
 800a8fe:	f01a 0f02 	tst.w	sl, #2
 800a902:	d006      	beq.n	800a912 <__gethex+0x34e>
 800a904:	f8d9 3000 	ldr.w	r3, [r9]
 800a908:	ea4a 0a03 	orr.w	sl, sl, r3
 800a90c:	f01a 0f01 	tst.w	sl, #1
 800a910:	d10e      	bne.n	800a930 <__gethex+0x36c>
 800a912:	f047 0710 	orr.w	r7, r7, #16
 800a916:	e030      	b.n	800a97a <__gethex+0x3b6>
 800a918:	f04f 0a01 	mov.w	sl, #1
 800a91c:	e7d0      	b.n	800a8c0 <__gethex+0x2fc>
 800a91e:	2701      	movs	r7, #1
 800a920:	e7e2      	b.n	800a8e8 <__gethex+0x324>
 800a922:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a924:	f1c3 0301 	rsb	r3, r3, #1
 800a928:	9315      	str	r3, [sp, #84]	; 0x54
 800a92a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0f0      	beq.n	800a912 <__gethex+0x34e>
 800a930:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a934:	f105 0314 	add.w	r3, r5, #20
 800a938:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a93c:	eb03 010a 	add.w	r1, r3, sl
 800a940:	2000      	movs	r0, #0
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a948:	d01c      	beq.n	800a984 <__gethex+0x3c0>
 800a94a:	3201      	adds	r2, #1
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	2f02      	cmp	r7, #2
 800a950:	f105 0314 	add.w	r3, r5, #20
 800a954:	d138      	bne.n	800a9c8 <__gethex+0x404>
 800a956:	f8d8 2000 	ldr.w	r2, [r8]
 800a95a:	3a01      	subs	r2, #1
 800a95c:	4296      	cmp	r6, r2
 800a95e:	d10a      	bne.n	800a976 <__gethex+0x3b2>
 800a960:	1171      	asrs	r1, r6, #5
 800a962:	2201      	movs	r2, #1
 800a964:	f006 061f 	and.w	r6, r6, #31
 800a968:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a96c:	fa02 f606 	lsl.w	r6, r2, r6
 800a970:	421e      	tst	r6, r3
 800a972:	bf18      	it	ne
 800a974:	4617      	movne	r7, r2
 800a976:	f047 0720 	orr.w	r7, r7, #32
 800a97a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a97c:	601d      	str	r5, [r3, #0]
 800a97e:	9b06      	ldr	r3, [sp, #24]
 800a980:	601c      	str	r4, [r3, #0]
 800a982:	e6a7      	b.n	800a6d4 <__gethex+0x110>
 800a984:	f843 0b04 	str.w	r0, [r3], #4
 800a988:	4299      	cmp	r1, r3
 800a98a:	d8da      	bhi.n	800a942 <__gethex+0x37e>
 800a98c:	68ab      	ldr	r3, [r5, #8]
 800a98e:	4599      	cmp	r9, r3
 800a990:	db12      	blt.n	800a9b8 <__gethex+0x3f4>
 800a992:	6869      	ldr	r1, [r5, #4]
 800a994:	9802      	ldr	r0, [sp, #8]
 800a996:	3101      	adds	r1, #1
 800a998:	f7fd fe3e 	bl	8008618 <_Balloc>
 800a99c:	692a      	ldr	r2, [r5, #16]
 800a99e:	3202      	adds	r2, #2
 800a9a0:	f105 010c 	add.w	r1, r5, #12
 800a9a4:	4683      	mov	fp, r0
 800a9a6:	0092      	lsls	r2, r2, #2
 800a9a8:	300c      	adds	r0, #12
 800a9aa:	f7fa ff8b 	bl	80058c4 <memcpy>
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	9802      	ldr	r0, [sp, #8]
 800a9b2:	f7fd fe65 	bl	8008680 <_Bfree>
 800a9b6:	465d      	mov	r5, fp
 800a9b8:	692b      	ldr	r3, [r5, #16]
 800a9ba:	1c5a      	adds	r2, r3, #1
 800a9bc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a9c0:	612a      	str	r2, [r5, #16]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	615a      	str	r2, [r3, #20]
 800a9c6:	e7c2      	b.n	800a94e <__gethex+0x38a>
 800a9c8:	692a      	ldr	r2, [r5, #16]
 800a9ca:	4591      	cmp	r9, r2
 800a9cc:	da0b      	bge.n	800a9e6 <__gethex+0x422>
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	f7ff fdad 	bl	800a530 <rshift>
 800a9d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9da:	3401      	adds	r4, #1
 800a9dc:	429c      	cmp	r4, r3
 800a9de:	f73f aedc 	bgt.w	800a79a <__gethex+0x1d6>
 800a9e2:	2701      	movs	r7, #1
 800a9e4:	e7c7      	b.n	800a976 <__gethex+0x3b2>
 800a9e6:	f016 061f 	ands.w	r6, r6, #31
 800a9ea:	d0fa      	beq.n	800a9e2 <__gethex+0x41e>
 800a9ec:	449a      	add	sl, r3
 800a9ee:	f1c6 0620 	rsb	r6, r6, #32
 800a9f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a9f6:	f7fd fed3 	bl	80087a0 <__hi0bits>
 800a9fa:	42b0      	cmp	r0, r6
 800a9fc:	dbe7      	blt.n	800a9ce <__gethex+0x40a>
 800a9fe:	e7f0      	b.n	800a9e2 <__gethex+0x41e>

0800aa00 <L_shift>:
 800aa00:	f1c2 0208 	rsb	r2, r2, #8
 800aa04:	0092      	lsls	r2, r2, #2
 800aa06:	b570      	push	{r4, r5, r6, lr}
 800aa08:	f1c2 0620 	rsb	r6, r2, #32
 800aa0c:	6843      	ldr	r3, [r0, #4]
 800aa0e:	6804      	ldr	r4, [r0, #0]
 800aa10:	fa03 f506 	lsl.w	r5, r3, r6
 800aa14:	432c      	orrs	r4, r5
 800aa16:	40d3      	lsrs	r3, r2
 800aa18:	6004      	str	r4, [r0, #0]
 800aa1a:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa1e:	4288      	cmp	r0, r1
 800aa20:	d3f4      	bcc.n	800aa0c <L_shift+0xc>
 800aa22:	bd70      	pop	{r4, r5, r6, pc}

0800aa24 <__match>:
 800aa24:	b530      	push	{r4, r5, lr}
 800aa26:	6803      	ldr	r3, [r0, #0]
 800aa28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	b914      	cbnz	r4, 800aa36 <__match+0x12>
 800aa30:	6003      	str	r3, [r0, #0]
 800aa32:	2001      	movs	r0, #1
 800aa34:	bd30      	pop	{r4, r5, pc}
 800aa36:	781a      	ldrb	r2, [r3, #0]
 800aa38:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa3c:	2d19      	cmp	r5, #25
 800aa3e:	bf98      	it	ls
 800aa40:	3220      	addls	r2, #32
 800aa42:	42a2      	cmp	r2, r4
 800aa44:	d0f0      	beq.n	800aa28 <__match+0x4>
 800aa46:	2000      	movs	r0, #0
 800aa48:	bd30      	pop	{r4, r5, pc}

0800aa4a <__hexnan>:
 800aa4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4e:	680b      	ldr	r3, [r1, #0]
 800aa50:	6801      	ldr	r1, [r0, #0]
 800aa52:	115f      	asrs	r7, r3, #5
 800aa54:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800aa58:	f013 031f 	ands.w	r3, r3, #31
 800aa5c:	b087      	sub	sp, #28
 800aa5e:	bf18      	it	ne
 800aa60:	3704      	addne	r7, #4
 800aa62:	2500      	movs	r5, #0
 800aa64:	1f3e      	subs	r6, r7, #4
 800aa66:	4682      	mov	sl, r0
 800aa68:	4690      	mov	r8, r2
 800aa6a:	9302      	str	r3, [sp, #8]
 800aa6c:	f847 5c04 	str.w	r5, [r7, #-4]
 800aa70:	46b1      	mov	r9, r6
 800aa72:	4634      	mov	r4, r6
 800aa74:	9501      	str	r5, [sp, #4]
 800aa76:	46ab      	mov	fp, r5
 800aa78:	784a      	ldrb	r2, [r1, #1]
 800aa7a:	1c4b      	adds	r3, r1, #1
 800aa7c:	9303      	str	r3, [sp, #12]
 800aa7e:	b342      	cbz	r2, 800aad2 <__hexnan+0x88>
 800aa80:	4610      	mov	r0, r2
 800aa82:	9105      	str	r1, [sp, #20]
 800aa84:	9204      	str	r2, [sp, #16]
 800aa86:	f7ff fd88 	bl	800a59a <__hexdig_fun>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d143      	bne.n	800ab16 <__hexnan+0xcc>
 800aa8e:	9a04      	ldr	r2, [sp, #16]
 800aa90:	9905      	ldr	r1, [sp, #20]
 800aa92:	2a20      	cmp	r2, #32
 800aa94:	d818      	bhi.n	800aac8 <__hexnan+0x7e>
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	459b      	cmp	fp, r3
 800aa9a:	dd13      	ble.n	800aac4 <__hexnan+0x7a>
 800aa9c:	454c      	cmp	r4, r9
 800aa9e:	d206      	bcs.n	800aaae <__hexnan+0x64>
 800aaa0:	2d07      	cmp	r5, #7
 800aaa2:	dc04      	bgt.n	800aaae <__hexnan+0x64>
 800aaa4:	462a      	mov	r2, r5
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f7ff ffa9 	bl	800aa00 <L_shift>
 800aaae:	4544      	cmp	r4, r8
 800aab0:	d944      	bls.n	800ab3c <__hexnan+0xf2>
 800aab2:	2300      	movs	r3, #0
 800aab4:	f1a4 0904 	sub.w	r9, r4, #4
 800aab8:	f844 3c04 	str.w	r3, [r4, #-4]
 800aabc:	f8cd b004 	str.w	fp, [sp, #4]
 800aac0:	464c      	mov	r4, r9
 800aac2:	461d      	mov	r5, r3
 800aac4:	9903      	ldr	r1, [sp, #12]
 800aac6:	e7d7      	b.n	800aa78 <__hexnan+0x2e>
 800aac8:	2a29      	cmp	r2, #41	; 0x29
 800aaca:	d14a      	bne.n	800ab62 <__hexnan+0x118>
 800aacc:	3102      	adds	r1, #2
 800aace:	f8ca 1000 	str.w	r1, [sl]
 800aad2:	f1bb 0f00 	cmp.w	fp, #0
 800aad6:	d044      	beq.n	800ab62 <__hexnan+0x118>
 800aad8:	454c      	cmp	r4, r9
 800aada:	d206      	bcs.n	800aaea <__hexnan+0xa0>
 800aadc:	2d07      	cmp	r5, #7
 800aade:	dc04      	bgt.n	800aaea <__hexnan+0xa0>
 800aae0:	462a      	mov	r2, r5
 800aae2:	4649      	mov	r1, r9
 800aae4:	4620      	mov	r0, r4
 800aae6:	f7ff ff8b 	bl	800aa00 <L_shift>
 800aaea:	4544      	cmp	r4, r8
 800aaec:	d928      	bls.n	800ab40 <__hexnan+0xf6>
 800aaee:	4643      	mov	r3, r8
 800aaf0:	f854 2b04 	ldr.w	r2, [r4], #4
 800aaf4:	f843 2b04 	str.w	r2, [r3], #4
 800aaf8:	42a6      	cmp	r6, r4
 800aafa:	d2f9      	bcs.n	800aaf0 <__hexnan+0xa6>
 800aafc:	2200      	movs	r2, #0
 800aafe:	f843 2b04 	str.w	r2, [r3], #4
 800ab02:	429e      	cmp	r6, r3
 800ab04:	d2fb      	bcs.n	800aafe <__hexnan+0xb4>
 800ab06:	6833      	ldr	r3, [r6, #0]
 800ab08:	b91b      	cbnz	r3, 800ab12 <__hexnan+0xc8>
 800ab0a:	4546      	cmp	r6, r8
 800ab0c:	d127      	bne.n	800ab5e <__hexnan+0x114>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	6033      	str	r3, [r6, #0]
 800ab12:	2005      	movs	r0, #5
 800ab14:	e026      	b.n	800ab64 <__hexnan+0x11a>
 800ab16:	3501      	adds	r5, #1
 800ab18:	2d08      	cmp	r5, #8
 800ab1a:	f10b 0b01 	add.w	fp, fp, #1
 800ab1e:	dd06      	ble.n	800ab2e <__hexnan+0xe4>
 800ab20:	4544      	cmp	r4, r8
 800ab22:	d9cf      	bls.n	800aac4 <__hexnan+0x7a>
 800ab24:	2300      	movs	r3, #0
 800ab26:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab2a:	2501      	movs	r5, #1
 800ab2c:	3c04      	subs	r4, #4
 800ab2e:	6822      	ldr	r2, [r4, #0]
 800ab30:	f000 000f 	and.w	r0, r0, #15
 800ab34:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab38:	6020      	str	r0, [r4, #0]
 800ab3a:	e7c3      	b.n	800aac4 <__hexnan+0x7a>
 800ab3c:	2508      	movs	r5, #8
 800ab3e:	e7c1      	b.n	800aac4 <__hexnan+0x7a>
 800ab40:	9b02      	ldr	r3, [sp, #8]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d0df      	beq.n	800ab06 <__hexnan+0xbc>
 800ab46:	f04f 32ff 	mov.w	r2, #4294967295
 800ab4a:	f1c3 0320 	rsb	r3, r3, #32
 800ab4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab52:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ab56:	401a      	ands	r2, r3
 800ab58:	f847 2c04 	str.w	r2, [r7, #-4]
 800ab5c:	e7d3      	b.n	800ab06 <__hexnan+0xbc>
 800ab5e:	3e04      	subs	r6, #4
 800ab60:	e7d1      	b.n	800ab06 <__hexnan+0xbc>
 800ab62:	2004      	movs	r0, #4
 800ab64:	b007      	add	sp, #28
 800ab66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab6a <__retarget_lock_acquire_recursive>:
 800ab6a:	4770      	bx	lr

0800ab6c <__retarget_lock_release_recursive>:
 800ab6c:	4770      	bx	lr

0800ab6e <memmove>:
 800ab6e:	4288      	cmp	r0, r1
 800ab70:	b510      	push	{r4, lr}
 800ab72:	eb01 0302 	add.w	r3, r1, r2
 800ab76:	d803      	bhi.n	800ab80 <memmove+0x12>
 800ab78:	1e42      	subs	r2, r0, #1
 800ab7a:	4299      	cmp	r1, r3
 800ab7c:	d10c      	bne.n	800ab98 <memmove+0x2a>
 800ab7e:	bd10      	pop	{r4, pc}
 800ab80:	4298      	cmp	r0, r3
 800ab82:	d2f9      	bcs.n	800ab78 <memmove+0xa>
 800ab84:	1881      	adds	r1, r0, r2
 800ab86:	1ad2      	subs	r2, r2, r3
 800ab88:	42d3      	cmn	r3, r2
 800ab8a:	d100      	bne.n	800ab8e <memmove+0x20>
 800ab8c:	bd10      	pop	{r4, pc}
 800ab8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab92:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ab96:	e7f7      	b.n	800ab88 <memmove+0x1a>
 800ab98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab9c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800aba0:	e7eb      	b.n	800ab7a <memmove+0xc>
	...

0800aba4 <_realloc_r>:
 800aba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba8:	4682      	mov	sl, r0
 800abaa:	460c      	mov	r4, r1
 800abac:	b929      	cbnz	r1, 800abba <_realloc_r+0x16>
 800abae:	4611      	mov	r1, r2
 800abb0:	b003      	add	sp, #12
 800abb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb6:	f7fd bad7 	b.w	8008168 <_malloc_r>
 800abba:	9201      	str	r2, [sp, #4]
 800abbc:	f7fd fd20 	bl	8008600 <__malloc_lock>
 800abc0:	9a01      	ldr	r2, [sp, #4]
 800abc2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800abc6:	f102 080b 	add.w	r8, r2, #11
 800abca:	f1b8 0f16 	cmp.w	r8, #22
 800abce:	f1a4 0908 	sub.w	r9, r4, #8
 800abd2:	f025 0603 	bic.w	r6, r5, #3
 800abd6:	d90a      	bls.n	800abee <_realloc_r+0x4a>
 800abd8:	f038 0807 	bics.w	r8, r8, #7
 800abdc:	d509      	bpl.n	800abf2 <_realloc_r+0x4e>
 800abde:	230c      	movs	r3, #12
 800abe0:	f8ca 3000 	str.w	r3, [sl]
 800abe4:	2700      	movs	r7, #0
 800abe6:	4638      	mov	r0, r7
 800abe8:	b003      	add	sp, #12
 800abea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abee:	f04f 0810 	mov.w	r8, #16
 800abf2:	4590      	cmp	r8, r2
 800abf4:	d3f3      	bcc.n	800abde <_realloc_r+0x3a>
 800abf6:	45b0      	cmp	r8, r6
 800abf8:	f340 8145 	ble.w	800ae86 <_realloc_r+0x2e2>
 800abfc:	4ba8      	ldr	r3, [pc, #672]	; (800aea0 <_realloc_r+0x2fc>)
 800abfe:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800ac02:	eb09 0106 	add.w	r1, r9, r6
 800ac06:	4571      	cmp	r1, lr
 800ac08:	469b      	mov	fp, r3
 800ac0a:	684b      	ldr	r3, [r1, #4]
 800ac0c:	d005      	beq.n	800ac1a <_realloc_r+0x76>
 800ac0e:	f023 0001 	bic.w	r0, r3, #1
 800ac12:	4408      	add	r0, r1
 800ac14:	6840      	ldr	r0, [r0, #4]
 800ac16:	07c7      	lsls	r7, r0, #31
 800ac18:	d447      	bmi.n	800acaa <_realloc_r+0x106>
 800ac1a:	f023 0303 	bic.w	r3, r3, #3
 800ac1e:	4571      	cmp	r1, lr
 800ac20:	eb06 0703 	add.w	r7, r6, r3
 800ac24:	d119      	bne.n	800ac5a <_realloc_r+0xb6>
 800ac26:	f108 0010 	add.w	r0, r8, #16
 800ac2a:	4287      	cmp	r7, r0
 800ac2c:	db3f      	blt.n	800acae <_realloc_r+0x10a>
 800ac2e:	eb09 0308 	add.w	r3, r9, r8
 800ac32:	eba7 0708 	sub.w	r7, r7, r8
 800ac36:	f047 0701 	orr.w	r7, r7, #1
 800ac3a:	f8cb 3008 	str.w	r3, [fp, #8]
 800ac3e:	605f      	str	r7, [r3, #4]
 800ac40:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	ea43 0308 	orr.w	r3, r3, r8
 800ac4c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac50:	4650      	mov	r0, sl
 800ac52:	f7fd fcdb 	bl	800860c <__malloc_unlock>
 800ac56:	4627      	mov	r7, r4
 800ac58:	e7c5      	b.n	800abe6 <_realloc_r+0x42>
 800ac5a:	45b8      	cmp	r8, r7
 800ac5c:	dc27      	bgt.n	800acae <_realloc_r+0x10a>
 800ac5e:	68cb      	ldr	r3, [r1, #12]
 800ac60:	688a      	ldr	r2, [r1, #8]
 800ac62:	60d3      	str	r3, [r2, #12]
 800ac64:	609a      	str	r2, [r3, #8]
 800ac66:	eba7 0008 	sub.w	r0, r7, r8
 800ac6a:	280f      	cmp	r0, #15
 800ac6c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ac70:	eb09 0207 	add.w	r2, r9, r7
 800ac74:	f240 8109 	bls.w	800ae8a <_realloc_r+0x2e6>
 800ac78:	eb09 0108 	add.w	r1, r9, r8
 800ac7c:	f003 0301 	and.w	r3, r3, #1
 800ac80:	ea43 0308 	orr.w	r3, r3, r8
 800ac84:	f040 0001 	orr.w	r0, r0, #1
 800ac88:	f8c9 3004 	str.w	r3, [r9, #4]
 800ac8c:	6048      	str	r0, [r1, #4]
 800ac8e:	6853      	ldr	r3, [r2, #4]
 800ac90:	f043 0301 	orr.w	r3, r3, #1
 800ac94:	6053      	str	r3, [r2, #4]
 800ac96:	3108      	adds	r1, #8
 800ac98:	4650      	mov	r0, sl
 800ac9a:	f7ff fb8d 	bl	800a3b8 <_free_r>
 800ac9e:	4650      	mov	r0, sl
 800aca0:	f7fd fcb4 	bl	800860c <__malloc_unlock>
 800aca4:	f109 0708 	add.w	r7, r9, #8
 800aca8:	e79d      	b.n	800abe6 <_realloc_r+0x42>
 800acaa:	2300      	movs	r3, #0
 800acac:	4619      	mov	r1, r3
 800acae:	07e8      	lsls	r0, r5, #31
 800acb0:	f100 8084 	bmi.w	800adbc <_realloc_r+0x218>
 800acb4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800acb8:	eba9 0505 	sub.w	r5, r9, r5
 800acbc:	6868      	ldr	r0, [r5, #4]
 800acbe:	f020 0003 	bic.w	r0, r0, #3
 800acc2:	4430      	add	r0, r6
 800acc4:	2900      	cmp	r1, #0
 800acc6:	d076      	beq.n	800adb6 <_realloc_r+0x212>
 800acc8:	4571      	cmp	r1, lr
 800acca:	d150      	bne.n	800ad6e <_realloc_r+0x1ca>
 800accc:	4403      	add	r3, r0
 800acce:	f108 0110 	add.w	r1, r8, #16
 800acd2:	428b      	cmp	r3, r1
 800acd4:	db6f      	blt.n	800adb6 <_realloc_r+0x212>
 800acd6:	462f      	mov	r7, r5
 800acd8:	68ea      	ldr	r2, [r5, #12]
 800acda:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800acde:	60ca      	str	r2, [r1, #12]
 800ace0:	6091      	str	r1, [r2, #8]
 800ace2:	1f32      	subs	r2, r6, #4
 800ace4:	2a24      	cmp	r2, #36	; 0x24
 800ace6:	d83b      	bhi.n	800ad60 <_realloc_r+0x1bc>
 800ace8:	2a13      	cmp	r2, #19
 800acea:	d936      	bls.n	800ad5a <_realloc_r+0x1b6>
 800acec:	6821      	ldr	r1, [r4, #0]
 800acee:	60a9      	str	r1, [r5, #8]
 800acf0:	6861      	ldr	r1, [r4, #4]
 800acf2:	60e9      	str	r1, [r5, #12]
 800acf4:	2a1b      	cmp	r2, #27
 800acf6:	d81c      	bhi.n	800ad32 <_realloc_r+0x18e>
 800acf8:	f105 0210 	add.w	r2, r5, #16
 800acfc:	f104 0108 	add.w	r1, r4, #8
 800ad00:	6808      	ldr	r0, [r1, #0]
 800ad02:	6010      	str	r0, [r2, #0]
 800ad04:	6848      	ldr	r0, [r1, #4]
 800ad06:	6050      	str	r0, [r2, #4]
 800ad08:	6889      	ldr	r1, [r1, #8]
 800ad0a:	6091      	str	r1, [r2, #8]
 800ad0c:	eb05 0208 	add.w	r2, r5, r8
 800ad10:	eba3 0308 	sub.w	r3, r3, r8
 800ad14:	f043 0301 	orr.w	r3, r3, #1
 800ad18:	f8cb 2008 	str.w	r2, [fp, #8]
 800ad1c:	6053      	str	r3, [r2, #4]
 800ad1e:	686b      	ldr	r3, [r5, #4]
 800ad20:	f003 0301 	and.w	r3, r3, #1
 800ad24:	ea43 0308 	orr.w	r3, r3, r8
 800ad28:	606b      	str	r3, [r5, #4]
 800ad2a:	4650      	mov	r0, sl
 800ad2c:	f7fd fc6e 	bl	800860c <__malloc_unlock>
 800ad30:	e759      	b.n	800abe6 <_realloc_r+0x42>
 800ad32:	68a1      	ldr	r1, [r4, #8]
 800ad34:	6129      	str	r1, [r5, #16]
 800ad36:	68e1      	ldr	r1, [r4, #12]
 800ad38:	6169      	str	r1, [r5, #20]
 800ad3a:	2a24      	cmp	r2, #36	; 0x24
 800ad3c:	bf01      	itttt	eq
 800ad3e:	6922      	ldreq	r2, [r4, #16]
 800ad40:	61aa      	streq	r2, [r5, #24]
 800ad42:	6960      	ldreq	r0, [r4, #20]
 800ad44:	61e8      	streq	r0, [r5, #28]
 800ad46:	bf19      	ittee	ne
 800ad48:	f105 0218 	addne.w	r2, r5, #24
 800ad4c:	f104 0110 	addne.w	r1, r4, #16
 800ad50:	f105 0220 	addeq.w	r2, r5, #32
 800ad54:	f104 0118 	addeq.w	r1, r4, #24
 800ad58:	e7d2      	b.n	800ad00 <_realloc_r+0x15c>
 800ad5a:	463a      	mov	r2, r7
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	e7cf      	b.n	800ad00 <_realloc_r+0x15c>
 800ad60:	4621      	mov	r1, r4
 800ad62:	4638      	mov	r0, r7
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	f7ff ff02 	bl	800ab6e <memmove>
 800ad6a:	9b01      	ldr	r3, [sp, #4]
 800ad6c:	e7ce      	b.n	800ad0c <_realloc_r+0x168>
 800ad6e:	18c7      	adds	r7, r0, r3
 800ad70:	45b8      	cmp	r8, r7
 800ad72:	dc20      	bgt.n	800adb6 <_realloc_r+0x212>
 800ad74:	68cb      	ldr	r3, [r1, #12]
 800ad76:	688a      	ldr	r2, [r1, #8]
 800ad78:	60d3      	str	r3, [r2, #12]
 800ad7a:	609a      	str	r2, [r3, #8]
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	68eb      	ldr	r3, [r5, #12]
 800ad80:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ad84:	60d3      	str	r3, [r2, #12]
 800ad86:	609a      	str	r2, [r3, #8]
 800ad88:	1f32      	subs	r2, r6, #4
 800ad8a:	2a24      	cmp	r2, #36	; 0x24
 800ad8c:	d842      	bhi.n	800ae14 <_realloc_r+0x270>
 800ad8e:	2a13      	cmp	r2, #19
 800ad90:	d93e      	bls.n	800ae10 <_realloc_r+0x26c>
 800ad92:	6823      	ldr	r3, [r4, #0]
 800ad94:	60ab      	str	r3, [r5, #8]
 800ad96:	6863      	ldr	r3, [r4, #4]
 800ad98:	60eb      	str	r3, [r5, #12]
 800ad9a:	2a1b      	cmp	r2, #27
 800ad9c:	d824      	bhi.n	800ade8 <_realloc_r+0x244>
 800ad9e:	f105 0010 	add.w	r0, r5, #16
 800ada2:	f104 0308 	add.w	r3, r4, #8
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	6002      	str	r2, [r0, #0]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	6042      	str	r2, [r0, #4]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	6083      	str	r3, [r0, #8]
 800adb2:	46a9      	mov	r9, r5
 800adb4:	e757      	b.n	800ac66 <_realloc_r+0xc2>
 800adb6:	4580      	cmp	r8, r0
 800adb8:	4607      	mov	r7, r0
 800adba:	dddf      	ble.n	800ad7c <_realloc_r+0x1d8>
 800adbc:	4611      	mov	r1, r2
 800adbe:	4650      	mov	r0, sl
 800adc0:	f7fd f9d2 	bl	8008168 <_malloc_r>
 800adc4:	4607      	mov	r7, r0
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d0af      	beq.n	800ad2a <_realloc_r+0x186>
 800adca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800adce:	f023 0301 	bic.w	r3, r3, #1
 800add2:	f1a0 0208 	sub.w	r2, r0, #8
 800add6:	444b      	add	r3, r9
 800add8:	429a      	cmp	r2, r3
 800adda:	d11f      	bne.n	800ae1c <_realloc_r+0x278>
 800addc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800ade0:	f027 0703 	bic.w	r7, r7, #3
 800ade4:	4437      	add	r7, r6
 800ade6:	e73e      	b.n	800ac66 <_realloc_r+0xc2>
 800ade8:	68a3      	ldr	r3, [r4, #8]
 800adea:	612b      	str	r3, [r5, #16]
 800adec:	68e3      	ldr	r3, [r4, #12]
 800adee:	616b      	str	r3, [r5, #20]
 800adf0:	2a24      	cmp	r2, #36	; 0x24
 800adf2:	bf01      	itttt	eq
 800adf4:	6923      	ldreq	r3, [r4, #16]
 800adf6:	61ab      	streq	r3, [r5, #24]
 800adf8:	6962      	ldreq	r2, [r4, #20]
 800adfa:	61ea      	streq	r2, [r5, #28]
 800adfc:	bf19      	ittee	ne
 800adfe:	f105 0018 	addne.w	r0, r5, #24
 800ae02:	f104 0310 	addne.w	r3, r4, #16
 800ae06:	f105 0020 	addeq.w	r0, r5, #32
 800ae0a:	f104 0318 	addeq.w	r3, r4, #24
 800ae0e:	e7ca      	b.n	800ada6 <_realloc_r+0x202>
 800ae10:	4623      	mov	r3, r4
 800ae12:	e7c8      	b.n	800ada6 <_realloc_r+0x202>
 800ae14:	4621      	mov	r1, r4
 800ae16:	f7ff feaa 	bl	800ab6e <memmove>
 800ae1a:	e7ca      	b.n	800adb2 <_realloc_r+0x20e>
 800ae1c:	1f32      	subs	r2, r6, #4
 800ae1e:	2a24      	cmp	r2, #36	; 0x24
 800ae20:	d82d      	bhi.n	800ae7e <_realloc_r+0x2da>
 800ae22:	2a13      	cmp	r2, #19
 800ae24:	d928      	bls.n	800ae78 <_realloc_r+0x2d4>
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	6003      	str	r3, [r0, #0]
 800ae2a:	6863      	ldr	r3, [r4, #4]
 800ae2c:	6043      	str	r3, [r0, #4]
 800ae2e:	2a1b      	cmp	r2, #27
 800ae30:	d80e      	bhi.n	800ae50 <_realloc_r+0x2ac>
 800ae32:	f100 0308 	add.w	r3, r0, #8
 800ae36:	f104 0208 	add.w	r2, r4, #8
 800ae3a:	6811      	ldr	r1, [r2, #0]
 800ae3c:	6019      	str	r1, [r3, #0]
 800ae3e:	6851      	ldr	r1, [r2, #4]
 800ae40:	6059      	str	r1, [r3, #4]
 800ae42:	6892      	ldr	r2, [r2, #8]
 800ae44:	609a      	str	r2, [r3, #8]
 800ae46:	4621      	mov	r1, r4
 800ae48:	4650      	mov	r0, sl
 800ae4a:	f7ff fab5 	bl	800a3b8 <_free_r>
 800ae4e:	e76c      	b.n	800ad2a <_realloc_r+0x186>
 800ae50:	68a3      	ldr	r3, [r4, #8]
 800ae52:	6083      	str	r3, [r0, #8]
 800ae54:	68e3      	ldr	r3, [r4, #12]
 800ae56:	60c3      	str	r3, [r0, #12]
 800ae58:	2a24      	cmp	r2, #36	; 0x24
 800ae5a:	bf01      	itttt	eq
 800ae5c:	6923      	ldreq	r3, [r4, #16]
 800ae5e:	6103      	streq	r3, [r0, #16]
 800ae60:	6961      	ldreq	r1, [r4, #20]
 800ae62:	6141      	streq	r1, [r0, #20]
 800ae64:	bf19      	ittee	ne
 800ae66:	f100 0310 	addne.w	r3, r0, #16
 800ae6a:	f104 0210 	addne.w	r2, r4, #16
 800ae6e:	f100 0318 	addeq.w	r3, r0, #24
 800ae72:	f104 0218 	addeq.w	r2, r4, #24
 800ae76:	e7e0      	b.n	800ae3a <_realloc_r+0x296>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	4622      	mov	r2, r4
 800ae7c:	e7dd      	b.n	800ae3a <_realloc_r+0x296>
 800ae7e:	4621      	mov	r1, r4
 800ae80:	f7ff fe75 	bl	800ab6e <memmove>
 800ae84:	e7df      	b.n	800ae46 <_realloc_r+0x2a2>
 800ae86:	4637      	mov	r7, r6
 800ae88:	e6ed      	b.n	800ac66 <_realloc_r+0xc2>
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	431f      	orrs	r7, r3
 800ae90:	f8c9 7004 	str.w	r7, [r9, #4]
 800ae94:	6853      	ldr	r3, [r2, #4]
 800ae96:	f043 0301 	orr.w	r3, r3, #1
 800ae9a:	6053      	str	r3, [r2, #4]
 800ae9c:	e6ff      	b.n	800ac9e <_realloc_r+0xfa>
 800ae9e:	bf00      	nop
 800aea0:	2000026c 	.word	0x2000026c

0800aea4 <strncmp>:
 800aea4:	b510      	push	{r4, lr}
 800aea6:	b16a      	cbz	r2, 800aec4 <strncmp+0x20>
 800aea8:	3901      	subs	r1, #1
 800aeaa:	1884      	adds	r4, r0, r2
 800aeac:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aeb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d103      	bne.n	800aec0 <strncmp+0x1c>
 800aeb8:	42a0      	cmp	r0, r4
 800aeba:	d001      	beq.n	800aec0 <strncmp+0x1c>
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1f5      	bne.n	800aeac <strncmp+0x8>
 800aec0:	1a98      	subs	r0, r3, r2
 800aec2:	bd10      	pop	{r4, pc}
 800aec4:	4610      	mov	r0, r2
 800aec6:	bd10      	pop	{r4, pc}

0800aec8 <_sbrk>:
 800aec8:	4b04      	ldr	r3, [pc, #16]	; (800aedc <_sbrk+0x14>)
 800aeca:	6819      	ldr	r1, [r3, #0]
 800aecc:	4602      	mov	r2, r0
 800aece:	b909      	cbnz	r1, 800aed4 <_sbrk+0xc>
 800aed0:	4903      	ldr	r1, [pc, #12]	; (800aee0 <_sbrk+0x18>)
 800aed2:	6019      	str	r1, [r3, #0]
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	4402      	add	r2, r0
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	4770      	bx	lr
 800aedc:	200006d0 	.word	0x200006d0
 800aee0:	20000e9c 	.word	0x20000e9c

0800aee4 <_init>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	bf00      	nop
 800aee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeea:	bc08      	pop	{r3}
 800aeec:	469e      	mov	lr, r3
 800aeee:	4770      	bx	lr

0800aef0 <_fini>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	bf00      	nop
 800aef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef6:	bc08      	pop	{r3}
 800aef8:	469e      	mov	lr, r3
 800aefa:	4770      	bx	lr
