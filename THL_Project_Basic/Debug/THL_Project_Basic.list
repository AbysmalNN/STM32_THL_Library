
THL_Project_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08007d90  08007d90  00017d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008148  08008148  00018148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008150  08008150  00018150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000067c  20000000  08008158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000088c  20000680  080087d4  00020680  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000f0c  080087d4  00020f0c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002869d  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004524  00000000  00000000  00048d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ef19  00000000  00000000  0004d26d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014f8  00000000  00000000  0005c188  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013d0  00000000  00000000  0005d680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000af6c  00000000  00000000  0005ea50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005c73  00000000  00000000  000699bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006f62f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004728  00000000  00000000  0006f6ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000df  00000000  00000000  00073dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000680 	.word	0x20000680
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d78 	.word	0x08007d78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000684 	.word	0x20000684
 800020c:	08007d78 	.word	0x08007d78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2uiz>:
 8000be0:	004a      	lsls	r2, r1, #1
 8000be2:	d211      	bcs.n	8000c08 <__aeabi_d2uiz+0x28>
 8000be4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be8:	d211      	bcs.n	8000c0e <__aeabi_d2uiz+0x2e>
 8000bea:	d50d      	bpl.n	8000c08 <__aeabi_d2uiz+0x28>
 8000bec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf4:	d40e      	bmi.n	8000c14 <__aeabi_d2uiz+0x34>
 8000bf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c02:	fa23 f002 	lsr.w	r0, r3, r2
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d102      	bne.n	8000c1a <__aeabi_d2uiz+0x3a>
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	4770      	bx	lr
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b97a 	b.w	8000f2c <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	468c      	mov	ip, r1
 8000c56:	460d      	mov	r5, r1
 8000c58:	4604      	mov	r4, r0
 8000c5a:	9e08      	ldr	r6, [sp, #32]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d151      	bne.n	8000d04 <__udivmoddi4+0xb4>
 8000c60:	428a      	cmp	r2, r1
 8000c62:	4617      	mov	r7, r2
 8000c64:	d96d      	bls.n	8000d42 <__udivmoddi4+0xf2>
 8000c66:	fab2 fe82 	clz	lr, r2
 8000c6a:	f1be 0f00 	cmp.w	lr, #0
 8000c6e:	d00b      	beq.n	8000c88 <__udivmoddi4+0x38>
 8000c70:	f1ce 0c20 	rsb	ip, lr, #32
 8000c74:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c78:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c7c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c80:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c84:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c88:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c8c:	0c25      	lsrs	r5, r4, #16
 8000c8e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c92:	fa1f f987 	uxth.w	r9, r7
 8000c96:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c9a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c9e:	fb08 f309 	mul.w	r3, r8, r9
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x6c>
 8000ca6:	19ed      	adds	r5, r5, r7
 8000ca8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000cac:	f080 8123 	bcs.w	8000ef6 <__udivmoddi4+0x2a6>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	f240 8120 	bls.w	8000ef6 <__udivmoddi4+0x2a6>
 8000cb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cba:	443d      	add	r5, r7
 8000cbc:	1aed      	subs	r5, r5, r3
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cc4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ccc:	fb00 f909 	mul.w	r9, r0, r9
 8000cd0:	45a1      	cmp	r9, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x98>
 8000cd4:	19e4      	adds	r4, r4, r7
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	f080 810a 	bcs.w	8000ef2 <__udivmoddi4+0x2a2>
 8000cde:	45a1      	cmp	r9, r4
 8000ce0:	f240 8107 	bls.w	8000ef2 <__udivmoddi4+0x2a2>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	443c      	add	r4, r7
 8000ce8:	eba4 0409 	sub.w	r4, r4, r9
 8000cec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d061      	beq.n	8000dba <__udivmoddi4+0x16a>
 8000cf6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	6034      	str	r4, [r6, #0]
 8000cfe:	6073      	str	r3, [r6, #4]
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	428b      	cmp	r3, r1
 8000d06:	d907      	bls.n	8000d18 <__udivmoddi4+0xc8>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d054      	beq.n	8000db6 <__udivmoddi4+0x166>
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d12:	4608      	mov	r0, r1
 8000d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d18:	fab3 f183 	clz	r1, r3
 8000d1c:	2900      	cmp	r1, #0
 8000d1e:	f040 808e 	bne.w	8000e3e <__udivmoddi4+0x1ee>
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xdc>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80fa 	bhi.w	8000f20 <__udivmoddi4+0x2d0>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	46ac      	mov	ip, r5
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d03f      	beq.n	8000dba <__udivmoddi4+0x16a>
 8000d3a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b912      	cbnz	r2, 8000d4a <__udivmoddi4+0xfa>
 8000d44:	2701      	movs	r7, #1
 8000d46:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d4a:	fab7 fe87 	clz	lr, r7
 8000d4e:	f1be 0f00 	cmp.w	lr, #0
 8000d52:	d134      	bne.n	8000dbe <__udivmoddi4+0x16e>
 8000d54:	1beb      	subs	r3, r5, r7
 8000d56:	0c3a      	lsrs	r2, r7, #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d62:	0c25      	lsrs	r5, r4, #16
 8000d64:	fb02 3318 	mls	r3, r2, r8, r3
 8000d68:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d6c:	fb0c f308 	mul.w	r3, ip, r8
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x134>
 8000d74:	19ed      	adds	r5, r5, r7
 8000d76:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x132>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	f200 80d1 	bhi.w	8000f24 <__udivmoddi4+0x2d4>
 8000d82:	4680      	mov	r8, r0
 8000d84:	1aed      	subs	r5, r5, r3
 8000d86:	b2a3      	uxth	r3, r4
 8000d88:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d8c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d90:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d94:	fb0c fc00 	mul.w	ip, ip, r0
 8000d98:	45a4      	cmp	ip, r4
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x15c>
 8000d9c:	19e4      	adds	r4, r4, r7
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x15a>
 8000da4:	45a4      	cmp	ip, r4
 8000da6:	f200 80b8 	bhi.w	8000f1a <__udivmoddi4+0x2ca>
 8000daa:	4618      	mov	r0, r3
 8000dac:	eba4 040c 	sub.w	r4, r4, ip
 8000db0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db4:	e79d      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1ce 0420 	rsb	r4, lr, #32
 8000dc2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000dc6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dca:	fa20 f804 	lsr.w	r8, r0, r4
 8000dce:	0c3a      	lsrs	r2, r7, #16
 8000dd0:	fa25 f404 	lsr.w	r4, r5, r4
 8000dd4:	ea48 0803 	orr.w	r8, r8, r3
 8000dd8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000ddc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000de0:	fb02 4411 	mls	r4, r2, r1, r4
 8000de4:	fa1f fc87 	uxth.w	ip, r7
 8000de8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dec:	fb01 f30c 	mul.w	r3, r1, ip
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000df6:	d909      	bls.n	8000e0c <__udivmoddi4+0x1bc>
 8000df8:	19ed      	adds	r5, r5, r7
 8000dfa:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dfe:	f080 808a 	bcs.w	8000f16 <__udivmoddi4+0x2c6>
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	f240 8087 	bls.w	8000f16 <__udivmoddi4+0x2c6>
 8000e08:	3902      	subs	r1, #2
 8000e0a:	443d      	add	r5, r7
 8000e0c:	1aeb      	subs	r3, r5, r3
 8000e0e:	fa1f f588 	uxth.w	r5, r8
 8000e12:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e16:	fb02 3310 	mls	r3, r2, r0, r3
 8000e1a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e1e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x1e6>
 8000e26:	19ed      	adds	r5, r5, r7
 8000e28:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2c:	d26f      	bcs.n	8000f0e <__udivmoddi4+0x2be>
 8000e2e:	42ab      	cmp	r3, r5
 8000e30:	d96d      	bls.n	8000f0e <__udivmoddi4+0x2be>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443d      	add	r5, r7
 8000e36:	1aeb      	subs	r3, r5, r3
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	e78f      	b.n	8000d5e <__udivmoddi4+0x10e>
 8000e3e:	f1c1 0720 	rsb	r7, r1, #32
 8000e42:	fa22 f807 	lsr.w	r8, r2, r7
 8000e46:	408b      	lsls	r3, r1
 8000e48:	fa05 f401 	lsl.w	r4, r5, r1
 8000e4c:	ea48 0303 	orr.w	r3, r8, r3
 8000e50:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e54:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e5e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e62:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e66:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e6a:	fa1f f883 	uxth.w	r8, r3
 8000e6e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e72:	fb09 f408 	mul.w	r4, r9, r8
 8000e76:	42ac      	cmp	r4, r5
 8000e78:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x244>
 8000e82:	18ed      	adds	r5, r5, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	d243      	bcs.n	8000f12 <__udivmoddi4+0x2c2>
 8000e8a:	42ac      	cmp	r4, r5
 8000e8c:	d941      	bls.n	8000f12 <__udivmoddi4+0x2c2>
 8000e8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e92:	441d      	add	r5, r3
 8000e94:	1b2d      	subs	r5, r5, r4
 8000e96:	fa1f fe8e 	uxth.w	lr, lr
 8000e9a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e9e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ea2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ea6:	fb00 f808 	mul.w	r8, r0, r8
 8000eaa:	45a0      	cmp	r8, r4
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x26e>
 8000eae:	18e4      	adds	r4, r4, r3
 8000eb0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000eb4:	d229      	bcs.n	8000f0a <__udivmoddi4+0x2ba>
 8000eb6:	45a0      	cmp	r8, r4
 8000eb8:	d927      	bls.n	8000f0a <__udivmoddi4+0x2ba>
 8000eba:	3802      	subs	r0, #2
 8000ebc:	441c      	add	r4, r3
 8000ebe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec2:	eba4 0408 	sub.w	r4, r4, r8
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	454c      	cmp	r4, r9
 8000ecc:	46c6      	mov	lr, r8
 8000ece:	464d      	mov	r5, r9
 8000ed0:	d315      	bcc.n	8000efe <__udivmoddi4+0x2ae>
 8000ed2:	d012      	beq.n	8000efa <__udivmoddi4+0x2aa>
 8000ed4:	b156      	cbz	r6, 8000eec <__udivmoddi4+0x29c>
 8000ed6:	ebba 030e 	subs.w	r3, sl, lr
 8000eda:	eb64 0405 	sbc.w	r4, r4, r5
 8000ede:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee2:	40cb      	lsrs	r3, r1
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	40cc      	lsrs	r4, r1
 8000ee8:	6037      	str	r7, [r6, #0]
 8000eea:	6074      	str	r4, [r6, #4]
 8000eec:	2100      	movs	r1, #0
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	e6f8      	b.n	8000ce8 <__udivmoddi4+0x98>
 8000ef6:	4690      	mov	r8, r2
 8000ef8:	e6e0      	b.n	8000cbc <__udivmoddi4+0x6c>
 8000efa:	45c2      	cmp	sl, r8
 8000efc:	d2ea      	bcs.n	8000ed4 <__udivmoddi4+0x284>
 8000efe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f02:	eb69 0503 	sbc.w	r5, r9, r3
 8000f06:	3801      	subs	r0, #1
 8000f08:	e7e4      	b.n	8000ed4 <__udivmoddi4+0x284>
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	e7d7      	b.n	8000ebe <__udivmoddi4+0x26e>
 8000f0e:	4640      	mov	r0, r8
 8000f10:	e791      	b.n	8000e36 <__udivmoddi4+0x1e6>
 8000f12:	4681      	mov	r9, r0
 8000f14:	e7be      	b.n	8000e94 <__udivmoddi4+0x244>
 8000f16:	4601      	mov	r1, r0
 8000f18:	e778      	b.n	8000e0c <__udivmoddi4+0x1bc>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	443c      	add	r4, r7
 8000f1e:	e745      	b.n	8000dac <__udivmoddi4+0x15c>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e708      	b.n	8000d36 <__udivmoddi4+0xe6>
 8000f24:	f1a8 0802 	sub.w	r8, r8, #2
 8000f28:	443d      	add	r5, r7
 8000f2a:	e72b      	b.n	8000d84 <__udivmoddi4+0x134>

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b510      	push	{r4, lr}
 8000f32:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_InitTick+0x40>)
 8000f36:	7818      	ldrb	r0, [r3, #0]
 8000f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f40:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <HAL_InitTick+0x44>)
 8000f42:	6810      	ldr	r0, [r2, #0]
 8000f44:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f48:	f000 fa20 	bl	800138c <HAL_SYSTICK_Config>
 8000f4c:	b968      	cbnz	r0, 8000f6a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	2c0f      	cmp	r4, #15
 8000f50:	d901      	bls.n	8000f56 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f52:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000f54:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f56:	2200      	movs	r2, #0
 8000f58:	4621      	mov	r1, r4
 8000f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5e:	f000 f9d7 	bl	8001310 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_InitTick+0x48>)
 8000f64:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000f66:	2000      	movs	r0, #0
 8000f68:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_Init>:
{
 8000f7c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_Init+0x30>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f8e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f96:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 f9a7 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff ffc6 	bl	8000f30 <HAL_InitTick>
  HAL_MspInit();
 8000fa4:	f003 f8d2 	bl	800414c <HAL_MspInit>
}
 8000fa8:	2000      	movs	r0, #0
 8000faa:	bd08      	pop	{r3, pc}
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <HAL_IncTick+0x10>)
 8000fb2:	6811      	ldr	r1, [r2, #0]
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_IncTick+0x14>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	440b      	add	r3, r1
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200006dc 	.word	0x200006dc
 8000fc4:	20000000 	.word	0x20000000

08000fc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fc8:	4b01      	ldr	r3, [pc, #4]	; (8000fd0 <HAL_GetTick+0x8>)
 8000fca:	6818      	ldr	r0, [r3, #0]
}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200006dc 	.word	0x200006dc

08000fd4 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000fd4:	4b49      	ldr	r3, [pc, #292]	; (80010fc <ADC_Init+0x128>)
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000fdc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	6841      	ldr	r1, [r0, #4]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fe6:	6802      	ldr	r2, [r0, #0]
 8000fe8:	6853      	ldr	r3, [r2, #4]
 8000fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fee:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ff0:	6802      	ldr	r2, [r0, #0]
 8000ff2:	6853      	ldr	r3, [r2, #4]
 8000ff4:	6901      	ldr	r1, [r0, #16]
 8000ff6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000ffa:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ffc:	6802      	ldr	r2, [r0, #0]
 8000ffe:	6853      	ldr	r3, [r2, #4]
 8001000:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001004:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001006:	6802      	ldr	r2, [r0, #0]
 8001008:	6853      	ldr	r3, [r2, #4]
 800100a:	6881      	ldr	r1, [r0, #8]
 800100c:	430b      	orrs	r3, r1
 800100e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001010:	6802      	ldr	r2, [r0, #0]
 8001012:	6893      	ldr	r3, [r2, #8]
 8001014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001018:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800101a:	6802      	ldr	r2, [r0, #0]
 800101c:	6893      	ldr	r3, [r2, #8]
 800101e:	68c1      	ldr	r1, [r0, #12]
 8001020:	430b      	orrs	r3, r1
 8001022:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001024:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001026:	4b36      	ldr	r3, [pc, #216]	; (8001100 <ADC_Init+0x12c>)
 8001028:	429a      	cmp	r2, r3
 800102a:	d049      	beq.n	80010c0 <ADC_Init+0xec>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800102c:	6802      	ldr	r2, [r0, #0]
 800102e:	6893      	ldr	r3, [r2, #8]
 8001030:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001034:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001036:	6802      	ldr	r2, [r0, #0]
 8001038:	6893      	ldr	r3, [r2, #8]
 800103a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800103c:	430b      	orrs	r3, r1
 800103e:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001040:	6802      	ldr	r2, [r0, #0]
 8001042:	6893      	ldr	r3, [r2, #8]
 8001044:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001048:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800104a:	6802      	ldr	r2, [r0, #0]
 800104c:	6893      	ldr	r3, [r2, #8]
 800104e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001050:	430b      	orrs	r3, r1
 8001052:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001054:	6802      	ldr	r2, [r0, #0]
 8001056:	6893      	ldr	r3, [r2, #8]
 8001058:	f023 0302 	bic.w	r3, r3, #2
 800105c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800105e:	6802      	ldr	r2, [r0, #0]
 8001060:	6893      	ldr	r3, [r2, #8]
 8001062:	6981      	ldr	r1, [r0, #24]
 8001064:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001068:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800106a:	6a03      	ldr	r3, [r0, #32]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d132      	bne.n	80010d6 <ADC_Init+0x102>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001070:	6802      	ldr	r2, [r0, #0]
 8001072:	6853      	ldr	r3, [r2, #4]
 8001074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001078:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800107a:	6802      	ldr	r2, [r0, #0]
 800107c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800107e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001082:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001084:	6801      	ldr	r1, [r0, #0]
 8001086:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001088:	69c2      	ldr	r2, [r0, #28]
 800108a:	3a01      	subs	r2, #1
 800108c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001090:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001092:	6802      	ldr	r2, [r0, #0]
 8001094:	6893      	ldr	r3, [r2, #8]
 8001096:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800109a:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800109c:	6802      	ldr	r2, [r0, #0]
 800109e:	6893      	ldr	r3, [r2, #8]
 80010a0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80010a2:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80010a6:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010a8:	6802      	ldr	r2, [r0, #0]
 80010aa:	6893      	ldr	r3, [r2, #8]
 80010ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010b0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010b2:	6802      	ldr	r2, [r0, #0]
 80010b4:	6893      	ldr	r3, [r2, #8]
 80010b6:	6941      	ldr	r1, [r0, #20]
 80010b8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80010bc:	6093      	str	r3, [r2, #8]
 80010be:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010c0:	6802      	ldr	r2, [r0, #0]
 80010c2:	6893      	ldr	r3, [r2, #8]
 80010c4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80010c8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010ca:	6802      	ldr	r2, [r0, #0]
 80010cc:	6893      	ldr	r3, [r2, #8]
 80010ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80010d2:	6093      	str	r3, [r2, #8]
 80010d4:	e7be      	b.n	8001054 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010d6:	6802      	ldr	r2, [r0, #0]
 80010d8:	6853      	ldr	r3, [r2, #4]
 80010da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010de:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010e0:	6802      	ldr	r2, [r0, #0]
 80010e2:	6853      	ldr	r3, [r2, #4]
 80010e4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010e8:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010ea:	6801      	ldr	r1, [r0, #0]
 80010ec:	684b      	ldr	r3, [r1, #4]
 80010ee:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80010f0:	3a01      	subs	r2, #1
 80010f2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80010f6:	604b      	str	r3, [r1, #4]
 80010f8:	e7bf      	b.n	800107a <ADC_Init+0xa6>
 80010fa:	bf00      	nop
 80010fc:	40012300 	.word	0x40012300
 8001100:	0f000001 	.word	0x0f000001

08001104 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001104:	b330      	cbz	r0, 8001154 <HAL_ADC_Init+0x50>
{
 8001106:	b510      	push	{r4, lr}
 8001108:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800110a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800110c:	b143      	cbz	r3, 8001120 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800110e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001110:	f013 0f10 	tst.w	r3, #16
 8001114:	d00a      	beq.n	800112c <HAL_ADC_Init+0x28>
    tmp_hal_status = HAL_ERROR;
 8001116:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001118:	2300      	movs	r3, #0
 800111a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800111e:	bd10      	pop	{r4, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001120:	6443      	str	r3, [r0, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001122:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001126:	f003 f831 	bl	800418c <HAL_ADC_MspInit>
 800112a:	e7f0      	b.n	800110e <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800112c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800112e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001132:	f023 0302 	bic.w	r3, r3, #2
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff ff49 	bl	8000fd4 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001142:	2000      	movs	r0, #0
 8001144:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001148:	f023 0303 	bic.w	r3, r3, #3
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6423      	str	r3, [r4, #64]	; 0x40
 8001152:	e7e1      	b.n	8001118 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001154:	2001      	movs	r0, #1
 8001156:	4770      	bx	lr

08001158 <HAL_ADC_ConfigChannel>:
{
 8001158:	b430      	push	{r4, r5}
 800115a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001160:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001164:	2b01      	cmp	r3, #1
 8001166:	f000 80b5 	beq.w	80012d4 <HAL_ADC_ConfigChannel+0x17c>
 800116a:	2301      	movs	r3, #1
 800116c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001170:	680b      	ldr	r3, [r1, #0]
 8001172:	2b09      	cmp	r3, #9
 8001174:	d93e      	bls.n	80011f4 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001176:	6805      	ldr	r5, [r0, #0]
 8001178:	68ea      	ldr	r2, [r5, #12]
 800117a:	b29b      	uxth	r3, r3
 800117c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001180:	3b1e      	subs	r3, #30
 8001182:	2407      	movs	r4, #7
 8001184:	fa04 f303 	lsl.w	r3, r4, r3
 8001188:	ea22 0303 	bic.w	r3, r2, r3
 800118c:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800118e:	6805      	ldr	r5, [r0, #0]
 8001190:	68ea      	ldr	r2, [r5, #12]
 8001192:	688c      	ldr	r4, [r1, #8]
 8001194:	880b      	ldrh	r3, [r1, #0]
 8001196:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800119a:	3b1e      	subs	r3, #30
 800119c:	fa04 f303 	lsl.w	r3, r4, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 80011a4:	684b      	ldr	r3, [r1, #4]
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d83a      	bhi.n	8001220 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011aa:	6805      	ldr	r5, [r0, #0]
 80011ac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80011ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011b2:	3b05      	subs	r3, #5
 80011b4:	241f      	movs	r4, #31
 80011b6:	fa04 f303 	lsl.w	r3, r4, r3
 80011ba:	ea22 0303 	bic.w	r3, r2, r3
 80011be:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011c0:	6805      	ldr	r5, [r0, #0]
 80011c2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80011c4:	684b      	ldr	r3, [r1, #4]
 80011c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011ca:	3b05      	subs	r3, #5
 80011cc:	880c      	ldrh	r4, [r1, #0]
 80011ce:	fa04 f303 	lsl.w	r3, r4, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011d6:	6802      	ldr	r2, [r0, #0]
 80011d8:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <HAL_ADC_ConfigChannel+0x180>)
 80011da:	429a      	cmp	r2, r3
 80011dc:	d050      	beq.n	8001280 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011de:	6802      	ldr	r2, [r0, #0]
 80011e0:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_ADC_ConfigChannel+0x180>)
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d055      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 80011e6:	2300      	movs	r3, #0
 80011e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80011ec:	4618      	mov	r0, r3
}
 80011ee:	b002      	add	sp, #8
 80011f0:	bc30      	pop	{r4, r5}
 80011f2:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011f4:	6805      	ldr	r5, [r0, #0]
 80011f6:	692a      	ldr	r2, [r5, #16]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011fe:	2407      	movs	r4, #7
 8001200:	fa04 f303 	lsl.w	r3, r4, r3
 8001204:	ea22 0303 	bic.w	r3, r2, r3
 8001208:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800120a:	6805      	ldr	r5, [r0, #0]
 800120c:	692a      	ldr	r2, [r5, #16]
 800120e:	688c      	ldr	r4, [r1, #8]
 8001210:	880b      	ldrh	r3, [r1, #0]
 8001212:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001216:	fa04 f303 	lsl.w	r3, r4, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	612b      	str	r3, [r5, #16]
 800121e:	e7c1      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8001220:	2b0c      	cmp	r3, #12
 8001222:	d816      	bhi.n	8001252 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001224:	6805      	ldr	r5, [r0, #0]
 8001226:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001228:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800122c:	3b23      	subs	r3, #35	; 0x23
 800122e:	241f      	movs	r4, #31
 8001230:	fa04 f303 	lsl.w	r3, r4, r3
 8001234:	ea22 0303 	bic.w	r3, r2, r3
 8001238:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800123a:	6805      	ldr	r5, [r0, #0]
 800123c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800123e:	684b      	ldr	r3, [r1, #4]
 8001240:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001244:	3b23      	subs	r3, #35	; 0x23
 8001246:	880c      	ldrh	r4, [r1, #0]
 8001248:	fa04 f303 	lsl.w	r3, r4, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	632b      	str	r3, [r5, #48]	; 0x30
 8001250:	e7c1      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001252:	6805      	ldr	r5, [r0, #0]
 8001254:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001256:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800125a:	3b41      	subs	r3, #65	; 0x41
 800125c:	241f      	movs	r4, #31
 800125e:	fa04 f303 	lsl.w	r3, r4, r3
 8001262:	ea22 0303 	bic.w	r3, r2, r3
 8001266:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001268:	6805      	ldr	r5, [r0, #0]
 800126a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800126c:	684b      	ldr	r3, [r1, #4]
 800126e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001272:	3b41      	subs	r3, #65	; 0x41
 8001274:	880c      	ldrh	r4, [r1, #0]
 8001276:	fa04 f303 	lsl.w	r3, r4, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800127e:	e7aa      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001280:	680b      	ldr	r3, [r1, #0]
 8001282:	2b12      	cmp	r3, #18
 8001284:	d1ab      	bne.n	80011de <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <HAL_ADC_ConfigChannel+0x184>)
 8001288:	6853      	ldr	r3, [r2, #4]
 800128a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800128e:	6053      	str	r3, [r2, #4]
 8001290:	e7a5      	b.n	80011de <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001292:	680b      	ldr	r3, [r1, #0]
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <HAL_ADC_ConfigChannel+0x188>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d001      	beq.n	800129e <HAL_ADC_ConfigChannel+0x146>
 800129a:	2b11      	cmp	r3, #17
 800129c:	d1a3      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <HAL_ADC_ConfigChannel+0x184>)
 80012a0:	6853      	ldr	r3, [r2, #4]
 80012a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012a6:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012a8:	680a      	ldr	r2, [r1, #0]
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_ADC_ConfigChannel+0x188>)
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d19a      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_ADC_ConfigChannel+0x18c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <HAL_ADC_ConfigChannel+0x190>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012c0:	005a      	lsls	r2, r3, #1
 80012c2:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 80012c4:	e002      	b.n	80012cc <HAL_ADC_ConfigChannel+0x174>
        counter--;
 80012c6:	9b01      	ldr	r3, [sp, #4]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80012cc:	9b01      	ldr	r3, [sp, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f9      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x16e>
 80012d2:	e788      	b.n	80011e6 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 80012d4:	2002      	movs	r0, #2
 80012d6:	e78a      	b.n	80011ee <HAL_ADC_ConfigChannel+0x96>
 80012d8:	40012000 	.word	0x40012000
 80012dc:	40012300 	.word	0x40012300
 80012e0:	10000012 	.word	0x10000012
 80012e4:	20000008 	.word	0x20000008
 80012e8:	431bde83 	.word	0x431bde83

080012ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012f4:	041b      	lsls	r3, r3, #16
 80012f6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80012f8:	0200      	lsls	r0, r0, #8
 80012fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fe:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001300:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001304:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001308:	60d0      	str	r0, [r2, #12]
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001310:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_NVIC_SetPriority+0x5c>)
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131a:	f1c3 0407 	rsb	r4, r3, #7
 800131e:	2c04      	cmp	r4, #4
 8001320:	bf28      	it	cs
 8001322:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001324:	1d1d      	adds	r5, r3, #4
 8001326:	2d06      	cmp	r5, #6
 8001328:	d917      	bls.n	800135a <HAL_NVIC_SetPriority+0x4a>
 800132a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	2501      	movs	r5, #1
 800132e:	fa05 f404 	lsl.w	r4, r5, r4
 8001332:	3c01      	subs	r4, #1
 8001334:	4021      	ands	r1, r4
 8001336:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	fa05 f303 	lsl.w	r3, r5, r3
 800133c:	3b01      	subs	r3, #1
 800133e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001342:	2800      	cmp	r0, #0
 8001344:	db0b      	blt.n	800135e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	0109      	lsls	r1, r1, #4
 8001348:	b2c9      	uxtb	r1, r1
 800134a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800134e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001352:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001356:	bc30      	pop	{r4, r5}
 8001358:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	2300      	movs	r3, #0
 800135c:	e7e6      	b.n	800132c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	f000 000f 	and.w	r0, r0, #15
 8001362:	0109      	lsls	r1, r1, #4
 8001364:	b2c9      	uxtb	r1, r1
 8001366:	4b02      	ldr	r3, [pc, #8]	; (8001370 <HAL_NVIC_SetPriority+0x60>)
 8001368:	5419      	strb	r1, [r3, r0]
 800136a:	e7f4      	b.n	8001356 <HAL_NVIC_SetPriority+0x46>
 800136c:	e000ed00 	.word	0xe000ed00
 8001370:	e000ed14 	.word	0xe000ed14

08001374 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001374:	0942      	lsrs	r2, r0, #5
 8001376:	f000 001f 	and.w	r0, r0, #31
 800137a:	2301      	movs	r3, #1
 800137c:	fa03 f000 	lsl.w	r0, r3, r0
 8001380:	4b01      	ldr	r3, [pc, #4]	; (8001388 <HAL_NVIC_EnableIRQ+0x14>)
 8001382:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100

0800138c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	3801      	subs	r0, #1
 800138e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001392:	d20a      	bcs.n	80013aa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_SYSTICK_Config+0x24>)
 8001396:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	21f0      	movs	r1, #240	; 0xf0
 800139a:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_SYSTICK_Config+0x28>)
 800139c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	2000      	movs	r0, #0
 80013a2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013b8:	6802      	ldr	r2, [r0, #0]
 80013ba:	b2d3      	uxtb	r3, r2
 80013bc:	3b10      	subs	r3, #16
 80013be:	490b      	ldr	r1, [pc, #44]	; (80013ec <DMA_CalcBaseAndBitshift+0x34>)
 80013c0:	fba1 1303 	umull	r1, r3, r1, r3
 80013c4:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013c6:	490a      	ldr	r1, [pc, #40]	; (80013f0 <DMA_CalcBaseAndBitshift+0x38>)
 80013c8:	5cc9      	ldrb	r1, [r1, r3]
 80013ca:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d806      	bhi.n	80013de <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013d0:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80013d4:	f022 0203 	bic.w	r2, r2, #3
 80013d8:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80013da:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80013dc:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013de:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80013e2:	f022 0203 	bic.w	r2, r2, #3
 80013e6:	3204      	adds	r2, #4
 80013e8:	6582      	str	r2, [r0, #88]	; 0x58
 80013ea:	e7f6      	b.n	80013da <DMA_CalcBaseAndBitshift+0x22>
 80013ec:	aaaaaaab 	.word	0xaaaaaaab
 80013f0:	08007d90 	.word	0x08007d90

080013f4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013f6:	6982      	ldr	r2, [r0, #24]
 80013f8:	b992      	cbnz	r2, 8001420 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d00a      	beq.n	8001414 <DMA_CheckFifoParam+0x20>
 80013fe:	b11b      	cbz	r3, 8001408 <DMA_CheckFifoParam+0x14>
 8001400:	2b02      	cmp	r3, #2
 8001402:	d001      	beq.n	8001408 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001404:	2000      	movs	r0, #0
 8001406:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001408:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800140a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800140e:	d12c      	bne.n	800146a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001410:	2000      	movs	r0, #0
 8001412:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001414:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001416:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800141a:	d028      	beq.n	800146e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800141c:	2000      	movs	r0, #0
 800141e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001420:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001424:	d005      	beq.n	8001432 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001426:	2b02      	cmp	r3, #2
 8001428:	d929      	bls.n	800147e <DMA_CheckFifoParam+0x8a>
 800142a:	2b03      	cmp	r3, #3
 800142c:	d015      	beq.n	800145a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800142e:	2000      	movs	r0, #0
 8001430:	4770      	bx	lr
    switch (tmp)
 8001432:	2b03      	cmp	r3, #3
 8001434:	d803      	bhi.n	800143e <DMA_CheckFifoParam+0x4a>
 8001436:	e8df f003 	tbb	[pc, r3]
 800143a:	041c      	.short	0x041c
 800143c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800143e:	2000      	movs	r0, #0
 8001440:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001442:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001444:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001448:	d115      	bne.n	8001476 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800144a:	2000      	movs	r0, #0
 800144c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800144e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001450:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001454:	d011      	beq.n	800147a <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8001456:	2000      	movs	r0, #0
 8001458:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800145a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800145c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001460:	d001      	beq.n	8001466 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8001462:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001464:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8001466:	2000      	movs	r0, #0
 8001468:	4770      	bx	lr
        status = HAL_ERROR;
 800146a:	2001      	movs	r0, #1
 800146c:	4770      	bx	lr
        status = HAL_ERROR;
 800146e:	2001      	movs	r0, #1
 8001470:	4770      	bx	lr
      status = HAL_ERROR;
 8001472:	2001      	movs	r0, #1
 8001474:	4770      	bx	lr
        status = HAL_ERROR;
 8001476:	2001      	movs	r0, #1
 8001478:	4770      	bx	lr
        status = HAL_ERROR;
 800147a:	2001      	movs	r0, #1
 800147c:	4770      	bx	lr
      status = HAL_ERROR;
 800147e:	2001      	movs	r0, #1
 8001480:	4770      	bx	lr
	...

08001484 <HAL_DMA_Init>:
{
 8001484:	b570      	push	{r4, r5, r6, lr}
 8001486:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff fd9e 	bl	8000fc8 <HAL_GetTick>
  if(hdma == NULL)
 800148c:	2c00      	cmp	r4, #0
 800148e:	d05d      	beq.n	800154c <HAL_DMA_Init+0xc8>
 8001490:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8001492:	2300      	movs	r3, #0
 8001494:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001498:	2302      	movs	r3, #2
 800149a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800149e:	6822      	ldr	r2, [r4, #0]
 80014a0:	6813      	ldr	r3, [r2, #0]
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	f012 0f01 	tst.w	r2, #1
 80014b0:	d00a      	beq.n	80014c8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014b2:	f7ff fd89 	bl	8000fc8 <HAL_GetTick>
 80014b6:	1b40      	subs	r0, r0, r5
 80014b8:	2805      	cmp	r0, #5
 80014ba:	d9f5      	bls.n	80014a8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014bc:	2320      	movs	r3, #32
 80014be:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014c0:	2003      	movs	r0, #3
 80014c2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80014c6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80014c8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014ca:	4921      	ldr	r1, [pc, #132]	; (8001550 <HAL_DMA_Init+0xcc>)
 80014cc:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ce:	6862      	ldr	r2, [r4, #4]
 80014d0:	68a0      	ldr	r0, [r4, #8]
 80014d2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d4:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d8:	6920      	ldr	r0, [r4, #16]
 80014da:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014dc:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014de:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e0:	69a0      	ldr	r0, [r4, #24]
 80014e2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e4:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e8:	6a20      	ldr	r0, [r4, #32]
 80014ea:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ec:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80014f0:	2904      	cmp	r1, #4
 80014f2:	d016      	beq.n	8001522 <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 80014f4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80014f6:	6826      	ldr	r6, [r4, #0]
 80014f8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014fa:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80014fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001500:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001502:	2b04      	cmp	r3, #4
 8001504:	d012      	beq.n	800152c <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 8001506:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff ff55 	bl	80013b8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800150e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001510:	233f      	movs	r3, #63	; 0x3f
 8001512:	4093      	lsls	r3, r2
 8001514:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001516:	2000      	movs	r0, #0
 8001518:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800151a:	2301      	movs	r3, #1
 800151c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001520:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001522:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001524:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001526:	4301      	orrs	r1, r0
 8001528:	430a      	orrs	r2, r1
 800152a:	e7e3      	b.n	80014f4 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 800152c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800152e:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001530:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0e7      	beq.n	8001506 <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff ff5c 	bl	80013f4 <DMA_CheckFifoParam>
 800153c:	2800      	cmp	r0, #0
 800153e:	d0e2      	beq.n	8001506 <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001540:	2340      	movs	r3, #64	; 0x40
 8001542:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001544:	2001      	movs	r0, #1
 8001546:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800154a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800154c:	2001      	movs	r0, #1
}
 800154e:	bd70      	pop	{r4, r5, r6, pc}
 8001550:	f010803f 	.word	0xf010803f

08001554 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001554:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d003      	beq.n	8001566 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001562:	2001      	movs	r0, #1
 8001564:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001566:	2305      	movs	r3, #5
 8001568:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800156c:	6802      	ldr	r2, [r0, #0]
 800156e:	6813      	ldr	r3, [r2, #0]
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001576:	2000      	movs	r0, #0
}
 8001578:	4770      	bx	lr
	...

0800157c <HAL_DMA_IRQHandler>:
{
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	b083      	sub	sp, #12
 8001580:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001586:	4b72      	ldr	r3, [pc, #456]	; (8001750 <HAL_DMA_IRQHandler+0x1d4>)
 8001588:	681d      	ldr	r5, [r3, #0]
 800158a:	4b72      	ldr	r3, [pc, #456]	; (8001754 <HAL_DMA_IRQHandler+0x1d8>)
 800158c:	fba3 3505 	umull	r3, r5, r3, r5
 8001590:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001592:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001594:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001596:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001598:	2308      	movs	r3, #8
 800159a:	4093      	lsls	r3, r2
 800159c:	421e      	tst	r6, r3
 800159e:	d010      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015a0:	6803      	ldr	r3, [r0, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	f012 0f04 	tst.w	r2, #4
 80015a8:	d00b      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	f022 0204 	bic.w	r2, r2, #4
 80015b0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015b2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80015b4:	2308      	movs	r3, #8
 80015b6:	4093      	lsls	r3, r2
 80015b8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80015c4:	2301      	movs	r3, #1
 80015c6:	4093      	lsls	r3, r2
 80015c8:	421e      	tst	r6, r3
 80015ca:	d009      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015cc:	6822      	ldr	r2, [r4, #0]
 80015ce:	6952      	ldr	r2, [r2, #20]
 80015d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80015d4:	d004      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015d6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80015e2:	2304      	movs	r3, #4
 80015e4:	4093      	lsls	r3, r2
 80015e6:	421e      	tst	r6, r3
 80015e8:	d009      	beq.n	80015fe <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015ea:	6822      	ldr	r2, [r4, #0]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	f012 0f02 	tst.w	r2, #2
 80015f2:	d004      	beq.n	80015fe <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015f4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001600:	2310      	movs	r3, #16
 8001602:	4093      	lsls	r3, r2
 8001604:	421e      	tst	r6, r3
 8001606:	d024      	beq.n	8001652 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001608:	6822      	ldr	r2, [r4, #0]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	f012 0f08 	tst.w	r2, #8
 8001610:	d01f      	beq.n	8001652 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001612:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800161c:	d00d      	beq.n	800163a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001624:	d104      	bne.n	8001630 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001628:	b19b      	cbz	r3, 8001652 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800162a:	4620      	mov	r0, r4
 800162c:	4798      	blx	r3
 800162e:	e010      	b.n	8001652 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001630:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001632:	b173      	cbz	r3, 8001652 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001634:	4620      	mov	r0, r4
 8001636:	4798      	blx	r3
 8001638:	e00b      	b.n	8001652 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001640:	d103      	bne.n	800164a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	f022 0208 	bic.w	r2, r2, #8
 8001648:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800164a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800164c:	b10b      	cbz	r3, 8001652 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800164e:	4620      	mov	r0, r4
 8001650:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001652:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001654:	2320      	movs	r3, #32
 8001656:	4093      	lsls	r3, r2
 8001658:	421e      	tst	r6, r3
 800165a:	d055      	beq.n	8001708 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800165c:	6822      	ldr	r2, [r4, #0]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	f012 0f10 	tst.w	r2, #16
 8001664:	d050      	beq.n	8001708 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001666:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001668:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b05      	cmp	r3, #5
 8001670:	d00e      	beq.n	8001690 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800167a:	d033      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001682:	d12a      	bne.n	80016da <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001684:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001686:	2b00      	cmp	r3, #0
 8001688:	d03e      	beq.n	8001708 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800168a:	4620      	mov	r0, r4
 800168c:	4798      	blx	r3
 800168e:	e03b      	b.n	8001708 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001690:	6822      	ldr	r2, [r4, #0]
 8001692:	6813      	ldr	r3, [r2, #0]
 8001694:	f023 0316 	bic.w	r3, r3, #22
 8001698:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	6953      	ldr	r3, [r2, #20]
 800169e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016a2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016a6:	b1a3      	cbz	r3, 80016d2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a8:	6822      	ldr	r2, [r4, #0]
 80016aa:	6813      	ldr	r3, [r2, #0]
 80016ac:	f023 0308 	bic.w	r3, r3, #8
 80016b0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016b4:	233f      	movs	r3, #63	; 0x3f
 80016b6:	4093      	lsls	r3, r2
 80016b8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80016ba:	2300      	movs	r3, #0
 80016bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80016c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d03f      	beq.n	800174c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80016cc:	4620      	mov	r0, r4
 80016ce:	4798      	blx	r3
 80016d0:	e03c      	b.n	800174c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e7      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x12c>
 80016d8:	e7eb      	b.n	80016b2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80016da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016dc:	b1a3      	cbz	r3, 8001708 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80016de:	4620      	mov	r0, r4
 80016e0:	4798      	blx	r3
 80016e2:	e011      	b.n	8001708 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80016ea:	d109      	bne.n	8001700 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	f022 0210 	bic.w	r2, r2, #16
 80016f2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80016f4:	2300      	movs	r3, #0
 80016f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001700:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001702:	b10b      	cbz	r3, 8001708 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001704:	4620      	mov	r0, r4
 8001706:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001708:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800170a:	b1fb      	cbz	r3, 800174c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800170c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800170e:	f013 0f01 	tst.w	r3, #1
 8001712:	d017      	beq.n	8001744 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001714:	2305      	movs	r3, #5
 8001716:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800171a:	6822      	ldr	r2, [r4, #0]
 800171c:	6813      	ldr	r3, [r2, #0]
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	3301      	adds	r3, #1
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	429d      	cmp	r5, r3
 800172c:	d304      	bcc.n	8001738 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f013 0f01 	tst.w	r3, #1
 8001736:	d1f5      	bne.n	8001724 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001738:	2300      	movs	r3, #0
 800173a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800173e:	2301      	movs	r3, #1
 8001740:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001744:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001746:	b10b      	cbz	r3, 800174c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001748:	4620      	mov	r0, r4
 800174a:	4798      	blx	r3
}
 800174c:	b003      	add	sp, #12
 800174e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001750:	20000008 	.word	0x20000008
 8001754:	1b4e81b5 	.word	0x1b4e81b5

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175c:	2400      	movs	r4, #0
 800175e:	e098      	b.n	8001892 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001760:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8001764:	f10e 0e08 	add.w	lr, lr, #8
 8001768:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176c:	f004 0607 	and.w	r6, r4, #7
 8001770:	00b6      	lsls	r6, r6, #2
 8001772:	270f      	movs	r7, #15
 8001774:	40b7      	lsls	r7, r6
 8001776:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800177a:	690f      	ldr	r7, [r1, #16]
 800177c:	fa07 f606 	lsl.w	r6, r7, r6
 8001780:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8001782:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8001786:	e094      	b.n	80018b2 <HAL_GPIO_Init+0x15a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001788:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800178a:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178c:	68cf      	ldr	r7, [r1, #12]
 800178e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001792:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001794:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001796:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001798:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800179c:	684e      	ldr	r6, [r1, #4]
 800179e:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80017a2:	40a6      	lsls	r6, r4
 80017a4:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80017a6:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017a8:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017aa:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ac:	688b      	ldr	r3, [r1, #8]
 80017ae:	fa03 f30e 	lsl.w	r3, r3, lr
 80017b2:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80017b4:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b6:	684b      	ldr	r3, [r1, #4]
 80017b8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80017bc:	d068      	beq.n	8001890 <HAL_GPIO_Init+0x138>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	4b51      	ldr	r3, [pc, #324]	; (8001908 <HAL_GPIO_Init+0x1b0>)
 80017c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	9b01      	ldr	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d6:	08a3      	lsrs	r3, r4, #2
 80017d8:	1c9e      	adds	r6, r3, #2
 80017da:	4a4c      	ldr	r2, [pc, #304]	; (800190c <HAL_GPIO_Init+0x1b4>)
 80017dc:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e0:	f004 0603 	and.w	r6, r4, #3
 80017e4:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80017e8:	260f      	movs	r6, #15
 80017ea:	fa06 f60e 	lsl.w	r6, r6, lr
 80017ee:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017f2:	4f47      	ldr	r7, [pc, #284]	; (8001910 <HAL_GPIO_Init+0x1b8>)
 80017f4:	42b8      	cmp	r0, r7
 80017f6:	d079      	beq.n	80018ec <HAL_GPIO_Init+0x194>
 80017f8:	4e46      	ldr	r6, [pc, #280]	; (8001914 <HAL_GPIO_Init+0x1bc>)
 80017fa:	42b0      	cmp	r0, r6
 80017fc:	d078      	beq.n	80018f0 <HAL_GPIO_Init+0x198>
 80017fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001802:	42b0      	cmp	r0, r6
 8001804:	d076      	beq.n	80018f4 <HAL_GPIO_Init+0x19c>
 8001806:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800180a:	42b0      	cmp	r0, r6
 800180c:	d074      	beq.n	80018f8 <HAL_GPIO_Init+0x1a0>
 800180e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001812:	42b0      	cmp	r0, r6
 8001814:	d072      	beq.n	80018fc <HAL_GPIO_Init+0x1a4>
 8001816:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800181a:	42b0      	cmp	r0, r6
 800181c:	d070      	beq.n	8001900 <HAL_GPIO_Init+0x1a8>
 800181e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001822:	42b0      	cmp	r0, r6
 8001824:	d060      	beq.n	80018e8 <HAL_GPIO_Init+0x190>
 8001826:	2607      	movs	r6, #7
 8001828:	fa06 f60e 	lsl.w	r6, r6, lr
 800182c:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800182e:	3302      	adds	r3, #2
 8001830:	4e36      	ldr	r6, [pc, #216]	; (800190c <HAL_GPIO_Init+0x1b4>)
 8001832:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_GPIO_Init+0x1c0>)
 8001838:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 800183a:	43eb      	mvns	r3, r5
 800183c:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001840:	684f      	ldr	r7, [r1, #4]
 8001842:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001846:	d001      	beq.n	800184c <HAL_GPIO_Init+0xf4>
        {
          temp |= iocurrent;
 8001848:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 800184c:	4a32      	ldr	r2, [pc, #200]	; (8001918 <HAL_GPIO_Init+0x1c0>)
 800184e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001850:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001852:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001856:	684f      	ldr	r7, [r1, #4]
 8001858:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800185c:	d001      	beq.n	8001862 <HAL_GPIO_Init+0x10a>
        {
          temp |= iocurrent;
 800185e:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8001862:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <HAL_GPIO_Init+0x1c0>)
 8001864:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001866:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001868:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800186c:	684f      	ldr	r7, [r1, #4]
 800186e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001872:	d001      	beq.n	8001878 <HAL_GPIO_Init+0x120>
        {
          temp |= iocurrent;
 8001874:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8001878:	4a27      	ldr	r2, [pc, #156]	; (8001918 <HAL_GPIO_Init+0x1c0>)
 800187a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800187c:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800187e:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001880:	684e      	ldr	r6, [r1, #4]
 8001882:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001886:	d001      	beq.n	800188c <HAL_GPIO_Init+0x134>
        {
          temp |= iocurrent;
 8001888:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 800188c:	4a22      	ldr	r2, [pc, #136]	; (8001918 <HAL_GPIO_Init+0x1c0>)
 800188e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001890:	3401      	adds	r4, #1
 8001892:	2c0f      	cmp	r4, #15
 8001894:	d836      	bhi.n	8001904 <HAL_GPIO_Init+0x1ac>
    ioposition = 0x01U << position;
 8001896:	2301      	movs	r3, #1
 8001898:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	680a      	ldr	r2, [r1, #0]
 800189c:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 80018a0:	42ab      	cmp	r3, r5
 80018a2:	d1f5      	bne.n	8001890 <HAL_GPIO_Init+0x138>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a4:	684a      	ldr	r2, [r1, #4]
 80018a6:	2a02      	cmp	r2, #2
 80018a8:	f43f af5a 	beq.w	8001760 <HAL_GPIO_Init+0x8>
 80018ac:	2a12      	cmp	r2, #18
 80018ae:	f43f af57 	beq.w	8001760 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80018b2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b4:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f20e 	lsl.w	r2, r2, lr
 80018be:	43d2      	mvns	r2, r2
 80018c0:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c2:	684f      	ldr	r7, [r1, #4]
 80018c4:	f007 0703 	and.w	r7, r7, #3
 80018c8:	fa07 f70e 	lsl.w	r7, r7, lr
 80018cc:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80018ce:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018d0:	684e      	ldr	r6, [r1, #4]
 80018d2:	1e77      	subs	r7, r6, #1
 80018d4:	2f01      	cmp	r7, #1
 80018d6:	f67f af57 	bls.w	8001788 <HAL_GPIO_Init+0x30>
 80018da:	2e11      	cmp	r6, #17
 80018dc:	f43f af54 	beq.w	8001788 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e0:	2e12      	cmp	r6, #18
 80018e2:	f47f af61 	bne.w	80017a8 <HAL_GPIO_Init+0x50>
 80018e6:	e74f      	b.n	8001788 <HAL_GPIO_Init+0x30>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e8:	2606      	movs	r6, #6
 80018ea:	e79d      	b.n	8001828 <HAL_GPIO_Init+0xd0>
 80018ec:	2600      	movs	r6, #0
 80018ee:	e79b      	b.n	8001828 <HAL_GPIO_Init+0xd0>
 80018f0:	2601      	movs	r6, #1
 80018f2:	e799      	b.n	8001828 <HAL_GPIO_Init+0xd0>
 80018f4:	2602      	movs	r6, #2
 80018f6:	e797      	b.n	8001828 <HAL_GPIO_Init+0xd0>
 80018f8:	2603      	movs	r6, #3
 80018fa:	e795      	b.n	8001828 <HAL_GPIO_Init+0xd0>
 80018fc:	2604      	movs	r6, #4
 80018fe:	e793      	b.n	8001828 <HAL_GPIO_Init+0xd0>
 8001900:	2605      	movs	r6, #5
 8001902:	e791      	b.n	8001828 <HAL_GPIO_Init+0xd0>
      }
    }
  }
}
 8001904:	b003      	add	sp, #12
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40013800 	.word	0x40013800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800191c:	6903      	ldr	r3, [r0, #16]
 800191e:	4219      	tst	r1, r3
 8001920:	d101      	bne.n	8001926 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001922:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001924:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8001926:	2001      	movs	r0, #1
 8001928:	4770      	bx	lr

0800192a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800192a:	b912      	cbnz	r2, 8001932 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192c:	0409      	lsls	r1, r1, #16
 800192e:	6181      	str	r1, [r0, #24]
 8001930:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001932:	6181      	str	r1, [r0, #24]
 8001934:	4770      	bx	lr

08001936 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001936:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b40      	cmp	r3, #64	; 0x40
 800193e:	d013      	beq.n	8001968 <I2C_Master_SB+0x32>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001940:	6903      	ldr	r3, [r0, #16]
 8001942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001946:	d01e      	beq.n	8001986 <I2C_Master_SB+0x50>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 8001948:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800194a:	2b00      	cmp	r3, #0
 800194c:	d02d      	beq.n	80019aa <I2C_Master_SB+0x74>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
      }
      else if(hi2c->EventCount == 1U)
 800194e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001950:	2b01      	cmp	r3, #1
 8001952:	d133      	bne.n	80019bc <I2C_Master_SB+0x86>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001954:	6802      	ldr	r2, [r0, #0]
 8001956:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001958:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800195c:	f003 0306 	and.w	r3, r3, #6
 8001960:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8001964:	6113      	str	r3, [r2, #16]
 8001966:	e029      	b.n	80019bc <I2C_Master_SB+0x86>
    if(hi2c->EventCount == 0U)
 8001968:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800196a:	b92b      	cbnz	r3, 8001978 <I2C_Master_SB+0x42>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800196c:	6802      	ldr	r2, [r0, #0]
 800196e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001970:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001974:	6113      	str	r3, [r2, #16]
 8001976:	e021      	b.n	80019bc <I2C_Master_SB+0x86>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001978:	6802      	ldr	r2, [r0, #0]
 800197a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	b2db      	uxtb	r3, r3
 8001982:	6113      	str	r3, [r2, #16]
 8001984:	e01a      	b.n	80019bc <I2C_Master_SB+0x86>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001986:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b21      	cmp	r3, #33	; 0x21
 800198e:	d006      	beq.n	800199e <I2C_Master_SB+0x68>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001990:	6802      	ldr	r2, [r0, #0]
 8001992:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	6113      	str	r3, [r2, #16]
 800199c:	e00e      	b.n	80019bc <I2C_Master_SB+0x86>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800199e:	6802      	ldr	r2, [r0, #0]
 80019a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80019a2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80019a6:	6113      	str	r3, [r2, #16]
 80019a8:	e008      	b.n	80019bc <I2C_Master_SB+0x86>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80019aa:	6802      	ldr	r2, [r0, #0]
 80019ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80019ae:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80019b2:	f003 0306 	and.w	r3, r3, #6
 80019b6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80019ba:	6113      	str	r3, [r2, #16]
      }
    }
  }

  return HAL_OK;
}
 80019bc:	2000      	movs	r0, #0
 80019be:	4770      	bx	lr

080019c0 <I2C_Master_ADD10>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80019c0:	6802      	ldr	r2, [r0, #0]
 80019c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	6113      	str	r3, [r2, #16]

  return HAL_OK;
}
 80019c8:	2000      	movs	r0, #0
 80019ca:	4770      	bx	lr

080019cc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80019cc:	b410      	push	{r4}
 80019ce:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 80019d0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80019d4:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019d6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 80019d8:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80019da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b22      	cmp	r3, #34	; 0x22
 80019e2:	d00c      	beq.n	80019fe <I2C_Master_ADDR+0x32>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e4:	2300      	movs	r3, #0
 80019e6:	9309      	str	r3, [sp, #36]	; 0x24
 80019e8:	6803      	ldr	r3, [r0, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	9209      	str	r2, [sp, #36]	; 0x24
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	9309      	str	r3, [sp, #36]	; 0x24
 80019f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  return HAL_OK;
}
 80019f4:	2000      	movs	r0, #0
 80019f6:	b00b      	add	sp, #44	; 0x2c
 80019f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019fc:	4770      	bx	lr
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80019fe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001a00:	b90b      	cbnz	r3, 8001a06 <I2C_Master_ADDR+0x3a>
 8001a02:	2a40      	cmp	r2, #64	; 0x40
 8001a04:	d017      	beq.n	8001a36 <I2C_Master_ADDR+0x6a>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001a06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001a08:	b91b      	cbnz	r3, 8001a12 <I2C_Master_ADDR+0x46>
 8001a0a:	6903      	ldr	r3, [r0, #16]
 8001a0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a10:	d019      	beq.n	8001a46 <I2C_Master_ADDR+0x7a>
      if(hi2c->XferCount == 0U)
 8001a12:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d125      	bne.n	8001a66 <I2C_Master_ADDR+0x9a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	6803      	ldr	r3, [r0, #0]
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	9202      	str	r2, [sp, #8]
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	9202      	str	r2, [sp, #8]
 8001a26:	9a02      	ldr	r2, [sp, #8]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	6503      	str	r3, [r0, #80]	; 0x50
 8001a34:	e7de      	b.n	80019f4 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	6803      	ldr	r3, [r0, #0]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	9200      	str	r2, [sp, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	9b00      	ldr	r3, [sp, #0]
 8001a44:	e7d6      	b.n	80019f4 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a46:	2300      	movs	r3, #0
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	6803      	ldr	r3, [r0, #0]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	9201      	str	r2, [sp, #4]
 8001a50:	699a      	ldr	r2, [r3, #24]
 8001a52:	9201      	str	r2, [sp, #4]
 8001a54:	9a01      	ldr	r2, [sp, #4]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a5c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001a5e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001a60:	3301      	adds	r3, #1
 8001a62:	6503      	str	r3, [r0, #80]	; 0x50
 8001a64:	e7c6      	b.n	80019f4 <I2C_Master_ADDR+0x28>
      else if(hi2c->XferCount == 1U)   
 8001a66:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d01a      	beq.n	8001aa4 <I2C_Master_ADDR+0xd8>
      else if(hi2c->XferCount == 2U)
 8001a6e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d06b      	beq.n	8001b4e <I2C_Master_ADDR+0x182>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001a76:	6802      	ldr	r2, [r0, #0]
 8001a78:	6813      	ldr	r3, [r2, #0]
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001a80:	6803      	ldr	r3, [r0, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001a88:	d003      	beq.n	8001a92 <I2C_Master_ADDR+0xc6>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a90:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a92:	2300      	movs	r3, #0
 8001a94:	9308      	str	r3, [sp, #32]
 8001a96:	6803      	ldr	r3, [r0, #0]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	9208      	str	r2, [sp, #32]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	9308      	str	r3, [sp, #32]
 8001aa0:	9b08      	ldr	r3, [sp, #32]
 8001aa2:	e7c5      	b.n	8001a30 <I2C_Master_ADDR+0x64>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001aa4:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001aa8:	d016      	beq.n	8001ad8 <I2C_Master_ADDR+0x10c>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001aaa:	2904      	cmp	r1, #4
 8001aac:	d03d      	beq.n	8001b2a <I2C_Master_ADDR+0x15e>
 8001aae:	2908      	cmp	r1, #8
 8001ab0:	d03b      	beq.n	8001b2a <I2C_Master_ADDR+0x15e>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8001ab2:	2c12      	cmp	r4, #18
 8001ab4:	d039      	beq.n	8001b2a <I2C_Master_ADDR+0x15e>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001ab6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d030      	beq.n	8001b1e <I2C_Master_ADDR+0x152>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001abc:	6802      	ldr	r2, [r0, #0]
 8001abe:	6813      	ldr	r3, [r2, #0]
 8001ac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ac4:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	9305      	str	r3, [sp, #20]
 8001aca:	6803      	ldr	r3, [r0, #0]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	9205      	str	r2, [sp, #20]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	9305      	str	r3, [sp, #20]
 8001ad4:	9b05      	ldr	r3, [sp, #20]
 8001ad6:	e7ab      	b.n	8001a30 <I2C_Master_ADDR+0x64>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ad8:	6802      	ldr	r2, [r0, #0]
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ae0:	6013      	str	r3, [r2, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001ae2:	6803      	ldr	r3, [r0, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001aea:	d00c      	beq.n	8001b06 <I2C_Master_ADDR+0x13a>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001af2:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af4:	2300      	movs	r3, #0
 8001af6:	9303      	str	r3, [sp, #12]
 8001af8:	6803      	ldr	r3, [r0, #0]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	9203      	str	r2, [sp, #12]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	9303      	str	r3, [sp, #12]
 8001b02:	9b03      	ldr	r3, [sp, #12]
 8001b04:	e794      	b.n	8001a30 <I2C_Master_ADDR+0x64>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b06:	2200      	movs	r2, #0
 8001b08:	9204      	str	r2, [sp, #16]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	9204      	str	r2, [sp, #16]
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	9204      	str	r2, [sp, #16]
 8001b12:	9a04      	ldr	r2, [sp, #16]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e788      	b.n	8001a30 <I2C_Master_ADDR+0x64>
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b1e:	6802      	ldr	r2, [r0, #0]
 8001b20:	6813      	ldr	r3, [r2, #0]
 8001b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e7cd      	b.n	8001ac6 <I2C_Master_ADDR+0xfa>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b2a:	6802      	ldr	r2, [r0, #0]
 8001b2c:	6813      	ldr	r3, [r2, #0]
 8001b2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b32:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b34:	2300      	movs	r3, #0
 8001b36:	9306      	str	r3, [sp, #24]
 8001b38:	6803      	ldr	r3, [r0, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	9206      	str	r2, [sp, #24]
 8001b3e:	699a      	ldr	r2, [r3, #24]
 8001b40:	9206      	str	r2, [sp, #24]
 8001b42:	9a06      	ldr	r2, [sp, #24]
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e770      	b.n	8001a30 <I2C_Master_ADDR+0x64>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001b4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d01b      	beq.n	8001b8c <I2C_Master_ADDR+0x1c0>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b54:	6802      	ldr	r2, [r0, #0]
 8001b56:	6813      	ldr	r3, [r2, #0]
 8001b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b5c:	6013      	str	r3, [r2, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001b5e:	6802      	ldr	r2, [r0, #0]
 8001b60:	6813      	ldr	r3, [r2, #0]
 8001b62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b66:	6013      	str	r3, [r2, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001b68:	6803      	ldr	r3, [r0, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001b70:	d003      	beq.n	8001b7a <I2C_Master_ADDR+0x1ae>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b78:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9307      	str	r3, [sp, #28]
 8001b7e:	6803      	ldr	r3, [r0, #0]
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	9207      	str	r2, [sp, #28]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	9307      	str	r3, [sp, #28]
 8001b88:	9b07      	ldr	r3, [sp, #28]
 8001b8a:	e751      	b.n	8001a30 <I2C_Master_ADDR+0x64>
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b8c:	6802      	ldr	r2, [r0, #0]
 8001b8e:	6813      	ldr	r3, [r2, #0]
 8001b90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e7e7      	b.n	8001b68 <I2C_Master_ADDR+0x19c>

08001b98 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 8001b98:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	b153      	cbz	r3, 8001bb4 <I2C_SlaveTransmit_BTF+0x1c>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b9e:	6802      	ldr	r2, [r0, #0]
 8001ba0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ba2:	1c59      	adds	r1, r3, #1
 8001ba4:	6241      	str	r1, [r0, #36]	; 0x24
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8001baa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  return HAL_OK;
}
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	4770      	bx	lr

08001bb8 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 8001bb8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b153      	cbz	r3, 8001bd4 <I2C_SlaveReceive_BTF+0x1c>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	6242      	str	r2, [r0, #36]	; 0x24
 8001bc4:	6802      	ldr	r2, [r0, #0]
 8001bc6:	6912      	ldr	r2, [r2, #16]
 8001bc8:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001bca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  return HAL_OK;
}
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_I2C_Init>:
  if(hi2c == NULL)
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	f000 8082 	beq.w	8001ce2 <HAL_I2C_Init+0x10a>
{
 8001bde:	b538      	push	{r3, r4, r5, lr}
 8001be0:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001be2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d041      	beq.n	8001c6e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bea:	2324      	movs	r3, #36	; 0x24
 8001bec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001bf0:	6822      	ldr	r2, [r4, #0]
 8001bf2:	6813      	ldr	r3, [r2, #0]
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bfa:	f000 fe5d 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
  freqrange = I2C_FREQRANGE(pclk1);
 8001bfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <HAL_I2C_Init+0x110>)
 8001c00:	fba3 2300 	umull	r2, r3, r3, r0
 8001c04:	0c9b      	lsrs	r3, r3, #18
  hi2c->Instance->CR2 = freqrange;
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	6053      	str	r3, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c0a:	6821      	ldr	r1, [r4, #0]
 8001c0c:	6865      	ldr	r5, [r4, #4]
 8001c0e:	4a37      	ldr	r2, [pc, #220]	; (8001cec <HAL_I2C_Init+0x114>)
 8001c10:	4295      	cmp	r5, r2
 8001c12:	d831      	bhi.n	8001c78 <HAL_I2C_Init+0xa0>
 8001c14:	3301      	adds	r3, #1
 8001c16:	620b      	str	r3, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c18:	6821      	ldr	r1, [r4, #0]
 8001c1a:	6863      	ldr	r3, [r4, #4]
 8001c1c:	4a33      	ldr	r2, [pc, #204]	; (8001cec <HAL_I2C_Init+0x114>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d834      	bhi.n	8001c8c <HAL_I2C_Init+0xb4>
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c28:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d800      	bhi.n	8001c32 <HAL_I2C_Init+0x5a>
 8001c30:	2004      	movs	r0, #4
 8001c32:	61c8      	str	r0, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c34:	6822      	ldr	r2, [r4, #0]
 8001c36:	69e3      	ldr	r3, [r4, #28]
 8001c38:	6a21      	ldr	r1, [r4, #32]
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001c3e:	6822      	ldr	r2, [r4, #0]
 8001c40:	6923      	ldr	r3, [r4, #16]
 8001c42:	68e1      	ldr	r1, [r4, #12]
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001c48:	6822      	ldr	r2, [r4, #0]
 8001c4a:	6963      	ldr	r3, [r4, #20]
 8001c4c:	69a1      	ldr	r1, [r4, #24]
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001c52:	6822      	ldr	r2, [r4, #0]
 8001c54:	6813      	ldr	r3, [r2, #0]
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c60:	2320      	movs	r3, #32
 8001c62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c66:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c68:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001c6c:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001c6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c72:	f002 faf5 	bl	8004260 <HAL_I2C_MspInit>
 8001c76:	e7b8      	b.n	8001bea <HAL_I2C_Init+0x12>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c78:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c7c:	fb02 f303 	mul.w	r3, r2, r3
 8001c80:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <HAL_I2C_Init+0x118>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	3301      	adds	r3, #1
 8001c8a:	e7c4      	b.n	8001c16 <HAL_I2C_Init+0x3e>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c8c:	68a5      	ldr	r5, [r4, #8]
 8001c8e:	b98d      	cbnz	r5, 8001cb4 <HAL_I2C_Init+0xdc>
 8001c90:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001c94:	fbb0 f2f2 	udiv	r2, r0, r2
 8001c98:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001c9c:	fab2 f282 	clz	r2, r2
 8001ca0:	0952      	lsrs	r2, r2, #5
 8001ca2:	b9e2      	cbnz	r2, 8001cde <HAL_I2C_Init+0x106>
 8001ca4:	b995      	cbnz	r5, 8001ccc <HAL_I2C_Init+0xf4>
 8001ca6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001caa:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cae:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001cb2:	e7be      	b.n	8001c32 <HAL_I2C_Init+0x5a>
 8001cb4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001cb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001cbc:	fbb0 f2f2 	udiv	r2, r0, r2
 8001cc0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	0952      	lsrs	r2, r2, #5
 8001cca:	e7ea      	b.n	8001ca2 <HAL_I2C_Init+0xca>
 8001ccc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cd8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001cdc:	e7a9      	b.n	8001c32 <HAL_I2C_Init+0x5a>
 8001cde:	2001      	movs	r0, #1
 8001ce0:	e7a7      	b.n	8001c32 <HAL_I2C_Init+0x5a>
    return HAL_ERROR;
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	431bde83 	.word	0x431bde83
 8001cec:	000186a0 	.word	0x000186a0
 8001cf0:	10624dd3 	.word	0x10624dd3

08001cf4 <I2C_SlaveTransmit_TXE>:
  uint32_t CurrentState = hi2c->State;
 8001cf4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cf8:	b2da      	uxtb	r2, r3
  if(hi2c->XferCount != 0U)
 8001cfa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b1fb      	cbz	r3, 8001d40 <I2C_SlaveTransmit_TXE+0x4c>
{
 8001d00:	b510      	push	{r4, lr}
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d02:	6801      	ldr	r1, [r0, #0]
 8001d04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d06:	1c5c      	adds	r4, r3, #1
 8001d08:	6244      	str	r4, [r0, #36]	; 0x24
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	610b      	str	r3, [r1, #16]
    hi2c->XferCount--;
 8001d0e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d18:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	b90b      	cbnz	r3, 8001d22 <I2C_SlaveTransmit_TXE+0x2e>
 8001d1e:	2a29      	cmp	r2, #41	; 0x29
 8001d20:	d001      	beq.n	8001d26 <I2C_SlaveTransmit_TXE+0x32>
}
 8001d22:	2000      	movs	r0, #0
 8001d24:	bd10      	pop	{r4, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d26:	6802      	ldr	r2, [r0, #0]
 8001d28:	6853      	ldr	r3, [r2, #4]
 8001d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d2e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d30:	2321      	movs	r3, #33	; 0x21
 8001d32:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d34:	2328      	movs	r3, #40	; 0x28
 8001d36:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d3a:	f002 ff31 	bl	8004ba0 <HAL_I2C_SlaveTxCpltCallback>
 8001d3e:	e7f0      	b.n	8001d22 <I2C_SlaveTransmit_TXE+0x2e>
}
 8001d40:	2000      	movs	r0, #0
 8001d42:	4770      	bx	lr

08001d44 <I2C_SlaveReceive_RXNE>:
{
 8001d44:	b508      	push	{r3, lr}
  uint32_t CurrentState = hi2c->State;
 8001d46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d4a:	b2da      	uxtb	r2, r3
  if(hi2c->XferCount != 0U)
 8001d4c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b17b      	cbz	r3, 8001d72 <I2C_SlaveReceive_RXNE+0x2e>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d54:	1c59      	adds	r1, r3, #1
 8001d56:	6241      	str	r1, [r0, #36]	; 0x24
 8001d58:	6801      	ldr	r1, [r0, #0]
 8001d5a:	6909      	ldr	r1, [r1, #16]
 8001d5c:	7019      	strb	r1, [r3, #0]
    hi2c->XferCount--;
 8001d5e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d68:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	b90b      	cbnz	r3, 8001d72 <I2C_SlaveReceive_RXNE+0x2e>
 8001d6e:	2a2a      	cmp	r2, #42	; 0x2a
 8001d70:	d001      	beq.n	8001d76 <I2C_SlaveReceive_RXNE+0x32>
}
 8001d72:	2000      	movs	r0, #0
 8001d74:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d76:	6802      	ldr	r2, [r0, #0]
 8001d78:	6853      	ldr	r3, [r2, #4]
 8001d7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d7e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d80:	2322      	movs	r3, #34	; 0x22
 8001d82:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d84:	2328      	movs	r3, #40	; 0x28
 8001d86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d8a:	f002 ff3f 	bl	8004c0c <HAL_I2C_SlaveRxCpltCallback>
 8001d8e:	e7f0      	b.n	8001d72 <I2C_SlaveReceive_RXNE+0x2e>

08001d90 <HAL_I2C_AddrCallback>:
{
 8001d90:	4770      	bx	lr

08001d92 <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001d92:	b508      	push	{r3, lr}
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
  uint16_t SlaveAddrCode = 0U;

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001d94:	6803      	ldr	r3, [r0, #0]
 8001d96:	699a      	ldr	r2, [r3, #24]
 8001d98:	f012 0f04 	tst.w	r2, #4
 8001d9c:	d009      	beq.n	8001db2 <I2C_Slave_ADDR+0x20>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001d9e:	2100      	movs	r1, #0
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001da6:	d006      	beq.n	8001db6 <I2C_Slave_ADDR+0x24>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8001da8:	8b02      	ldrh	r2, [r0, #24]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001daa:	f7ff fff1 	bl	8001d90 <HAL_I2C_AddrCallback>

  return HAL_OK;
}
 8001dae:	2000      	movs	r0, #0
 8001db0:	bd08      	pop	{r3, pc}
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8001db2:	2101      	movs	r1, #1
 8001db4:	e7f4      	b.n	8001da0 <I2C_Slave_ADDR+0xe>
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8001db6:	8982      	ldrh	r2, [r0, #12]
 8001db8:	e7f7      	b.n	8001daa <I2C_Slave_ADDR+0x18>

08001dba <HAL_I2C_ListenCpltCallback>:
{
 8001dba:	4770      	bx	lr

08001dbc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8001dbc:	b508      	push	{r3, lr}
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8001dbe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dc2:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dc4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001dc6:	2a04      	cmp	r2, #4
 8001dc8:	d009      	beq.n	8001dde <I2C_Slave_AF+0x22>
 8001dca:	2a08      	cmp	r2, #8
 8001dcc:	d007      	beq.n	8001dde <I2C_Slave_AF+0x22>
    hi2c->Mode = HAL_I2C_MODE_NONE;
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001dce:	2b21      	cmp	r3, #33	; 0x21
 8001dd0:	d021      	beq.n	8001e16 <I2C_Slave_AF+0x5a>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd2:	6803      	ldr	r3, [r0, #0]
 8001dd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dd8:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
}
 8001dda:	2000      	movs	r0, #0
 8001ddc:	bd08      	pop	{r3, pc}
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001dde:	2b28      	cmp	r3, #40	; 0x28
 8001de0:	d1f5      	bne.n	8001dce <I2C_Slave_AF+0x12>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <I2C_Slave_AF+0x90>)
 8001de4:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001de6:	6802      	ldr	r2, [r0, #0]
 8001de8:	6853      	ldr	r3, [r2, #4]
 8001dea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dee:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df0:	6803      	ldr	r3, [r0, #0]
 8001df2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001df6:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001df8:	6802      	ldr	r2, [r0, #0]
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e00:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001e06:	2220      	movs	r2, #32
 8001e08:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e10:	f7ff ffd3 	bl	8001dba <HAL_I2C_ListenCpltCallback>
 8001e14:	e7e1      	b.n	8001dda <I2C_Slave_AF+0x1e>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <I2C_Slave_AF+0x90>)
 8001e18:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e1a:	2321      	movs	r3, #33	; 0x21
 8001e1c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e2a:	6802      	ldr	r2, [r0, #0]
 8001e2c:	6853      	ldr	r3, [r2, #4]
 8001e2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e32:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e34:	6803      	ldr	r3, [r0, #0]
 8001e36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e3a:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e3c:	6802      	ldr	r2, [r0, #0]
 8001e3e:	6813      	ldr	r3, [r2, #0]
 8001e40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e44:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e46:	f002 feab 	bl	8004ba0 <HAL_I2C_SlaveTxCpltCallback>
 8001e4a:	e7c6      	b.n	8001dda <I2C_Slave_AF+0x1e>
 8001e4c:	ffff0000 	.word	0xffff0000

08001e50 <HAL_I2C_MemTxCpltCallback>:
{
 8001e50:	4770      	bx	lr

08001e52 <I2C_MasterTransmit_TXE>:
{
 8001e52:	b510      	push	{r4, lr}
  uint32_t CurrentState       = hi2c->State;
 8001e54:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
  uint32_t CurrentMode        = hi2c->Mode;
 8001e5a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001e5e:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e60:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e62:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8001e64:	b909      	cbnz	r1, 8001e6a <I2C_MasterTransmit_TXE+0x18>
 8001e66:	2b21      	cmp	r3, #33	; 0x21
 8001e68:	d005      	beq.n	8001e76 <I2C_MasterTransmit_TXE+0x24>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001e6a:	2b21      	cmp	r3, #33	; 0x21
 8001e6c:	d03c      	beq.n	8001ee8 <I2C_MasterTransmit_TXE+0x96>
 8001e6e:	2a40      	cmp	r2, #64	; 0x40
 8001e70:	d038      	beq.n	8001ee4 <I2C_MasterTransmit_TXE+0x92>
}
 8001e72:	2000      	movs	r0, #0
 8001e74:	bd10      	pop	{r4, pc}
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e76:	2c04      	cmp	r4, #4
 8001e78:	d004      	beq.n	8001e84 <I2C_MasterTransmit_TXE+0x32>
 8001e7a:	2c08      	cmp	r4, #8
 8001e7c:	d002      	beq.n	8001e84 <I2C_MasterTransmit_TXE+0x32>
 8001e7e:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8001e82:	d119      	bne.n	8001eb8 <I2C_MasterTransmit_TXE+0x66>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e84:	6802      	ldr	r2, [r0, #0]
 8001e86:	6853      	ldr	r3, [r2, #4]
 8001e88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e8c:	6053      	str	r3, [r2, #4]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e8e:	6802      	ldr	r2, [r0, #0]
 8001e90:	6813      	ldr	r3, [r2, #0]
 8001e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e96:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ea2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b40      	cmp	r3, #64	; 0x40
 8001eaa:	d015      	beq.n	8001ed8 <I2C_MasterTransmit_TXE+0x86>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001eb2:	f002 fe5b 	bl	8004b6c <HAL_I2C_MasterTxCpltCallback>
 8001eb6:	e7dc      	b.n	8001e72 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eb8:	6802      	ldr	r2, [r0, #0]
 8001eba:	6853      	ldr	r3, [r2, #4]
 8001ebc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ec0:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ec2:	2311      	movs	r3, #17
 8001ec4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001ecc:	2320      	movs	r3, #32
 8001ece:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ed2:	f002 fe4b 	bl	8004b6c <HAL_I2C_MasterTxCpltCallback>
 8001ed6:	e7cc      	b.n	8001e72 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001ede:	f7ff ffb7 	bl	8001e50 <HAL_I2C_MemTxCpltCallback>
 8001ee2:	e7c6      	b.n	8001e72 <I2C_MasterTransmit_TXE+0x20>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001ee4:	2b22      	cmp	r3, #34	; 0x22
 8001ee6:	d1c4      	bne.n	8001e72 <I2C_MasterTransmit_TXE+0x20>
    if(hi2c->XferCount == 0U)
 8001ee8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	b183      	cbz	r3, 8001f10 <I2C_MasterTransmit_TXE+0xbe>
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eee:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d011      	beq.n	8001f1c <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ef8:	6802      	ldr	r2, [r0, #0]
 8001efa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001efc:	1c59      	adds	r1, r3, #1
 8001efe:	6241      	str	r1, [r0, #36]	; 0x24
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001f04:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001f0e:	e7b0      	b.n	8001e72 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f10:	6802      	ldr	r2, [r0, #0]
 8001f12:	6853      	ldr	r3, [r2, #4]
 8001f14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f18:	6053      	str	r3, [r2, #4]
 8001f1a:	e7aa      	b.n	8001e72 <I2C_MasterTransmit_TXE+0x20>
        if(hi2c->EventCount == 0)
 8001f1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f1e:	b99b      	cbnz	r3, 8001f48 <I2C_MasterTransmit_TXE+0xf6>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f20:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d008      	beq.n	8001f38 <I2C_MasterTransmit_TXE+0xe6>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001f26:	6802      	ldr	r2, [r0, #0]
 8001f28:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001f2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001f2e:	6113      	str	r3, [r2, #16]
            hi2c->EventCount++;
 8001f30:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f32:	3301      	adds	r3, #1
 8001f34:	6503      	str	r3, [r0, #80]	; 0x50
 8001f36:	e79c      	b.n	8001e72 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f38:	6802      	ldr	r2, [r0, #0]
 8001f3a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	6113      	str	r3, [r2, #16]
            hi2c->EventCount += 2;
 8001f40:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f42:	3302      	adds	r3, #2
 8001f44:	6503      	str	r3, [r0, #80]	; 0x50
 8001f46:	e794      	b.n	8001e72 <I2C_MasterTransmit_TXE+0x20>
        else if(hi2c->EventCount == 1)
 8001f48:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d018      	beq.n	8001f80 <I2C_MasterTransmit_TXE+0x12e>
        else if(hi2c->EventCount == 2)
 8001f4e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d18e      	bne.n	8001e72 <I2C_MasterTransmit_TXE+0x20>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f54:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b22      	cmp	r3, #34	; 0x22
 8001f5c:	d018      	beq.n	8001f90 <I2C_MasterTransmit_TXE+0x13e>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b21      	cmp	r3, #33	; 0x21
 8001f66:	d184      	bne.n	8001e72 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001f68:	6802      	ldr	r2, [r0, #0]
 8001f6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f6c:	1c59      	adds	r1, r3, #1
 8001f6e:	6241      	str	r1, [r0, #36]	; 0x24
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	6113      	str	r3, [r2, #16]
            hi2c->XferCount--;
 8001f74:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001f7e:	e778      	b.n	8001e72 <I2C_MasterTransmit_TXE+0x20>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f80:	6802      	ldr	r2, [r0, #0]
 8001f82:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	6113      	str	r3, [r2, #16]
          hi2c->EventCount++;
 8001f88:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	6503      	str	r3, [r0, #80]	; 0x50
 8001f8e:	e770      	b.n	8001e72 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f90:	6802      	ldr	r2, [r0, #0]
 8001f92:	6813      	ldr	r3, [r2, #0]
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e76a      	b.n	8001e72 <I2C_MasterTransmit_TXE+0x20>

08001f9c <I2C_MasterTransmit_BTF>:
{
 8001f9c:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f9e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fa0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b21      	cmp	r3, #33	; 0x21
 8001fa8:	d001      	beq.n	8001fae <I2C_MasterTransmit_BTF+0x12>
}
 8001faa:	2000      	movs	r0, #0
 8001fac:	bd08      	pop	{r3, pc}
    if(hi2c->XferCount != 0U)
 8001fae:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	bb03      	cbnz	r3, 8001ff6 <I2C_MasterTransmit_BTF+0x5a>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001fb4:	2a04      	cmp	r2, #4
 8001fb6:	d004      	beq.n	8001fc2 <I2C_MasterTransmit_BTF+0x26>
 8001fb8:	2a08      	cmp	r2, #8
 8001fba:	d002      	beq.n	8001fc2 <I2C_MasterTransmit_BTF+0x26>
 8001fbc:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001fc0:	d125      	bne.n	800200e <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fc2:	6802      	ldr	r2, [r0, #0]
 8001fc4:	6853      	ldr	r3, [r2, #4]
 8001fc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fca:	6053      	str	r3, [r2, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fcc:	6802      	ldr	r2, [r0, #0]
 8001fce:	6813      	ldr	r3, [r2, #0]
 8001fd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd4:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fe0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b40      	cmp	r3, #64	; 0x40
 8001fe8:	d021      	beq.n	800202e <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ff0:	f002 fdbc 	bl	8004b6c <HAL_I2C_MasterTxCpltCallback>
 8001ff4:	e7d9      	b.n	8001faa <I2C_MasterTransmit_BTF+0xe>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ff6:	6802      	ldr	r2, [r0, #0]
 8001ff8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ffa:	1c59      	adds	r1, r3, #1
 8001ffc:	6241      	str	r1, [r0, #36]	; 0x24
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8002002:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29b      	uxth	r3, r3
 800200a:	8543      	strh	r3, [r0, #42]	; 0x2a
 800200c:	e7cd      	b.n	8001faa <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800200e:	6802      	ldr	r2, [r0, #0]
 8002010:	6853      	ldr	r3, [r2, #4]
 8002012:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002016:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002018:	2311      	movs	r3, #17
 800201a:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800201c:	2300      	movs	r3, #0
 800201e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002022:	2320      	movs	r3, #32
 8002024:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002028:	f002 fda0 	bl	8004b6c <HAL_I2C_MasterTxCpltCallback>
 800202c:	e7bd      	b.n	8001faa <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800202e:	2300      	movs	r3, #0
 8002030:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002034:	f7ff ff0c 	bl	8001e50 <HAL_I2C_MemTxCpltCallback>
 8002038:	e7b7      	b.n	8001faa <I2C_MasterTransmit_BTF+0xe>

0800203a <HAL_I2C_MemRxCpltCallback>:
{
 800203a:	4770      	bx	lr

0800203c <I2C_MasterReceive_RXNE>:
{
 800203c:	b508      	push	{r3, lr}
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800203e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b22      	cmp	r3, #34	; 0x22
 8002046:	d001      	beq.n	800204c <I2C_MasterReceive_RXNE+0x10>
}
 8002048:	2000      	movs	r0, #0
 800204a:	bd08      	pop	{r3, pc}
    tmp = hi2c->XferCount;
 800204c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800204e:	b29b      	uxth	r3, r3
    if(tmp > 3U)
 8002050:	2b03      	cmp	r3, #3
 8002052:	d914      	bls.n	800207e <I2C_MasterReceive_RXNE+0x42>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002054:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	6242      	str	r2, [r0, #36]	; 0x24
 800205a:	6802      	ldr	r2, [r0, #0]
 800205c:	6912      	ldr	r2, [r2, #16]
 800205e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002060:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29b      	uxth	r3, r3
 8002068:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 800206a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b03      	cmp	r3, #3
 8002070:	d1ea      	bne.n	8002048 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002072:	6802      	ldr	r2, [r0, #0]
 8002074:	6853      	ldr	r3, [r2, #4]
 8002076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800207a:	6053      	str	r3, [r2, #4]
 800207c:	e7e4      	b.n	8002048 <I2C_MasterReceive_RXNE+0xc>
    else if((tmp == 1U) || (tmp == 0U))
 800207e:	2b01      	cmp	r3, #1
 8002080:	d8e2      	bhi.n	8002048 <I2C_MasterReceive_RXNE+0xc>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002082:	6802      	ldr	r2, [r0, #0]
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800208a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800208c:	6802      	ldr	r2, [r0, #0]
 800208e:	6853      	ldr	r3, [r2, #4]
 8002090:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002094:	6053      	str	r3, [r2, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002096:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	6242      	str	r2, [r0, #36]	; 0x24
 800209c:	6802      	ldr	r2, [r0, #0]
 800209e:	6912      	ldr	r2, [r2, #16]
 80020a0:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80020a2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80020ac:	2320      	movs	r3, #32
 80020ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	6303      	str	r3, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80020b6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b40      	cmp	r3, #64	; 0x40
 80020be:	d005      	beq.n	80020cc <I2C_MasterReceive_RXNE+0x90>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80020c6:	f002 fd87 	bl	8004bd8 <HAL_I2C_MasterRxCpltCallback>
 80020ca:	e7bd      	b.n	8002048 <I2C_MasterReceive_RXNE+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 80020d2:	f7ff ffb2 	bl	800203a <HAL_I2C_MemRxCpltCallback>
 80020d6:	e7b7      	b.n	8002048 <I2C_MasterReceive_RXNE+0xc>

080020d8 <I2C_MasterReceive_BTF>:
{
 80020d8:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020da:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 80020dc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d014      	beq.n	800210e <I2C_MasterReceive_BTF+0x36>
  else if(hi2c->XferCount == 3U)
 80020e4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d021      	beq.n	8002130 <I2C_MasterReceive_BTF+0x58>
  else if(hi2c->XferCount == 2U)
 80020ec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d033      	beq.n	800215c <I2C_MasterReceive_BTF+0x84>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	6242      	str	r2, [r0, #36]	; 0x24
 80020fa:	6802      	ldr	r2, [r0, #0]
 80020fc:	6912      	ldr	r2, [r2, #16]
 80020fe:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002100:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29b      	uxth	r3, r3
 8002108:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800210a:	2000      	movs	r0, #0
 800210c:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800210e:	6802      	ldr	r2, [r0, #0]
 8002110:	6853      	ldr	r3, [r2, #4]
 8002112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002116:	6053      	str	r3, [r2, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002118:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	6242      	str	r2, [r0, #36]	; 0x24
 800211e:	6802      	ldr	r2, [r0, #0]
 8002120:	6912      	ldr	r2, [r2, #16]
 8002122:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002124:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29b      	uxth	r3, r3
 800212c:	8543      	strh	r3, [r0, #42]	; 0x2a
 800212e:	e7ec      	b.n	800210a <I2C_MasterReceive_BTF+0x32>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002130:	6802      	ldr	r2, [r0, #0]
 8002132:	6853      	ldr	r3, [r2, #4]
 8002134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002138:	6053      	str	r3, [r2, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800213a:	6802      	ldr	r2, [r0, #0]
 800213c:	6813      	ldr	r3, [r2, #0]
 800213e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002142:	6013      	str	r3, [r2, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002144:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	6242      	str	r2, [r0, #36]	; 0x24
 800214a:	6802      	ldr	r2, [r0, #0]
 800214c:	6912      	ldr	r2, [r2, #16]
 800214e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002150:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29b      	uxth	r3, r3
 8002158:	8543      	strh	r3, [r0, #42]	; 0x2a
 800215a:	e7d6      	b.n	800210a <I2C_MasterReceive_BTF+0x32>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 800215c:	3a01      	subs	r2, #1
 800215e:	2a01      	cmp	r2, #1
 8002160:	d92f      	bls.n	80021c2 <I2C_MasterReceive_BTF+0xea>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002162:	6802      	ldr	r2, [r0, #0]
 8002164:	6813      	ldr	r3, [r2, #0]
 8002166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216a:	6013      	str	r3, [r2, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800216c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	6242      	str	r2, [r0, #36]	; 0x24
 8002172:	6802      	ldr	r2, [r0, #0]
 8002174:	6912      	ldr	r2, [r2, #16]
 8002176:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002178:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29b      	uxth	r3, r3
 8002180:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002182:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	6242      	str	r2, [r0, #36]	; 0x24
 8002188:	6802      	ldr	r2, [r0, #0]
 800218a:	6912      	ldr	r2, [r2, #16]
 800218c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800218e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29b      	uxth	r3, r3
 8002196:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002198:	6802      	ldr	r2, [r0, #0]
 800219a:	6853      	ldr	r3, [r2, #4]
 800219c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a0:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80021a2:	2320      	movs	r3, #32
 80021a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80021ac:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	d010      	beq.n	80021d8 <I2C_MasterReceive_BTF+0x100>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021bc:	f002 fd0c 	bl	8004bd8 <HAL_I2C_MasterRxCpltCallback>
 80021c0:	e7a3      	b.n	800210a <I2C_MasterReceive_BTF+0x32>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021c2:	6802      	ldr	r2, [r0, #0]
 80021c4:	6813      	ldr	r3, [r2, #0]
 80021c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021ca:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80021cc:	6802      	ldr	r2, [r0, #0]
 80021ce:	6813      	ldr	r3, [r2, #0]
 80021d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e7c9      	b.n	800216c <I2C_MasterReceive_BTF+0x94>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d8:	2300      	movs	r3, #0
 80021da:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 80021de:	f7ff ff2c 	bl	800203a <HAL_I2C_MemRxCpltCallback>
 80021e2:	e792      	b.n	800210a <I2C_MasterReceive_BTF+0x32>

080021e4 <HAL_I2C_ErrorCallback>:
{
 80021e4:	4770      	bx	lr

080021e6 <HAL_I2C_AbortCpltCallback>:
{
 80021e6:	4770      	bx	lr

080021e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b510      	push	{r4, lr}
 80021ea:	4604      	mov	r4, r0
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 80021ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80021f0:	3b29      	subs	r3, #41	; 0x29
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d937      	bls.n	8002266 <I2C_ITError+0x7e>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 80021f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b60      	cmp	r3, #96	; 0x60
 80021fe:	d007      	beq.n	8002210 <I2C_ITError+0x28>
 8002200:	6803      	ldr	r3, [r0, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002208:	d102      	bne.n	8002210 <I2C_ITError+0x28>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800220a:	2320      	movs	r3, #32
 800220c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002210:	2300      	movs	r3, #0
 8002212:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002218:	6822      	ldr	r2, [r4, #0]
 800221a:	6813      	ldr	r3, [r2, #0]
 800221c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002220:	6013      	str	r3, [r2, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800222a:	d03f      	beq.n	80022ac <I2C_ITError+0xc4>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002232:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002234:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002236:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d018      	beq.n	8002272 <I2C_ITError+0x8a>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002240:	4b3a      	ldr	r3, [pc, #232]	; (800232c <I2C_ITError+0x144>)
 8002242:	6513      	str	r3, [r2, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002244:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002246:	f7ff f985 	bl	8001554 <HAL_DMA_Abort_IT>
 800224a:	2800      	cmp	r0, #0
 800224c:	d03f      	beq.n	80022ce <I2C_ITError+0xe6>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800224e:	6822      	ldr	r2, [r4, #0]
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002258:	2320      	movs	r3, #32
 800225a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800225e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002260:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002262:	4798      	blx	r3
 8002264:	e033      	b.n	80022ce <I2C_ITError+0xe6>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002266:	2300      	movs	r3, #0
 8002268:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800226a:	2328      	movs	r3, #40	; 0x28
 800226c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002270:	e7d2      	b.n	8002218 <I2C_ITError+0x30>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002274:	4a2d      	ldr	r2, [pc, #180]	; (800232c <I2C_ITError+0x144>)
 8002276:	651a      	str	r2, [r3, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002278:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800227a:	f7ff f96b 	bl	8001554 <HAL_DMA_Abort_IT>
 800227e:	b330      	cbz	r0, 80022ce <I2C_ITError+0xe6>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	695a      	ldr	r2, [r3, #20]
 8002284:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002288:	d004      	beq.n	8002294 <I2C_ITError+0xac>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800228a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800228c:	1c51      	adds	r1, r2, #1
 800228e:	6261      	str	r1, [r4, #36]	; 0x24
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	7013      	strb	r3, [r2, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002294:	6822      	ldr	r2, [r4, #0]
 8002296:	6813      	ldr	r3, [r2, #0]
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800229e:	2320      	movs	r3, #32
 80022a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80022a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80022a8:	4798      	blx	r3
 80022aa:	e010      	b.n	80022ce <I2C_ITError+0xe6>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 80022ac:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	2a60      	cmp	r2, #96	; 0x60
 80022b4:	d011      	beq.n	80022da <I2C_ITError+0xf2>
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022bc:	d004      	beq.n	80022c8 <I2C_ITError+0xe0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022c0:	1c51      	adds	r1, r2, #1
 80022c2:	6261      	str	r1, [r4, #36]	; 0x24
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	7013      	strb	r3, [r2, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 80022c8:	4620      	mov	r0, r4
 80022ca:	f7ff ff8b 	bl	80021e4 <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80022ce:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b28      	cmp	r3, #40	; 0x28
 80022d6:	d017      	beq.n	8002308 <I2C_ITError+0x120>
 80022d8:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80022da:	2220      	movs	r2, #32
 80022dc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e0:	2200      	movs	r2, #0
 80022e2:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022ea:	d004      	beq.n	80022f6 <I2C_ITError+0x10e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022ee:	1c51      	adds	r1, r2, #1
 80022f0:	6261      	str	r1, [r4, #36]	; 0x24
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80022f6:	6822      	ldr	r2, [r4, #0]
 80022f8:	6813      	ldr	r3, [r2, #0]
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002300:	4620      	mov	r0, r4
 8002302:	f7ff ff70 	bl	80021e6 <HAL_I2C_AbortCpltCallback>
 8002306:	e7e2      	b.n	80022ce <I2C_ITError+0xe6>
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8002308:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800230a:	f013 0f04 	tst.w	r3, #4
 800230e:	d0e3      	beq.n	80022d8 <I2C_ITError+0xf0>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <I2C_ITError+0x148>)
 8002312:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002314:	2300      	movs	r3, #0
 8002316:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8002318:	2220      	movs	r2, #32
 800231a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800231e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff fd49 	bl	8001dba <HAL_I2C_ListenCpltCallback>
  }
}
 8002328:	e7d6      	b.n	80022d8 <I2C_ITError+0xf0>
 800232a:	bf00      	nop
 800232c:	08002675 	.word	0x08002675
 8002330:	ffff0000 	.word	0xffff0000

08002334 <I2C_Slave_STOPF>:
{
 8002334:	b510      	push	{r4, lr}
 8002336:	b082      	sub	sp, #8
  uint32_t CurrentState = hi2c->State;
 8002338:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800233e:	6801      	ldr	r1, [r0, #0]
 8002340:	684a      	ldr	r2, [r1, #4]
 8002342:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002346:	604a      	str	r2, [r1, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002348:	2200      	movs	r2, #0
 800234a:	9201      	str	r2, [sp, #4]
 800234c:	6802      	ldr	r2, [r0, #0]
 800234e:	6951      	ldr	r1, [r2, #20]
 8002350:	9101      	str	r1, [sp, #4]
 8002352:	6811      	ldr	r1, [r2, #0]
 8002354:	f041 0101 	orr.w	r1, r1, #1
 8002358:	6011      	str	r1, [r2, #0]
 800235a:	9a01      	ldr	r2, [sp, #4]
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800235c:	6801      	ldr	r1, [r0, #0]
 800235e:	680a      	ldr	r2, [r1, #0]
 8002360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002364:	600a      	str	r2, [r1, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002366:	6801      	ldr	r1, [r0, #0]
 8002368:	684a      	ldr	r2, [r1, #4]
 800236a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800236e:	d00e      	beq.n	800238e <I2C_Slave_STOPF+0x5a>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002370:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	2a22      	cmp	r2, #34	; 0x22
 8002378:	d044      	beq.n	8002404 <I2C_Slave_STOPF+0xd0>
 800237a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	2a2a      	cmp	r2, #42	; 0x2a
 8002382:	d03f      	beq.n	8002404 <I2C_Slave_STOPF+0xd0>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002384:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	6852      	ldr	r2, [r2, #4]
 800238a:	b292      	uxth	r2, r2
 800238c:	8542      	strh	r2, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 800238e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002390:	b292      	uxth	r2, r2
 8002392:	b302      	cbz	r2, 80023d6 <I2C_Slave_STOPF+0xa2>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002394:	694a      	ldr	r2, [r1, #20]
 8002396:	f012 0f04 	tst.w	r2, #4
 800239a:	d009      	beq.n	80023b0 <I2C_Slave_STOPF+0x7c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800239c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800239e:	1c54      	adds	r4, r2, #1
 80023a0:	6244      	str	r4, [r0, #36]	; 0x24
 80023a2:	6909      	ldr	r1, [r1, #16]
 80023a4:	7011      	strb	r1, [r2, #0]
      hi2c->XferCount--;
 80023a6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80023a8:	b292      	uxth	r2, r2
 80023aa:	3a01      	subs	r2, #1
 80023ac:	b292      	uxth	r2, r2
 80023ae:	8542      	strh	r2, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80023b0:	6802      	ldr	r2, [r0, #0]
 80023b2:	6951      	ldr	r1, [r2, #20]
 80023b4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80023b8:	d009      	beq.n	80023ce <I2C_Slave_STOPF+0x9a>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80023ba:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80023bc:	1c4c      	adds	r4, r1, #1
 80023be:	6244      	str	r4, [r0, #36]	; 0x24
 80023c0:	6912      	ldr	r2, [r2, #16]
 80023c2:	700a      	strb	r2, [r1, #0]
      hi2c->XferCount--;
 80023c4:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80023c6:	b292      	uxth	r2, r2
 80023c8:	3a01      	subs	r2, #1
 80023ca:	b292      	uxth	r2, r2
 80023cc:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80023d0:	f042 0204 	orr.w	r2, r2, #4
 80023d4:	6402      	str	r2, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80023d8:	b9d2      	cbnz	r2, 8002410 <I2C_Slave_STOPF+0xdc>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80023da:	2b28      	cmp	r3, #40	; 0x28
 80023dc:	d01b      	beq.n	8002416 <I2C_Slave_STOPF+0xe2>
 80023de:	2b2a      	cmp	r3, #42	; 0x2a
 80023e0:	d019      	beq.n	8002416 <I2C_Slave_STOPF+0xe2>
 80023e2:	2b29      	cmp	r3, #41	; 0x29
 80023e4:	d017      	beq.n	8002416 <I2C_Slave_STOPF+0xe2>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80023e6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80023e8:	2a22      	cmp	r2, #34	; 0x22
 80023ea:	d001      	beq.n	80023f0 <I2C_Slave_STOPF+0xbc>
 80023ec:	2b22      	cmp	r3, #34	; 0x22
 80023ee:	d11d      	bne.n	800242c <I2C_Slave_STOPF+0xf8>
        hi2c->PreviousState = I2C_STATE_NONE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	2220      	movs	r2, #32
 80023f6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023fe:	f002 fc05 	bl	8004c0c <HAL_I2C_SlaveRxCpltCallback>
 8002402:	e013      	b.n	800242c <I2C_Slave_STOPF+0xf8>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002404:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	6852      	ldr	r2, [r2, #4]
 800240a:	b292      	uxth	r2, r2
 800240c:	8542      	strh	r2, [r0, #42]	; 0x2a
 800240e:	e7be      	b.n	800238e <I2C_Slave_STOPF+0x5a>
    I2C_ITError(hi2c);
 8002410:	f7ff feea 	bl	80021e8 <I2C_ITError>
 8002414:	e00a      	b.n	800242c <I2C_Slave_STOPF+0xf8>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <I2C_Slave_STOPF+0x100>)
 8002418:	62c3      	str	r3, [r0, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800241a:	2300      	movs	r3, #0
 800241c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800241e:	2220      	movs	r2, #32
 8002420:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002428:	f7ff fcc7 	bl	8001dba <HAL_I2C_ListenCpltCallback>
}
 800242c:	2000      	movs	r0, #0
 800242e:	b002      	add	sp, #8
 8002430:	bd10      	pop	{r4, pc}
 8002432:	bf00      	nop
 8002434:	ffff0000 	.word	0xffff0000

08002438 <HAL_I2C_EV_IRQHandler>:
{
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243a:	4605      	mov	r5, r0
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800243c:	6803      	ldr	r3, [r0, #0]
 800243e:	699f      	ldr	r7, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002440:	695c      	ldr	r4, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8002442:	685e      	ldr	r6, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8002444:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002448:	b2db      	uxtb	r3, r3
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800244a:	2b10      	cmp	r3, #16
 800244c:	d025      	beq.n	800249a <HAL_I2C_EV_IRQHandler+0x62>
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	d023      	beq.n	800249a <HAL_I2C_EV_IRQHandler+0x62>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002452:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <HAL_I2C_EV_IRQHandler+0x14c>)
 8002454:	4023      	ands	r3, r4
 8002456:	b113      	cbz	r3, 800245e <HAL_I2C_EV_IRQHandler+0x26>
 8002458:	f416 7f00 	tst.w	r6, #512	; 0x200
 800245c:	d16e      	bne.n	800253c <HAL_I2C_EV_IRQHandler+0x104>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800245e:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <HAL_I2C_EV_IRQHandler+0x150>)
 8002460:	4023      	ands	r3, r4
 8002462:	b113      	cbz	r3, 800246a <HAL_I2C_EV_IRQHandler+0x32>
 8002464:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002468:	d16b      	bne.n	8002542 <HAL_I2C_EV_IRQHandler+0x10a>
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800246a:	4b48      	ldr	r3, [pc, #288]	; (800258c <HAL_I2C_EV_IRQHandler+0x154>)
 800246c:	403b      	ands	r3, r7
 800246e:	2b00      	cmp	r3, #0
 8002470:	d06f      	beq.n	8002552 <HAL_I2C_EV_IRQHandler+0x11a>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <HAL_I2C_EV_IRQHandler+0x158>)
 8002474:	4023      	ands	r3, r4
 8002476:	b133      	cbz	r3, 8002486 <HAL_I2C_EV_IRQHandler+0x4e>
 8002478:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800247c:	d003      	beq.n	8002486 <HAL_I2C_EV_IRQHandler+0x4e>
 800247e:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002480:	4023      	ands	r3, r4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d061      	beq.n	800254a <HAL_I2C_EV_IRQHandler+0x112>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002486:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002488:	4023      	ands	r3, r4
 800248a:	b353      	cbz	r3, 80024e2 <HAL_I2C_EV_IRQHandler+0xaa>
 800248c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002490:	d027      	beq.n	80024e2 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveTransmit_BTF(hi2c);
 8002492:	4628      	mov	r0, r5
 8002494:	f7ff fb80 	bl	8001b98 <I2C_SlaveTransmit_BTF>
 8002498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800249a:	f014 1f01 	tst.w	r4, #65537	; 0x10001
 800249e:	d002      	beq.n	80024a6 <HAL_I2C_EV_IRQHandler+0x6e>
 80024a0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80024a4:	d11e      	bne.n	80024e4 <HAL_I2C_EV_IRQHandler+0xac>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80024a6:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <HAL_I2C_EV_IRQHandler+0x160>)
 80024a8:	4023      	ands	r3, r4
 80024aa:	b113      	cbz	r3, 80024b2 <HAL_I2C_EV_IRQHandler+0x7a>
 80024ac:	f416 7f00 	tst.w	r6, #512	; 0x200
 80024b0:	d11c      	bne.n	80024ec <HAL_I2C_EV_IRQHandler+0xb4>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80024b2:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_I2C_EV_IRQHandler+0x14c>)
 80024b4:	4023      	ands	r3, r4
 80024b6:	b113      	cbz	r3, 80024be <HAL_I2C_EV_IRQHandler+0x86>
 80024b8:	f416 7f00 	tst.w	r6, #512	; 0x200
 80024bc:	d11a      	bne.n	80024f4 <HAL_I2C_EV_IRQHandler+0xbc>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80024be:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_I2C_EV_IRQHandler+0x154>)
 80024c0:	403b      	ands	r3, r7
 80024c2:	b31b      	cbz	r3, 800250c <HAL_I2C_EV_IRQHandler+0xd4>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80024c4:	4b32      	ldr	r3, [pc, #200]	; (8002590 <HAL_I2C_EV_IRQHandler+0x158>)
 80024c6:	4023      	ands	r3, r4
 80024c8:	b12b      	cbz	r3, 80024d6 <HAL_I2C_EV_IRQHandler+0x9e>
 80024ca:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80024ce:	d002      	beq.n	80024d6 <HAL_I2C_EV_IRQHandler+0x9e>
 80024d0:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_I2C_EV_IRQHandler+0x15c>)
 80024d2:	4023      	ands	r3, r4
 80024d4:	b193      	cbz	r3, 80024fc <HAL_I2C_EV_IRQHandler+0xc4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80024d6:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <HAL_I2C_EV_IRQHandler+0x15c>)
 80024d8:	4023      	ands	r3, r4
 80024da:	b113      	cbz	r3, 80024e2 <HAL_I2C_EV_IRQHandler+0xaa>
 80024dc:	f416 7f00 	tst.w	r6, #512	; 0x200
 80024e0:	d110      	bne.n	8002504 <HAL_I2C_EV_IRQHandler+0xcc>
 80024e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Master_SB(hi2c);
 80024e4:	4628      	mov	r0, r5
 80024e6:	f7ff fa26 	bl	8001936 <I2C_Master_SB>
 80024ea:	e7e8      	b.n	80024be <HAL_I2C_EV_IRQHandler+0x86>
      I2C_Master_ADD10(hi2c);
 80024ec:	4628      	mov	r0, r5
 80024ee:	f7ff fa67 	bl	80019c0 <I2C_Master_ADD10>
 80024f2:	e7e4      	b.n	80024be <HAL_I2C_EV_IRQHandler+0x86>
      I2C_Master_ADDR(hi2c);
 80024f4:	4628      	mov	r0, r5
 80024f6:	f7ff fa69 	bl	80019cc <I2C_Master_ADDR>
 80024fa:	e7e0      	b.n	80024be <HAL_I2C_EV_IRQHandler+0x86>
        I2C_MasterTransmit_TXE(hi2c);
 80024fc:	4628      	mov	r0, r5
 80024fe:	f7ff fca8 	bl	8001e52 <I2C_MasterTransmit_TXE>
 8002502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_MasterTransmit_BTF(hi2c);
 8002504:	4628      	mov	r0, r5
 8002506:	f7ff fd49 	bl	8001f9c <I2C_MasterTransmit_BTF>
 800250a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800250c:	4b23      	ldr	r3, [pc, #140]	; (800259c <HAL_I2C_EV_IRQHandler+0x164>)
 800250e:	4023      	ands	r3, r4
 8002510:	b12b      	cbz	r3, 800251e <HAL_I2C_EV_IRQHandler+0xe6>
 8002512:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002516:	d002      	beq.n	800251e <HAL_I2C_EV_IRQHandler+0xe6>
 8002518:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <HAL_I2C_EV_IRQHandler+0x15c>)
 800251a:	4023      	ands	r3, r4
 800251c:	b153      	cbz	r3, 8002534 <HAL_I2C_EV_IRQHandler+0xfc>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002520:	4023      	ands	r3, r4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0dd      	beq.n	80024e2 <HAL_I2C_EV_IRQHandler+0xaa>
 8002526:	f416 7f00 	tst.w	r6, #512	; 0x200
 800252a:	d0da      	beq.n	80024e2 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_MasterReceive_BTF(hi2c);
 800252c:	4628      	mov	r0, r5
 800252e:	f7ff fdd3 	bl	80020d8 <I2C_MasterReceive_BTF>
 8002532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_MasterReceive_RXNE(hi2c);
 8002534:	4628      	mov	r0, r5
 8002536:	f7ff fd81 	bl	800203c <I2C_MasterReceive_RXNE>
 800253a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Slave_ADDR(hi2c);
 800253c:	f7ff fc29 	bl	8001d92 <I2C_Slave_ADDR>
 8002540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Slave_STOPF(hi2c);
 8002542:	4628      	mov	r0, r5
 8002544:	f7ff fef6 	bl	8002334 <I2C_Slave_STOPF>
 8002548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_SlaveTransmit_TXE(hi2c);
 800254a:	4628      	mov	r0, r5
 800254c:	f7ff fbd2 	bl	8001cf4 <I2C_SlaveTransmit_TXE>
 8002550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_I2C_EV_IRQHandler+0x164>)
 8002554:	4023      	ands	r3, r4
 8002556:	b12b      	cbz	r3, 8002564 <HAL_I2C_EV_IRQHandler+0x12c>
 8002558:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800255c:	d002      	beq.n	8002564 <HAL_I2C_EV_IRQHandler+0x12c>
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002560:	4023      	ands	r3, r4
 8002562:	b153      	cbz	r3, 800257a <HAL_I2C_EV_IRQHandler+0x142>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002566:	4023      	ands	r3, r4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ba      	beq.n	80024e2 <HAL_I2C_EV_IRQHandler+0xaa>
 800256c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002570:	d0b7      	beq.n	80024e2 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveReceive_BTF(hi2c);
 8002572:	4628      	mov	r0, r5
 8002574:	f7ff fb20 	bl	8001bb8 <I2C_SlaveReceive_BTF>
}
 8002578:	e7b3      	b.n	80024e2 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveReceive_RXNE(hi2c);
 800257a:	4628      	mov	r0, r5
 800257c:	f7ff fbe2 	bl	8001d44 <I2C_SlaveReceive_RXNE>
 8002580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002582:	bf00      	nop
 8002584:	00010002 	.word	0x00010002
 8002588:	00010010 	.word	0x00010010
 800258c:	00100004 	.word	0x00100004
 8002590:	00010080 	.word	0x00010080
 8002594:	00010004 	.word	0x00010004
 8002598:	00010008 	.word	0x00010008
 800259c:	00010040 	.word	0x00010040

080025a0 <HAL_I2C_ER_IRQHandler>:
{
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80025a4:	6803      	ldr	r3, [r0, #0]
 80025a6:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80025a8:	685e      	ldr	r6, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80025aa:	4a31      	ldr	r2, [pc, #196]	; (8002670 <HAL_I2C_ER_IRQHandler+0xd0>)
 80025ac:	4215      	tst	r5, r2
 80025ae:	d009      	beq.n	80025c4 <HAL_I2C_ER_IRQHandler+0x24>
 80025b0:	f416 7f80 	tst.w	r6, #256	; 0x100
 80025b4:	d006      	beq.n	80025c4 <HAL_I2C_ER_IRQHandler+0x24>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025c2:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80025c4:	f415 3f81 	tst.w	r5, #66048	; 0x10200
 80025c8:	d00a      	beq.n	80025e0 <HAL_I2C_ER_IRQHandler+0x40>
 80025ca:	f416 7f80 	tst.w	r6, #256	; 0x100
 80025ce:	d007      	beq.n	80025e0 <HAL_I2C_ER_IRQHandler+0x40>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80025d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80025de:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80025e0:	f415 3f82 	tst.w	r5, #66560	; 0x10400
 80025e4:	d01a      	beq.n	800261c <HAL_I2C_ER_IRQHandler+0x7c>
 80025e6:	f416 7f80 	tst.w	r6, #256	; 0x100
 80025ea:	d017      	beq.n	800261c <HAL_I2C_ER_IRQHandler+0x7c>
    tmp1 = hi2c->Mode;
 80025ec:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80025f0:	b2db      	uxtb	r3, r3
    tmp2 = hi2c->XferCount;
 80025f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80025f4:	b291      	uxth	r1, r2
    tmp3 = hi2c->State;
 80025f6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80025fa:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 80025fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d01d      	beq.n	800263e <HAL_I2C_ER_IRQHandler+0x9e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6423      	str	r3, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 800260a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b10      	cmp	r3, #16
 8002612:	d022      	beq.n	800265a <HAL_I2C_ER_IRQHandler+0xba>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800261a:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800261c:	f415 3f84 	tst.w	r5, #67584	; 0x10800
 8002620:	d00a      	beq.n	8002638 <HAL_I2C_ER_IRQHandler+0x98>
 8002622:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002626:	d007      	beq.n	8002638 <HAL_I2C_ER_IRQHandler+0x98>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002628:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800262a:	f043 0308 	orr.w	r3, r3, #8
 800262e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002636:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002638:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800263a:	b9a3      	cbnz	r3, 8002666 <HAL_I2C_ER_IRQHandler+0xc6>
 800263c:	bd70      	pop	{r4, r5, r6, pc}
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800263e:	2900      	cmp	r1, #0
 8002640:	d1df      	bne.n	8002602 <HAL_I2C_ER_IRQHandler+0x62>
 8002642:	2a21      	cmp	r2, #33	; 0x21
 8002644:	d005      	beq.n	8002652 <HAL_I2C_ER_IRQHandler+0xb2>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002646:	2a29      	cmp	r2, #41	; 0x29
 8002648:	d003      	beq.n	8002652 <HAL_I2C_ER_IRQHandler+0xb2>
 800264a:	2a28      	cmp	r2, #40	; 0x28
 800264c:	d1d9      	bne.n	8002602 <HAL_I2C_ER_IRQHandler+0x62>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800264e:	2821      	cmp	r0, #33	; 0x21
 8002650:	d1d7      	bne.n	8002602 <HAL_I2C_ER_IRQHandler+0x62>
      I2C_Slave_AF(hi2c);
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff fbb2 	bl	8001dbc <I2C_Slave_AF>
 8002658:	e7e0      	b.n	800261c <HAL_I2C_ER_IRQHandler+0x7c>
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 800265a:	6822      	ldr	r2, [r4, #0]
 800265c:	6813      	ldr	r3, [r2, #0]
 800265e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	e7d6      	b.n	8002614 <HAL_I2C_ER_IRQHandler+0x74>
    I2C_ITError(hi2c);
 8002666:	4620      	mov	r0, r4
 8002668:	f7ff fdbe 	bl	80021e8 <I2C_ITError>
}
 800266c:	e7e6      	b.n	800263c <HAL_I2C_ER_IRQHandler+0x9c>
 800266e:	bf00      	nop
 8002670:	00010100 	.word	0x00010100

08002674 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002674:	b508      	push	{r3, lr}
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002676:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002678:	6802      	ldr	r2, [r0, #0]
 800267a:	6813      	ldr	r3, [r2, #0]
 800267c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002680:	6013      	str	r3, [r2, #0]

  hi2c->XferCount = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	8543      	strh	r3, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002686:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002688:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800268a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800268c:	6513      	str	r3, [r2, #80]	; 0x50

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800268e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b60      	cmp	r3, #96	; 0x60
 8002696:	d00d      	beq.n	80026b4 <I2C_DMAAbort+0x40>
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002698:	2320      	movs	r3, #32
 800269a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80026a4:	6802      	ldr	r2, [r0, #0]
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	6013      	str	r3, [r2, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 80026ae:	f7ff fd99 	bl	80021e4 <HAL_I2C_ErrorCallback>
 80026b2:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80026b4:	2320      	movs	r3, #32
 80026b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c0:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 80026c2:	6802      	ldr	r2, [r0, #0]
 80026c4:	6813      	ldr	r3, [r2, #0]
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80026cc:	f7ff fd8b 	bl	80021e6 <HAL_I2C_AbortCpltCallback>
 80026d0:	bd08      	pop	{r3, pc}
	...

080026d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026d4:	b510      	push	{r4, lr}
 80026d6:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	2300      	movs	r3, #0
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_PWREx_EnableOverDrive+0x70>)
 80026de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026f0:	2201      	movs	r2, #1
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_PWREx_EnableOverDrive+0x74>)
 80026f4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f6:	f7fe fc67 	bl	8000fc8 <HAL_GetTick>
 80026fa:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_PWREx_EnableOverDrive+0x78>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002704:	d108      	bne.n	8002718 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002706:	f7fe fc5f 	bl	8000fc8 <HAL_GetTick>
 800270a:	1b00      	subs	r0, r0, r4
 800270c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002710:	d9f4      	bls.n	80026fc <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8002712:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002714:	b002      	add	sp, #8
 8002716:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002718:	2201      	movs	r2, #1
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <HAL_PWREx_EnableOverDrive+0x7c>)
 800271c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800271e:	f7fe fc53 	bl	8000fc8 <HAL_GetTick>
 8002722:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_PWREx_EnableOverDrive+0x78>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800272c:	d107      	bne.n	800273e <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800272e:	f7fe fc4b 	bl	8000fc8 <HAL_GetTick>
 8002732:	1b00      	subs	r0, r0, r4
 8002734:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002738:	d9f4      	bls.n	8002724 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 800273a:	2003      	movs	r0, #3
 800273c:	e7ea      	b.n	8002714 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800273e:	2000      	movs	r0, #0
 8002740:	e7e8      	b.n	8002714 <HAL_PWREx_EnableOverDrive+0x40>
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	420e0040 	.word	0x420e0040
 800274c:	40007000 	.word	0x40007000
 8002750:	420e0044 	.word	0x420e0044

08002754 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002754:	2800      	cmp	r0, #0
 8002756:	f000 809d 	beq.w	8002894 <HAL_RCC_ClockConfig+0x140>
{
 800275a:	b570      	push	{r4, r5, r6, lr}
 800275c:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800275e:	4b4f      	ldr	r3, [pc, #316]	; (800289c <HAL_RCC_ClockConfig+0x148>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	428b      	cmp	r3, r1
 8002768:	d209      	bcs.n	800277e <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	b2cb      	uxtb	r3, r1
 800276c:	4a4b      	ldr	r2, [pc, #300]	; (800289c <HAL_RCC_ClockConfig+0x148>)
 800276e:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002770:	6813      	ldr	r3, [r2, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	4299      	cmp	r1, r3
 8002778:	d001      	beq.n	800277e <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 800277a:	2001      	movs	r0, #1
 800277c:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	f013 0f02 	tst.w	r3, #2
 8002784:	d017      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002786:	f013 0f04 	tst.w	r3, #4
 800278a:	d004      	beq.n	8002796 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800278c:	4a44      	ldr	r2, [pc, #272]	; (80028a0 <HAL_RCC_ClockConfig+0x14c>)
 800278e:	6893      	ldr	r3, [r2, #8]
 8002790:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002794:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	f013 0f08 	tst.w	r3, #8
 800279c:	d004      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800279e:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <HAL_RCC_ClockConfig+0x14c>)
 80027a0:	6893      	ldr	r3, [r2, #8]
 80027a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a8:	4a3d      	ldr	r2, [pc, #244]	; (80028a0 <HAL_RCC_ClockConfig+0x14c>)
 80027aa:	6893      	ldr	r3, [r2, #8]
 80027ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027b0:	68a0      	ldr	r0, [r4, #8]
 80027b2:	4303      	orrs	r3, r0
 80027b4:	6093      	str	r3, [r2, #8]
 80027b6:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	f013 0f01 	tst.w	r3, #1
 80027be:	d032      	beq.n	8002826 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c0:	6863      	ldr	r3, [r4, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d021      	beq.n	800280a <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	1e9a      	subs	r2, r3, #2
 80027c8:	2a01      	cmp	r2, #1
 80027ca:	d925      	bls.n	8002818 <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	4a34      	ldr	r2, [pc, #208]	; (80028a0 <HAL_RCC_ClockConfig+0x14c>)
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	f012 0f02 	tst.w	r2, #2
 80027d4:	d060      	beq.n	8002898 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4932      	ldr	r1, [pc, #200]	; (80028a0 <HAL_RCC_ClockConfig+0x14c>)
 80027d8:	688a      	ldr	r2, [r1, #8]
 80027da:	f022 0203 	bic.w	r2, r2, #3
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e2:	f7fe fbf1 	bl	8000fc8 <HAL_GetTick>
 80027e6:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e8:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_RCC_ClockConfig+0x14c>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	6862      	ldr	r2, [r4, #4]
 80027f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027f6:	d016      	beq.n	8002826 <HAL_RCC_ClockConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f7fe fbe6 	bl	8000fc8 <HAL_GetTick>
 80027fc:	1b80      	subs	r0, r0, r6
 80027fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002802:	4298      	cmp	r0, r3
 8002804:	d9f0      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_TIMEOUT;
 8002806:	2003      	movs	r0, #3
 8002808:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4a25      	ldr	r2, [pc, #148]	; (80028a0 <HAL_RCC_ClockConfig+0x14c>)
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002812:	d1e0      	bne.n	80027d6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002814:	2001      	movs	r0, #1
 8002816:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002818:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <HAL_RCC_ClockConfig+0x14c>)
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002820:	d1d9      	bne.n	80027d6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002822:	2001      	movs	r0, #1
 8002824:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_RCC_ClockConfig+0x148>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	429d      	cmp	r5, r3
 8002830:	d209      	bcs.n	8002846 <HAL_RCC_ClockConfig+0xf2>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	b2ea      	uxtb	r2, r5
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_ClockConfig+0x148>)
 8002836:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	429d      	cmp	r5, r3
 8002840:	d001      	beq.n	8002846 <HAL_RCC_ClockConfig+0xf2>
    {
      return HAL_ERROR;
 8002842:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8002844:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	f013 0f04 	tst.w	r3, #4
 800284c:	d006      	beq.n	800285c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284e:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <HAL_RCC_ClockConfig+0x14c>)
 8002850:	6893      	ldr	r3, [r2, #8]
 8002852:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002856:	68e1      	ldr	r1, [r4, #12]
 8002858:	430b      	orrs	r3, r1
 800285a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	f013 0f08 	tst.w	r3, #8
 8002862:	d007      	beq.n	8002874 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002864:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <HAL_RCC_ClockConfig+0x14c>)
 8002866:	6893      	ldr	r3, [r2, #8]
 8002868:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800286c:	6921      	ldr	r1, [r4, #16]
 800286e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002872:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002874:	f000 f840 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x14c>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002880:	4a08      	ldr	r2, [pc, #32]	; (80028a4 <HAL_RCC_ClockConfig+0x150>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	40d8      	lsrs	r0, r3
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_RCC_ClockConfig+0x154>)
 8002888:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800288a:	2000      	movs	r0, #0
 800288c:	f7fe fb50 	bl	8000f30 <HAL_InitTick>
  return HAL_OK;
 8002890:	2000      	movs	r0, #0
 8002892:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002894:	2001      	movs	r0, #1
 8002896:	4770      	bx	lr
        return HAL_ERROR;
 8002898:	2001      	movs	r0, #1
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	40023c00 	.word	0x40023c00
 80028a0:	40023800 	.word	0x40023800
 80028a4:	08007d98 	.word	0x08007d98
 80028a8:	20000008 	.word	0x20000008

080028ac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80028ac:	4b01      	ldr	r3, [pc, #4]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x8>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000008 	.word	0x20000008

080028b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028ba:	f7ff fff7 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80028c6:	4a03      	ldr	r2, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
}
 80028ca:	40d8      	lsrs	r0, r3
 80028cc:	bd08      	pop	{r3, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	08007da8 	.word	0x08007da8

080028d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028da:	f7ff ffe7 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028de:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80028e6:	4a03      	ldr	r2, [pc, #12]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80028e8:	5cd3      	ldrb	r3, [r2, r3]
}
 80028ea:	40d8      	lsrs	r0, r3
 80028ec:	bd08      	pop	{r3, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	08007da8 	.word	0x08007da8

080028f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028fa:	4b5c      	ldr	r3, [pc, #368]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x174>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b08      	cmp	r3, #8
 8002904:	d006      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x1c>
 8002906:	2b0c      	cmp	r3, #12
 8002908:	d05a      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0xc8>
 800290a:	2b04      	cmp	r3, #4
 800290c:	f000 80ac 	beq.w	8002a68 <HAL_RCC_GetSysClockFreq+0x170>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4857      	ldr	r0, [pc, #348]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x178>)
 8002912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002914:	4b55      	ldr	r3, [pc, #340]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x174>)
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002922:	d02a      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002924:	4b51      	ldr	r3, [pc, #324]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x174>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800292c:	461e      	mov	r6, r3
 800292e:	2700      	movs	r7, #0
 8002930:	015c      	lsls	r4, r3, #5
 8002932:	2500      	movs	r5, #0
 8002934:	1ae4      	subs	r4, r4, r3
 8002936:	eb65 0507 	sbc.w	r5, r5, r7
 800293a:	01a9      	lsls	r1, r5, #6
 800293c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002940:	01a0      	lsls	r0, r4, #6
 8002942:	1b00      	subs	r0, r0, r4
 8002944:	eb61 0105 	sbc.w	r1, r1, r5
 8002948:	00cb      	lsls	r3, r1, #3
 800294a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800294e:	00c4      	lsls	r4, r0, #3
 8002950:	19a0      	adds	r0, r4, r6
 8002952:	eb43 0107 	adc.w	r1, r3, r7
 8002956:	024b      	lsls	r3, r1, #9
 8002958:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800295c:	0244      	lsls	r4, r0, #9
 800295e:	4620      	mov	r0, r4
 8002960:	4619      	mov	r1, r3
 8002962:	2300      	movs	r3, #0
 8002964:	f7fe f95c 	bl	8000c20 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002968:	4b40      	ldr	r3, [pc, #256]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x174>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002970:	3301      	adds	r3, #1
 8002972:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002974:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297a:	4b3c      	ldr	r3, [pc, #240]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x174>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002982:	461e      	mov	r6, r3
 8002984:	2700      	movs	r7, #0
 8002986:	015c      	lsls	r4, r3, #5
 8002988:	2500      	movs	r5, #0
 800298a:	1ae4      	subs	r4, r4, r3
 800298c:	eb65 0507 	sbc.w	r5, r5, r7
 8002990:	01a9      	lsls	r1, r5, #6
 8002992:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002996:	01a0      	lsls	r0, r4, #6
 8002998:	1b00      	subs	r0, r0, r4
 800299a:	eb61 0105 	sbc.w	r1, r1, r5
 800299e:	00cb      	lsls	r3, r1, #3
 80029a0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80029a4:	00c4      	lsls	r4, r0, #3
 80029a6:	19a0      	adds	r0, r4, r6
 80029a8:	eb43 0107 	adc.w	r1, r3, r7
 80029ac:	028b      	lsls	r3, r1, #10
 80029ae:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80029b2:	0284      	lsls	r4, r0, #10
 80029b4:	4620      	mov	r0, r4
 80029b6:	4619      	mov	r1, r3
 80029b8:	2300      	movs	r3, #0
 80029ba:	f7fe f931 	bl	8000c20 <__aeabi_uldivmod>
 80029be:	e7d3      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x70>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x174>)
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80029ce:	d028      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x12a>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d0:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x174>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80029d8:	461e      	mov	r6, r3
 80029da:	2700      	movs	r7, #0
 80029dc:	015c      	lsls	r4, r3, #5
 80029de:	2500      	movs	r5, #0
 80029e0:	1ae4      	subs	r4, r4, r3
 80029e2:	eb65 0507 	sbc.w	r5, r5, r7
 80029e6:	01a9      	lsls	r1, r5, #6
 80029e8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80029ec:	01a0      	lsls	r0, r4, #6
 80029ee:	1b00      	subs	r0, r0, r4
 80029f0:	eb61 0105 	sbc.w	r1, r1, r5
 80029f4:	00cb      	lsls	r3, r1, #3
 80029f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80029fa:	00c4      	lsls	r4, r0, #3
 80029fc:	19a0      	adds	r0, r4, r6
 80029fe:	eb43 0107 	adc.w	r1, r3, r7
 8002a02:	024b      	lsls	r3, r1, #9
 8002a04:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002a08:	0244      	lsls	r4, r0, #9
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f7fe f906 	bl	8000c20 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x174>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 8002a1c:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a22:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x174>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002a2a:	461e      	mov	r6, r3
 8002a2c:	2700      	movs	r7, #0
 8002a2e:	015c      	lsls	r4, r3, #5
 8002a30:	2500      	movs	r5, #0
 8002a32:	1ae4      	subs	r4, r4, r3
 8002a34:	eb65 0507 	sbc.w	r5, r5, r7
 8002a38:	01a9      	lsls	r1, r5, #6
 8002a3a:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002a3e:	01a0      	lsls	r0, r4, #6
 8002a40:	1b00      	subs	r0, r0, r4
 8002a42:	eb61 0105 	sbc.w	r1, r1, r5
 8002a46:	00cb      	lsls	r3, r1, #3
 8002a48:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002a4c:	00c4      	lsls	r4, r0, #3
 8002a4e:	19a0      	adds	r0, r4, r6
 8002a50:	eb43 0107 	adc.w	r1, r3, r7
 8002a54:	028b      	lsls	r3, r1, #10
 8002a56:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002a5a:	0284      	lsls	r4, r0, #10
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	2300      	movs	r3, #0
 8002a62:	f7fe f8dd 	bl	8000c20 <__aeabi_uldivmod>
 8002a66:	e7d5      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x11c>
      sysclockfreq = HSE_VALUE;
 8002a68:	4802      	ldr	r0, [pc, #8]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x17c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	00f42400 	.word	0x00f42400
 8002a74:	007a1200 	.word	0x007a1200

08002a78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	6803      	ldr	r3, [r0, #0]
 8002a80:	f013 0f01 	tst.w	r3, #1
 8002a84:	d041      	beq.n	8002b0a <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a86:	4ba6      	ldr	r3, [pc, #664]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d032      	beq.n	8002af8 <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a92:	4ba3      	ldr	r3, [pc, #652]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d027      	beq.n	8002aee <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a9e:	4ba0      	ldr	r3, [pc, #640]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d059      	beq.n	8002b5e <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aaa:	6863      	ldr	r3, [r4, #4]
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab0:	d05b      	beq.n	8002b6a <HAL_RCC_OscConfig+0xf2>
 8002ab2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab6:	d05e      	beq.n	8002b76 <HAL_RCC_OscConfig+0xfe>
 8002ab8:	4b99      	ldr	r3, [pc, #612]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ac8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aca:	6863      	ldr	r3, [r4, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d05c      	beq.n	8002b8a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fa7a 	bl	8000fc8 <HAL_GetTick>
 8002ad4:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b92      	ldr	r3, [pc, #584]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ade:	d114      	bne.n	8002b0a <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7fe fa72 	bl	8000fc8 <HAL_GetTick>
 8002ae4:	1b40      	subs	r0, r0, r5
 8002ae6:	2864      	cmp	r0, #100	; 0x64
 8002ae8:	d9f5      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8002aea:	2003      	movs	r0, #3
 8002aec:	e19d      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002aee:	4b8c      	ldr	r3, [pc, #560]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002af6:	d0d2      	beq.n	8002a9e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	4b89      	ldr	r3, [pc, #548]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_OscConfig+0x92>
 8002b02:	6863      	ldr	r3, [r4, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 818d 	beq.w	8002e24 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	f013 0f02 	tst.w	r3, #2
 8002b10:	d067      	beq.n	8002be2 <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b12:	4b83      	ldr	r3, [pc, #524]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f013 0f0c 	tst.w	r3, #12
 8002b1a:	d04a      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b1c:	4b80      	ldr	r3, [pc, #512]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d03f      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b28:	4b7d      	ldr	r3, [pc, #500]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	d048      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b34:	68e3      	ldr	r3, [r4, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d074      	beq.n	8002c24 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4b79      	ldr	r3, [pc, #484]	; (8002d24 <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fa42 	bl	8000fc8 <HAL_GetTick>
 8002b44:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4b76      	ldr	r3, [pc, #472]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f013 0f02 	tst.w	r3, #2
 8002b4e:	d160      	bne.n	8002c12 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b50:	f7fe fa3a 	bl	8000fc8 <HAL_GetTick>
 8002b54:	1b40      	subs	r0, r0, r5
 8002b56:	2802      	cmp	r0, #2
 8002b58:	d9f5      	bls.n	8002b46 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8002b5a:	2003      	movs	r0, #3
 8002b5c:	e165      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5e:	4b70      	ldr	r3, [pc, #448]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b66:	d0a0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x32>
 8002b68:	e7c6      	b.n	8002af8 <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6a:	4a6d      	ldr	r2, [pc, #436]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002b6c:	6813      	ldr	r3, [r2, #0]
 8002b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	e7a9      	b.n	8002aca <HAL_RCC_OscConfig+0x52>
 8002b76:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	e79f      	b.n	8002aca <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fa1d 	bl	8000fc8 <HAL_GetTick>
 8002b8e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b90:	4b63      	ldr	r3, [pc, #396]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b98:	d0b7      	beq.n	8002b0a <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9a:	f7fe fa15 	bl	8000fc8 <HAL_GetTick>
 8002b9e:	1b40      	subs	r0, r0, r5
 8002ba0:	2864      	cmp	r0, #100	; 0x64
 8002ba2:	d9f5      	bls.n	8002b90 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	e140      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ba8:	4b5d      	ldr	r3, [pc, #372]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002bb0:	d1ba      	bne.n	8002b28 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	4b5b      	ldr	r3, [pc, #364]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f013 0f02 	tst.w	r3, #2
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x15a>
 8002bbc:	68e3      	ldr	r3, [r4, #12]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d007      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	e131      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc6:	4b56      	ldr	r3, [pc, #344]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002bce:	d1b1      	bne.n	8002b34 <HAL_RCC_OscConfig+0xbc>
 8002bd0:	e7ef      	b.n	8002bb2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	4a53      	ldr	r2, [pc, #332]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002bd4:	6813      	ldr	r3, [r2, #0]
 8002bd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002bda:	6921      	ldr	r1, [r4, #16]
 8002bdc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002be0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	f013 0f08 	tst.w	r3, #8
 8002be8:	d040      	beq.n	8002c6c <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bea:	6963      	ldr	r3, [r4, #20]
 8002bec:	b363      	cbz	r3, 8002c48 <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <HAL_RCC_OscConfig+0x2b0>)
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7fe f9e8 	bl	8000fc8 <HAL_GetTick>
 8002bf8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfe:	f013 0f02 	tst.w	r3, #2
 8002c02:	d133      	bne.n	8002c6c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c04:	f7fe f9e0 	bl	8000fc8 <HAL_GetTick>
 8002c08:	1b40      	subs	r0, r0, r5
 8002c0a:	2802      	cmp	r0, #2
 8002c0c:	d9f5      	bls.n	8002bfa <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8002c0e:	2003      	movs	r0, #3
 8002c10:	e10b      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c12:	4a43      	ldr	r2, [pc, #268]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002c14:	6813      	ldr	r3, [r2, #0]
 8002c16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c1a:	6921      	ldr	r1, [r4, #16]
 8002c1c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e7de      	b.n	8002be2 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 8002c24:	2200      	movs	r2, #0
 8002c26:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c2a:	f7fe f9cd 	bl	8000fc8 <HAL_GetTick>
 8002c2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c30:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f013 0f02 	tst.w	r3, #2
 8002c38:	d0d3      	beq.n	8002be2 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c3a:	f7fe f9c5 	bl	8000fc8 <HAL_GetTick>
 8002c3e:	1b40      	subs	r0, r0, r5
 8002c40:	2802      	cmp	r0, #2
 8002c42:	d9f5      	bls.n	8002c30 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8002c44:	2003      	movs	r0, #3
 8002c46:	e0f0      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCC_OscConfig+0x2b0>)
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7fe f9bb 	bl	8000fc8 <HAL_GetTick>
 8002c52:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	4b32      	ldr	r3, [pc, #200]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	f013 0f02 	tst.w	r3, #2
 8002c5c:	d006      	beq.n	8002c6c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5e:	f7fe f9b3 	bl	8000fc8 <HAL_GetTick>
 8002c62:	1b40      	subs	r0, r0, r5
 8002c64:	2802      	cmp	r0, #2
 8002c66:	d9f5      	bls.n	8002c54 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8002c68:	2003      	movs	r0, #3
 8002c6a:	e0de      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	f013 0f04 	tst.w	r3, #4
 8002c72:	d079      	beq.n	8002d68 <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c74:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002c7c:	d133      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c96:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_RCC_OscConfig+0x2b4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ca0:	d023      	beq.n	8002cea <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca2:	68a3      	ldr	r3, [r4, #8]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d034      	beq.n	8002d12 <HAL_RCC_OscConfig+0x29a>
 8002ca8:	2b05      	cmp	r3, #5
 8002caa:	d041      	beq.n	8002d30 <HAL_RCC_OscConfig+0x2b8>
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	671a      	str	r2, [r3, #112]	; 0x70
 8002cb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cb8:	f022 0204 	bic.w	r2, r2, #4
 8002cbc:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cbe:	68a3      	ldr	r3, [r4, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d03f      	beq.n	8002d44 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe f980 	bl	8000fc8 <HAL_GetTick>
 8002cc8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	f013 0f02 	tst.w	r3, #2
 8002cd2:	d148      	bne.n	8002d66 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd4:	f7fe f978 	bl	8000fc8 <HAL_GetTick>
 8002cd8:	1b80      	subs	r0, r0, r6
 8002cda:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cde:	4298      	cmp	r0, r3
 8002ce0:	d9f3      	bls.n	8002cca <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 8002ce2:	2003      	movs	r0, #3
 8002ce4:	e0a1      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002ce6:	2500      	movs	r5, #0
 8002ce8:	e7d6      	b.n	8002c98 <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cea:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <HAL_RCC_OscConfig+0x2b4>)
 8002cec:	6813      	ldr	r3, [r2, #0]
 8002cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002cf4:	f7fe f968 	bl	8000fc8 <HAL_GetTick>
 8002cf8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_RCC_OscConfig+0x2b4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d02:	d1ce      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d04:	f7fe f960 	bl	8000fc8 <HAL_GetTick>
 8002d08:	1b80      	subs	r0, r0, r6
 8002d0a:	2802      	cmp	r0, #2
 8002d0c:	d9f5      	bls.n	8002cfa <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8002d0e:	2003      	movs	r0, #3
 8002d10:	e08b      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d12:	4a03      	ldr	r2, [pc, #12]	; (8002d20 <HAL_RCC_OscConfig+0x2a8>)
 8002d14:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1c:	e7cf      	b.n	8002cbe <HAL_RCC_OscConfig+0x246>
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	42470000 	.word	0x42470000
 8002d28:	42470e80 	.word	0x42470e80
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <HAL_RCC_OscConfig+0x3bc>)
 8002d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d34:	f042 0204 	orr.w	r2, r2, #4
 8002d38:	671a      	str	r2, [r3, #112]	; 0x70
 8002d3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	671a      	str	r2, [r3, #112]	; 0x70
 8002d42:	e7bc      	b.n	8002cbe <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7fe f940 	bl	8000fc8 <HAL_GetTick>
 8002d48:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4a:	4b3a      	ldr	r3, [pc, #232]	; (8002e34 <HAL_RCC_OscConfig+0x3bc>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	f013 0f02 	tst.w	r3, #2
 8002d52:	d008      	beq.n	8002d66 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7fe f938 	bl	8000fc8 <HAL_GetTick>
 8002d58:	1b80      	subs	r0, r0, r6
 8002d5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d5e:	4298      	cmp	r0, r3
 8002d60:	d9f3      	bls.n	8002d4a <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8002d62:	2003      	movs	r0, #3
 8002d64:	e061      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d66:	b9e5      	cbnz	r5, 8002da2 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d68:	69a3      	ldr	r3, [r4, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d05c      	beq.n	8002e28 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6e:	4a31      	ldr	r2, [pc, #196]	; (8002e34 <HAL_RCC_OscConfig+0x3bc>)
 8002d70:	6892      	ldr	r2, [r2, #8]
 8002d72:	f002 020c 	and.w	r2, r2, #12
 8002d76:	2a08      	cmp	r2, #8
 8002d78:	d059      	beq.n	8002e2e <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d017      	beq.n	8002dae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <HAL_RCC_OscConfig+0x3c0>)
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe f920 	bl	8000fc8 <HAL_GetTick>
 8002d88:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <HAL_RCC_OscConfig+0x3bc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d92:	d045      	beq.n	8002e20 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe f918 	bl	8000fc8 <HAL_GetTick>
 8002d98:	1b00      	subs	r0, r0, r4
 8002d9a:	2802      	cmp	r0, #2
 8002d9c:	d9f5      	bls.n	8002d8a <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 8002d9e:	2003      	movs	r0, #3
 8002da0:	e043      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da2:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <HAL_RCC_OscConfig+0x3bc>)
 8002da4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002daa:	6413      	str	r3, [r2, #64]	; 0x40
 8002dac:	e7dc      	b.n	8002d68 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 8002dae:	2200      	movs	r2, #0
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_RCC_OscConfig+0x3c0>)
 8002db2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002db4:	f7fe f908 	bl	8000fc8 <HAL_GetTick>
 8002db8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <HAL_RCC_OscConfig+0x3bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002dc2:	d006      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe f900 	bl	8000fc8 <HAL_GetTick>
 8002dc8:	1b40      	subs	r0, r0, r5
 8002dca:	2802      	cmp	r0, #2
 8002dcc:	d9f5      	bls.n	8002dba <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 8002dce:	2003      	movs	r0, #3
 8002dd0:	e02b      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd2:	69e3      	ldr	r3, [r4, #28]
 8002dd4:	6a22      	ldr	r2, [r4, #32]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002dda:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002dde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002de0:	0852      	lsrs	r2, r2, #1
 8002de2:	3a01      	subs	r2, #1
 8002de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002de8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002dea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002dee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002df0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002df4:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <HAL_RCC_OscConfig+0x3bc>)
 8002df6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002df8:	2201      	movs	r2, #1
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCC_OscConfig+0x3c0>)
 8002dfc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dfe:	f7fe f8e3 	bl	8000fc8 <HAL_GetTick>
 8002e02:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_RCC_OscConfig+0x3bc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e0c:	d106      	bne.n	8002e1c <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7fe f8db 	bl	8000fc8 <HAL_GetTick>
 8002e12:	1b00      	subs	r0, r0, r4
 8002e14:	2802      	cmp	r0, #2
 8002e16:	d9f5      	bls.n	8002e04 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 8002e18:	2003      	movs	r0, #3
 8002e1a:	e006      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	e004      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
 8002e20:	2000      	movs	r0, #0
 8002e22:	e002      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 8002e24:	2001      	movs	r0, #1
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 8002e28:	2000      	movs	r0, #0
}
 8002e2a:	b002      	add	sp, #8
 8002e2c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002e2e:	2001      	movs	r0, #1
 8002e30:	e7fb      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800
 8002e38:	42470060 	.word	0x42470060

08002e3c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	d03b      	beq.n	8002eb8 <HAL_SPI_Init+0x7c>
{
 8002e40:	b510      	push	{r4, lr}
 8002e42:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002e48:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d02e      	beq.n	8002eae <HAL_SPI_Init+0x72>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e50:	2302      	movs	r3, #2
 8002e52:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e56:	6822      	ldr	r2, [r4, #0]
 8002e58:	6813      	ldr	r3, [r2, #0]
 8002e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e5e:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e60:	6822      	ldr	r2, [r4, #0]
 8002e62:	6863      	ldr	r3, [r4, #4]
 8002e64:	68a1      	ldr	r1, [r4, #8]
 8002e66:	430b      	orrs	r3, r1
 8002e68:	68e1      	ldr	r1, [r4, #12]
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	6921      	ldr	r1, [r4, #16]
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	6961      	ldr	r1, [r4, #20]
 8002e72:	430b      	orrs	r3, r1
 8002e74:	69a1      	ldr	r1, [r4, #24]
 8002e76:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	69e1      	ldr	r1, [r4, #28]
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	6a21      	ldr	r1, [r4, #32]
 8002e82:	430b      	orrs	r3, r1
 8002e84:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002e86:	430b      	orrs	r3, r1
 8002e88:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002e8a:	6822      	ldr	r2, [r4, #0]
 8002e8c:	8b63      	ldrh	r3, [r4, #26]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	69d3      	ldr	r3, [r2, #28]
 8002e9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ea0:	61d3      	str	r3, [r2, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8002eac:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002eae:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002eb2:	f001 faa9 	bl	8004408 <HAL_SPI_MspInit>
 8002eb6:	e7cb      	b.n	8002e50 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002eb8:	2001      	movs	r0, #1
 8002eba:	4770      	bx	lr

08002ebc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ebc:	4770      	bx	lr
	...

08002ec0 <HAL_SPI_IRQHandler>:
{
 8002ec0:	b510      	push	{r4, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8002ec6:	6802      	ldr	r2, [r0, #0]
 8002ec8:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002eca:	6893      	ldr	r3, [r2, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002ecc:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8002ed0:	2801      	cmp	r0, #1
 8002ed2:	d05c      	beq.n	8002f8e <HAL_SPI_IRQHandler+0xce>
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8002ed4:	f013 0f02 	tst.w	r3, #2
 8002ed8:	d002      	beq.n	8002ee0 <HAL_SPI_IRQHandler+0x20>
 8002eda:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002ede:	d15d      	bne.n	8002f9c <HAL_SPI_IRQHandler+0xdc>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8002ee0:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8002ee4:	d05d      	beq.n	8002fa2 <HAL_SPI_IRQHandler+0xe2>
 8002ee6:	f011 0f20 	tst.w	r1, #32
 8002eea:	d05a      	beq.n	8002fa2 <HAL_SPI_IRQHandler+0xe2>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8002eec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ef0:	d00f      	beq.n	8002f12 <HAL_SPI_IRQHandler+0x52>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ef2:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002ef6:	b2c0      	uxtb	r0, r0
 8002ef8:	2803      	cmp	r0, #3
 8002efa:	d054      	beq.n	8002fa6 <HAL_SPI_IRQHandler+0xe6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002efc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002efe:	f040 0004 	orr.w	r0, r0, #4
 8002f02:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f04:	2000      	movs	r0, #0
 8002f06:	9000      	str	r0, [sp, #0]
 8002f08:	68d0      	ldr	r0, [r2, #12]
 8002f0a:	9000      	str	r0, [sp, #0]
 8002f0c:	6890      	ldr	r0, [r2, #8]
 8002f0e:	9000      	str	r0, [sp, #0]
 8002f10:	9800      	ldr	r0, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8002f12:	f013 0f20 	tst.w	r3, #32
 8002f16:	d00c      	beq.n	8002f32 <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f1a:	f040 0001 	orr.w	r0, r0, #1
 8002f1e:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f20:	2000      	movs	r0, #0
 8002f22:	9002      	str	r0, [sp, #8]
 8002f24:	6890      	ldr	r0, [r2, #8]
 8002f26:	9002      	str	r0, [sp, #8]
 8002f28:	6810      	ldr	r0, [r2, #0]
 8002f2a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002f2e:	6010      	str	r0, [r2, #0]
 8002f30:	9a02      	ldr	r2, [sp, #8]
    if((itflag & SPI_FLAG_FRE) != RESET)
 8002f32:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f36:	d009      	beq.n	8002f4c <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002f38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f3a:	f043 0308 	orr.w	r3, r3, #8
 8002f3e:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f40:	2300      	movs	r3, #0
 8002f42:	9303      	str	r3, [sp, #12]
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	9303      	str	r3, [sp, #12]
 8002f4a:	9b03      	ldr	r3, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f4e:	b343      	cbz	r3, 8002fa2 <HAL_SPI_IRQHandler+0xe2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f50:	6822      	ldr	r2, [r4, #0]
 8002f52:	6853      	ldr	r3, [r2, #4]
 8002f54:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002f58:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f60:	f011 0f03 	tst.w	r1, #3
 8002f64:	d027      	beq.n	8002fb6 <HAL_SPI_IRQHandler+0xf6>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002f66:	6822      	ldr	r2, [r4, #0]
 8002f68:	6853      	ldr	r3, [r2, #4]
 8002f6a:	f023 0303 	bic.w	r3, r3, #3
 8002f6e:	6053      	str	r3, [r2, #4]
        if(hspi->hdmarx != NULL)
 8002f70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002f72:	b123      	cbz	r3, 8002f7e <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f74:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <HAL_SPI_IRQHandler+0x100>)
 8002f76:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8002f78:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002f7a:	f7fe faeb 	bl	8001554 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8002f7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002f80:	b17b      	cbz	r3, 8002fa2 <HAL_SPI_IRQHandler+0xe2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f82:	4a0f      	ldr	r2, [pc, #60]	; (8002fc0 <HAL_SPI_IRQHandler+0x100>)
 8002f84:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8002f86:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002f88:	f7fe fae4 	bl	8001554 <HAL_DMA_Abort_IT>
 8002f8c:	e009      	b.n	8002fa2 <HAL_SPI_IRQHandler+0xe2>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002f8e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002f92:	d09f      	beq.n	8002ed4 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8002f94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f96:	4620      	mov	r0, r4
 8002f98:	4798      	blx	r3
    return;
 8002f9a:	e002      	b.n	8002fa2 <HAL_SPI_IRQHandler+0xe2>
    hspi->TxISR(hspi);
 8002f9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4798      	blx	r3
}
 8002fa2:	b004      	add	sp, #16
 8002fa4:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	68d3      	ldr	r3, [r2, #12]
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	6893      	ldr	r3, [r2, #8]
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	9b01      	ldr	r3, [sp, #4]
        return;
 8002fb4:	e7f5      	b.n	8002fa2 <HAL_SPI_IRQHandler+0xe2>
        HAL_SPI_ErrorCallback(hspi);
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f7ff ff80 	bl	8002ebc <HAL_SPI_ErrorCallback>
 8002fbc:	e7f1      	b.n	8002fa2 <HAL_SPI_IRQHandler+0xe2>
 8002fbe:	bf00      	nop
 8002fc0:	08002fc5 	.word	0x08002fc5

08002fc4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fc6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002fcc:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8002fce:	f7ff ff75 	bl	8002ebc <HAL_SPI_ErrorCallback>
 8002fd2:	bd08      	pop	{r3, pc}

08002fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd6:	6a03      	ldr	r3, [r0, #32]
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fde:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002fe0:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fe2:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fe4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fe8:	680d      	ldr	r5, [r1, #0]
 8002fea:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fec:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ff0:	688d      	ldr	r5, [r1, #8]
 8002ff2:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002ff4:	4d0f      	ldr	r5, [pc, #60]	; (8003034 <TIM_OC1_SetConfig+0x60>)
 8002ff6:	42a8      	cmp	r0, r5
 8002ff8:	d01a      	beq.n	8003030 <TIM_OC1_SetConfig+0x5c>
 8002ffa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ffe:	42a8      	cmp	r0, r5
 8003000:	d014      	beq.n	800302c <TIM_OC1_SetConfig+0x58>
 8003002:	2500      	movs	r5, #0
 8003004:	b15d      	cbz	r5, 800301e <TIM_OC1_SetConfig+0x4a>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003006:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800300a:	68cd      	ldr	r5, [r1, #12]
 800300c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800300e:	f023 0304 	bic.w	r3, r3, #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003012:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003016:	694d      	ldr	r5, [r1, #20]
 8003018:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800301a:	698d      	ldr	r5, [r1, #24]
 800301c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800301e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003020:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003022:	684a      	ldr	r2, [r1, #4]
 8003024:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003026:	6203      	str	r3, [r0, #32]
} 
 8003028:	bc30      	pop	{r4, r5}
 800302a:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800302c:	2501      	movs	r5, #1
 800302e:	e7e9      	b.n	8003004 <TIM_OC1_SetConfig+0x30>
 8003030:	2501      	movs	r5, #1
 8003032:	e7e7      	b.n	8003004 <TIM_OC1_SetConfig+0x30>
 8003034:	40010000 	.word	0x40010000

08003038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003038:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800303a:	6a03      	ldr	r3, [r0, #32]
 800303c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003040:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003044:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003046:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003048:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800304c:	680d      	ldr	r5, [r1, #0]
 800304e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003054:	688d      	ldr	r5, [r1, #8]
 8003056:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800305a:	4d11      	ldr	r5, [pc, #68]	; (80030a0 <TIM_OC3_SetConfig+0x68>)
 800305c:	42a8      	cmp	r0, r5
 800305e:	d01d      	beq.n	800309c <TIM_OC3_SetConfig+0x64>
 8003060:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003064:	42a8      	cmp	r0, r5
 8003066:	d017      	beq.n	8003098 <TIM_OC3_SetConfig+0x60>
 8003068:	2500      	movs	r5, #0
 800306a:	b175      	cbz	r5, 800308a <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800306c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003070:	68cd      	ldr	r5, [r1, #12]
 8003072:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800307a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800307e:	694d      	ldr	r5, [r1, #20]
 8003080:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003084:	698d      	ldr	r5, [r1, #24]
 8003086:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800308c:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800308e:	684a      	ldr	r2, [r1, #4]
 8003090:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003092:	6203      	str	r3, [r0, #32]
}
 8003094:	bc30      	pop	{r4, r5}
 8003096:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003098:	2501      	movs	r5, #1
 800309a:	e7e6      	b.n	800306a <TIM_OC3_SetConfig+0x32>
 800309c:	2501      	movs	r5, #1
 800309e:	e7e4      	b.n	800306a <TIM_OC3_SetConfig+0x32>
 80030a0:	40010000 	.word	0x40010000

080030a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030a6:	6a03      	ldr	r3, [r0, #32]
 80030a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030ac:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80030b0:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030b2:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030b4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b8:	680d      	ldr	r5, [r1, #0]
 80030ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030c2:	688d      	ldr	r5, [r1, #8]
 80030c4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80030c8:	4d0c      	ldr	r5, [pc, #48]	; (80030fc <TIM_OC4_SetConfig+0x58>)
 80030ca:	42a8      	cmp	r0, r5
 80030cc:	d013      	beq.n	80030f6 <TIM_OC4_SetConfig+0x52>
 80030ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030d2:	42a8      	cmp	r0, r5
 80030d4:	d00d      	beq.n	80030f2 <TIM_OC4_SetConfig+0x4e>
 80030d6:	2500      	movs	r5, #0
 80030d8:	b125      	cbz	r5, 80030e4 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030da:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030de:	694d      	ldr	r5, [r1, #20]
 80030e0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e4:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80030e6:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030e8:	684a      	ldr	r2, [r1, #4]
 80030ea:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ec:	6203      	str	r3, [r0, #32]
}
 80030ee:	bc30      	pop	{r4, r5}
 80030f0:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80030f2:	2501      	movs	r5, #1
 80030f4:	e7f0      	b.n	80030d8 <TIM_OC4_SetConfig+0x34>
 80030f6:	2501      	movs	r5, #1
 80030f8:	e7ee      	b.n	80030d8 <TIM_OC4_SetConfig+0x34>
 80030fa:	bf00      	nop
 80030fc:	40010000 	.word	0x40010000

08003100 <TIM_TI2_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003100:	b430      	push	{r4, r5}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003102:	6a04      	ldr	r4, [r0, #32]
 8003104:	f024 0410 	bic.w	r4, r4, #16
 8003108:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800310c:	6a05      	ldr	r5, [r0, #32]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800310e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003112:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003116:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800311a:	031b      	lsls	r3, r3, #12
 800311c:	b29b      	uxth	r3, r3
 800311e:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003120:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003124:	0109      	lsls	r1, r1, #4
 8003126:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 800312a:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800312c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800312e:	6205      	str	r5, [r0, #32]
}
 8003130:	bc30      	pop	{r4, r5}
 8003132:	4770      	bx	lr

08003134 <TIM_TI3_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003134:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003136:	6a04      	ldr	r4, [r0, #32]
 8003138:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800313c:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800313e:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003140:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003142:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8003146:	4322      	orrs	r2, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003148:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	b2db      	uxtb	r3, r3
 8003150:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003152:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003156:	0209      	lsls	r1, r1, #8
 8003158:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 800315c:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800315e:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8003160:	6205      	str	r5, [r0, #32]
}
 8003162:	bc30      	pop	{r4, r5}
 8003164:	4770      	bx	lr

08003166 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003166:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003168:	6a04      	ldr	r4, [r0, #32]
 800316a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800316e:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003170:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003172:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003174:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003178:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800317c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003180:	031b      	lsls	r3, r3, #12
 8003182:	b29b      	uxth	r3, r3
 8003184:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003186:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800318a:	0309      	lsls	r1, r1, #12
 800318c:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8003190:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003192:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003194:	6205      	str	r5, [r0, #32]
}
 8003196:	bc30      	pop	{r4, r5}
 8003198:	4770      	bx	lr
	...

0800319c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800319c:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800319e:	4a45      	ldr	r2, [pc, #276]	; (80032b4 <TIM_Base_SetConfig+0x118>)
 80031a0:	4290      	cmp	r0, r2
 80031a2:	d04a      	beq.n	800323a <TIM_Base_SetConfig+0x9e>
 80031a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80031a8:	d049      	beq.n	800323e <TIM_Base_SetConfig+0xa2>
 80031aa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80031ae:	4290      	cmp	r0, r2
 80031b0:	d047      	beq.n	8003242 <TIM_Base_SetConfig+0xa6>
 80031b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031b6:	4290      	cmp	r0, r2
 80031b8:	d045      	beq.n	8003246 <TIM_Base_SetConfig+0xaa>
 80031ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031be:	4290      	cmp	r0, r2
 80031c0:	d043      	beq.n	800324a <TIM_Base_SetConfig+0xae>
 80031c2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80031c6:	4290      	cmp	r0, r2
 80031c8:	d035      	beq.n	8003236 <TIM_Base_SetConfig+0x9a>
 80031ca:	2200      	movs	r2, #0
 80031cc:	b11a      	cbz	r2, 80031d6 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80031d2:	684a      	ldr	r2, [r1, #4]
 80031d4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80031d6:	4a37      	ldr	r2, [pc, #220]	; (80032b4 <TIM_Base_SetConfig+0x118>)
 80031d8:	4290      	cmp	r0, r2
 80031da:	d03a      	beq.n	8003252 <TIM_Base_SetConfig+0xb6>
 80031dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80031e0:	d050      	beq.n	8003284 <TIM_Base_SetConfig+0xe8>
 80031e2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80031e6:	4290      	cmp	r0, r2
 80031e8:	d04e      	beq.n	8003288 <TIM_Base_SetConfig+0xec>
 80031ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031ee:	4290      	cmp	r0, r2
 80031f0:	d04c      	beq.n	800328c <TIM_Base_SetConfig+0xf0>
 80031f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031f6:	4290      	cmp	r0, r2
 80031f8:	d04a      	beq.n	8003290 <TIM_Base_SetConfig+0xf4>
 80031fa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80031fe:	4290      	cmp	r0, r2
 8003200:	d048      	beq.n	8003294 <TIM_Base_SetConfig+0xf8>
 8003202:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003206:	4290      	cmp	r0, r2
 8003208:	d046      	beq.n	8003298 <TIM_Base_SetConfig+0xfc>
 800320a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800320e:	4290      	cmp	r0, r2
 8003210:	d044      	beq.n	800329c <TIM_Base_SetConfig+0x100>
 8003212:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003216:	4290      	cmp	r0, r2
 8003218:	d042      	beq.n	80032a0 <TIM_Base_SetConfig+0x104>
 800321a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800321e:	4290      	cmp	r0, r2
 8003220:	d040      	beq.n	80032a4 <TIM_Base_SetConfig+0x108>
 8003222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003226:	4290      	cmp	r0, r2
 8003228:	d03e      	beq.n	80032a8 <TIM_Base_SetConfig+0x10c>
 800322a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800322e:	4290      	cmp	r0, r2
 8003230:	d00d      	beq.n	800324e <TIM_Base_SetConfig+0xb2>
 8003232:	2200      	movs	r2, #0
 8003234:	e00e      	b.n	8003254 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003236:	2201      	movs	r2, #1
 8003238:	e7c8      	b.n	80031cc <TIM_Base_SetConfig+0x30>
 800323a:	2201      	movs	r2, #1
 800323c:	e7c6      	b.n	80031cc <TIM_Base_SetConfig+0x30>
 800323e:	2201      	movs	r2, #1
 8003240:	e7c4      	b.n	80031cc <TIM_Base_SetConfig+0x30>
 8003242:	2201      	movs	r2, #1
 8003244:	e7c2      	b.n	80031cc <TIM_Base_SetConfig+0x30>
 8003246:	2201      	movs	r2, #1
 8003248:	e7c0      	b.n	80031cc <TIM_Base_SetConfig+0x30>
 800324a:	2201      	movs	r2, #1
 800324c:	e7be      	b.n	80031cc <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800324e:	2201      	movs	r2, #1
 8003250:	e000      	b.n	8003254 <TIM_Base_SetConfig+0xb8>
 8003252:	2201      	movs	r2, #1
 8003254:	b11a      	cbz	r2, 800325e <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325a:	68ca      	ldr	r2, [r1, #12]
 800325c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800325e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003260:	688b      	ldr	r3, [r1, #8]
 8003262:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003264:	680b      	ldr	r3, [r1, #0]
 8003266:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003268:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <TIM_Base_SetConfig+0x118>)
 800326a:	4298      	cmp	r0, r3
 800326c:	d020      	beq.n	80032b0 <TIM_Base_SetConfig+0x114>
 800326e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003272:	4298      	cmp	r0, r3
 8003274:	d01a      	beq.n	80032ac <TIM_Base_SetConfig+0x110>
 8003276:	2300      	movs	r3, #0
 8003278:	b10b      	cbz	r3, 800327e <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800327a:	690b      	ldr	r3, [r1, #16]
 800327c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800327e:	2301      	movs	r3, #1
 8003280:	6143      	str	r3, [r0, #20]
 8003282:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003284:	2201      	movs	r2, #1
 8003286:	e7e5      	b.n	8003254 <TIM_Base_SetConfig+0xb8>
 8003288:	2201      	movs	r2, #1
 800328a:	e7e3      	b.n	8003254 <TIM_Base_SetConfig+0xb8>
 800328c:	2201      	movs	r2, #1
 800328e:	e7e1      	b.n	8003254 <TIM_Base_SetConfig+0xb8>
 8003290:	2201      	movs	r2, #1
 8003292:	e7df      	b.n	8003254 <TIM_Base_SetConfig+0xb8>
 8003294:	2201      	movs	r2, #1
 8003296:	e7dd      	b.n	8003254 <TIM_Base_SetConfig+0xb8>
 8003298:	2201      	movs	r2, #1
 800329a:	e7db      	b.n	8003254 <TIM_Base_SetConfig+0xb8>
 800329c:	2201      	movs	r2, #1
 800329e:	e7d9      	b.n	8003254 <TIM_Base_SetConfig+0xb8>
 80032a0:	2201      	movs	r2, #1
 80032a2:	e7d7      	b.n	8003254 <TIM_Base_SetConfig+0xb8>
 80032a4:	2201      	movs	r2, #1
 80032a6:	e7d5      	b.n	8003254 <TIM_Base_SetConfig+0xb8>
 80032a8:	2201      	movs	r2, #1
 80032aa:	e7d3      	b.n	8003254 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80032ac:	2301      	movs	r3, #1
 80032ae:	e7e3      	b.n	8003278 <TIM_Base_SetConfig+0xdc>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e7e1      	b.n	8003278 <TIM_Base_SetConfig+0xdc>
 80032b4:	40010000 	.word	0x40010000

080032b8 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 80032b8:	b1a8      	cbz	r0, 80032e6 <HAL_TIM_PWM_Init+0x2e>
{
 80032ba:	b510      	push	{r4, lr}
 80032bc:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80032be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80032c2:	b15b      	cbz	r3, 80032dc <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 80032c4:	2302      	movs	r3, #2
 80032c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80032ca:	1d21      	adds	r1, r4, #4
 80032cc:	6820      	ldr	r0, [r4, #0]
 80032ce:	f7ff ff65 	bl	800319c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80032d8:	2000      	movs	r0, #0
 80032da:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80032dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80032e0:	f001 f932 	bl	8004548 <HAL_TIM_PWM_MspInit>
 80032e4:	e7ee      	b.n	80032c4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80032e6:	2001      	movs	r0, #1
 80032e8:	4770      	bx	lr

080032ea <HAL_TIM_IC_Init>:
  if(htim == NULL)
 80032ea:	b1a8      	cbz	r0, 8003318 <HAL_TIM_IC_Init+0x2e>
{
 80032ec:	b510      	push	{r4, lr}
 80032ee:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80032f0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80032f4:	b15b      	cbz	r3, 800330e <HAL_TIM_IC_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;   
 80032f6:	2302      	movs	r3, #2
 80032f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80032fc:	1d21      	adds	r1, r4, #4
 80032fe:	6820      	ldr	r0, [r4, #0]
 8003300:	f7ff ff4c 	bl	800319c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003304:	2301      	movs	r3, #1
 8003306:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800330a:	2000      	movs	r0, #0
 800330c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800330e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8003312:	f001 f965 	bl	80045e0 <HAL_TIM_IC_MspInit>
 8003316:	e7ee      	b.n	80032f6 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8003318:	2001      	movs	r0, #1
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_Encoder_Init>:
  if(htim == NULL)
 800331c:	2800      	cmp	r0, #0
 800331e:	d047      	beq.n	80033b0 <HAL_TIM_Encoder_Init+0x94>
{
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003322:	4605      	mov	r5, r0
 8003324:	460c      	mov	r4, r1
  if(htim->State == HAL_TIM_STATE_RESET)
 8003326:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03b      	beq.n	80033a6 <HAL_TIM_Encoder_Init+0x8a>
  htim->State= HAL_TIM_STATE_BUSY;   
 800332e:	2302      	movs	r3, #2
 8003330:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003334:	4629      	mov	r1, r5
 8003336:	f851 2b04 	ldr.w	r2, [r1], #4
 800333a:	6893      	ldr	r3, [r2, #8]
 800333c:	f023 0307 	bic.w	r3, r3, #7
 8003340:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8003342:	6828      	ldr	r0, [r5, #0]
 8003344:	f7ff ff2a 	bl	800319c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003348:	6828      	ldr	r0, [r5, #0]
 800334a:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800334c:	6983      	ldr	r3, [r0, #24]
  tmpccer = htim->Instance->CCER;
 800334e:	6a02      	ldr	r2, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003350:	6821      	ldr	r1, [r4, #0]
 8003352:	430e      	orrs	r6, r1
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003358:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800335c:	68a1      	ldr	r1, [r4, #8]
 800335e:	69a7      	ldr	r7, [r4, #24]
 8003360:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8003364:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003366:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800336a:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800336e:	68e1      	ldr	r1, [r4, #12]
 8003370:	69e7      	ldr	r7, [r4, #28]
 8003372:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8003376:	430b      	orrs	r3, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003378:	6927      	ldr	r7, [r4, #16]
 800337a:	6a21      	ldr	r1, [r4, #32]
 800337c:	0309      	lsls	r1, r1, #12
 800337e:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 8003382:	430b      	orrs	r3, r1
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003384:	f022 02aa 	bic.w	r2, r2, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003388:	6861      	ldr	r1, [r4, #4]
 800338a:	6964      	ldr	r4, [r4, #20]
 800338c:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 8003390:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8003392:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8003394:	6829      	ldr	r1, [r5, #0]
 8003396:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	621a      	str	r2, [r3, #32]
  htim->State= HAL_TIM_STATE_READY;
 800339c:	2301      	movs	r3, #1
 800339e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 80033a2:	2000      	movs	r0, #0
 80033a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 80033a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 80033aa:	f001 f8e5 	bl	8004578 <HAL_TIM_Encoder_MspInit>
 80033ae:	e7be      	b.n	800332e <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 80033b0:	2001      	movs	r0, #1
 80033b2:	4770      	bx	lr

080033b4 <TIM_TI1_SetConfig>:
{
 80033b4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b6:	6a04      	ldr	r4, [r0, #32]
 80033b8:	f024 0401 	bic.w	r4, r4, #1
 80033bc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033be:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80033c0:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80033c2:	4e23      	ldr	r6, [pc, #140]	; (8003450 <TIM_TI1_SetConfig+0x9c>)
 80033c4:	42b0      	cmp	r0, r6
 80033c6:	d030      	beq.n	800342a <TIM_TI1_SetConfig+0x76>
 80033c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033cc:	d02f      	beq.n	800342e <TIM_TI1_SetConfig+0x7a>
 80033ce:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80033d2:	42b0      	cmp	r0, r6
 80033d4:	d02d      	beq.n	8003432 <TIM_TI1_SetConfig+0x7e>
 80033d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80033da:	42b0      	cmp	r0, r6
 80033dc:	d02b      	beq.n	8003436 <TIM_TI1_SetConfig+0x82>
 80033de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80033e2:	42b0      	cmp	r0, r6
 80033e4:	d029      	beq.n	800343a <TIM_TI1_SetConfig+0x86>
 80033e6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80033ea:	42b0      	cmp	r0, r6
 80033ec:	d027      	beq.n	800343e <TIM_TI1_SetConfig+0x8a>
 80033ee:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80033f2:	42b0      	cmp	r0, r6
 80033f4:	d025      	beq.n	8003442 <TIM_TI1_SetConfig+0x8e>
 80033f6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80033fa:	42b0      	cmp	r0, r6
 80033fc:	d013      	beq.n	8003426 <TIM_TI1_SetConfig+0x72>
 80033fe:	2600      	movs	r6, #0
 8003400:	bb0e      	cbnz	r6, 8003446 <TIM_TI1_SetConfig+0x92>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003402:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003406:	f042 0201 	orr.w	r2, r2, #1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800340a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	b2db      	uxtb	r3, r3
 8003412:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003414:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003418:	f001 010a 	and.w	r1, r1, #10
 800341c:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800341e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003420:	6201      	str	r1, [r0, #32]
}
 8003422:	bc70      	pop	{r4, r5, r6}
 8003424:	4770      	bx	lr
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003426:	2601      	movs	r6, #1
 8003428:	e7ea      	b.n	8003400 <TIM_TI1_SetConfig+0x4c>
 800342a:	2601      	movs	r6, #1
 800342c:	e7e8      	b.n	8003400 <TIM_TI1_SetConfig+0x4c>
 800342e:	2601      	movs	r6, #1
 8003430:	e7e6      	b.n	8003400 <TIM_TI1_SetConfig+0x4c>
 8003432:	2601      	movs	r6, #1
 8003434:	e7e4      	b.n	8003400 <TIM_TI1_SetConfig+0x4c>
 8003436:	2601      	movs	r6, #1
 8003438:	e7e2      	b.n	8003400 <TIM_TI1_SetConfig+0x4c>
 800343a:	2601      	movs	r6, #1
 800343c:	e7e0      	b.n	8003400 <TIM_TI1_SetConfig+0x4c>
 800343e:	2601      	movs	r6, #1
 8003440:	e7de      	b.n	8003400 <TIM_TI1_SetConfig+0x4c>
 8003442:	2601      	movs	r6, #1
 8003444:	e7dc      	b.n	8003400 <TIM_TI1_SetConfig+0x4c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003446:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800344a:	4322      	orrs	r2, r4
 800344c:	e7dd      	b.n	800340a <TIM_TI1_SetConfig+0x56>
 800344e:	bf00      	nop
 8003450:	40010000 	.word	0x40010000

08003454 <HAL_TIM_IC_ConfigChannel>:
{
 8003454:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003456:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800345a:	2b01      	cmp	r3, #1
 800345c:	d058      	beq.n	8003510 <HAL_TIM_IC_ConfigChannel+0xbc>
 800345e:	460d      	mov	r5, r1
 8003460:	4604      	mov	r4, r0
 8003462:	2301      	movs	r3, #1
 8003464:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	2302      	movs	r3, #2
 800346a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 800346e:	b1da      	cbz	r2, 80034a8 <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 8003470:	2a04      	cmp	r2, #4
 8003472:	d02a      	beq.n	80034ca <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 8003474:	2a08      	cmp	r2, #8
 8003476:	d03a      	beq.n	80034ee <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance, 
 8003478:	68cb      	ldr	r3, [r1, #12]
 800347a:	684a      	ldr	r2, [r1, #4]
 800347c:	6809      	ldr	r1, [r1, #0]
 800347e:	6800      	ldr	r0, [r0, #0]
 8003480:	f7ff fe71 	bl	8003166 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	69d3      	ldr	r3, [r2, #28]
 8003488:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800348c:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800348e:	6822      	ldr	r2, [r4, #0]
 8003490:	69d3      	ldr	r3, [r2, #28]
 8003492:	68a9      	ldr	r1, [r5, #8]
 8003494:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003498:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 800349a:	2301      	movs	r3, #1
 800349c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80034a0:	2000      	movs	r0, #0
 80034a2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK; 
 80034a6:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80034a8:	68cb      	ldr	r3, [r1, #12]
 80034aa:	684a      	ldr	r2, [r1, #4]
 80034ac:	6809      	ldr	r1, [r1, #0]
 80034ae:	6800      	ldr	r0, [r0, #0]
 80034b0:	f7ff ff80 	bl	80033b4 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80034b4:	6822      	ldr	r2, [r4, #0]
 80034b6:	6993      	ldr	r3, [r2, #24]
 80034b8:	f023 030c 	bic.w	r3, r3, #12
 80034bc:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80034be:	6822      	ldr	r2, [r4, #0]
 80034c0:	6993      	ldr	r3, [r2, #24]
 80034c2:	68a9      	ldr	r1, [r5, #8]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6193      	str	r3, [r2, #24]
 80034c8:	e7e7      	b.n	800349a <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance, 
 80034ca:	68cb      	ldr	r3, [r1, #12]
 80034cc:	684a      	ldr	r2, [r1, #4]
 80034ce:	6809      	ldr	r1, [r1, #0]
 80034d0:	6800      	ldr	r0, [r0, #0]
 80034d2:	f7ff fe15 	bl	8003100 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	6993      	ldr	r3, [r2, #24]
 80034da:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80034de:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80034e0:	6822      	ldr	r2, [r4, #0]
 80034e2:	6993      	ldr	r3, [r2, #24]
 80034e4:	68a9      	ldr	r1, [r5, #8]
 80034e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80034ea:	6193      	str	r3, [r2, #24]
 80034ec:	e7d5      	b.n	800349a <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,  
 80034ee:	68cb      	ldr	r3, [r1, #12]
 80034f0:	684a      	ldr	r2, [r1, #4]
 80034f2:	6809      	ldr	r1, [r1, #0]
 80034f4:	6800      	ldr	r0, [r0, #0]
 80034f6:	f7ff fe1d 	bl	8003134 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034fa:	6822      	ldr	r2, [r4, #0]
 80034fc:	69d3      	ldr	r3, [r2, #28]
 80034fe:	f023 030c 	bic.w	r3, r3, #12
 8003502:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003504:	6822      	ldr	r2, [r4, #0]
 8003506:	69d3      	ldr	r3, [r2, #28]
 8003508:	68a9      	ldr	r1, [r5, #8]
 800350a:	430b      	orrs	r3, r1
 800350c:	61d3      	str	r3, [r2, #28]
 800350e:	e7c4      	b.n	800349a <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 8003510:	2002      	movs	r0, #2
}
 8003512:	bd38      	pop	{r3, r4, r5, pc}

08003514 <TIM_OC2_SetConfig>:
{
 8003514:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003516:	6a03      	ldr	r3, [r0, #32]
 8003518:	f023 0310 	bic.w	r3, r3, #16
 800351c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800351e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003520:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003522:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003524:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003528:	680d      	ldr	r5, [r1, #0]
 800352a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800352e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003532:	688d      	ldr	r5, [r1, #8]
 8003534:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003538:	4d11      	ldr	r5, [pc, #68]	; (8003580 <TIM_OC2_SetConfig+0x6c>)
 800353a:	42a8      	cmp	r0, r5
 800353c:	d01d      	beq.n	800357a <TIM_OC2_SetConfig+0x66>
 800353e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003542:	42a8      	cmp	r0, r5
 8003544:	d017      	beq.n	8003576 <TIM_OC2_SetConfig+0x62>
 8003546:	2500      	movs	r5, #0
 8003548:	b175      	cbz	r5, 8003568 <TIM_OC2_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC2NP;
 800354a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800354e:	68cd      	ldr	r5, [r1, #12]
 8003550:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003558:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800355c:	694d      	ldr	r5, [r1, #20]
 800355e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003562:	698d      	ldr	r5, [r1, #24]
 8003564:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003568:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800356a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800356c:	684a      	ldr	r2, [r1, #4]
 800356e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003570:	6203      	str	r3, [r0, #32]
}
 8003572:	bc30      	pop	{r4, r5}
 8003574:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003576:	2501      	movs	r5, #1
 8003578:	e7e6      	b.n	8003548 <TIM_OC2_SetConfig+0x34>
 800357a:	2501      	movs	r5, #1
 800357c:	e7e4      	b.n	8003548 <TIM_OC2_SetConfig+0x34>
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000

08003584 <HAL_TIM_PWM_ConfigChannel>:
{
 8003584:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003586:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800358a:	2b01      	cmp	r3, #1
 800358c:	d066      	beq.n	800365c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800358e:	460d      	mov	r5, r1
 8003590:	4604      	mov	r4, r0
 8003592:	2301      	movs	r3, #1
 8003594:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	2302      	movs	r3, #2
 800359a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 800359e:	2a0c      	cmp	r2, #12
 80035a0:	d81a      	bhi.n	80035d8 <HAL_TIM_PWM_ConfigChannel+0x54>
 80035a2:	e8df f002 	tbb	[pc, r2]
 80035a6:	1907      	.short	0x1907
 80035a8:	19201919 	.word	0x19201919
 80035ac:	19341919 	.word	0x19341919
 80035b0:	1919      	.short	0x1919
 80035b2:	47          	.byte	0x47
 80035b3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b4:	6800      	ldr	r0, [r0, #0]
 80035b6:	f7ff fd0d 	bl	8002fd4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035ba:	6822      	ldr	r2, [r4, #0]
 80035bc:	6993      	ldr	r3, [r2, #24]
 80035be:	f043 0308 	orr.w	r3, r3, #8
 80035c2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c4:	6822      	ldr	r2, [r4, #0]
 80035c6:	6993      	ldr	r3, [r2, #24]
 80035c8:	f023 0304 	bic.w	r3, r3, #4
 80035cc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035ce:	6822      	ldr	r2, [r4, #0]
 80035d0:	6993      	ldr	r3, [r2, #24]
 80035d2:	6929      	ldr	r1, [r5, #16]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	2301      	movs	r3, #1
 80035da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80035de:	2000      	movs	r0, #0
 80035e0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 80035e4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035e6:	6800      	ldr	r0, [r0, #0]
 80035e8:	f7ff ff94 	bl	8003514 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035ec:	6822      	ldr	r2, [r4, #0]
 80035ee:	6993      	ldr	r3, [r2, #24]
 80035f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035f4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	6993      	ldr	r3, [r2, #24]
 80035fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035fe:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003600:	6822      	ldr	r2, [r4, #0]
 8003602:	6993      	ldr	r3, [r2, #24]
 8003604:	6929      	ldr	r1, [r5, #16]
 8003606:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800360a:	6193      	str	r3, [r2, #24]
    break;
 800360c:	e7e4      	b.n	80035d8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800360e:	6800      	ldr	r0, [r0, #0]
 8003610:	f7ff fd12 	bl	8003038 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	69d3      	ldr	r3, [r2, #28]
 8003618:	f043 0308 	orr.w	r3, r3, #8
 800361c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800361e:	6822      	ldr	r2, [r4, #0]
 8003620:	69d3      	ldr	r3, [r2, #28]
 8003622:	f023 0304 	bic.w	r3, r3, #4
 8003626:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003628:	6822      	ldr	r2, [r4, #0]
 800362a:	69d3      	ldr	r3, [r2, #28]
 800362c:	6929      	ldr	r1, [r5, #16]
 800362e:	430b      	orrs	r3, r1
 8003630:	61d3      	str	r3, [r2, #28]
    break;
 8003632:	e7d1      	b.n	80035d8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003634:	6800      	ldr	r0, [r0, #0]
 8003636:	f7ff fd35 	bl	80030a4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	69d3      	ldr	r3, [r2, #28]
 800363e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003642:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003644:	6822      	ldr	r2, [r4, #0]
 8003646:	69d3      	ldr	r3, [r2, #28]
 8003648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800364c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800364e:	6822      	ldr	r2, [r4, #0]
 8003650:	69d3      	ldr	r3, [r2, #28]
 8003652:	6929      	ldr	r1, [r5, #16]
 8003654:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003658:	61d3      	str	r3, [r2, #28]
    break;
 800365a:	e7bd      	b.n	80035d8 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 800365c:	2002      	movs	r0, #2
}
 800365e:	bd38      	pop	{r3, r4, r5, pc}

08003660 <TIM_CCxChannelCmd>:
{
 8003660:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << Channel;
 8003662:	2301      	movs	r3, #1
 8003664:	fa03 f401 	lsl.w	r4, r3, r1
  TIMx->CCER &= ~tmp;
 8003668:	6a03      	ldr	r3, [r0, #32]
 800366a:	ea23 0304 	bic.w	r3, r3, r4
 800366e:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003670:	6a03      	ldr	r3, [r0, #32]
 8003672:	408a      	lsls	r2, r1
 8003674:	4313      	orrs	r3, r2
 8003676:	6203      	str	r3, [r0, #32]
}
 8003678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_TIM_PWM_Start>:
{
 8003680:	b510      	push	{r4, lr}
 8003682:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003684:	2201      	movs	r2, #1
 8003686:	6800      	ldr	r0, [r0, #0]
 8003688:	f7ff ffea 	bl	8003660 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	4a0c      	ldr	r2, [pc, #48]	; (80036c0 <HAL_TIM_PWM_Start+0x40>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d012      	beq.n	80036ba <HAL_TIM_PWM_Start+0x3a>
 8003694:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003698:	4293      	cmp	r3, r2
 800369a:	d00c      	beq.n	80036b6 <HAL_TIM_PWM_Start+0x36>
 800369c:	2200      	movs	r2, #0
 800369e:	b11a      	cbz	r2, 80036a8 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_MOE_ENABLE(htim);
 80036a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80036a8:	6822      	ldr	r2, [r4, #0]
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6013      	str	r3, [r2, #0]
} 
 80036b2:	2000      	movs	r0, #0
 80036b4:	bd10      	pop	{r4, pc}
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80036b6:	2201      	movs	r2, #1
 80036b8:	e7f1      	b.n	800369e <HAL_TIM_PWM_Start+0x1e>
 80036ba:	2201      	movs	r2, #1
 80036bc:	e7ef      	b.n	800369e <HAL_TIM_PWM_Start+0x1e>
 80036be:	bf00      	nop
 80036c0:	40010000 	.word	0x40010000

080036c4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80036c4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d022      	beq.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 80036cc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80036ce:	2201      	movs	r2, #1
 80036d0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	2302      	movs	r3, #2
 80036d6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80036da:	6804      	ldr	r4, [r0, #0]
 80036dc:	6863      	ldr	r3, [r4, #4]
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80036e4:	6804      	ldr	r4, [r0, #0]
 80036e6:	6863      	ldr	r3, [r4, #4]
 80036e8:	680d      	ldr	r5, [r1, #0]
 80036ea:	432b      	orrs	r3, r5
 80036ec:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80036ee:	6804      	ldr	r4, [r0, #0]
 80036f0:	68a3      	ldr	r3, [r4, #8]
 80036f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f6:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80036f8:	6804      	ldr	r4, [r0, #0]
 80036fa:	68a3      	ldr	r3, [r4, #8]
 80036fc:	6849      	ldr	r1, [r1, #4]
 80036fe:	430b      	orrs	r3, r1
 8003700:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003702:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003706:	2300      	movs	r3, #0
 8003708:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 800370c:	4618      	mov	r0, r3
} 
 800370e:	bc30      	pop	{r4, r5}
 8003710:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003712:	2002      	movs	r0, #2
 8003714:	4770      	bx	lr

08003716 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003716:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800371a:	2b01      	cmp	r3, #1
 800371c:	d025      	beq.n	800376a <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800371e:	2301      	movs	r3, #1
 8003720:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003724:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372a:	688a      	ldr	r2, [r1, #8]
 800372c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800372e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003732:	684a      	ldr	r2, [r1, #4]
 8003734:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800373a:	680a      	ldr	r2, [r1, #0]
 800373c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800373e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003742:	690a      	ldr	r2, [r1, #16]
 8003744:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800374a:	694a      	ldr	r2, [r1, #20]
 800374c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800374e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003752:	698a      	ldr	r2, [r1, #24]
 8003754:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003756:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800375a:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800375c:	6802      	ldr	r2, [r0, #0]
 800375e:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8003760:	2300      	movs	r3, #0
 8003762:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8003766:	4618      	mov	r0, r3
 8003768:	4770      	bx	lr
  __HAL_LOCK(htim);
 800376a:	2002      	movs	r0, #2
}
 800376c:	4770      	bx	lr
	...

08003770 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003774:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003776:	6802      	ldr	r2, [r0, #0]
 8003778:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800377a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800377e:	68c1      	ldr	r1, [r0, #12]
 8003780:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003782:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003784:	6801      	ldr	r1, [r0, #0]
 8003786:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003788:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800378c:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003790:	6882      	ldr	r2, [r0, #8]
 8003792:	6900      	ldr	r0, [r0, #16]
 8003794:	4302      	orrs	r2, r0
 8003796:	6960      	ldr	r0, [r4, #20]
 8003798:	4302      	orrs	r2, r0
 800379a:	69e0      	ldr	r0, [r4, #28]
 800379c:	4302      	orrs	r2, r0
 800379e:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80037a0:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80037a2:	6822      	ldr	r2, [r4, #0]
 80037a4:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80037a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80037aa:	69a1      	ldr	r1, [r4, #24]
 80037ac:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80037ae:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b0:	69e3      	ldr	r3, [r4, #28]
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b6:	d062      	beq.n	800387e <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80037b8:	f8d4 8000 	ldr.w	r8, [r4]
 80037bc:	4bbb      	ldr	r3, [pc, #748]	; (8003aac <UART_SetConfig+0x33c>)
 80037be:	4598      	cmp	r8, r3
 80037c0:	f000 811b 	beq.w	80039fa <UART_SetConfig+0x28a>
 80037c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037c8:	4598      	cmp	r8, r3
 80037ca:	f000 8116 	beq.w	80039fa <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80037ce:	f7ff f873 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 80037d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037da:	6865      	ldr	r5, [r4, #4]
 80037dc:	00ad      	lsls	r5, r5, #2
 80037de:	fbb0 f5f5 	udiv	r5, r0, r5
 80037e2:	4fb3      	ldr	r7, [pc, #716]	; (8003ab0 <UART_SetConfig+0x340>)
 80037e4:	fba7 3505 	umull	r3, r5, r7, r5
 80037e8:	096d      	lsrs	r5, r5, #5
 80037ea:	012e      	lsls	r6, r5, #4
 80037ec:	f7ff f864 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 80037f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80037f8:	6865      	ldr	r5, [r4, #4]
 80037fa:	00ad      	lsls	r5, r5, #2
 80037fc:	fbb0 faf5 	udiv	sl, r0, r5
 8003800:	f7ff f85a 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003804:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003808:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800380c:	6865      	ldr	r5, [r4, #4]
 800380e:	00ad      	lsls	r5, r5, #2
 8003810:	fbb0 f5f5 	udiv	r5, r0, r5
 8003814:	fba7 3505 	umull	r3, r5, r7, r5
 8003818:	096d      	lsrs	r5, r5, #5
 800381a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800381e:	fb09 a515 	mls	r5, r9, r5, sl
 8003822:	012d      	lsls	r5, r5, #4
 8003824:	3532      	adds	r5, #50	; 0x32
 8003826:	fba7 3505 	umull	r3, r5, r7, r5
 800382a:	096d      	lsrs	r5, r5, #5
 800382c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8003830:	4435      	add	r5, r6
 8003832:	f7ff f841 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003836:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800383a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800383e:	6866      	ldr	r6, [r4, #4]
 8003840:	00b6      	lsls	r6, r6, #2
 8003842:	fbb0 f6f6 	udiv	r6, r0, r6
 8003846:	f7ff f837 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 800384a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800384e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003852:	6863      	ldr	r3, [r4, #4]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	fbb0 f0f3 	udiv	r0, r0, r3
 800385a:	fba7 3000 	umull	r3, r0, r7, r0
 800385e:	0940      	lsrs	r0, r0, #5
 8003860:	fb09 6910 	mls	r9, r9, r0, r6
 8003864:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8003868:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800386c:	fba7 3709 	umull	r3, r7, r7, r9
 8003870:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8003874:	442f      	add	r7, r5
 8003876:	f8c8 7008 	str.w	r7, [r8, #8]
 800387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800387e:	f8d4 8000 	ldr.w	r8, [r4]
 8003882:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003886:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800388a:	4598      	cmp	r8, r3
 800388c:	d05c      	beq.n	8003948 <UART_SetConfig+0x1d8>
 800388e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003892:	4598      	cmp	r8, r3
 8003894:	d058      	beq.n	8003948 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003896:	f7ff f80f 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 800389a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800389e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038a2:	6865      	ldr	r5, [r4, #4]
 80038a4:	006d      	lsls	r5, r5, #1
 80038a6:	fbb0 f5f5 	udiv	r5, r0, r5
 80038aa:	4f81      	ldr	r7, [pc, #516]	; (8003ab0 <UART_SetConfig+0x340>)
 80038ac:	fba7 3505 	umull	r3, r5, r7, r5
 80038b0:	096d      	lsrs	r5, r5, #5
 80038b2:	012e      	lsls	r6, r5, #4
 80038b4:	f7ff f800 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 80038b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038c0:	6865      	ldr	r5, [r4, #4]
 80038c2:	006d      	lsls	r5, r5, #1
 80038c4:	fbb0 faf5 	udiv	sl, r0, r5
 80038c8:	f7fe fff6 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 80038cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038d4:	6865      	ldr	r5, [r4, #4]
 80038d6:	006d      	lsls	r5, r5, #1
 80038d8:	fbb0 f5f5 	udiv	r5, r0, r5
 80038dc:	fba7 3505 	umull	r3, r5, r7, r5
 80038e0:	096d      	lsrs	r5, r5, #5
 80038e2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80038e6:	fb09 a515 	mls	r5, r9, r5, sl
 80038ea:	00ed      	lsls	r5, r5, #3
 80038ec:	3532      	adds	r5, #50	; 0x32
 80038ee:	fba7 3505 	umull	r3, r5, r7, r5
 80038f2:	096d      	lsrs	r5, r5, #5
 80038f4:	006d      	lsls	r5, r5, #1
 80038f6:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80038fa:	4435      	add	r5, r6
 80038fc:	f7fe ffdc 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003900:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003904:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003908:	6866      	ldr	r6, [r4, #4]
 800390a:	0076      	lsls	r6, r6, #1
 800390c:	fbb0 f6f6 	udiv	r6, r0, r6
 8003910:	f7fe ffd2 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003914:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003918:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fbb0 f3f3 	udiv	r3, r0, r3
 8003924:	fba7 2303 	umull	r2, r3, r7, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	fb09 6913 	mls	r9, r9, r3, r6
 800392e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8003932:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8003936:	fba7 3709 	umull	r3, r7, r7, r9
 800393a:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800393e:	442f      	add	r7, r5
 8003940:	f8c8 7008 	str.w	r7, [r8, #8]
 8003944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003948:	f7fe ffc6 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 800394c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003950:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003954:	6865      	ldr	r5, [r4, #4]
 8003956:	006d      	lsls	r5, r5, #1
 8003958:	fbb0 f5f5 	udiv	r5, r0, r5
 800395c:	4f54      	ldr	r7, [pc, #336]	; (8003ab0 <UART_SetConfig+0x340>)
 800395e:	fba7 3505 	umull	r3, r5, r7, r5
 8003962:	096d      	lsrs	r5, r5, #5
 8003964:	012e      	lsls	r6, r5, #4
 8003966:	f7fe ffb7 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 800396a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800396e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003972:	6865      	ldr	r5, [r4, #4]
 8003974:	006d      	lsls	r5, r5, #1
 8003976:	fbb0 faf5 	udiv	sl, r0, r5
 800397a:	f7fe ffad 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 800397e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003982:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003986:	6865      	ldr	r5, [r4, #4]
 8003988:	006d      	lsls	r5, r5, #1
 800398a:	fbb0 f5f5 	udiv	r5, r0, r5
 800398e:	fba7 3505 	umull	r3, r5, r7, r5
 8003992:	096d      	lsrs	r5, r5, #5
 8003994:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003998:	fb09 a515 	mls	r5, r9, r5, sl
 800399c:	00ed      	lsls	r5, r5, #3
 800399e:	3532      	adds	r5, #50	; 0x32
 80039a0:	fba7 3505 	umull	r3, r5, r7, r5
 80039a4:	096d      	lsrs	r5, r5, #5
 80039a6:	006d      	lsls	r5, r5, #1
 80039a8:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80039ac:	4435      	add	r5, r6
 80039ae:	f7fe ff93 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 80039b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80039b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80039ba:	6866      	ldr	r6, [r4, #4]
 80039bc:	0076      	lsls	r6, r6, #1
 80039be:	fbb0 f6f6 	udiv	r6, r0, r6
 80039c2:	f7fe ff89 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 80039c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80039ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80039ce:	6863      	ldr	r3, [r4, #4]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	fba7 2303 	umull	r2, r3, r7, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	fb09 6913 	mls	r9, r9, r3, r6
 80039e0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80039e4:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80039e8:	fba7 3709 	umull	r3, r7, r7, r9
 80039ec:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80039f0:	442f      	add	r7, r5
 80039f2:	f8c8 7008 	str.w	r7, [r8, #8]
 80039f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80039fa:	f7fe ff6d 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 80039fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a06:	6865      	ldr	r5, [r4, #4]
 8003a08:	00ad      	lsls	r5, r5, #2
 8003a0a:	fbb0 f5f5 	udiv	r5, r0, r5
 8003a0e:	4f28      	ldr	r7, [pc, #160]	; (8003ab0 <UART_SetConfig+0x340>)
 8003a10:	fba7 3505 	umull	r3, r5, r7, r5
 8003a14:	096d      	lsrs	r5, r5, #5
 8003a16:	012e      	lsls	r6, r5, #4
 8003a18:	f7fe ff5e 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 8003a1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a24:	6865      	ldr	r5, [r4, #4]
 8003a26:	00ad      	lsls	r5, r5, #2
 8003a28:	fbb0 faf5 	udiv	sl, r0, r5
 8003a2c:	f7fe ff54 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 8003a30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a38:	6865      	ldr	r5, [r4, #4]
 8003a3a:	00ad      	lsls	r5, r5, #2
 8003a3c:	fbb0 f5f5 	udiv	r5, r0, r5
 8003a40:	fba7 3505 	umull	r3, r5, r7, r5
 8003a44:	096d      	lsrs	r5, r5, #5
 8003a46:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003a4a:	fb09 a515 	mls	r5, r9, r5, sl
 8003a4e:	012d      	lsls	r5, r5, #4
 8003a50:	3532      	adds	r5, #50	; 0x32
 8003a52:	fba7 3505 	umull	r3, r5, r7, r5
 8003a56:	096d      	lsrs	r5, r5, #5
 8003a58:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8003a5c:	4435      	add	r5, r6
 8003a5e:	f7fe ff3b 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 8003a62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a6a:	6866      	ldr	r6, [r4, #4]
 8003a6c:	00b6      	lsls	r6, r6, #2
 8003a6e:	fbb0 f6f6 	udiv	r6, r0, r6
 8003a72:	f7fe ff31 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 8003a76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a7e:	6863      	ldr	r3, [r4, #4]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a86:	fba7 2303 	umull	r2, r3, r7, r3
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	fb09 6913 	mls	r9, r9, r3, r6
 8003a90:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8003a94:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8003a98:	fba7 3709 	umull	r3, r7, r7, r9
 8003a9c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8003aa0:	442f      	add	r7, r5
 8003aa2:	f8c8 7008 	str.w	r7, [r8, #8]
 8003aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aaa:	bf00      	nop
 8003aac:	40011000 	.word	0x40011000
 8003ab0:	51eb851f 	.word	0x51eb851f

08003ab4 <UART_WaitOnFlagUntilTimeout>:
{
 8003ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab8:	4605      	mov	r5, r0
 8003aba:	460f      	mov	r7, r1
 8003abc:	4616      	mov	r6, r2
 8003abe:	4698      	mov	r8, r3
 8003ac0:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003ac2:	682b      	ldr	r3, [r5, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	ea37 0303 	bics.w	r3, r7, r3
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	42b3      	cmp	r3, r6
 8003ad2:	d11e      	bne.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8003ad4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003ad8:	d0f3      	beq.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003ada:	b12c      	cbz	r4, 8003ae8 <UART_WaitOnFlagUntilTimeout+0x34>
 8003adc:	f7fd fa74 	bl	8000fc8 <HAL_GetTick>
 8003ae0:	eba0 0008 	sub.w	r0, r0, r8
 8003ae4:	4284      	cmp	r4, r0
 8003ae6:	d2ec      	bcs.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae8:	682a      	ldr	r2, [r5, #0]
 8003aea:	68d3      	ldr	r3, [r2, #12]
 8003aec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003af0:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af2:	682a      	ldr	r2, [r5, #0]
 8003af4:	6953      	ldr	r3, [r2, #20]
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003afc:	2320      	movs	r3, #32
 8003afe:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b02:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003b06:	2300      	movs	r3, #0
 8003b08:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8003b0c:	2003      	movs	r0, #3
 8003b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8003b12:	2000      	movs	r0, #0
}
 8003b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b18 <HAL_UART_Init>:
  if(huart == NULL)
 8003b18:	b358      	cbz	r0, 8003b72 <HAL_UART_Init+0x5a>
{
 8003b1a:	b510      	push	{r4, lr}
 8003b1c:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8003b1e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003b22:	b30b      	cbz	r3, 8003b68 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003b24:	2324      	movs	r3, #36	; 0x24
 8003b26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003b2a:	6822      	ldr	r2, [r4, #0]
 8003b2c:	68d3      	ldr	r3, [r2, #12]
 8003b2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b32:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003b34:	4620      	mov	r0, r4
 8003b36:	f7ff fe1b 	bl	8003770 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	6913      	ldr	r3, [r2, #16]
 8003b3e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003b42:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	6953      	ldr	r3, [r2, #20]
 8003b48:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003b4c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	68d3      	ldr	r3, [r2, #12]
 8003b52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b56:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b58:	2000      	movs	r0, #0
 8003b5a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003b62:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003b66:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003b68:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003b6c:	f000 fd9e 	bl	80046ac <HAL_UART_MspInit>
 8003b70:	e7d8      	b.n	8003b24 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003b72:	2001      	movs	r0, #1
 8003b74:	4770      	bx	lr

08003b76 <HAL_UART_Transmit>:
{
 8003b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8003b7e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d004      	beq.n	8003b92 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	b002      	add	sp, #8
 8003b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b92:	4604      	mov	r4, r0
 8003b94:	460d      	mov	r5, r1
 8003b96:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 8003b98:	2900      	cmp	r1, #0
 8003b9a:	d055      	beq.n	8003c48 <HAL_UART_Transmit+0xd2>
 8003b9c:	2a00      	cmp	r2, #0
 8003b9e:	d055      	beq.n	8003c4c <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 8003ba0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_UART_Transmit+0x36>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e7ee      	b.n	8003b8a <HAL_UART_Transmit+0x14>
 8003bac:	2301      	movs	r3, #1
 8003bae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bb6:	2321      	movs	r3, #33	; 0x21
 8003bb8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003bbc:	f7fd fa04 	bl	8000fc8 <HAL_GetTick>
 8003bc0:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003bc2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bc6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003bca:	e010      	b.n	8003bee <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bcc:	9600      	str	r6, [sp, #0]
 8003bce:	463b      	mov	r3, r7
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2180      	movs	r1, #128	; 0x80
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f7ff ff6d 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d138      	bne.n	8003c50 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003bde:	6822      	ldr	r2, [r4, #0]
 8003be0:	882b      	ldrh	r3, [r5, #0]
 8003be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be6:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003be8:	6923      	ldr	r3, [r4, #16]
 8003bea:	b9cb      	cbnz	r3, 8003c20 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8003bec:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 8003bee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	b1bb      	cbz	r3, 8003c24 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 8003bf4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bfe:	68a3      	ldr	r3, [r4, #8]
 8003c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c04:	d0e2      	beq.n	8003bcc <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c06:	9600      	str	r6, [sp, #0]
 8003c08:	463b      	mov	r3, r7
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2180      	movs	r1, #128	; 0x80
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7ff ff50 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8003c14:	b9f0      	cbnz	r0, 8003c54 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	782a      	ldrb	r2, [r5, #0]
 8003c1a:	605a      	str	r2, [r3, #4]
 8003c1c:	3501      	adds	r5, #1
 8003c1e:	e7e6      	b.n	8003bee <HAL_UART_Transmit+0x78>
          pData +=1U;
 8003c20:	3501      	adds	r5, #1
 8003c22:	e7e4      	b.n	8003bee <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c24:	9600      	str	r6, [sp, #0]
 8003c26:	463b      	mov	r3, r7
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2140      	movs	r1, #64	; 0x40
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f7ff ff41 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	b108      	cbz	r0, 8003c3a <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e7a7      	b.n	8003b8a <HAL_UART_Transmit+0x14>
      huart->gState = HAL_UART_STATE_READY;
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8003c40:	2200      	movs	r2, #0
 8003c42:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8003c46:	e7a0      	b.n	8003b8a <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e79e      	b.n	8003b8a <HAL_UART_Transmit+0x14>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e79c      	b.n	8003b8a <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e79a      	b.n	8003b8a <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e798      	b.n	8003b8a <HAL_UART_Transmit+0x14>

08003c58 <prj_main>:
#include "THL_Library_Basic.h"
#include "ICM20689_I2C_Tester.h"
#include "THL_SpiTester.h"
#include "PMW3901_Tester.h"
#include "THL_TimerTester.h"
void prj_main(void) {
 8003c58:	b508      	push	{r3, lr}
	testTimer();
 8003c5a:	f000 ff5d 	bl	8004b18 <testTimer>
 8003c5e:	bd08      	pop	{r3, pc}

08003c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c62:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c64:	2400      	movs	r4, #0
 8003c66:	9405      	str	r4, [sp, #20]
 8003c68:	9406      	str	r4, [sp, #24]
 8003c6a:	9407      	str	r4, [sp, #28]
 8003c6c:	9408      	str	r4, [sp, #32]
 8003c6e:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c70:	9401      	str	r4, [sp, #4]
 8003c72:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <MX_GPIO_Init+0xbc>)
 8003c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c76:	f042 0204 	orr.w	r2, r2, #4
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7e:	f002 0204 	and.w	r2, r2, #4
 8003c82:	9201      	str	r2, [sp, #4]
 8003c84:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c86:	9402      	str	r4, [sp, #8]
 8003c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c92:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003c96:	9202      	str	r2, [sp, #8]
 8003c98:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9a:	9403      	str	r4, [sp, #12]
 8003c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca6:	f002 0201 	and.w	r2, r2, #1
 8003caa:	9203      	str	r2, [sp, #12]
 8003cac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cae:	9404      	str	r4, [sp, #16]
 8003cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb2:	f042 0202 	orr.w	r2, r2, #2
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	9304      	str	r3, [sp, #16]
 8003cc0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003cc2:	4f17      	ldr	r7, [pc, #92]	; (8003d20 <MX_GPIO_Init+0xc0>)
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	2120      	movs	r1, #32
 8003cc8:	4638      	mov	r0, r7
 8003cca:	f7fd fe2e 	bl	800192a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SoftCS_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003cce:	4d15      	ldr	r5, [pc, #84]	; (8003d24 <MX_GPIO_Init+0xc4>)
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f7fd fe27 	bl	800192a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ce0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ce2:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <MX_GPIO_Init+0xc8>)
 8003ce4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ce8:	a905      	add	r1, sp, #20
 8003cea:	4810      	ldr	r0, [pc, #64]	; (8003d2c <MX_GPIO_Init+0xcc>)
 8003cec:	f7fd fd34 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003cf0:	2320      	movs	r3, #32
 8003cf2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cf4:	2601      	movs	r6, #1
 8003cf6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfa:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003cfc:	a905      	add	r1, sp, #20
 8003cfe:	4638      	mov	r0, r7
 8003d00:	f7fd fd2a 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SoftCS_Pin PB6 PB7 */
  GPIO_InitStruct.Pin = SPI2_SoftCS_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8003d04:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
 8003d08:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d0a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d10:	a905      	add	r1, sp, #20
 8003d12:	4628      	mov	r0, r5
 8003d14:	f7fd fd20 	bl	8001758 <HAL_GPIO_Init>

}
 8003d18:	b00b      	add	sp, #44	; 0x2c
 8003d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40020000 	.word	0x40020000
 8003d24:	40020400 	.word	0x40020400
 8003d28:	10210000 	.word	0x10210000
 8003d2c:	40020800 	.word	0x40020800

08003d30 <MX_DMA_Init>:
{
 8003d30:	b510      	push	{r4, lr}
 8003d32:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d34:	2400      	movs	r4, #0
 8003d36:	9400      	str	r4, [sp, #0]
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <MX_DMA_Init+0x84>)
 8003d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
 8003d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d48:	9200      	str	r2, [sp, #0]
 8003d4a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d4c:	9401      	str	r4, [sp, #4]
 8003d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d50:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003d60:	4622      	mov	r2, r4
 8003d62:	4621      	mov	r1, r4
 8003d64:	200b      	movs	r0, #11
 8003d66:	f7fd fad3 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003d6a:	200b      	movs	r0, #11
 8003d6c:	f7fd fb02 	bl	8001374 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003d70:	4622      	mov	r2, r4
 8003d72:	4621      	mov	r1, r4
 8003d74:	200e      	movs	r0, #14
 8003d76:	f7fd facb 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003d7a:	200e      	movs	r0, #14
 8003d7c:	f7fd fafa 	bl	8001374 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003d80:	4622      	mov	r2, r4
 8003d82:	4621      	mov	r1, r4
 8003d84:	200f      	movs	r0, #15
 8003d86:	f7fd fac3 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003d8a:	200f      	movs	r0, #15
 8003d8c:	f7fd faf2 	bl	8001374 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003d90:	4622      	mov	r2, r4
 8003d92:	4621      	mov	r1, r4
 8003d94:	202f      	movs	r0, #47	; 0x2f
 8003d96:	f7fd fabb 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003d9a:	202f      	movs	r0, #47	; 0x2f
 8003d9c:	f7fd faea 	bl	8001374 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003da0:	4622      	mov	r2, r4
 8003da2:	4621      	mov	r1, r4
 8003da4:	2038      	movs	r0, #56	; 0x38
 8003da6:	f7fd fab3 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003daa:	2038      	movs	r0, #56	; 0x38
 8003dac:	f7fd fae2 	bl	8001374 <HAL_NVIC_EnableIRQ>
}
 8003db0:	b002      	add	sp, #8
 8003db2:	bd10      	pop	{r4, pc}
 8003db4:	40023800 	.word	0x40023800

08003db8 <MX_USART2_UART_Init>:
{
 8003db8:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8003dba:	4808      	ldr	r0, [pc, #32]	; (8003ddc <MX_USART2_UART_Init+0x24>)
 8003dbc:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <MX_USART2_UART_Init+0x28>)
 8003dbe:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003dc0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003dc4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003dca:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dcc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dce:	220c      	movs	r2, #12
 8003dd0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dd2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dd4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003dd6:	f7ff fe9f 	bl	8003b18 <HAL_UART_Init>
 8003dda:	bd08      	pop	{r3, pc}
 8003ddc:	20000a5c 	.word	0x20000a5c
 8003de0:	40004400 	.word	0x40004400

08003de4 <MX_TIM1_Init>:
{
 8003de4:	b530      	push	{r4, r5, lr}
 8003de6:	b091      	sub	sp, #68	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003de8:	2400      	movs	r4, #0
 8003dea:	940e      	str	r4, [sp, #56]	; 0x38
 8003dec:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dee:	9407      	str	r4, [sp, #28]
 8003df0:	9408      	str	r4, [sp, #32]
 8003df2:	9409      	str	r4, [sp, #36]	; 0x24
 8003df4:	940a      	str	r4, [sp, #40]	; 0x28
 8003df6:	940b      	str	r4, [sp, #44]	; 0x2c
 8003df8:	940c      	str	r4, [sp, #48]	; 0x30
 8003dfa:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dfc:	9400      	str	r4, [sp, #0]
 8003dfe:	9401      	str	r4, [sp, #4]
 8003e00:	9402      	str	r4, [sp, #8]
 8003e02:	9403      	str	r4, [sp, #12]
 8003e04:	9404      	str	r4, [sp, #16]
 8003e06:	9405      	str	r4, [sp, #20]
 8003e08:	9406      	str	r4, [sp, #24]
  htim1.Instance = TIM1;
 8003e0a:	4d1f      	ldr	r5, [pc, #124]	; (8003e88 <MX_TIM1_Init+0xa4>)
 8003e0c:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <MX_TIM1_Init+0xa8>)
 8003e0e:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8003e10:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e12:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 8003e14:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e16:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e18:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f7ff fa4c 	bl	80032b8 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e20:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e22:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e24:	a90e      	add	r1, sp, #56	; 0x38
 8003e26:	4628      	mov	r0, r5
 8003e28:	f7ff fc4c 	bl	80036c4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e2c:	2360      	movs	r3, #96	; 0x60
 8003e2e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8003e30:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e32:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e34:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e36:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e38:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e3a:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e3c:	4622      	mov	r2, r4
 8003e3e:	a907      	add	r1, sp, #28
 8003e40:	4628      	mov	r0, r5
 8003e42:	f7ff fb9f 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e46:	2204      	movs	r2, #4
 8003e48:	a907      	add	r1, sp, #28
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f7ff fb9a 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e50:	2208      	movs	r2, #8
 8003e52:	a907      	add	r1, sp, #28
 8003e54:	4628      	mov	r0, r5
 8003e56:	f7ff fb95 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e5a:	220c      	movs	r2, #12
 8003e5c:	a907      	add	r1, sp, #28
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f7ff fb90 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e64:	9400      	str	r4, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e66:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e68:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e6a:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e6c:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e72:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e74:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e76:	4669      	mov	r1, sp
 8003e78:	4628      	mov	r0, r5
 8003e7a:	f7ff fc4c 	bl	8003716 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8003e7e:	4628      	mov	r0, r5
 8003e80:	f000 fbe6 	bl	8004650 <HAL_TIM_MspPostInit>
}
 8003e84:	b011      	add	sp, #68	; 0x44
 8003e86:	bd30      	pop	{r4, r5, pc}
 8003e88:	200009c0 	.word	0x200009c0
 8003e8c:	40010000 	.word	0x40010000

08003e90 <MX_TIM5_Init>:
{
 8003e90:	b530      	push	{r4, r5, lr}
 8003e92:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e94:	2224      	movs	r2, #36	; 0x24
 8003e96:	2100      	movs	r1, #0
 8003e98:	a803      	add	r0, sp, #12
 8003e9a:	f001 f882 	bl	8004fa2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e9e:	2400      	movs	r4, #0
 8003ea0:	9401      	str	r4, [sp, #4]
 8003ea2:	9402      	str	r4, [sp, #8]
  htim5.Instance = TIM5;
 8003ea4:	4d0b      	ldr	r5, [pc, #44]	; (8003ed4 <MX_TIM5_Init+0x44>)
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <MX_TIM5_Init+0x48>)
 8003ea8:	602b      	str	r3, [r5, #0]
  htim5.Init.Prescaler = 0;
 8003eaa:	606c      	str	r4, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eac:	60ac      	str	r4, [r5, #8]
  htim5.Init.Period = 0;
 8003eae:	60ec      	str	r4, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eb0:	612c      	str	r4, [r5, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003eb6:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003eb8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003eba:	a903      	add	r1, sp, #12
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	f7ff fa2d 	bl	800331c <HAL_TIM_Encoder_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ec2:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ec4:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ec6:	a901      	add	r1, sp, #4
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f7ff fbfb 	bl	80036c4 <HAL_TIMEx_MasterConfigSynchronization>
}
 8003ece:	b00d      	add	sp, #52	; 0x34
 8003ed0:	bd30      	pop	{r4, r5, pc}
 8003ed2:	bf00      	nop
 8003ed4:	200008dc 	.word	0x200008dc
 8003ed8:	40000c00 	.word	0x40000c00

08003edc <MX_I2C1_Init>:
{
 8003edc:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8003ede:	4809      	ldr	r0, [pc, #36]	; (8003f04 <MX_I2C1_Init+0x28>)
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <MX_I2C1_Init+0x2c>)
 8003ee2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <MX_I2C1_Init+0x30>)
 8003ee6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 12;
 8003eec:	220c      	movs	r2, #12
 8003eee:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ef0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ef4:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ef6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ef8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003efa:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003efc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003efe:	f7fd fe6b 	bl	8001bd8 <HAL_I2C_Init>
 8003f02:	bd08      	pop	{r3, pc}
 8003f04:	200007d4 	.word	0x200007d4
 8003f08:	40005400 	.word	0x40005400
 8003f0c:	000186a0 	.word	0x000186a0

08003f10 <MX_I2C2_Init>:
{
 8003f10:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8003f12:	480a      	ldr	r0, [pc, #40]	; (8003f3c <MX_I2C2_Init+0x2c>)
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <MX_I2C2_Init+0x30>)
 8003f16:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 10000;
 8003f18:	f242 7310 	movw	r3, #10000	; 0x2710
 8003f1c:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 6;
 8003f22:	2206      	movs	r2, #6
 8003f24:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f2a:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f2c:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003f2e:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f30:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f32:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003f34:	f7fd fe50 	bl	8001bd8 <HAL_I2C_Init>
 8003f38:	bd08      	pop	{r3, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000828 	.word	0x20000828
 8003f40:	40005800 	.word	0x40005800

08003f44 <MX_SPI2_Init>:
{
 8003f44:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8003f46:	480d      	ldr	r0, [pc, #52]	; (8003f7c <MX_SPI2_Init+0x38>)
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <MX_SPI2_Init+0x3c>)
 8003f4a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f4c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003f50:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f52:	2300      	movs	r3, #0
 8003f54:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f56:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003f58:	2202      	movs	r2, #2
 8003f5a:	6102      	str	r2, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	6142      	str	r2, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f64:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003f66:	2218      	movs	r2, #24
 8003f68:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f6a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f6c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f6e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003f70:	230a      	movs	r3, #10
 8003f72:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003f74:	f7fe ff62 	bl	8002e3c <HAL_SPI_Init>
 8003f78:	bd08      	pop	{r3, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200006e0 	.word	0x200006e0
 8003f80:	40003800 	.word	0x40003800

08003f84 <MX_ADC1_Init>:
{
 8003f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f86:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	9302      	str	r3, [sp, #8]
 8003f90:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8003f92:	4c1c      	ldr	r4, [pc, #112]	; (8004004 <MX_ADC1_Init+0x80>)
 8003f94:	4a1c      	ldr	r2, [pc, #112]	; (8004008 <MX_ADC1_Init+0x84>)
 8003f96:	6022      	str	r2, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003f98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f9c:	6062      	str	r2, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003f9e:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003fa0:	2501      	movs	r5, #1
 8003fa2:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003fa4:	61a5      	str	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003fa6:	6223      	str	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003faa:	4a18      	ldr	r2, [pc, #96]	; (800400c <MX_ADC1_Init+0x88>)
 8003fac:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fae:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 4;
 8003fb0:	2604      	movs	r6, #4
 8003fb2:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003fb4:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003fb6:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f7fd f8a3 	bl	8001104 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 8003fbe:	2306      	movs	r3, #6
 8003fc0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8003fc2:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003fc4:	2703      	movs	r7, #3
 8003fc6:	9702      	str	r7, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003fc8:	4669      	mov	r1, sp
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f7fd f8c4 	bl	8001158 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_7;
 8003fd0:	2507      	movs	r5, #7
 8003fd2:	9500      	str	r5, [sp, #0]
  sConfig.Rank = 2;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003fd8:	4669      	mov	r1, sp
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f7fd f8bc 	bl	8001158 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8003fe4:	9701      	str	r7, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003fe6:	4669      	mov	r1, sp
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f7fd f8b5 	bl	8001158 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003fee:	4b08      	ldr	r3, [pc, #32]	; (8004010 <MX_ADC1_Init+0x8c>)
 8003ff0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8003ff2:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003ff4:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ff6:	4669      	mov	r1, sp
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f7fd f8ad 	bl	8001158 <HAL_ADC_ConfigChannel>
}
 8003ffe:	b005      	add	sp, #20
 8004000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004002:	bf00      	nop
 8004004:	20000918 	.word	0x20000918
 8004008:	40012000 	.word	0x40012000
 800400c:	0f000001 	.word	0x0f000001
 8004010:	10000012 	.word	0x10000012

08004014 <MX_TIM8_Init>:
{
 8004014:	b530      	push	{r4, r5, lr}
 8004016:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004018:	2400      	movs	r4, #0
 800401a:	9404      	str	r4, [sp, #16]
 800401c:	9405      	str	r4, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800401e:	9400      	str	r4, [sp, #0]
 8004020:	9401      	str	r4, [sp, #4]
 8004022:	9402      	str	r4, [sp, #8]
 8004024:	9403      	str	r4, [sp, #12]
  htim8.Instance = TIM8;
 8004026:	4d11      	ldr	r5, [pc, #68]	; (800406c <MX_TIM8_Init+0x58>)
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <MX_TIM8_Init+0x5c>)
 800402a:	602b      	str	r3, [r5, #0]
  htim8.Init.Prescaler = 0;
 800402c:	606c      	str	r4, [r5, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800402e:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 0;
 8004030:	60ec      	str	r4, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004032:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 8004034:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8004036:	4628      	mov	r0, r5
 8004038:	f7ff f957 	bl	80032ea <HAL_TIM_IC_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800403c:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800403e:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004040:	a904      	add	r1, sp, #16
 8004042:	4628      	mov	r0, r5
 8004044:	f7ff fb3e 	bl	80036c4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004048:	9400      	str	r4, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800404a:	2301      	movs	r3, #1
 800404c:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800404e:	9402      	str	r4, [sp, #8]
  sConfigIC.ICFilter = 0;
 8004050:	9403      	str	r4, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004052:	2204      	movs	r2, #4
 8004054:	4669      	mov	r1, sp
 8004056:	4628      	mov	r0, r5
 8004058:	f7ff f9fc 	bl	8003454 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800405c:	2208      	movs	r2, #8
 800405e:	4669      	mov	r1, sp
 8004060:	4628      	mov	r0, r5
 8004062:	f7ff f9f7 	bl	8003454 <HAL_TIM_IC_ConfigChannel>
}
 8004066:	b007      	add	sp, #28
 8004068:	bd30      	pop	{r4, r5, pc}
 800406a:	bf00      	nop
 800406c:	20000738 	.word	0x20000738
 8004070:	40010400 	.word	0x40010400

08004074 <SystemClock_Config>:
{
 8004074:	b530      	push	{r4, r5, lr}
 8004076:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004078:	2234      	movs	r2, #52	; 0x34
 800407a:	2100      	movs	r1, #0
 800407c:	a807      	add	r0, sp, #28
 800407e:	f000 ff90 	bl	8004fa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004082:	2400      	movs	r4, #0
 8004084:	9402      	str	r4, [sp, #8]
 8004086:	9403      	str	r4, [sp, #12]
 8004088:	9404      	str	r4, [sp, #16]
 800408a:	9405      	str	r4, [sp, #20]
 800408c:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	9400      	str	r4, [sp, #0]
 8004090:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <SystemClock_Config+0x94>)
 8004092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004094:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040a4:	9401      	str	r4, [sp, #4]
 80040a6:	4b19      	ldr	r3, [pc, #100]	; (800410c <SystemClock_Config+0x98>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80040ba:	2301      	movs	r3, #1
 80040bc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040c2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040c4:	2502      	movs	r5, #2
 80040c6:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040cc:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80040ce:	2304      	movs	r3, #4
 80040d0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80040d2:	23b4      	movs	r3, #180	; 0xb4
 80040d4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040d6:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80040d8:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80040da:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040dc:	a807      	add	r0, sp, #28
 80040de:	f7fe fccb 	bl	8002a78 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80040e2:	f7fe faf7 	bl	80026d4 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040e6:	230f      	movs	r3, #15
 80040e8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040ea:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040ec:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80040ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80040f2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80040f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040f8:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80040fa:	2105      	movs	r1, #5
 80040fc:	a802      	add	r0, sp, #8
 80040fe:	f7fe fb29 	bl	8002754 <HAL_RCC_ClockConfig>
}
 8004102:	b015      	add	sp, #84	; 0x54
 8004104:	bd30      	pop	{r4, r5, pc}
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	40007000 	.word	0x40007000

08004110 <main>:
{
 8004110:	b508      	push	{r3, lr}
  HAL_Init();
 8004112:	f7fc ff33 	bl	8000f7c <HAL_Init>
  SystemClock_Config();
 8004116:	f7ff ffad 	bl	8004074 <SystemClock_Config>
  MX_GPIO_Init();
 800411a:	f7ff fda1 	bl	8003c60 <MX_GPIO_Init>
  MX_DMA_Init();
 800411e:	f7ff fe07 	bl	8003d30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004122:	f7ff fe49 	bl	8003db8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004126:	f7ff fe5d 	bl	8003de4 <MX_TIM1_Init>
  MX_TIM5_Init();
 800412a:	f7ff feb1 	bl	8003e90 <MX_TIM5_Init>
  MX_I2C1_Init();
 800412e:	f7ff fed5 	bl	8003edc <MX_I2C1_Init>
  MX_I2C2_Init();
 8004132:	f7ff feed 	bl	8003f10 <MX_I2C2_Init>
  MX_SPI2_Init();
 8004136:	f7ff ff05 	bl	8003f44 <MX_SPI2_Init>
  MX_ADC1_Init();
 800413a:	f7ff ff23 	bl	8003f84 <MX_ADC1_Init>
  MX_TIM8_Init();
 800413e:	f7ff ff69 	bl	8004014 <MX_TIM8_Init>
  prj_main();
 8004142:	f7ff fd89 	bl	8003c58 <prj_main>
 8004146:	e7fe      	b.n	8004146 <main+0x36>

08004148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004148:	4770      	bx	lr
	...

0800414c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800414c:	b500      	push	{lr}
 800414e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004150:	2100      	movs	r1, #0
 8004152:	9100      	str	r1, [sp, #0]
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <HAL_MspInit+0x3c>)
 8004156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004158:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
 800415e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004160:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004164:	9200      	str	r2, [sp, #0]
 8004166:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004168:	9101      	str	r1, [sp, #4]
 800416a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800416c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800417c:	2007      	movs	r0, #7
 800417e:	f7fd f8b5 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004182:	b003      	add	sp, #12
 8004184:	f85d fb04 	ldr.w	pc, [sp], #4
 8004188:	40023800 	.word	0x40023800

0800418c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004190:	2300      	movs	r3, #0
 8004192:	9303      	str	r3, [sp, #12]
 8004194:	9304      	str	r3, [sp, #16]
 8004196:	9305      	str	r3, [sp, #20]
 8004198:	9306      	str	r3, [sp, #24]
 800419a:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 800419c:	6802      	ldr	r2, [r0, #0]
 800419e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041a2:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d001      	beq.n	80041ae <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80041aa:	b008      	add	sp, #32
 80041ac:	bd70      	pop	{r4, r5, r6, pc}
 80041ae:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041b0:	2500      	movs	r5, #0
 80041b2:	9500      	str	r5, [sp, #0]
 80041b4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80041b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041be:	645a      	str	r2, [r3, #68]	; 0x44
 80041c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80041c6:	9200      	str	r2, [sp, #0]
 80041c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ca:	9501      	str	r5, [sp, #4]
 80041cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
 80041d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d6:	f002 0201 	and.w	r2, r2, #1
 80041da:	9201      	str	r2, [sp, #4]
 80041dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041de:	9502      	str	r5, [sp, #8]
 80041e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e2:	f042 0202 	orr.w	r2, r2, #2
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	9302      	str	r3, [sp, #8]
 80041f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041f2:	23c0      	movs	r3, #192	; 0xc0
 80041f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041f6:	2603      	movs	r6, #3
 80041f8:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041fa:	a903      	add	r1, sp, #12
 80041fc:	4814      	ldr	r0, [pc, #80]	; (8004250 <HAL_ADC_MspInit+0xc4>)
 80041fe:	f7fd faab 	bl	8001758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004202:	2301      	movs	r3, #1
 8004204:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004206:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004208:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420a:	a903      	add	r1, sp, #12
 800420c:	4811      	ldr	r0, [pc, #68]	; (8004254 <HAL_ADC_MspInit+0xc8>)
 800420e:	f7fd faa3 	bl	8001758 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8004212:	4811      	ldr	r0, [pc, #68]	; (8004258 <HAL_ADC_MspInit+0xcc>)
 8004214:	4b11      	ldr	r3, [pc, #68]	; (800425c <HAL_ADC_MspInit+0xd0>)
 8004216:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004218:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800421a:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800421c:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800421e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004222:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004228:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800422a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800422e:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004234:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004236:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004238:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800423a:	f7fd f923 	bl	8001484 <HAL_DMA_Init>
 800423e:	b918      	cbnz	r0, 8004248 <HAL_ADC_MspInit+0xbc>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_ADC_MspInit+0xcc>)
 8004242:	63a3      	str	r3, [r4, #56]	; 0x38
 8004244:	639c      	str	r4, [r3, #56]	; 0x38
}
 8004246:	e7b0      	b.n	80041aa <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8004248:	f7ff ff7e 	bl	8004148 <Error_Handler>
 800424c:	e7f8      	b.n	8004240 <HAL_ADC_MspInit+0xb4>
 800424e:	bf00      	nop
 8004250:	40020000 	.word	0x40020000
 8004254:	40020400 	.word	0x40020400
 8004258:	20000960 	.word	0x20000960
 800425c:	40026410 	.word	0x40026410

08004260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004264:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004266:	2300      	movs	r3, #0
 8004268:	9305      	str	r3, [sp, #20]
 800426a:	9306      	str	r3, [sp, #24]
 800426c:	9307      	str	r3, [sp, #28]
 800426e:	9308      	str	r3, [sp, #32]
 8004270:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 8004272:	6803      	ldr	r3, [r0, #0]
 8004274:	4a5b      	ldr	r2, [pc, #364]	; (80043e4 <HAL_I2C_MspInit+0x184>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d005      	beq.n	8004286 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 800427a:	4a5b      	ldr	r2, [pc, #364]	; (80043e8 <HAL_I2C_MspInit+0x188>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d06f      	beq.n	8004360 <HAL_I2C_MspInit+0x100>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004280:	b00b      	add	sp, #44	; 0x2c
 8004282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004286:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004288:	2500      	movs	r5, #0
 800428a:	9500      	str	r5, [sp, #0]
 800428c:	4e57      	ldr	r6, [pc, #348]	; (80043ec <HAL_I2C_MspInit+0x18c>)
 800428e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004290:	f043 0302 	orr.w	r3, r3, #2
 8004294:	6333      	str	r3, [r6, #48]	; 0x30
 8004296:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042a6:	2312      	movs	r3, #18
 80042a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042aa:	2303      	movs	r3, #3
 80042ac:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042ae:	2304      	movs	r3, #4
 80042b0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b2:	a905      	add	r1, sp, #20
 80042b4:	484e      	ldr	r0, [pc, #312]	; (80043f0 <HAL_I2C_MspInit+0x190>)
 80042b6:	f7fd fa4f 	bl	8001758 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042ba:	9501      	str	r5, [sp, #4]
 80042bc:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80042be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042c2:	6433      	str	r3, [r6, #64]	; 0x40
 80042c4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80042c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80042ce:	4849      	ldr	r0, [pc, #292]	; (80043f4 <HAL_I2C_MspInit+0x194>)
 80042d0:	4b49      	ldr	r3, [pc, #292]	; (80043f8 <HAL_I2C_MspInit+0x198>)
 80042d2:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80042d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042d8:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042da:	2340      	movs	r3, #64	; 0x40
 80042dc:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042de:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042e4:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042e6:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042e8:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80042ea:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80042ec:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80042f0:	6203      	str	r3, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042f2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80042f4:	f7fd f8c6 	bl	8001484 <HAL_DMA_Init>
 80042f8:	bb60      	cbnz	r0, 8004354 <HAL_I2C_MspInit+0xf4>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80042fa:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <HAL_I2C_MspInit+0x194>)
 80042fc:	6363      	str	r3, [r4, #52]	; 0x34
 80042fe:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004300:	483e      	ldr	r0, [pc, #248]	; (80043fc <HAL_I2C_MspInit+0x19c>)
 8004302:	4b3f      	ldr	r3, [pc, #252]	; (8004400 <HAL_I2C_MspInit+0x1a0>)
 8004304:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800430a:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800430c:	2300      	movs	r3, #0
 800430e:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004310:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004316:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004318:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800431a:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800431c:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800431e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004322:	6202      	str	r2, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004324:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004326:	f7fd f8ad 	bl	8001484 <HAL_DMA_Init>
 800432a:	b9b0      	cbnz	r0, 800435a <HAL_I2C_MspInit+0xfa>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800432c:	4b33      	ldr	r3, [pc, #204]	; (80043fc <HAL_I2C_MspInit+0x19c>)
 800432e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004330:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004332:	2200      	movs	r2, #0
 8004334:	4611      	mov	r1, r2
 8004336:	201f      	movs	r0, #31
 8004338:	f7fc ffea 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800433c:	201f      	movs	r0, #31
 800433e:	f7fd f819 	bl	8001374 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004342:	2200      	movs	r2, #0
 8004344:	4611      	mov	r1, r2
 8004346:	2020      	movs	r0, #32
 8004348:	f7fc ffe2 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800434c:	2020      	movs	r0, #32
 800434e:	f7fd f811 	bl	8001374 <HAL_NVIC_EnableIRQ>
 8004352:	e795      	b.n	8004280 <HAL_I2C_MspInit+0x20>
      Error_Handler();
 8004354:	f7ff fef8 	bl	8004148 <Error_Handler>
 8004358:	e7cf      	b.n	80042fa <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 800435a:	f7ff fef5 	bl	8004148 <Error_Handler>
 800435e:	e7e5      	b.n	800432c <HAL_I2C_MspInit+0xcc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004360:	2500      	movs	r5, #0
 8004362:	9502      	str	r5, [sp, #8]
 8004364:	4c21      	ldr	r4, [pc, #132]	; (80043ec <HAL_I2C_MspInit+0x18c>)
 8004366:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004368:	f043 0302 	orr.w	r3, r3, #2
 800436c:	6323      	str	r3, [r4, #48]	; 0x30
 800436e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	9302      	str	r3, [sp, #8]
 8004376:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004378:	9503      	str	r5, [sp, #12]
 800437a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800437c:	f043 0304 	orr.w	r3, r3, #4
 8004380:	6323      	str	r3, [r4, #48]	; 0x30
 8004382:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	9303      	str	r3, [sp, #12]
 800438a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800438c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004390:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004392:	f04f 0912 	mov.w	r9, #18
 8004396:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800439a:	f04f 0801 	mov.w	r8, #1
 800439e:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a2:	2703      	movs	r7, #3
 80043a4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80043a6:	2604      	movs	r6, #4
 80043a8:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043aa:	a905      	add	r1, sp, #20
 80043ac:	4810      	ldr	r0, [pc, #64]	; (80043f0 <HAL_I2C_MspInit+0x190>)
 80043ae:	f7fd f9d3 	bl	8001758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80043b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043b8:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043bc:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80043c2:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043c4:	a905      	add	r1, sp, #20
 80043c6:	480f      	ldr	r0, [pc, #60]	; (8004404 <HAL_I2C_MspInit+0x1a4>)
 80043c8:	f7fd f9c6 	bl	8001758 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80043cc:	9504      	str	r5, [sp, #16]
 80043ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043d4:	6423      	str	r3, [r4, #64]	; 0x40
 80043d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043dc:	9304      	str	r3, [sp, #16]
 80043de:	9b04      	ldr	r3, [sp, #16]
}
 80043e0:	e74e      	b.n	8004280 <HAL_I2C_MspInit+0x20>
 80043e2:	bf00      	nop
 80043e4:	40005400 	.word	0x40005400
 80043e8:	40005800 	.word	0x40005800
 80043ec:	40023800 	.word	0x40023800
 80043f0:	40020400 	.word	0x40020400
 80043f4:	20000774 	.word	0x20000774
 80043f8:	400260b8 	.word	0x400260b8
 80043fc:	200009fc 	.word	0x200009fc
 8004400:	40026010 	.word	0x40026010
 8004404:	40020800 	.word	0x40020800

08004408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800440c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800440e:	2300      	movs	r3, #0
 8004410:	9303      	str	r3, [sp, #12]
 8004412:	9304      	str	r3, [sp, #16]
 8004414:	9305      	str	r3, [sp, #20]
 8004416:	9306      	str	r3, [sp, #24]
 8004418:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 800441a:	6802      	ldr	r2, [r0, #0]
 800441c:	4b43      	ldr	r3, [pc, #268]	; (800452c <HAL_SPI_MspInit+0x124>)
 800441e:	429a      	cmp	r2, r3
 8004420:	d002      	beq.n	8004428 <HAL_SPI_MspInit+0x20>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004422:	b009      	add	sp, #36	; 0x24
 8004424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004428:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 800442a:	2500      	movs	r5, #0
 800442c:	9500      	str	r5, [sp, #0]
 800442e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004438:	641a      	str	r2, [r3, #64]	; 0x40
 800443a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800443c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004440:	9200      	str	r2, [sp, #0]
 8004442:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004444:	9501      	str	r5, [sp, #4]
 8004446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004448:	f042 0204 	orr.w	r2, r2, #4
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
 800444e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004450:	f002 0204 	and.w	r2, r2, #4
 8004454:	9201      	str	r2, [sp, #4]
 8004456:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004458:	9502      	str	r5, [sp, #8]
 800445a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800445c:	f042 0202 	orr.w	r2, r2, #2
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	9302      	str	r3, [sp, #8]
 800446a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800446c:	2602      	movs	r6, #2
 800446e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004470:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004472:	2703      	movs	r7, #3
 8004474:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004476:	2307      	movs	r3, #7
 8004478:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800447a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8004544 <HAL_SPI_MspInit+0x13c>
 800447e:	a903      	add	r1, sp, #12
 8004480:	4648      	mov	r0, r9
 8004482:	f7fd f969 	bl	8001758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004486:	2304      	movs	r3, #4
 8004488:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800448e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004490:	f04f 0805 	mov.w	r8, #5
 8004494:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004498:	a903      	add	r1, sp, #12
 800449a:	4648      	mov	r0, r9
 800449c:	f7fd f95c 	bl	8001758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80044a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044aa:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044ac:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b0:	a903      	add	r1, sp, #12
 80044b2:	481f      	ldr	r0, [pc, #124]	; (8004530 <HAL_SPI_MspInit+0x128>)
 80044b4:	f7fd f950 	bl	8001758 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80044b8:	481e      	ldr	r0, [pc, #120]	; (8004534 <HAL_SPI_MspInit+0x12c>)
 80044ba:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <HAL_SPI_MspInit+0x130>)
 80044bc:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80044be:	6045      	str	r5, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044c0:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044c2:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044c8:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044ca:	6145      	str	r5, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044cc:	6185      	str	r5, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80044ce:	61c5      	str	r5, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044d0:	6205      	str	r5, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044d2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80044d4:	f7fc ffd6 	bl	8001484 <HAL_DMA_Init>
 80044d8:	bb08      	cbnz	r0, 800451e <HAL_SPI_MspInit+0x116>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80044da:	4b16      	ldr	r3, [pc, #88]	; (8004534 <HAL_SPI_MspInit+0x12c>)
 80044dc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80044de:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80044e0:	4816      	ldr	r0, [pc, #88]	; (800453c <HAL_SPI_MspInit+0x134>)
 80044e2:	4b17      	ldr	r3, [pc, #92]	; (8004540 <HAL_SPI_MspInit+0x138>)
 80044e4:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044ea:	2240      	movs	r2, #64	; 0x40
 80044ec:	6082      	str	r2, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ee:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044f4:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044f6:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044f8:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80044fa:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80044fc:	6203      	str	r3, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044fe:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004500:	f7fc ffc0 	bl	8001484 <HAL_DMA_Init>
 8004504:	b970      	cbnz	r0, 8004524 <HAL_SPI_MspInit+0x11c>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004506:	4b0d      	ldr	r3, [pc, #52]	; (800453c <HAL_SPI_MspInit+0x134>)
 8004508:	64a3      	str	r3, [r4, #72]	; 0x48
 800450a:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800450c:	2200      	movs	r2, #0
 800450e:	4611      	mov	r1, r2
 8004510:	2024      	movs	r0, #36	; 0x24
 8004512:	f7fc fefd 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004516:	2024      	movs	r0, #36	; 0x24
 8004518:	f7fc ff2c 	bl	8001374 <HAL_NVIC_EnableIRQ>
}
 800451c:	e781      	b.n	8004422 <HAL_SPI_MspInit+0x1a>
      Error_Handler();
 800451e:	f7ff fe13 	bl	8004148 <Error_Handler>
 8004522:	e7da      	b.n	80044da <HAL_SPI_MspInit+0xd2>
      Error_Handler();
 8004524:	f7ff fe10 	bl	8004148 <Error_Handler>
 8004528:	e7ed      	b.n	8004506 <HAL_SPI_MspInit+0xfe>
 800452a:	bf00      	nop
 800452c:	40003800 	.word	0x40003800
 8004530:	40020400 	.word	0x40020400
 8004534:	2000087c 	.word	0x2000087c
 8004538:	40026058 	.word	0x40026058
 800453c:	20000a9c 	.word	0x20000a9c
 8004540:	40026070 	.word	0x40026070
 8004544:	40020800 	.word	0x40020800

08004548 <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 8004548:	6802      	ldr	r2, [r0, #0]
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <HAL_TIM_PWM_MspInit+0x28>)
 800454c:	429a      	cmp	r2, r3
 800454e:	d000      	beq.n	8004552 <HAL_TIM_PWM_MspInit+0xa>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004550:	4770      	bx	lr
{
 8004552:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004554:	2300      	movs	r3, #0
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <HAL_TIM_PWM_MspInit+0x2c>)
 800455a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800455c:	f042 0201 	orr.w	r2, r2, #1
 8004560:	645a      	str	r2, [r3, #68]	; 0x44
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	9b01      	ldr	r3, [sp, #4]
}
 800456c:	b002      	add	sp, #8
 800456e:	e7ef      	b.n	8004550 <HAL_TIM_PWM_MspInit+0x8>
 8004570:	40010000 	.word	0x40010000
 8004574:	40023800 	.word	0x40023800

08004578 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004578:	b500      	push	{lr}
 800457a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457c:	2300      	movs	r3, #0
 800457e:	9303      	str	r3, [sp, #12]
 8004580:	9304      	str	r3, [sp, #16]
 8004582:	9305      	str	r3, [sp, #20]
 8004584:	9306      	str	r3, [sp, #24]
 8004586:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM5)
 8004588:	6802      	ldr	r2, [r0, #0]
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <HAL_TIM_Encoder_MspInit+0x60>)
 800458c:	429a      	cmp	r2, r3
 800458e:	d002      	beq.n	8004596 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004590:	b009      	add	sp, #36	; 0x24
 8004592:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004596:	2100      	movs	r1, #0
 8004598:	9101      	str	r1, [sp, #4]
 800459a:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 800459e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a0:	f042 0208 	orr.w	r2, r2, #8
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
 80045a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a8:	f002 0208 	and.w	r2, r2, #8
 80045ac:	9201      	str	r2, [sp, #4]
 80045ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b0:	9102      	str	r1, [sp, #8]
 80045b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	9302      	str	r3, [sp, #8]
 80045c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80045c4:	2303      	movs	r3, #3
 80045c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c8:	2302      	movs	r3, #2
 80045ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80045cc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ce:	a903      	add	r1, sp, #12
 80045d0:	4802      	ldr	r0, [pc, #8]	; (80045dc <HAL_TIM_Encoder_MspInit+0x64>)
 80045d2:	f7fd f8c1 	bl	8001758 <HAL_GPIO_Init>
}
 80045d6:	e7db      	b.n	8004590 <HAL_TIM_Encoder_MspInit+0x18>
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40020000 	.word	0x40020000

080045e0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80045e0:	b500      	push	{lr}
 80045e2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e4:	2300      	movs	r3, #0
 80045e6:	9303      	str	r3, [sp, #12]
 80045e8:	9304      	str	r3, [sp, #16]
 80045ea:	9305      	str	r3, [sp, #20]
 80045ec:	9306      	str	r3, [sp, #24]
 80045ee:	9307      	str	r3, [sp, #28]
  if(htim_ic->Instance==TIM8)
 80045f0:	6802      	ldr	r2, [r0, #0]
 80045f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045f6:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d002      	beq.n	8004604 <HAL_TIM_IC_MspInit+0x24>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80045fe:	b009      	add	sp, #36	; 0x24
 8004600:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004604:	2100      	movs	r1, #0
 8004606:	9101      	str	r1, [sp, #4]
 8004608:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 800460c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800460e:	f042 0202 	orr.w	r2, r2, #2
 8004612:	645a      	str	r2, [r3, #68]	; 0x44
 8004614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004616:	f002 0202 	and.w	r2, r2, #2
 800461a:	9201      	str	r2, [sp, #4]
 800461c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800461e:	9102      	str	r1, [sp, #8]
 8004620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004622:	f042 0204 	orr.w	r2, r2, #4
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	9302      	str	r3, [sp, #8]
 8004630:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004632:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004636:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004638:	2302      	movs	r3, #2
 800463a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800463c:	2303      	movs	r3, #3
 800463e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004640:	a903      	add	r1, sp, #12
 8004642:	4802      	ldr	r0, [pc, #8]	; (800464c <HAL_TIM_IC_MspInit+0x6c>)
 8004644:	f7fd f888 	bl	8001758 <HAL_GPIO_Init>
}
 8004648:	e7d9      	b.n	80045fe <HAL_TIM_IC_MspInit+0x1e>
 800464a:	bf00      	nop
 800464c:	40020800 	.word	0x40020800

08004650 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004650:	b500      	push	{lr}
 8004652:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004654:	2300      	movs	r3, #0
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	9302      	str	r3, [sp, #8]
 800465a:	9303      	str	r3, [sp, #12]
 800465c:	9304      	str	r3, [sp, #16]
 800465e:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8004660:	6802      	ldr	r2, [r0, #0]
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <HAL_TIM_MspPostInit+0x50>)
 8004664:	429a      	cmp	r2, r3
 8004666:	d002      	beq.n	800466e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004668:	b007      	add	sp, #28
 800466a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_TIM_MspPostInit+0x54>)
 8004674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004686:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800468a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468c:	2302      	movs	r3, #2
 800468e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004690:	2301      	movs	r3, #1
 8004692:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004694:	a901      	add	r1, sp, #4
 8004696:	4804      	ldr	r0, [pc, #16]	; (80046a8 <HAL_TIM_MspPostInit+0x58>)
 8004698:	f7fd f85e 	bl	8001758 <HAL_GPIO_Init>
}
 800469c:	e7e4      	b.n	8004668 <HAL_TIM_MspPostInit+0x18>
 800469e:	bf00      	nop
 80046a0:	40010000 	.word	0x40010000
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40020000 	.word	0x40020000

080046ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046ac:	b500      	push	{lr}
 80046ae:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b0:	2300      	movs	r3, #0
 80046b2:	9303      	str	r3, [sp, #12]
 80046b4:	9304      	str	r3, [sp, #16]
 80046b6:	9305      	str	r3, [sp, #20]
 80046b8:	9306      	str	r3, [sp, #24]
 80046ba:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80046bc:	6802      	ldr	r2, [r0, #0]
 80046be:	4b16      	ldr	r3, [pc, #88]	; (8004718 <HAL_UART_MspInit+0x6c>)
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d002      	beq.n	80046ca <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80046c4:	b009      	add	sp, #36	; 0x24
 80046c6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80046ca:	2100      	movs	r1, #0
 80046cc:	9101      	str	r1, [sp, #4]
 80046ce:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80046d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
 80046da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046dc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80046e0:	9201      	str	r2, [sp, #4]
 80046e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e4:	9102      	str	r1, [sp, #8]
 80046e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	631a      	str	r2, [r3, #48]	; 0x30
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	9302      	str	r3, [sp, #8]
 80046f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80046f8:	230c      	movs	r3, #12
 80046fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fc:	2302      	movs	r3, #2
 80046fe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004700:	2301      	movs	r3, #1
 8004702:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004704:	2303      	movs	r3, #3
 8004706:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004708:	2307      	movs	r3, #7
 800470a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470c:	a903      	add	r1, sp, #12
 800470e:	4803      	ldr	r0, [pc, #12]	; (800471c <HAL_UART_MspInit+0x70>)
 8004710:	f7fd f822 	bl	8001758 <HAL_GPIO_Init>
}
 8004714:	e7d6      	b.n	80046c4 <HAL_UART_MspInit+0x18>
 8004716:	bf00      	nop
 8004718:	40004400 	.word	0x40004400
 800471c:	40020000 	.word	0x40020000

08004720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004720:	4770      	bx	lr

08004722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004722:	e7fe      	b.n	8004722 <HardFault_Handler>

08004724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004724:	e7fe      	b.n	8004724 <MemManage_Handler>

08004726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004726:	e7fe      	b.n	8004726 <BusFault_Handler>

08004728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004728:	e7fe      	b.n	8004728 <UsageFault_Handler>

0800472a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800472a:	4770      	bx	lr

0800472c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800472c:	4770      	bx	lr

0800472e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800472e:	4770      	bx	lr

08004730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004730:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004732:	f7fc fc3d 	bl	8000fb0 <HAL_IncTick>
 8004736:	bd08      	pop	{r3, pc}

08004738 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004738:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800473a:	4802      	ldr	r0, [pc, #8]	; (8004744 <DMA1_Stream0_IRQHandler+0xc>)
 800473c:	f7fc ff1e 	bl	800157c <HAL_DMA_IRQHandler>
 8004740:	bd08      	pop	{r3, pc}
 8004742:	bf00      	nop
 8004744:	200009fc 	.word	0x200009fc

08004748 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004748:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800474a:	4802      	ldr	r0, [pc, #8]	; (8004754 <DMA1_Stream3_IRQHandler+0xc>)
 800474c:	f7fc ff16 	bl	800157c <HAL_DMA_IRQHandler>
 8004750:	bd08      	pop	{r3, pc}
 8004752:	bf00      	nop
 8004754:	2000087c 	.word	0x2000087c

08004758 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004758:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800475a:	4802      	ldr	r0, [pc, #8]	; (8004764 <DMA1_Stream4_IRQHandler+0xc>)
 800475c:	f7fc ff0e 	bl	800157c <HAL_DMA_IRQHandler>
 8004760:	bd08      	pop	{r3, pc}
 8004762:	bf00      	nop
 8004764:	20000a9c 	.word	0x20000a9c

08004768 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004768:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800476a:	4802      	ldr	r0, [pc, #8]	; (8004774 <I2C1_EV_IRQHandler+0xc>)
 800476c:	f7fd fe64 	bl	8002438 <HAL_I2C_EV_IRQHandler>
 8004770:	bd08      	pop	{r3, pc}
 8004772:	bf00      	nop
 8004774:	200007d4 	.word	0x200007d4

08004778 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004778:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800477a:	4802      	ldr	r0, [pc, #8]	; (8004784 <I2C1_ER_IRQHandler+0xc>)
 800477c:	f7fd ff10 	bl	80025a0 <HAL_I2C_ER_IRQHandler>
 8004780:	bd08      	pop	{r3, pc}
 8004782:	bf00      	nop
 8004784:	200007d4 	.word	0x200007d4

08004788 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004788:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800478a:	4802      	ldr	r0, [pc, #8]	; (8004794 <SPI2_IRQHandler+0xc>)
 800478c:	f7fe fb98 	bl	8002ec0 <HAL_SPI_IRQHandler>
 8004790:	bd08      	pop	{r3, pc}
 8004792:	bf00      	nop
 8004794:	200006e0 	.word	0x200006e0

08004798 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004798:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800479a:	4802      	ldr	r0, [pc, #8]	; (80047a4 <DMA1_Stream7_IRQHandler+0xc>)
 800479c:	f7fc feee 	bl	800157c <HAL_DMA_IRQHandler>
 80047a0:	bd08      	pop	{r3, pc}
 80047a2:	bf00      	nop
 80047a4:	20000774 	.word	0x20000774

080047a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80047a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80047aa:	4802      	ldr	r0, [pc, #8]	; (80047b4 <DMA2_Stream0_IRQHandler+0xc>)
 80047ac:	f7fc fee6 	bl	800157c <HAL_DMA_IRQHandler>
 80047b0:	bd08      	pop	{r3, pc}
 80047b2:	bf00      	nop
 80047b4:	20000960 	.word	0x20000960

080047b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047b8:	490f      	ldr	r1, [pc, #60]	; (80047f8 <SystemInit+0x40>)
 80047ba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80047be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80047c6:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <SystemInit+0x44>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047d0:	2000      	movs	r0, #0
 80047d2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80047da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047de:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80047e0:	4a07      	ldr	r2, [pc, #28]	; (8004800 <SystemInit+0x48>)
 80047e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047ea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80047ec:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047f2:	608b      	str	r3, [r1, #8]
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	e000ed00 	.word	0xe000ed00
 80047fc:	40023800 	.word	0x40023800
 8004800:	24003010 	.word	0x24003010

08004804 <Exception_Handler>:

void testI2c(void) {
	testTwoNucleoBoardComm();
}

void Exception_Handler(const char* str) {
 8004804:	b508      	push	{r3, lr}
	printf_u("\r%s\r\n",str);
 8004806:	4601      	mov	r1, r0
 8004808:	4801      	ldr	r0, [pc, #4]	; (8004810 <Exception_Handler+0xc>)
 800480a:	f000 fb57 	bl	8004ebc <printf_u>
 800480e:	bd08      	pop	{r3, pc}
 8004810:	08007db0 	.word	0x08007db0

08004814 <setup>:
GPIO buttonMem;
GPIO* button;



static void setup(void) {
 8004814:	b508      	push	{r3, lr}
	system_console = newMainUSART(&huart2);
 8004816:	480c      	ldr	r0, [pc, #48]	; (8004848 <setup+0x34>)
 8004818:	f000 fb10 	bl	8004e3c <newMainUSART>
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <setup+0x38>)
 800481e:	6018      	str	r0, [r3, #0]
	led = newGPIO(&ledMem, LD2_GPIO_Port, LD2_Pin);
 8004820:	2220      	movs	r2, #32
 8004822:	490b      	ldr	r1, [pc, #44]	; (8004850 <setup+0x3c>)
 8004824:	480b      	ldr	r0, [pc, #44]	; (8004854 <setup+0x40>)
 8004826:	f000 f97c 	bl	8004b22 <newGPIO>
 800482a:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <setup+0x44>)
 800482c:	6018      	str	r0, [r3, #0]
	button = newGPIO(&buttonMem, B1_GPIO_Port, B1_Pin);
 800482e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004832:	490a      	ldr	r1, [pc, #40]	; (800485c <setup+0x48>)
 8004834:	480a      	ldr	r0, [pc, #40]	; (8004860 <setup+0x4c>)
 8004836:	f000 f974 	bl	8004b22 <newGPIO>
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <setup+0x50>)
 800483c:	6018      	str	r0, [r3, #0]
	printf_u("\rTimer Testing\r\n");
 800483e:	480a      	ldr	r0, [pc, #40]	; (8004868 <setup+0x54>)
 8004840:	f000 fb3c 	bl	8004ebc <printf_u>
 8004844:	bd08      	pop	{r3, pc}
 8004846:	bf00      	nop
 8004848:	20000a5c 	.word	0x20000a5c
 800484c:	20000d10 	.word	0x20000d10
 8004850:	40020000 	.word	0x40020000
 8004854:	20000b00 	.word	0x20000b00
 8004858:	20000b3c 	.word	0x20000b3c
 800485c:	40020800 	.word	0x40020800
 8004860:	20000b40 	.word	0x20000b40
 8004864:	20000b38 	.word	0x20000b38
 8004868:	08007db8 	.word	0x08007db8

0800486c <testPWM>:
}




static void testPWM(void) {
 800486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004870:	b085      	sub	sp, #20
	timer1 = newTIM(&timer1Mem, &htim1);
 8004872:	499c      	ldr	r1, [pc, #624]	; (8004ae4 <testPWM+0x278>)
 8004874:	489c      	ldr	r0, [pc, #624]	; (8004ae8 <testPWM+0x27c>)
 8004876:	f000 f9f3 	bl	8004c60 <newTIM>
 800487a:	4c9c      	ldr	r4, [pc, #624]	; (8004aec <testPWM+0x280>)
 800487c:	6020      	str	r0, [r4, #0]
	initTIM_PWM(timer1, 10000, 10000); //max_cnt = 10,000; pwm_freq = 10k;
 800487e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004882:	4611      	mov	r1, r2
 8004884:	f000 fa7a 	bl	8004d7c <initTIM_PWM>
	timPwmGenBegin(timer1, TIM_CH1);
 8004888:	2100      	movs	r1, #0
 800488a:	6820      	ldr	r0, [r4, #0]
 800488c:	f000 fa7e 	bl	8004d8c <timPwmGenBegin>
	timPwmGenBegin(timer1, TIM_CH2);
 8004890:	2104      	movs	r1, #4
 8004892:	6820      	ldr	r0, [r4, #0]
 8004894:	f000 fa7a 	bl	8004d8c <timPwmGenBegin>
	timPwmGenBegin(timer1, TIM_CH3);
 8004898:	2108      	movs	r1, #8
 800489a:	6820      	ldr	r0, [r4, #0]
 800489c:	f000 fa76 	bl	8004d8c <timPwmGenBegin>
	timPwmGenBegin(timer1, TIM_CH4);
 80048a0:	210c      	movs	r1, #12
 80048a2:	6820      	ldr	r0, [r4, #0]
 80048a4:	f000 fa72 	bl	8004d8c <timPwmGenBegin>

	gpioWrite(led, High);
 80048a8:	2101      	movs	r1, #1
 80048aa:	4b91      	ldr	r3, [pc, #580]	; (8004af0 <testPWM+0x284>)
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	f000 f953 	bl	8004b58 <gpioWrite>
	while(gpioRead(button));
 80048b2:	4b90      	ldr	r3, [pc, #576]	; (8004af4 <testPWM+0x288>)
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	f000 f937 	bl	8004b28 <gpioRead>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d1f9      	bne.n	80048b2 <testPWM+0x46>
	gpioWrite(led, Low);
 80048be:	4c8c      	ldr	r4, [pc, #560]	; (8004af0 <testPWM+0x284>)
 80048c0:	2100      	movs	r1, #0
 80048c2:	6820      	ldr	r0, [r4, #0]
 80048c4:	f000 f948 	bl	8004b58 <gpioWrite>
	delay(500);
 80048c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048cc:	f000 f9bc 	bl	8004c48 <delay>
	gpioWrite(led, High);
 80048d0:	2101      	movs	r1, #1
 80048d2:	6820      	ldr	r0, [r4, #0]
 80048d4:	f000 f940 	bl	8004b58 <gpioWrite>

	double dutyCircle = 10.00f, increm = 5.25f, gap = 10.00f, iter = 0.00f;
 80048d8:	2600      	movs	r6, #0
 80048da:	2700      	movs	r7, #0
 80048dc:	e035      	b.n	800494a <testPWM+0xde>

		if(!gpioRead(button)) {

			//Altering freq real-time
			if((uint32_t)iter % 2 == 1) timSetPwmFrequency(timer1, 10000, 10000);
			else timSetPwmFrequency(timer1, 10000, 100);
 80048de:	2264      	movs	r2, #100	; 0x64
 80048e0:	f242 7110 	movw	r1, #10000	; 0x2710
 80048e4:	4b81      	ldr	r3, [pc, #516]	; (8004aec <testPWM+0x280>)
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	f000 f9f2 	bl	8004cd0 <timSetPwmFrequency>
 80048ec:	e041      	b.n	8004972 <testPWM+0x106>
			if(dc2 > 100.00f) dc2 = dc2 - ((uint32_t)(dc2 / 100.00f) * 100.00f);
			if(dc3 > 100.00f) dc3 = dc3 - ((uint32_t)(dc3 / 100.00f) * 100.00f);
			if(dc4 > 100.00f) dc4 = dc4 - ((uint32_t)(dc4 / 100.00f) * 100.00f);


			timPwmWrite(timer1, TIM_CH1, dc1);
 80048ee:	4c7f      	ldr	r4, [pc, #508]	; (8004aec <testPWM+0x280>)
 80048f0:	ed9d 0b00 	vldr	d0, [sp]
 80048f4:	2100      	movs	r1, #0
 80048f6:	6820      	ldr	r0, [r4, #0]
 80048f8:	f000 fa54 	bl	8004da4 <timPwmWrite>
			timPwmWrite(timer1, TIM_CH2, dc2);
 80048fc:	ec49 8b10 	vmov	d0, r8, r9
 8004900:	2104      	movs	r1, #4
 8004902:	6820      	ldr	r0, [r4, #0]
 8004904:	f000 fa4e 	bl	8004da4 <timPwmWrite>
			timPwmWrite(timer1, TIM_CH3, dc3);
 8004908:	ec4b ab10 	vmov	d0, sl, fp
 800490c:	2108      	movs	r1, #8
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	f000 fa48 	bl	8004da4 <timPwmWrite>
			timPwmWrite(timer1, TIM_CH4, dc4);
 8004914:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004918:	210c      	movs	r1, #12
 800491a:	6820      	ldr	r0, [r4, #0]
 800491c:	f000 fa42 	bl	8004da4 <timPwmWrite>

			iter += 1.00f;
 8004920:	2200      	movs	r2, #0
 8004922:	4b75      	ldr	r3, [pc, #468]	; (8004af8 <testPWM+0x28c>)
 8004924:	4630      	mov	r0, r6
 8004926:	4639      	mov	r1, r7
 8004928:	f7fb fcd0 	bl	80002cc <__adddf3>
 800492c:	4606      	mov	r6, r0
 800492e:	460f      	mov	r7, r1
			gpioWrite(led, Low);
 8004930:	4c6f      	ldr	r4, [pc, #444]	; (8004af0 <testPWM+0x284>)
 8004932:	2100      	movs	r1, #0
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	f000 f90f 	bl	8004b58 <gpioWrite>
			delay(1000);
 800493a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800493e:	f000 f983 	bl	8004c48 <delay>
			gpioWrite(led, High);
 8004942:	2101      	movs	r1, #1
 8004944:	6820      	ldr	r0, [r4, #0]
 8004946:	f000 f907 	bl	8004b58 <gpioWrite>
		if(!gpioRead(button)) {
 800494a:	4b6a      	ldr	r3, [pc, #424]	; (8004af4 <testPWM+0x288>)
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	f000 f8eb 	bl	8004b28 <gpioRead>
 8004952:	2800      	cmp	r0, #0
 8004954:	d1f9      	bne.n	800494a <testPWM+0xde>
			if((uint32_t)iter % 2 == 1) timSetPwmFrequency(timer1, 10000, 10000);
 8004956:	4630      	mov	r0, r6
 8004958:	4639      	mov	r1, r7
 800495a:	f7fc f941 	bl	8000be0 <__aeabi_d2uiz>
 800495e:	f010 0f01 	tst.w	r0, #1
 8004962:	d0bc      	beq.n	80048de <testPWM+0x72>
 8004964:	f242 7210 	movw	r2, #10000	; 0x2710
 8004968:	4611      	mov	r1, r2
 800496a:	4b60      	ldr	r3, [pc, #384]	; (8004aec <testPWM+0x280>)
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	f000 f9af 	bl	8004cd0 <timSetPwmFrequency>
			dc1 = dutyCircle + 0.00f * gap + iter * increm;
 8004972:	2200      	movs	r2, #0
 8004974:	4b61      	ldr	r3, [pc, #388]	; (8004afc <testPWM+0x290>)
 8004976:	4630      	mov	r0, r6
 8004978:	4639      	mov	r1, r7
 800497a:	f7fb fe59 	bl	8000630 <__aeabi_dmul>
 800497e:	4604      	mov	r4, r0
 8004980:	460d      	mov	r5, r1
 8004982:	2200      	movs	r2, #0
 8004984:	4b5e      	ldr	r3, [pc, #376]	; (8004b00 <testPWM+0x294>)
 8004986:	f7fb fca1 	bl	80002cc <__adddf3>
 800498a:	e9cd 0100 	strd	r0, r1, [sp]
			dc2 = dutyCircle + 1.00f * gap + iter * increm;
 800498e:	2200      	movs	r2, #0
 8004990:	4b5c      	ldr	r3, [pc, #368]	; (8004b04 <testPWM+0x298>)
 8004992:	4620      	mov	r0, r4
 8004994:	4629      	mov	r1, r5
 8004996:	f7fb fc99 	bl	80002cc <__adddf3>
 800499a:	4680      	mov	r8, r0
 800499c:	4689      	mov	r9, r1
			dc3 = dutyCircle + 2.00f * gap + iter * increm;
 800499e:	2200      	movs	r2, #0
 80049a0:	4b59      	ldr	r3, [pc, #356]	; (8004b08 <testPWM+0x29c>)
 80049a2:	4620      	mov	r0, r4
 80049a4:	4629      	mov	r1, r5
 80049a6:	f7fb fc91 	bl	80002cc <__adddf3>
 80049aa:	4682      	mov	sl, r0
 80049ac:	468b      	mov	fp, r1
			dc4 = dutyCircle + 3.00f * gap + iter * increm;
 80049ae:	2200      	movs	r2, #0
 80049b0:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <testPWM+0x2a0>)
 80049b2:	4620      	mov	r0, r4
 80049b4:	4629      	mov	r1, r5
 80049b6:	f7fb fc89 	bl	80002cc <__adddf3>
 80049ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
			if(dc1 > 100.00f) dc1 = dc1 - ((uint32_t)(dc1 / 100.00f) * 100.00f);
 80049be:	2200      	movs	r2, #0
 80049c0:	4b53      	ldr	r3, [pc, #332]	; (8004b10 <testPWM+0x2a4>)
 80049c2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80049c6:	4620      	mov	r0, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	f7fc f8c1 	bl	8000b50 <__aeabi_dcmpgt>
 80049ce:	b1d8      	cbz	r0, 8004a08 <testPWM+0x19c>
 80049d0:	2200      	movs	r2, #0
 80049d2:	4b4f      	ldr	r3, [pc, #316]	; (8004b10 <testPWM+0x2a4>)
 80049d4:	4620      	mov	r0, r4
 80049d6:	4629      	mov	r1, r5
 80049d8:	f7fb ff54 	bl	8000884 <__aeabi_ddiv>
 80049dc:	f7fc f900 	bl	8000be0 <__aeabi_d2uiz>
 80049e0:	ee07 0a90 	vmov	s15, r0
 80049e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049e8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8004b14 <testPWM+0x2a8>
 80049ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f0:	ee17 0a90 	vmov	r0, s15
 80049f4:	f7fb fdc8 	bl	8000588 <__aeabi_f2d>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4620      	mov	r0, r4
 80049fe:	4629      	mov	r1, r5
 8004a00:	f7fb fc62 	bl	80002c8 <__aeabi_dsub>
 8004a04:	e9cd 0100 	strd	r0, r1, [sp]
			if(dc2 > 100.00f) dc2 = dc2 - ((uint32_t)(dc2 / 100.00f) * 100.00f);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4b41      	ldr	r3, [pc, #260]	; (8004b10 <testPWM+0x2a4>)
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	4649      	mov	r1, r9
 8004a10:	f7fc f89e 	bl	8000b50 <__aeabi_dcmpgt>
 8004a14:	b1d8      	cbz	r0, 8004a4e <testPWM+0x1e2>
 8004a16:	2200      	movs	r2, #0
 8004a18:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <testPWM+0x2a4>)
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	f7fb ff31 	bl	8000884 <__aeabi_ddiv>
 8004a22:	f7fc f8dd 	bl	8000be0 <__aeabi_d2uiz>
 8004a26:	ee07 0a90 	vmov	s15, r0
 8004a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a2e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004b14 <testPWM+0x2a8>
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	ee17 0a90 	vmov	r0, s15
 8004a3a:	f7fb fda5 	bl	8000588 <__aeabi_f2d>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4640      	mov	r0, r8
 8004a44:	4649      	mov	r1, r9
 8004a46:	f7fb fc3f 	bl	80002c8 <__aeabi_dsub>
 8004a4a:	4680      	mov	r8, r0
 8004a4c:	4689      	mov	r9, r1
			if(dc3 > 100.00f) dc3 = dc3 - ((uint32_t)(dc3 / 100.00f) * 100.00f);
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4b2f      	ldr	r3, [pc, #188]	; (8004b10 <testPWM+0x2a4>)
 8004a52:	4650      	mov	r0, sl
 8004a54:	4659      	mov	r1, fp
 8004a56:	f7fc f87b 	bl	8000b50 <__aeabi_dcmpgt>
 8004a5a:	b1d8      	cbz	r0, 8004a94 <testPWM+0x228>
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <testPWM+0x2a4>)
 8004a60:	4650      	mov	r0, sl
 8004a62:	4659      	mov	r1, fp
 8004a64:	f7fb ff0e 	bl	8000884 <__aeabi_ddiv>
 8004a68:	f7fc f8ba 	bl	8000be0 <__aeabi_d2uiz>
 8004a6c:	ee07 0a90 	vmov	s15, r0
 8004a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a74:	eddf 7a27 	vldr	s15, [pc, #156]	; 8004b14 <testPWM+0x2a8>
 8004a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7c:	ee17 0a90 	vmov	r0, s15
 8004a80:	f7fb fd82 	bl	8000588 <__aeabi_f2d>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4650      	mov	r0, sl
 8004a8a:	4659      	mov	r1, fp
 8004a8c:	f7fb fc1c 	bl	80002c8 <__aeabi_dsub>
 8004a90:	4682      	mov	sl, r0
 8004a92:	468b      	mov	fp, r1
			if(dc4 > 100.00f) dc4 = dc4 - ((uint32_t)(dc4 / 100.00f) * 100.00f);
 8004a94:	2200      	movs	r2, #0
 8004a96:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <testPWM+0x2a4>)
 8004a98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	f7fc f856 	bl	8000b50 <__aeabi_dcmpgt>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	f43f af22 	beq.w	80048ee <testPWM+0x82>
 8004aaa:	2200      	movs	r2, #0
 8004aac:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <testPWM+0x2a4>)
 8004aae:	4620      	mov	r0, r4
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	f7fb fee7 	bl	8000884 <__aeabi_ddiv>
 8004ab6:	f7fc f893 	bl	8000be0 <__aeabi_d2uiz>
 8004aba:	ee07 0a90 	vmov	s15, r0
 8004abe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ac2:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004b14 <testPWM+0x2a8>
 8004ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aca:	ee17 0a90 	vmov	r0, s15
 8004ace:	f7fb fd5b 	bl	8000588 <__aeabi_f2d>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	4629      	mov	r1, r5
 8004ada:	f7fb fbf5 	bl	80002c8 <__aeabi_dsub>
 8004ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ae2:	e704      	b.n	80048ee <testPWM+0x82>
 8004ae4:	200009c0 	.word	0x200009c0
 8004ae8:	20000d34 	.word	0x20000d34
 8004aec:	20000d30 	.word	0x20000d30
 8004af0:	20000b3c 	.word	0x20000b3c
 8004af4:	20000b38 	.word	0x20000b38
 8004af8:	3ff00000 	.word	0x3ff00000
 8004afc:	40150000 	.word	0x40150000
 8004b00:	40240000 	.word	0x40240000
 8004b04:	40340000 	.word	0x40340000
 8004b08:	403e0000 	.word	0x403e0000
 8004b0c:	40440000 	.word	0x40440000
 8004b10:	40590000 	.word	0x40590000
 8004b14:	42c80000 	.word	0x42c80000

08004b18 <testTimer>:
		timPwmWrite(timer1, TIM_CH3, 50.95);
		timPwmWrite(timer1, TIM_CH4, 75.33);*/
	}
}

void testTimer(void) {
 8004b18:	b508      	push	{r3, lr}
	setup();
 8004b1a:	f7ff fe7b 	bl	8004814 <setup>
	testPWM();
 8004b1e:	f7ff fea5 	bl	800486c <testPWM>

08004b22 <newGPIO>:



/*========================SETUP AND DATA STRUCTURE========================*/
GPIO *newGPIO(GPIO* obj, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	obj->GPIO_Pin = GPIO_Pin;
 8004b22:	8082      	strh	r2, [r0, #4]
	obj->GPIOx = GPIOx;
 8004b24:	6001      	str	r1, [r0, #0]
	return obj;
}
 8004b26:	4770      	bx	lr

08004b28 <gpioRead>:
/*========================General GPIO Methods================================*/
void gpioWrite(GPIO* obj, uint8_t Bit) {
	if(Bit == High) turnOn(obj);
	else turnOff(obj);
}
Bool gpioRead(GPIO* obj) {
 8004b28:	b508      	push	{r3, lr}
	return HAL_GPIO_ReadPin(obj->GPIOx, obj->GPIO_Pin) == GPIO_PIN_SET?High:Low;
 8004b2a:	8881      	ldrh	r1, [r0, #4]
 8004b2c:	6800      	ldr	r0, [r0, #0]
 8004b2e:	f7fc fef5 	bl	800191c <HAL_GPIO_ReadPin>
}
 8004b32:	2801      	cmp	r0, #1
 8004b34:	bf14      	ite	ne
 8004b36:	2000      	movne	r0, #0
 8004b38:	2001      	moveq	r0, #1
 8004b3a:	bd08      	pop	{r3, pc}

08004b3c <turnOn>:
/*=============================================================================*/


/*========================Convenience Purposed Methods========================*/
void turnOn(GPIO* obj) {
 8004b3c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(obj->GPIOx, obj->GPIO_Pin, GPIO_PIN_SET);
 8004b3e:	2201      	movs	r2, #1
 8004b40:	8881      	ldrh	r1, [r0, #4]
 8004b42:	6800      	ldr	r0, [r0, #0]
 8004b44:	f7fc fef1 	bl	800192a <HAL_GPIO_WritePin>
 8004b48:	bd08      	pop	{r3, pc}

08004b4a <turnOff>:
}

void turnOff(GPIO* obj) {
 8004b4a:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(obj->GPIOx, obj->GPIO_Pin, GPIO_PIN_RESET);
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	8881      	ldrh	r1, [r0, #4]
 8004b50:	6800      	ldr	r0, [r0, #0]
 8004b52:	f7fc feea 	bl	800192a <HAL_GPIO_WritePin>
 8004b56:	bd08      	pop	{r3, pc}

08004b58 <gpioWrite>:
void gpioWrite(GPIO* obj, uint8_t Bit) {
 8004b58:	b508      	push	{r3, lr}
	if(Bit == High) turnOn(obj);
 8004b5a:	2901      	cmp	r1, #1
 8004b5c:	d002      	beq.n	8004b64 <gpioWrite+0xc>
	else turnOff(obj);
 8004b5e:	f7ff fff4 	bl	8004b4a <turnOff>
 8004b62:	bd08      	pop	{r3, pc}
	if(Bit == High) turnOn(obj);
 8004b64:	f7ff ffea 	bl	8004b3c <turnOn>
 8004b68:	bd08      	pop	{r3, pc}

08004b6a <i2cTC_IT_CallBack>:
}
/*=========================================================================*/


/*==============================Interrupt Handler===============================*/
__weak void i2cTC_IT_CallBack(I2C* instance){
 8004b6a:	4770      	bx	lr

08004b6c <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 8004b70:	2400      	movs	r4, #0
 8004b72:	e000      	b.n	8004b76 <HAL_I2C_MasterTxCpltCallback+0xa>
 8004b74:	3401      	adds	r4, #1
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	da0b      	bge.n	8004b96 <HAL_I2C_MasterTxCpltCallback+0x2a>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8004b7e:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <HAL_I2C_MasterTxCpltCallback+0x30>)
 8004b80:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004b84:	6803      	ldr	r3, [r0, #0]
 8004b86:	42ab      	cmp	r3, r5
 8004b88:	d1f4      	bne.n	8004b74 <HAL_I2C_MasterTxCpltCallback+0x8>
			ActiveI2Cs[i]->TxStatus = Completed;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
			i2cTC_IT_CallBack(ActiveI2Cs[i]);
 8004b90:	f7ff ffeb 	bl	8004b6a <i2cTC_IT_CallBack>
 8004b94:	e7ee      	b.n	8004b74 <HAL_I2C_MasterTxCpltCallback+0x8>
}
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	2000069c 	.word	0x2000069c
 8004b9c:	20000d5c 	.word	0x20000d5c

08004ba0 <HAL_I2C_SlaveTxCpltCallback>:
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 8004ba4:	2400      	movs	r4, #0
 8004ba6:	e000      	b.n	8004baa <HAL_I2C_SlaveTxCpltCallback+0xa>
 8004ba8:	3401      	adds	r4, #1
 8004baa:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <HAL_I2C_SlaveTxCpltCallback+0x2c>)
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	429c      	cmp	r4, r3
 8004bb0:	da0b      	bge.n	8004bca <HAL_I2C_SlaveTxCpltCallback+0x2a>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8004bb2:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <HAL_I2C_SlaveTxCpltCallback+0x30>)
 8004bb4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004bb8:	6803      	ldr	r3, [r0, #0]
 8004bba:	42ab      	cmp	r3, r5
 8004bbc:	d1f4      	bne.n	8004ba8 <HAL_I2C_SlaveTxCpltCallback+0x8>
			ActiveI2Cs[i]->TxStatus = Completed;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
			i2cTC_IT_CallBack(ActiveI2Cs[i]);
 8004bc4:	f7ff ffd1 	bl	8004b6a <i2cTC_IT_CallBack>
 8004bc8:	e7ee      	b.n	8004ba8 <HAL_I2C_SlaveTxCpltCallback+0x8>
}
 8004bca:	bd38      	pop	{r3, r4, r5, pc}
 8004bcc:	2000069c 	.word	0x2000069c
 8004bd0:	20000d5c 	.word	0x20000d5c

08004bd4 <i2cRC_IT_CallBack>:
	 UNUSED(instance);
}

__weak void i2cRC_IT_CallBack(I2C* instance){
 8004bd4:	4770      	bx	lr
	...

08004bd8 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 8004bdc:	2400      	movs	r4, #0
 8004bde:	e000      	b.n	8004be2 <HAL_I2C_MasterRxCpltCallback+0xa>
 8004be0:	3401      	adds	r4, #1
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	429c      	cmp	r4, r3
 8004be8:	da0b      	bge.n	8004c02 <HAL_I2C_MasterRxCpltCallback+0x2a>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8004bea:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <HAL_I2C_MasterRxCpltCallback+0x30>)
 8004bec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004bf0:	6803      	ldr	r3, [r0, #0]
 8004bf2:	42ab      	cmp	r3, r5
 8004bf4:	d1f4      	bne.n	8004be0 <HAL_I2C_MasterRxCpltCallback+0x8>
			ActiveI2Cs[i]->RxStatus = Completed;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
			i2cRC_IT_CallBack(ActiveI2Cs[i]);
 8004bfc:	f7ff ffea 	bl	8004bd4 <i2cRC_IT_CallBack>
 8004c00:	e7ee      	b.n	8004be0 <HAL_I2C_MasterRxCpltCallback+0x8>
}
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
 8004c04:	2000069c 	.word	0x2000069c
 8004c08:	20000d5c 	.word	0x20000d5c

08004c0c <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 8004c10:	2400      	movs	r4, #0
 8004c12:	e000      	b.n	8004c16 <HAL_I2C_SlaveRxCpltCallback+0xa>
 8004c14:	3401      	adds	r4, #1
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	429c      	cmp	r4, r3
 8004c1c:	da0b      	bge.n	8004c36 <HAL_I2C_SlaveRxCpltCallback+0x2a>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8004c1e:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <HAL_I2C_SlaveRxCpltCallback+0x30>)
 8004c20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004c24:	6803      	ldr	r3, [r0, #0]
 8004c26:	42ab      	cmp	r3, r5
 8004c28:	d1f4      	bne.n	8004c14 <HAL_I2C_SlaveRxCpltCallback+0x8>
			ActiveI2Cs[i]->RxStatus = Completed;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
			i2cRC_IT_CallBack(ActiveI2Cs[i]);
 8004c30:	f7ff ffd0 	bl	8004bd4 <i2cRC_IT_CallBack>
 8004c34:	e7ee      	b.n	8004c14 <HAL_I2C_SlaveRxCpltCallback+0x8>
}
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	2000069c 	.word	0x2000069c
 8004c3c:	20000d5c 	.word	0x20000d5c

08004c40 <millis>:
void delay(uint32_t Time) {
		uint32_t T_init = millis();
		while(millis() - T_init < Time);
}*/
#else
__weak uint32_t millis(void) {
 8004c40:	b508      	push	{r3, lr}
		return HAL_GetTick();
 8004c42:	f7fc f9c1 	bl	8000fc8 <HAL_GetTick>
}
 8004c46:	bd08      	pop	{r3, pc}

08004c48 <delay>:
}
void delay_us(uint32_t Time) {
		uint32_t T_init = micros(); 
		while(micros() - T_init < Time); 
}
void delay(uint32_t Time) {
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4605      	mov	r5, r0
		uint32_t T_init = millis(); 
 8004c4c:	f7ff fff8 	bl	8004c40 <millis>
 8004c50:	4604      	mov	r4, r0
		while(millis() - T_init < Time); 
 8004c52:	f7ff fff5 	bl	8004c40 <millis>
 8004c56:	1b00      	subs	r0, r0, r4
 8004c58:	42a8      	cmp	r0, r5
 8004c5a:	d3fa      	bcc.n	8004c52 <delay+0xa>
}
 8004c5c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004c60 <newTIM>:
  */
/**
 * Please use STM32CubeMx to config period and prescaler
 * Period & prescaler setting are applied on all four channels
 */
TIM *newTIM(TIM* instance, TIM_HandleTypeDef *htim) {
 8004c60:	b410      	push	{r4}
	instance->htim = htim;
 8004c62:	6001      	str	r1, [r0, #0]
	for(int i = 0; i < numActiveTIMs; i++)
 8004c64:	2300      	movs	r3, #0
 8004c66:	4a0d      	ldr	r2, [pc, #52]	; (8004c9c <newTIM+0x3c>)
 8004c68:	8812      	ldrh	r2, [r2, #0]
 8004c6a:	4614      	mov	r4, r2
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	da0b      	bge.n	8004c88 <newTIM+0x28>
		if(ActiveTIMs[i]->htim == htim) {
 8004c70:	4a0b      	ldr	r2, [pc, #44]	; (8004ca0 <newTIM+0x40>)
 8004c72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	4291      	cmp	r1, r2
 8004c7a:	d001      	beq.n	8004c80 <newTIM+0x20>
	for(int i = 0; i < numActiveTIMs; i++)
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	e7f2      	b.n	8004c66 <newTIM+0x6>
			ActiveTIMs[i] = instance;
 8004c80:	4a07      	ldr	r2, [pc, #28]	; (8004ca0 <newTIM+0x40>)
 8004c82:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			return instance;
 8004c86:	e005      	b.n	8004c94 <newTIM+0x34>
		}
	ActiveTIMs[numActiveTIMs++] = instance;
 8004c88:	3201      	adds	r2, #1
 8004c8a:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <newTIM+0x3c>)
 8004c8c:	801a      	strh	r2, [r3, #0]
 8004c8e:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <newTIM+0x40>)
 8004c90:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	return instance;
}
 8004c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	2000069e 	.word	0x2000069e
 8004ca0:	20000d84 	.word	0x20000d84

08004ca4 <timSetARR>:

void timSetARR(TIM* instance, uint32_t ARR_val) {
	instance->ARR = ARR_val;
 8004ca4:	6081      	str	r1, [r0, #8]
	__HAL_TIM_SET_AUTORELOAD(instance->htim, instance->ARR);
 8004ca6:	6803      	ldr	r3, [r0, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	62d9      	str	r1, [r3, #44]	; 0x2c
 8004cac:	6803      	ldr	r3, [r0, #0]
 8004cae:	6882      	ldr	r2, [r0, #8]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	4770      	bx	lr

08004cb4 <timSetCCR>:
}

void timSetCCR(TIM* instance, uint32_t channel, uint32_t CCR_val) {
	instance->CCR = CCR_val;
 8004cb4:	60c2      	str	r2, [r0, #12]
	__HAL_TIM_SET_COMPARE(instance->htim, channel, CCR_val);
 8004cb6:	6803      	ldr	r3, [r0, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3334      	adds	r3, #52	; 0x34
 8004cbc:	0889      	lsrs	r1, r1, #2
 8004cbe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004cc2:	4770      	bx	lr

08004cc4 <timSetPrescaler>:
	instance->CNT = __HAL_TIM_GET_COUNTER(instance->htim);
	return instance->CNT;
}

void timSetPrescaler(TIM* instance, uint32_t prescaler_val) {
	instance->TimerPrescaler = prescaler_val;
 8004cc4:	6041      	str	r1, [r0, #4]
	__HAL_TIM_SET_PRESCALER(instance->htim, instance->TimerPrescaler);
 8004cc6:	6803      	ldr	r3, [r0, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6299      	str	r1, [r3, #40]	; 0x28
 8004ccc:	4770      	bx	lr
	...

08004cd0 <timSetPwmFrequency>:
	uint32_t rtn = timSetPwmFrequency(instance, max_count, pwm_frequency);
	return rtn;
}

/*Set PWM frequency at runtime*/
uint32_t timSetPwmFrequency(TIM* instance, uint32_t max_count, uint32_t pwm_frequency) {
 8004cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	4688      	mov	r8, r1
 8004cda:	4692      	mov	sl, r2
	uint32_t APBx_DivFactor;
	volatile uint32_t CLK_DIV = __HAL_TIM_GET_CLOCKDIVISION(instance->htim);
 8004cdc:	6803      	ldr	r3, [r0, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce6:	9301      	str	r3, [sp, #4]
	if(CLK_DIV == TIM_CLOCKDIVISION_DIV1) APBx_DivFactor = 1;
 8004ce8:	9b01      	ldr	r3, [sp, #4]
	if(CLK_DIV == TIM_CLOCKDIVISION_DIV2) APBx_DivFactor = 2;
 8004cea:	9b01      	ldr	r3, [sp, #4]
 8004cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf0:	d037      	beq.n	8004d62 <timSetPwmFrequency+0x92>
 8004cf2:	2401      	movs	r4, #1
	if(CLK_DIV == TIM_CLOCKDIVISION_DIV4) APBx_DivFactor = 4;
 8004cf4:	9b01      	ldr	r3, [sp, #4]
 8004cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfa:	d034      	beq.n	8004d66 <timSetPwmFrequency+0x96>

	double TimerMaxFrequency = HAL_RCC_GetHCLKFreq() / APBx_DivFactor;
 8004cfc:	f7fd fdd6 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8004d00:	fbb0 f4f4 	udiv	r4, r0, r4
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7fb fc1d 	bl	8000544 <__aeabi_ui2d>
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	460f      	mov	r7, r1
	double TimerFrequency = max_count * pwm_frequency;
 8004d0e:	fb0a f008 	mul.w	r0, sl, r8
 8004d12:	f7fb fc17 	bl	8000544 <__aeabi_ui2d>
 8004d16:	4680      	mov	r8, r0
 8004d18:	4689      	mov	r9, r1
	if(TimerFrequency > TimerMaxFrequency) {
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4630      	mov	r0, r6
 8004d20:	4639      	mov	r1, r7
 8004d22:	f7fb fef7 	bl	8000b14 <__aeabi_dcmplt>
 8004d26:	bb00      	cbnz	r0, 8004d6a <timSetPwmFrequency+0x9a>
		throwException("THL_Timer.c: setPwmFrequency() | max_count * pwm_frequency must be less or equal than TimerMaxFrequency");
		return Failed;
	}

	timSetPrescaler(instance, TimerMaxFrequency / TimerFrequency - 1);
 8004d28:	4642      	mov	r2, r8
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	4639      	mov	r1, r7
 8004d30:	f7fb fda8 	bl	8000884 <__aeabi_ddiv>
 8004d34:	2200      	movs	r2, #0
 8004d36:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <timSetPwmFrequency+0xa4>)
 8004d38:	f7fb fac6 	bl	80002c8 <__aeabi_dsub>
 8004d3c:	f7fb ff50 	bl	8000be0 <__aeabi_d2uiz>
 8004d40:	4601      	mov	r1, r0
 8004d42:	4628      	mov	r0, r5
 8004d44:	f7ff ffbe 	bl	8004cc4 <timSetPrescaler>
	timSetARR(instance, ((uint32_t)TimerMaxFrequency / (instance->TimerPrescaler + 1) ) / pwm_frequency);
 8004d48:	6869      	ldr	r1, [r5, #4]
 8004d4a:	3101      	adds	r1, #1
 8004d4c:	fbb4 f1f1 	udiv	r1, r4, r1
 8004d50:	fbb1 f1fa 	udiv	r1, r1, sl
 8004d54:	4628      	mov	r0, r5
 8004d56:	f7ff ffa5 	bl	8004ca4 <timSetARR>
												//Minimize rounding error
	return Succeeded;
 8004d5a:	2001      	movs	r0, #1
}
 8004d5c:	b002      	add	sp, #8
 8004d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(CLK_DIV == TIM_CLOCKDIVISION_DIV2) APBx_DivFactor = 2;
 8004d62:	2402      	movs	r4, #2
 8004d64:	e7c6      	b.n	8004cf4 <timSetPwmFrequency+0x24>
	if(CLK_DIV == TIM_CLOCKDIVISION_DIV4) APBx_DivFactor = 4;
 8004d66:	2404      	movs	r4, #4
 8004d68:	e7c8      	b.n	8004cfc <timSetPwmFrequency+0x2c>
		throwException("THL_Timer.c: setPwmFrequency() | max_count * pwm_frequency must be less or equal than TimerMaxFrequency");
 8004d6a:	4803      	ldr	r0, [pc, #12]	; (8004d78 <timSetPwmFrequency+0xa8>)
 8004d6c:	f000 f8bc 	bl	8004ee8 <throwException>
		return Failed;
 8004d70:	2000      	movs	r0, #0
 8004d72:	e7f3      	b.n	8004d5c <timSetPwmFrequency+0x8c>
 8004d74:	3ff00000 	.word	0x3ff00000
 8004d78:	08007dcc 	.word	0x08007dcc

08004d7c <initTIM_PWM>:
uint32_t initTIM_PWM(TIM* instance, uint32_t max_count, uint32_t pwm_frequency) {
 8004d7c:	b508      	push	{r3, lr}
	uint32_t rtn = timSetPwmFrequency(instance, max_count, pwm_frequency);
 8004d7e:	f7ff ffa7 	bl	8004cd0 <timSetPwmFrequency>
}
 8004d82:	bd08      	pop	{r3, pc}

08004d84 <timSetPwmDutyCircle>:

void timPwmGenEnd(TIM* instance, uint32_t channel) {
	HAL_TIM_PWM_Stop(instance->htim, channel);
}

void timSetPwmDutyCircle(TIM* instance, uint32_t channel, uint32_t dutyCircleCnt) {
 8004d84:	b508      	push	{r3, lr}
	timSetCCR(instance, channel, dutyCircleCnt);
 8004d86:	f7ff ff95 	bl	8004cb4 <timSetCCR>
 8004d8a:	bd08      	pop	{r3, pc}

08004d8c <timPwmGenBegin>:
void timPwmGenBegin(TIM* instance, uint32_t channel) {
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4604      	mov	r4, r0
 8004d90:	460d      	mov	r5, r1
	HAL_TIM_PWM_Start(instance->htim, channel);
 8004d92:	6800      	ldr	r0, [r0, #0]
 8004d94:	f7fe fc74 	bl	8003680 <HAL_TIM_PWM_Start>
	timSetPwmDutyCircle(instance, channel, 0);
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f7ff fff1 	bl	8004d84 <timSetPwmDutyCircle>
 8004da2:	bd38      	pop	{r3, r4, r5, pc}

08004da4 <timPwmWrite>:
}

//Pretty straightforward
void timPwmWrite(TIM* instance, uint32_t channel, double dutyCirclePercent) {
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	4604      	mov	r4, r0
 8004da8:	460d      	mov	r5, r1
	dutyCirclePercent /= 100.00f;
 8004daa:	2200      	movs	r2, #0
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <timPwmWrite+0x38>)
 8004dae:	ec51 0b10 	vmov	r0, r1, d0
 8004db2:	f7fb fd67 	bl	8000884 <__aeabi_ddiv>
 8004db6:	4606      	mov	r6, r0
 8004db8:	460f      	mov	r7, r1
	timSetPwmDutyCircle(instance, channel, (uint32_t)(dutyCirclePercent * (double)instance->ARR));
 8004dba:	68a0      	ldr	r0, [r4, #8]
 8004dbc:	f7fb fbc2 	bl	8000544 <__aeabi_ui2d>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	f7fb fc32 	bl	8000630 <__aeabi_dmul>
 8004dcc:	f7fb ff08 	bl	8000be0 <__aeabi_d2uiz>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f7ff ffd5 	bl	8004d84 <timSetPwmDutyCircle>
 8004dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ddc:	40590000 	.word	0x40590000

08004de0 <newUSART>:
  *The actual initiation of the usart circuit takes place by HAL 
  *before THL_Main.c gets called by main.c
  *Treated it as Pseudo-Constructor
  *Note: no memory allocation occurs
  */
USART *newUSART(USART* instance, UART_HandleTypeDef *huart) {
 8004de0:	b410      	push	{r4}
	instance->huart = huart;
 8004de2:	6001      	str	r1, [r0, #0]
	instance->TxTimeOut = USART_Default_TxTimeOut;
 8004de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004de8:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	instance->RxTimeOut = USART_Default_RxTimeOut;
 8004dec:	f04f 33ff 	mov.w	r3, #4294967295
 8004df0:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	instance->TxStatus = Ready;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f880 30d4 	strb.w	r3, [r0, #212]	; 0xd4
	instance->RxStatus = Ready;
 8004dfa:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	for(int i = 0; i < numActiveUSARTs; i++) 
 8004dfe:	2300      	movs	r3, #0
 8004e00:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <newUSART+0x54>)
 8004e02:	8812      	ldrh	r2, [r2, #0]
 8004e04:	4614      	mov	r4, r2
 8004e06:	4293      	cmp	r3, r2
 8004e08:	da0b      	bge.n	8004e22 <newUSART+0x42>
		if(ActiveUSARTs[i]->huart == huart) {
 8004e0a:	4a0b      	ldr	r2, [pc, #44]	; (8004e38 <newUSART+0x58>)
 8004e0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	4291      	cmp	r1, r2
 8004e14:	d001      	beq.n	8004e1a <newUSART+0x3a>
	for(int i = 0; i < numActiveUSARTs; i++) 
 8004e16:	3301      	adds	r3, #1
 8004e18:	e7f2      	b.n	8004e00 <newUSART+0x20>
			ActiveUSARTs[i] = instance;
 8004e1a:	4a07      	ldr	r2, [pc, #28]	; (8004e38 <newUSART+0x58>)
 8004e1c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			return instance;
 8004e20:	e005      	b.n	8004e2e <newUSART+0x4e>
		}
	ActiveUSARTs[numActiveUSARTs++] = instance;
 8004e22:	3201      	adds	r2, #1
 8004e24:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <newUSART+0x54>)
 8004e26:	801a      	strh	r2, [r3, #0]
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <newUSART+0x58>)
 8004e2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	return instance;
}
 8004e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	200006a0 	.word	0x200006a0
 8004e38:	20000eac 	.word	0x20000eac

08004e3c <newMainUSART>:

/**Pseudo-Constructor for Default/Main USART
  *It sets the usart
  */
USART *newMainUSART(UART_HandleTypeDef *huart) { 
 8004e3c:	b508      	push	{r3, lr}
	return newUSART(&DefaultUSART, huart);
 8004e3e:	4601      	mov	r1, r0
 8004e40:	4801      	ldr	r0, [pc, #4]	; (8004e48 <newMainUSART+0xc>)
 8004e42:	f7ff ffcd 	bl	8004de0 <newUSART>
}
 8004e46:	bd08      	pop	{r3, pc}
 8004e48:	20000dd4 	.word	0x20000dd4

08004e4c <usartWrite>:
/*=========================================================================*/



/*==============================Transmission===============================*/
void usartWrite(USART* instance) {
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	4605      	mov	r5, r0
	HAL_StatusTypeDef Status;
	Status = HAL_UART_Transmit(instance->huart, (uint8_t*)instance->TxBuffer, strlen(instance->TxBuffer), instance->TxTimeOut);
 8004e50:	4604      	mov	r4, r0
 8004e52:	f854 6b04 	ldr.w	r6, [r4], #4
 8004e56:	4620      	mov	r0, r4
 8004e58:	f7fb f9da 	bl	8000210 <strlen>
 8004e5c:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
 8004e60:	b282      	uxth	r2, r0
 8004e62:	4621      	mov	r1, r4
 8004e64:	4630      	mov	r0, r6
 8004e66:	f7fe fe86 	bl	8003b76 <HAL_UART_Transmit>
	if(Status == HAL_BUSY) instance->TxStatus = InProcess;
 8004e6a:	2802      	cmp	r0, #2
 8004e6c:	d008      	beq.n	8004e80 <usartWrite+0x34>
	else if(Status == HAL_TIMEOUT) {
 8004e6e:	2803      	cmp	r0, #3
 8004e70:	d00a      	beq.n	8004e88 <usartWrite+0x3c>
		__HAL_UNLOCK(instance->huart);
		instance->huart->gState = HAL_UART_STATE_READY;
		
		throwException("THL_Usart.c: usartWrite() | TimeOut");
	}
	else if(Status == HAL_ERROR) {
 8004e72:	2801      	cmp	r0, #1
 8004e74:	d017      	beq.n	8004ea6 <usartWrite+0x5a>
		instance->TxStatus = Error;
		throwException("THL_Usart.c: usartWrite() | Error");
	}
	else if(Status == HAL_OK) instance->TxStatus = Completed;
 8004e76:	b910      	cbnz	r0, 8004e7e <usartWrite+0x32>
 8004e78:	2303      	movs	r3, #3
 8004e7a:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
	if(Status == HAL_BUSY) instance->TxStatus = InProcess;
 8004e80:	2302      	movs	r3, #2
 8004e82:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
 8004e86:	bd70      	pop	{r4, r5, r6, pc}
		instance->TxStatus = TimeOut;
 8004e88:	2304      	movs	r3, #4
 8004e8a:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
		__HAL_UNLOCK(instance->huart);
 8004e8e:	682b      	ldr	r3, [r5, #0]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		instance->huart->gState = HAL_UART_STATE_READY;
 8004e96:	682b      	ldr	r3, [r5, #0]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		throwException("THL_Usart.c: usartWrite() | TimeOut");
 8004e9e:	4805      	ldr	r0, [pc, #20]	; (8004eb4 <usartWrite+0x68>)
 8004ea0:	f000 f822 	bl	8004ee8 <throwException>
 8004ea4:	bd70      	pop	{r4, r5, r6, pc}
		instance->TxStatus = Error;
 8004ea6:	2305      	movs	r3, #5
 8004ea8:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
		throwException("THL_Usart.c: usartWrite() | Error");
 8004eac:	4802      	ldr	r0, [pc, #8]	; (8004eb8 <usartWrite+0x6c>)
 8004eae:	f000 f81b 	bl	8004ee8 <throwException>
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
 8004eb4:	08007e34 	.word	0x08007e34
 8004eb8:	08007e58 	.word	0x08007e58

08004ebc <printf_u>:

void print(USART* instance, Format_Param) {
	formatStrings(instance->TxBuffer);
	usartWrite(instance);
}
void printf_u(Format_Param) {
 8004ebc:	b40f      	push	{r0, r1, r2, r3}
 8004ebe:	b510      	push	{r4, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	aa04      	add	r2, sp, #16
 8004ec4:	f852 1b04 	ldr.w	r1, [r2], #4
	formatStrings(DefaultUSART.TxBuffer);
 8004ec8:	9201      	str	r2, [sp, #4]
 8004eca:	4c06      	ldr	r4, [pc, #24]	; (8004ee4 <printf_u+0x28>)
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f000 f889 	bl	8004fe4 <vsprintf>
	usartWrite(&DefaultUSART);
 8004ed2:	1f20      	subs	r0, r4, #4
 8004ed4:	f7ff ffba 	bl	8004e4c <usartWrite>
}
 8004ed8:	b002      	add	sp, #8
 8004eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ede:	b004      	add	sp, #16
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000dd8 	.word	0x20000dd8

08004ee8 <throwException>:

/*==========================Exception Handling==============================*/
__weak void Exception_Handler(const char* str) {
	UNUSED(str);
}
void throwException(const char* str) {
 8004ee8:	b508      	push	{r3, lr}
	Exception_Handler(str);
 8004eea:	f7ff fc8b 	bl	8004804 <Exception_Handler>
 8004eee:	bd08      	pop	{r3, pc}

08004ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ef4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ef6:	e003      	b.n	8004f00 <LoopCopyDataInit>

08004ef8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004efa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004efc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004efe:	3104      	adds	r1, #4

08004f00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004f00:	480b      	ldr	r0, [pc, #44]	; (8004f30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004f02:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004f04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004f06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004f08:	d3f6      	bcc.n	8004ef8 <CopyDataInit>
  ldr  r2, =_sbss
 8004f0a:	4a0b      	ldr	r2, [pc, #44]	; (8004f38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004f0c:	e002      	b.n	8004f14 <LoopFillZerobss>

08004f0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004f0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004f10:	f842 3b04 	str.w	r3, [r2], #4

08004f14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004f16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004f18:	d3f9      	bcc.n	8004f0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f1a:	f7ff fc4d 	bl	80047b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f1e:	f000 f811 	bl	8004f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f22:	f7ff f8f5 	bl	8004110 <main>
  bx  lr    
 8004f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004f28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004f2c:	08008158 	.word	0x08008158
  ldr  r0, =_sdata
 8004f30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004f34:	2000067c 	.word	0x2000067c
  ldr  r2, =_sbss
 8004f38:	20000680 	.word	0x20000680
  ldr  r3, = _ebss
 8004f3c:	20000f0c 	.word	0x20000f0c

08004f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f40:	e7fe      	b.n	8004f40 <ADC_IRQHandler>
	...

08004f44 <__libc_init_array>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	4e0d      	ldr	r6, [pc, #52]	; (8004f7c <__libc_init_array+0x38>)
 8004f48:	4c0d      	ldr	r4, [pc, #52]	; (8004f80 <__libc_init_array+0x3c>)
 8004f4a:	1ba4      	subs	r4, r4, r6
 8004f4c:	10a4      	asrs	r4, r4, #2
 8004f4e:	2500      	movs	r5, #0
 8004f50:	42a5      	cmp	r5, r4
 8004f52:	d109      	bne.n	8004f68 <__libc_init_array+0x24>
 8004f54:	4e0b      	ldr	r6, [pc, #44]	; (8004f84 <__libc_init_array+0x40>)
 8004f56:	4c0c      	ldr	r4, [pc, #48]	; (8004f88 <__libc_init_array+0x44>)
 8004f58:	f002 ff0e 	bl	8007d78 <_init>
 8004f5c:	1ba4      	subs	r4, r4, r6
 8004f5e:	10a4      	asrs	r4, r4, #2
 8004f60:	2500      	movs	r5, #0
 8004f62:	42a5      	cmp	r5, r4
 8004f64:	d105      	bne.n	8004f72 <__libc_init_array+0x2e>
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f6c:	4798      	blx	r3
 8004f6e:	3501      	adds	r5, #1
 8004f70:	e7ee      	b.n	8004f50 <__libc_init_array+0xc>
 8004f72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f76:	4798      	blx	r3
 8004f78:	3501      	adds	r5, #1
 8004f7a:	e7f2      	b.n	8004f62 <__libc_init_array+0x1e>
 8004f7c:	08008150 	.word	0x08008150
 8004f80:	08008150 	.word	0x08008150
 8004f84:	08008150 	.word	0x08008150
 8004f88:	08008154 	.word	0x08008154

08004f8c <memcpy>:
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	1e43      	subs	r3, r0, #1
 8004f90:	440a      	add	r2, r1
 8004f92:	4291      	cmp	r1, r2
 8004f94:	d100      	bne.n	8004f98 <memcpy+0xc>
 8004f96:	bd10      	pop	{r4, pc}
 8004f98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fa0:	e7f7      	b.n	8004f92 <memcpy+0x6>

08004fa2 <memset>:
 8004fa2:	4402      	add	r2, r0
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d100      	bne.n	8004fac <memset+0xa>
 8004faa:	4770      	bx	lr
 8004fac:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb0:	e7f9      	b.n	8004fa6 <memset+0x4>

08004fb2 <_vsprintf_r>:
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	b09a      	sub	sp, #104	; 0x68
 8004fb6:	f44f 7402 	mov.w	r4, #520	; 0x208
 8004fba:	9100      	str	r1, [sp, #0]
 8004fbc:	9104      	str	r1, [sp, #16]
 8004fbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fc2:	9102      	str	r1, [sp, #8]
 8004fc4:	9105      	str	r1, [sp, #20]
 8004fc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fca:	f8ad 100e 	strh.w	r1, [sp, #14]
 8004fce:	4669      	mov	r1, sp
 8004fd0:	f8ad 400c 	strh.w	r4, [sp, #12]
 8004fd4:	f000 f810 	bl	8004ff8 <_svfprintf_r>
 8004fd8:	9b00      	ldr	r3, [sp, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	b01a      	add	sp, #104	; 0x68
 8004fe0:	bd10      	pop	{r4, pc}
	...

08004fe4 <vsprintf>:
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	460a      	mov	r2, r1
 8004fe8:	4601      	mov	r1, r0
 8004fea:	4802      	ldr	r0, [pc, #8]	; (8004ff4 <vsprintf+0x10>)
 8004fec:	6800      	ldr	r0, [r0, #0]
 8004fee:	f7ff bfe0 	b.w	8004fb2 <_vsprintf_r>
 8004ff2:	bf00      	nop
 8004ff4:	2000000c 	.word	0x2000000c

08004ff8 <_svfprintf_r>:
 8004ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffc:	b0bd      	sub	sp, #244	; 0xf4
 8004ffe:	468a      	mov	sl, r1
 8005000:	4615      	mov	r5, r2
 8005002:	461f      	mov	r7, r3
 8005004:	4683      	mov	fp, r0
 8005006:	f001 fe25 	bl	8006c54 <_localeconv_r>
 800500a:	6803      	ldr	r3, [r0, #0]
 800500c:	930d      	str	r3, [sp, #52]	; 0x34
 800500e:	4618      	mov	r0, r3
 8005010:	f7fb f8fe 	bl	8000210 <strlen>
 8005014:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005018:	9008      	str	r0, [sp, #32]
 800501a:	061b      	lsls	r3, r3, #24
 800501c:	d518      	bpl.n	8005050 <_svfprintf_r+0x58>
 800501e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005022:	b9ab      	cbnz	r3, 8005050 <_svfprintf_r+0x58>
 8005024:	2140      	movs	r1, #64	; 0x40
 8005026:	4658      	mov	r0, fp
 8005028:	f001 fe2a 	bl	8006c80 <_malloc_r>
 800502c:	f8ca 0000 	str.w	r0, [sl]
 8005030:	f8ca 0010 	str.w	r0, [sl, #16]
 8005034:	b948      	cbnz	r0, 800504a <_svfprintf_r+0x52>
 8005036:	230c      	movs	r3, #12
 8005038:	f8cb 3000 	str.w	r3, [fp]
 800503c:	f04f 33ff 	mov.w	r3, #4294967295
 8005040:	9309      	str	r3, [sp, #36]	; 0x24
 8005042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005044:	b03d      	add	sp, #244	; 0xf4
 8005046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504a:	2340      	movs	r3, #64	; 0x40
 800504c:	f8ca 3014 	str.w	r3, [sl, #20]
 8005050:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80052b8 <_svfprintf_r+0x2c0>
 8005054:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005058:	2300      	movs	r3, #0
 800505a:	ac2c      	add	r4, sp, #176	; 0xb0
 800505c:	941f      	str	r4, [sp, #124]	; 0x7c
 800505e:	9321      	str	r3, [sp, #132]	; 0x84
 8005060:	9320      	str	r3, [sp, #128]	; 0x80
 8005062:	9505      	str	r5, [sp, #20]
 8005064:	9303      	str	r3, [sp, #12]
 8005066:	9311      	str	r3, [sp, #68]	; 0x44
 8005068:	9310      	str	r3, [sp, #64]	; 0x40
 800506a:	9309      	str	r3, [sp, #36]	; 0x24
 800506c:	9d05      	ldr	r5, [sp, #20]
 800506e:	462b      	mov	r3, r5
 8005070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005074:	b112      	cbz	r2, 800507c <_svfprintf_r+0x84>
 8005076:	2a25      	cmp	r2, #37	; 0x25
 8005078:	f040 8083 	bne.w	8005182 <_svfprintf_r+0x18a>
 800507c:	9b05      	ldr	r3, [sp, #20]
 800507e:	1aee      	subs	r6, r5, r3
 8005080:	d00d      	beq.n	800509e <_svfprintf_r+0xa6>
 8005082:	e884 0048 	stmia.w	r4, {r3, r6}
 8005086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005088:	4433      	add	r3, r6
 800508a:	9321      	str	r3, [sp, #132]	; 0x84
 800508c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800508e:	3301      	adds	r3, #1
 8005090:	2b07      	cmp	r3, #7
 8005092:	9320      	str	r3, [sp, #128]	; 0x80
 8005094:	dc77      	bgt.n	8005186 <_svfprintf_r+0x18e>
 8005096:	3408      	adds	r4, #8
 8005098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509a:	4433      	add	r3, r6
 800509c:	9309      	str	r3, [sp, #36]	; 0x24
 800509e:	782b      	ldrb	r3, [r5, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8729 	beq.w	8005ef8 <_svfprintf_r+0xf00>
 80050a6:	2300      	movs	r3, #0
 80050a8:	1c69      	adds	r1, r5, #1
 80050aa:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80050ae:	461a      	mov	r2, r3
 80050b0:	f04f 39ff 	mov.w	r9, #4294967295
 80050b4:	930a      	str	r3, [sp, #40]	; 0x28
 80050b6:	461d      	mov	r5, r3
 80050b8:	200a      	movs	r0, #10
 80050ba:	1c4e      	adds	r6, r1, #1
 80050bc:	7809      	ldrb	r1, [r1, #0]
 80050be:	9605      	str	r6, [sp, #20]
 80050c0:	9102      	str	r1, [sp, #8]
 80050c2:	9902      	ldr	r1, [sp, #8]
 80050c4:	3920      	subs	r1, #32
 80050c6:	2958      	cmp	r1, #88	; 0x58
 80050c8:	f200 8418 	bhi.w	80058fc <_svfprintf_r+0x904>
 80050cc:	e8df f011 	tbh	[pc, r1, lsl #1]
 80050d0:	041600a6 	.word	0x041600a6
 80050d4:	00ab0416 	.word	0x00ab0416
 80050d8:	04160416 	.word	0x04160416
 80050dc:	04160416 	.word	0x04160416
 80050e0:	04160416 	.word	0x04160416
 80050e4:	006500ae 	.word	0x006500ae
 80050e8:	00b70416 	.word	0x00b70416
 80050ec:	041600ba 	.word	0x041600ba
 80050f0:	00da00d7 	.word	0x00da00d7
 80050f4:	00da00da 	.word	0x00da00da
 80050f8:	00da00da 	.word	0x00da00da
 80050fc:	00da00da 	.word	0x00da00da
 8005100:	00da00da 	.word	0x00da00da
 8005104:	04160416 	.word	0x04160416
 8005108:	04160416 	.word	0x04160416
 800510c:	04160416 	.word	0x04160416
 8005110:	04160416 	.word	0x04160416
 8005114:	04160416 	.word	0x04160416
 8005118:	012b0115 	.word	0x012b0115
 800511c:	012b0416 	.word	0x012b0416
 8005120:	04160416 	.word	0x04160416
 8005124:	04160416 	.word	0x04160416
 8005128:	041600ed 	.word	0x041600ed
 800512c:	03400416 	.word	0x03400416
 8005130:	04160416 	.word	0x04160416
 8005134:	04160416 	.word	0x04160416
 8005138:	03a80416 	.word	0x03a80416
 800513c:	04160416 	.word	0x04160416
 8005140:	04160086 	.word	0x04160086
 8005144:	04160416 	.word	0x04160416
 8005148:	04160416 	.word	0x04160416
 800514c:	04160416 	.word	0x04160416
 8005150:	04160416 	.word	0x04160416
 8005154:	01070416 	.word	0x01070416
 8005158:	012b006b 	.word	0x012b006b
 800515c:	012b012b 	.word	0x012b012b
 8005160:	006b00f0 	.word	0x006b00f0
 8005164:	04160416 	.word	0x04160416
 8005168:	041600fa 	.word	0x041600fa
 800516c:	03420322 	.word	0x03420322
 8005170:	01010376 	.word	0x01010376
 8005174:	03870416 	.word	0x03870416
 8005178:	03aa0416 	.word	0x03aa0416
 800517c:	04160416 	.word	0x04160416
 8005180:	03c2      	.short	0x03c2
 8005182:	461d      	mov	r5, r3
 8005184:	e773      	b.n	800506e <_svfprintf_r+0x76>
 8005186:	aa1f      	add	r2, sp, #124	; 0x7c
 8005188:	4651      	mov	r1, sl
 800518a:	4658      	mov	r0, fp
 800518c:	f002 fa84 	bl	8007698 <__ssprint_r>
 8005190:	2800      	cmp	r0, #0
 8005192:	f040 8692 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005196:	ac2c      	add	r4, sp, #176	; 0xb0
 8005198:	e77e      	b.n	8005098 <_svfprintf_r+0xa0>
 800519a:	2301      	movs	r3, #1
 800519c:	222b      	movs	r2, #43	; 0x2b
 800519e:	9905      	ldr	r1, [sp, #20]
 80051a0:	e78b      	b.n	80050ba <_svfprintf_r+0xc2>
 80051a2:	460f      	mov	r7, r1
 80051a4:	e7fb      	b.n	800519e <_svfprintf_r+0x1a6>
 80051a6:	b10b      	cbz	r3, 80051ac <_svfprintf_r+0x1b4>
 80051a8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80051ac:	06ae      	lsls	r6, r5, #26
 80051ae:	f140 80aa 	bpl.w	8005306 <_svfprintf_r+0x30e>
 80051b2:	3707      	adds	r7, #7
 80051b4:	f027 0707 	bic.w	r7, r7, #7
 80051b8:	f107 0308 	add.w	r3, r7, #8
 80051bc:	e9d7 6700 	ldrd	r6, r7, [r7]
 80051c0:	9304      	str	r3, [sp, #16]
 80051c2:	2e00      	cmp	r6, #0
 80051c4:	f177 0300 	sbcs.w	r3, r7, #0
 80051c8:	da06      	bge.n	80051d8 <_svfprintf_r+0x1e0>
 80051ca:	4276      	negs	r6, r6
 80051cc:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80051d0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80051d4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80051d8:	2301      	movs	r3, #1
 80051da:	e2ca      	b.n	8005772 <_svfprintf_r+0x77a>
 80051dc:	b10b      	cbz	r3, 80051e2 <_svfprintf_r+0x1ea>
 80051de:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80051e2:	4b37      	ldr	r3, [pc, #220]	; (80052c0 <_svfprintf_r+0x2c8>)
 80051e4:	9311      	str	r3, [sp, #68]	; 0x44
 80051e6:	06ab      	lsls	r3, r5, #26
 80051e8:	f140 8339 	bpl.w	800585e <_svfprintf_r+0x866>
 80051ec:	3707      	adds	r7, #7
 80051ee:	f027 0707 	bic.w	r7, r7, #7
 80051f2:	f107 0308 	add.w	r3, r7, #8
 80051f6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80051fa:	9304      	str	r3, [sp, #16]
 80051fc:	07e8      	lsls	r0, r5, #31
 80051fe:	d50b      	bpl.n	8005218 <_svfprintf_r+0x220>
 8005200:	ea56 0307 	orrs.w	r3, r6, r7
 8005204:	d008      	beq.n	8005218 <_svfprintf_r+0x220>
 8005206:	2330      	movs	r3, #48	; 0x30
 8005208:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800520c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005210:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8005214:	f045 0502 	orr.w	r5, r5, #2
 8005218:	2302      	movs	r3, #2
 800521a:	e2a7      	b.n	800576c <_svfprintf_r+0x774>
 800521c:	2a00      	cmp	r2, #0
 800521e:	d1be      	bne.n	800519e <_svfprintf_r+0x1a6>
 8005220:	2301      	movs	r3, #1
 8005222:	2220      	movs	r2, #32
 8005224:	e7bb      	b.n	800519e <_svfprintf_r+0x1a6>
 8005226:	f045 0501 	orr.w	r5, r5, #1
 800522a:	e7b8      	b.n	800519e <_svfprintf_r+0x1a6>
 800522c:	683e      	ldr	r6, [r7, #0]
 800522e:	960a      	str	r6, [sp, #40]	; 0x28
 8005230:	2e00      	cmp	r6, #0
 8005232:	f107 0104 	add.w	r1, r7, #4
 8005236:	dab4      	bge.n	80051a2 <_svfprintf_r+0x1aa>
 8005238:	4276      	negs	r6, r6
 800523a:	960a      	str	r6, [sp, #40]	; 0x28
 800523c:	460f      	mov	r7, r1
 800523e:	f045 0504 	orr.w	r5, r5, #4
 8005242:	e7ac      	b.n	800519e <_svfprintf_r+0x1a6>
 8005244:	9905      	ldr	r1, [sp, #20]
 8005246:	1c4e      	adds	r6, r1, #1
 8005248:	7809      	ldrb	r1, [r1, #0]
 800524a:	9102      	str	r1, [sp, #8]
 800524c:	292a      	cmp	r1, #42	; 0x2a
 800524e:	d010      	beq.n	8005272 <_svfprintf_r+0x27a>
 8005250:	f04f 0900 	mov.w	r9, #0
 8005254:	9605      	str	r6, [sp, #20]
 8005256:	9902      	ldr	r1, [sp, #8]
 8005258:	3930      	subs	r1, #48	; 0x30
 800525a:	2909      	cmp	r1, #9
 800525c:	f63f af31 	bhi.w	80050c2 <_svfprintf_r+0xca>
 8005260:	fb00 1909 	mla	r9, r0, r9, r1
 8005264:	9905      	ldr	r1, [sp, #20]
 8005266:	460e      	mov	r6, r1
 8005268:	f816 1b01 	ldrb.w	r1, [r6], #1
 800526c:	9102      	str	r1, [sp, #8]
 800526e:	9605      	str	r6, [sp, #20]
 8005270:	e7f1      	b.n	8005256 <_svfprintf_r+0x25e>
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	9605      	str	r6, [sp, #20]
 8005276:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 800527a:	3704      	adds	r7, #4
 800527c:	e78f      	b.n	800519e <_svfprintf_r+0x1a6>
 800527e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005282:	e78c      	b.n	800519e <_svfprintf_r+0x1a6>
 8005284:	2100      	movs	r1, #0
 8005286:	910a      	str	r1, [sp, #40]	; 0x28
 8005288:	9902      	ldr	r1, [sp, #8]
 800528a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800528c:	3930      	subs	r1, #48	; 0x30
 800528e:	fb00 1106 	mla	r1, r0, r6, r1
 8005292:	910a      	str	r1, [sp, #40]	; 0x28
 8005294:	9905      	ldr	r1, [sp, #20]
 8005296:	460e      	mov	r6, r1
 8005298:	f816 1b01 	ldrb.w	r1, [r6], #1
 800529c:	9102      	str	r1, [sp, #8]
 800529e:	9902      	ldr	r1, [sp, #8]
 80052a0:	9605      	str	r6, [sp, #20]
 80052a2:	3930      	subs	r1, #48	; 0x30
 80052a4:	2909      	cmp	r1, #9
 80052a6:	d9ef      	bls.n	8005288 <_svfprintf_r+0x290>
 80052a8:	e70b      	b.n	80050c2 <_svfprintf_r+0xca>
 80052aa:	f045 0508 	orr.w	r5, r5, #8
 80052ae:	e776      	b.n	800519e <_svfprintf_r+0x1a6>
 80052b0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80052b4:	e773      	b.n	800519e <_svfprintf_r+0x1a6>
 80052b6:	bf00      	nop
	...
 80052c0:	08007e8c 	.word	0x08007e8c
 80052c4:	9905      	ldr	r1, [sp, #20]
 80052c6:	7809      	ldrb	r1, [r1, #0]
 80052c8:	296c      	cmp	r1, #108	; 0x6c
 80052ca:	d105      	bne.n	80052d8 <_svfprintf_r+0x2e0>
 80052cc:	9905      	ldr	r1, [sp, #20]
 80052ce:	3101      	adds	r1, #1
 80052d0:	9105      	str	r1, [sp, #20]
 80052d2:	f045 0520 	orr.w	r5, r5, #32
 80052d6:	e762      	b.n	800519e <_svfprintf_r+0x1a6>
 80052d8:	f045 0510 	orr.w	r5, r5, #16
 80052dc:	e75f      	b.n	800519e <_svfprintf_r+0x1a6>
 80052de:	1d3b      	adds	r3, r7, #4
 80052e0:	9304      	str	r3, [sp, #16]
 80052e2:	2600      	movs	r6, #0
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80052ea:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80052ee:	f04f 0901 	mov.w	r9, #1
 80052f2:	4637      	mov	r7, r6
 80052f4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80052f8:	e11b      	b.n	8005532 <_svfprintf_r+0x53a>
 80052fa:	b10b      	cbz	r3, 8005300 <_svfprintf_r+0x308>
 80052fc:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005300:	f045 0510 	orr.w	r5, r5, #16
 8005304:	e752      	b.n	80051ac <_svfprintf_r+0x1b4>
 8005306:	f015 0f10 	tst.w	r5, #16
 800530a:	f107 0304 	add.w	r3, r7, #4
 800530e:	d003      	beq.n	8005318 <_svfprintf_r+0x320>
 8005310:	683e      	ldr	r6, [r7, #0]
 8005312:	9304      	str	r3, [sp, #16]
 8005314:	17f7      	asrs	r7, r6, #31
 8005316:	e754      	b.n	80051c2 <_svfprintf_r+0x1ca>
 8005318:	683e      	ldr	r6, [r7, #0]
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005320:	bf18      	it	ne
 8005322:	b236      	sxthne	r6, r6
 8005324:	e7f6      	b.n	8005314 <_svfprintf_r+0x31c>
 8005326:	b10b      	cbz	r3, 800532c <_svfprintf_r+0x334>
 8005328:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800532c:	3707      	adds	r7, #7
 800532e:	f027 0707 	bic.w	r7, r7, #7
 8005332:	f107 0308 	add.w	r3, r7, #8
 8005336:	9304      	str	r3, [sp, #16]
 8005338:	ed97 7b00 	vldr	d7, [r7]
 800533c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005340:	9b06      	ldr	r3, [sp, #24]
 8005342:	9312      	str	r3, [sp, #72]	; 0x48
 8005344:	9b07      	ldr	r3, [sp, #28]
 8005346:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800534a:	9313      	str	r3, [sp, #76]	; 0x4c
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	4b4a      	ldr	r3, [pc, #296]	; (800547c <_svfprintf_r+0x484>)
 8005352:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005356:	f7fb fc05 	bl	8000b64 <__aeabi_dcmpun>
 800535a:	2800      	cmp	r0, #0
 800535c:	f040 85d5 	bne.w	8005f0a <_svfprintf_r+0xf12>
 8005360:	f04f 32ff 	mov.w	r2, #4294967295
 8005364:	4b45      	ldr	r3, [pc, #276]	; (800547c <_svfprintf_r+0x484>)
 8005366:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800536a:	f7fb fbdd 	bl	8000b28 <__aeabi_dcmple>
 800536e:	2800      	cmp	r0, #0
 8005370:	f040 85cb 	bne.w	8005f0a <_svfprintf_r+0xf12>
 8005374:	2200      	movs	r2, #0
 8005376:	2300      	movs	r3, #0
 8005378:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800537c:	f7fb fbca 	bl	8000b14 <__aeabi_dcmplt>
 8005380:	b110      	cbz	r0, 8005388 <_svfprintf_r+0x390>
 8005382:	232d      	movs	r3, #45	; 0x2d
 8005384:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005388:	4b3d      	ldr	r3, [pc, #244]	; (8005480 <_svfprintf_r+0x488>)
 800538a:	4a3e      	ldr	r2, [pc, #248]	; (8005484 <_svfprintf_r+0x48c>)
 800538c:	9902      	ldr	r1, [sp, #8]
 800538e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005392:	2947      	cmp	r1, #71	; 0x47
 8005394:	bfcc      	ite	gt
 8005396:	4690      	movgt	r8, r2
 8005398:	4698      	movle	r8, r3
 800539a:	f04f 0903 	mov.w	r9, #3
 800539e:	2600      	movs	r6, #0
 80053a0:	4637      	mov	r7, r6
 80053a2:	e0c6      	b.n	8005532 <_svfprintf_r+0x53a>
 80053a4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80053a8:	d022      	beq.n	80053f0 <_svfprintf_r+0x3f8>
 80053aa:	9b02      	ldr	r3, [sp, #8]
 80053ac:	f023 0320 	bic.w	r3, r3, #32
 80053b0:	2b47      	cmp	r3, #71	; 0x47
 80053b2:	d104      	bne.n	80053be <_svfprintf_r+0x3c6>
 80053b4:	f1b9 0f00 	cmp.w	r9, #0
 80053b8:	bf08      	it	eq
 80053ba:	f04f 0901 	moveq.w	r9, #1
 80053be:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80053c2:	930c      	str	r3, [sp, #48]	; 0x30
 80053c4:	9b07      	ldr	r3, [sp, #28]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	da15      	bge.n	80053f6 <_svfprintf_r+0x3fe>
 80053ca:	9b06      	ldr	r3, [sp, #24]
 80053cc:	930e      	str	r3, [sp, #56]	; 0x38
 80053ce:	9b07      	ldr	r3, [sp, #28]
 80053d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80053d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80053d6:	232d      	movs	r3, #45	; 0x2d
 80053d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053da:	9b02      	ldr	r3, [sp, #8]
 80053dc:	f023 0720 	bic.w	r7, r3, #32
 80053e0:	2f46      	cmp	r7, #70	; 0x46
 80053e2:	d00e      	beq.n	8005402 <_svfprintf_r+0x40a>
 80053e4:	2f45      	cmp	r7, #69	; 0x45
 80053e6:	d146      	bne.n	8005476 <_svfprintf_r+0x47e>
 80053e8:	f109 0601 	add.w	r6, r9, #1
 80053ec:	2102      	movs	r1, #2
 80053ee:	e00a      	b.n	8005406 <_svfprintf_r+0x40e>
 80053f0:	f04f 0906 	mov.w	r9, #6
 80053f4:	e7e3      	b.n	80053be <_svfprintf_r+0x3c6>
 80053f6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80053fa:	2300      	movs	r3, #0
 80053fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005400:	e7ea      	b.n	80053d8 <_svfprintf_r+0x3e0>
 8005402:	464e      	mov	r6, r9
 8005404:	2103      	movs	r1, #3
 8005406:	ab1d      	add	r3, sp, #116	; 0x74
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	ab1a      	add	r3, sp, #104	; 0x68
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	4632      	mov	r2, r6
 8005410:	ab19      	add	r3, sp, #100	; 0x64
 8005412:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8005416:	4658      	mov	r0, fp
 8005418:	f000 fe4e 	bl	80060b8 <_dtoa_r>
 800541c:	2f47      	cmp	r7, #71	; 0x47
 800541e:	4680      	mov	r8, r0
 8005420:	d102      	bne.n	8005428 <_svfprintf_r+0x430>
 8005422:	07e8      	lsls	r0, r5, #31
 8005424:	f140 857e 	bpl.w	8005f24 <_svfprintf_r+0xf2c>
 8005428:	eb08 0306 	add.w	r3, r8, r6
 800542c:	2f46      	cmp	r7, #70	; 0x46
 800542e:	9303      	str	r3, [sp, #12]
 8005430:	d111      	bne.n	8005456 <_svfprintf_r+0x45e>
 8005432:	f898 3000 	ldrb.w	r3, [r8]
 8005436:	2b30      	cmp	r3, #48	; 0x30
 8005438:	d109      	bne.n	800544e <_svfprintf_r+0x456>
 800543a:	2200      	movs	r2, #0
 800543c:	2300      	movs	r3, #0
 800543e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005442:	f7fb fb5d 	bl	8000b00 <__aeabi_dcmpeq>
 8005446:	b910      	cbnz	r0, 800544e <_svfprintf_r+0x456>
 8005448:	f1c6 0601 	rsb	r6, r6, #1
 800544c:	9619      	str	r6, [sp, #100]	; 0x64
 800544e:	9a03      	ldr	r2, [sp, #12]
 8005450:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005452:	441a      	add	r2, r3
 8005454:	9203      	str	r2, [sp, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	2300      	movs	r3, #0
 800545a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800545e:	f7fb fb4f 	bl	8000b00 <__aeabi_dcmpeq>
 8005462:	b988      	cbnz	r0, 8005488 <_svfprintf_r+0x490>
 8005464:	2230      	movs	r2, #48	; 0x30
 8005466:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005468:	9903      	ldr	r1, [sp, #12]
 800546a:	4299      	cmp	r1, r3
 800546c:	d90e      	bls.n	800548c <_svfprintf_r+0x494>
 800546e:	1c59      	adds	r1, r3, #1
 8005470:	911d      	str	r1, [sp, #116]	; 0x74
 8005472:	701a      	strb	r2, [r3, #0]
 8005474:	e7f7      	b.n	8005466 <_svfprintf_r+0x46e>
 8005476:	464e      	mov	r6, r9
 8005478:	e7b8      	b.n	80053ec <_svfprintf_r+0x3f4>
 800547a:	bf00      	nop
 800547c:	7fefffff 	.word	0x7fefffff
 8005480:	08007e7c 	.word	0x08007e7c
 8005484:	08007e80 	.word	0x08007e80
 8005488:	9b03      	ldr	r3, [sp, #12]
 800548a:	931d      	str	r3, [sp, #116]	; 0x74
 800548c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800548e:	2f47      	cmp	r7, #71	; 0x47
 8005490:	eba3 0308 	sub.w	r3, r3, r8
 8005494:	9303      	str	r3, [sp, #12]
 8005496:	f040 80fa 	bne.w	800568e <_svfprintf_r+0x696>
 800549a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800549c:	1cd9      	adds	r1, r3, #3
 800549e:	db02      	blt.n	80054a6 <_svfprintf_r+0x4ae>
 80054a0:	4599      	cmp	r9, r3
 80054a2:	f280 8120 	bge.w	80056e6 <_svfprintf_r+0x6ee>
 80054a6:	9b02      	ldr	r3, [sp, #8]
 80054a8:	3b02      	subs	r3, #2
 80054aa:	9302      	str	r3, [sp, #8]
 80054ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80054ae:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80054b2:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 80054b6:	1e53      	subs	r3, r2, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	9319      	str	r3, [sp, #100]	; 0x64
 80054bc:	bfb6      	itet	lt
 80054be:	f1c2 0301 	rsblt	r3, r2, #1
 80054c2:	222b      	movge	r2, #43	; 0x2b
 80054c4:	222d      	movlt	r2, #45	; 0x2d
 80054c6:	2b09      	cmp	r3, #9
 80054c8:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80054cc:	f340 80fb 	ble.w	80056c6 <_svfprintf_r+0x6ce>
 80054d0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80054d4:	260a      	movs	r6, #10
 80054d6:	fb93 f0f6 	sdiv	r0, r3, r6
 80054da:	fb06 3310 	mls	r3, r6, r0, r3
 80054de:	3330      	adds	r3, #48	; 0x30
 80054e0:	2809      	cmp	r0, #9
 80054e2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80054e6:	f102 31ff 	add.w	r1, r2, #4294967295
 80054ea:	4603      	mov	r3, r0
 80054ec:	f300 80e4 	bgt.w	80056b8 <_svfprintf_r+0x6c0>
 80054f0:	3330      	adds	r3, #48	; 0x30
 80054f2:	f801 3c01 	strb.w	r3, [r1, #-1]
 80054f6:	3a02      	subs	r2, #2
 80054f8:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80054fc:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8005500:	4282      	cmp	r2, r0
 8005502:	4619      	mov	r1, r3
 8005504:	f0c0 80da 	bcc.w	80056bc <_svfprintf_r+0x6c4>
 8005508:	9a03      	ldr	r2, [sp, #12]
 800550a:	ab1b      	add	r3, sp, #108	; 0x6c
 800550c:	1acb      	subs	r3, r1, r3
 800550e:	2a01      	cmp	r2, #1
 8005510:	9310      	str	r3, [sp, #64]	; 0x40
 8005512:	eb03 0902 	add.w	r9, r3, r2
 8005516:	dc02      	bgt.n	800551e <_svfprintf_r+0x526>
 8005518:	f015 0701 	ands.w	r7, r5, #1
 800551c:	d002      	beq.n	8005524 <_svfprintf_r+0x52c>
 800551e:	9b08      	ldr	r3, [sp, #32]
 8005520:	2700      	movs	r7, #0
 8005522:	4499      	add	r9, r3
 8005524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005526:	b113      	cbz	r3, 800552e <_svfprintf_r+0x536>
 8005528:	232d      	movs	r3, #45	; 0x2d
 800552a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800552e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005530:	2600      	movs	r6, #0
 8005532:	454e      	cmp	r6, r9
 8005534:	4633      	mov	r3, r6
 8005536:	bfb8      	it	lt
 8005538:	464b      	movlt	r3, r9
 800553a:	930b      	str	r3, [sp, #44]	; 0x2c
 800553c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005540:	b113      	cbz	r3, 8005548 <_svfprintf_r+0x550>
 8005542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005544:	3301      	adds	r3, #1
 8005546:	930b      	str	r3, [sp, #44]	; 0x2c
 8005548:	f015 0302 	ands.w	r3, r5, #2
 800554c:	9314      	str	r3, [sp, #80]	; 0x50
 800554e:	bf1e      	ittt	ne
 8005550:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8005552:	3302      	addne	r3, #2
 8005554:	930b      	strne	r3, [sp, #44]	; 0x2c
 8005556:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800555a:	9315      	str	r3, [sp, #84]	; 0x54
 800555c:	d118      	bne.n	8005590 <_svfprintf_r+0x598>
 800555e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	930c      	str	r3, [sp, #48]	; 0x30
 8005568:	dd12      	ble.n	8005590 <_svfprintf_r+0x598>
 800556a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800556c:	2b10      	cmp	r3, #16
 800556e:	4ba9      	ldr	r3, [pc, #676]	; (8005814 <_svfprintf_r+0x81c>)
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	f300 81d5 	bgt.w	8005920 <_svfprintf_r+0x928>
 8005576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005578:	6063      	str	r3, [r4, #4]
 800557a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800557c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800557e:	4413      	add	r3, r2
 8005580:	9321      	str	r3, [sp, #132]	; 0x84
 8005582:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005584:	3301      	adds	r3, #1
 8005586:	2b07      	cmp	r3, #7
 8005588:	9320      	str	r3, [sp, #128]	; 0x80
 800558a:	f300 81e2 	bgt.w	8005952 <_svfprintf_r+0x95a>
 800558e:	3408      	adds	r4, #8
 8005590:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005594:	b173      	cbz	r3, 80055b4 <_svfprintf_r+0x5bc>
 8005596:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	2301      	movs	r3, #1
 800559e:	6063      	str	r3, [r4, #4]
 80055a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055a2:	3301      	adds	r3, #1
 80055a4:	9321      	str	r3, [sp, #132]	; 0x84
 80055a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055a8:	3301      	adds	r3, #1
 80055aa:	2b07      	cmp	r3, #7
 80055ac:	9320      	str	r3, [sp, #128]	; 0x80
 80055ae:	f300 81da 	bgt.w	8005966 <_svfprintf_r+0x96e>
 80055b2:	3408      	adds	r4, #8
 80055b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80055b6:	b16b      	cbz	r3, 80055d4 <_svfprintf_r+0x5dc>
 80055b8:	ab18      	add	r3, sp, #96	; 0x60
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	2302      	movs	r3, #2
 80055be:	6063      	str	r3, [r4, #4]
 80055c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055c2:	3302      	adds	r3, #2
 80055c4:	9321      	str	r3, [sp, #132]	; 0x84
 80055c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055c8:	3301      	adds	r3, #1
 80055ca:	2b07      	cmp	r3, #7
 80055cc:	9320      	str	r3, [sp, #128]	; 0x80
 80055ce:	f300 81d4 	bgt.w	800597a <_svfprintf_r+0x982>
 80055d2:	3408      	adds	r4, #8
 80055d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055d6:	2b80      	cmp	r3, #128	; 0x80
 80055d8:	d114      	bne.n	8005604 <_svfprintf_r+0x60c>
 80055da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	dd0f      	ble.n	8005604 <_svfprintf_r+0x60c>
 80055e4:	4a8c      	ldr	r2, [pc, #560]	; (8005818 <_svfprintf_r+0x820>)
 80055e6:	6022      	str	r2, [r4, #0]
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	f300 81d0 	bgt.w	800598e <_svfprintf_r+0x996>
 80055ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055f0:	6063      	str	r3, [r4, #4]
 80055f2:	4413      	add	r3, r2
 80055f4:	9321      	str	r3, [sp, #132]	; 0x84
 80055f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055f8:	3301      	adds	r3, #1
 80055fa:	2b07      	cmp	r3, #7
 80055fc:	9320      	str	r3, [sp, #128]	; 0x80
 80055fe:	f300 81df 	bgt.w	80059c0 <_svfprintf_r+0x9c8>
 8005602:	3408      	adds	r4, #8
 8005604:	eba6 0609 	sub.w	r6, r6, r9
 8005608:	2e00      	cmp	r6, #0
 800560a:	dd0f      	ble.n	800562c <_svfprintf_r+0x634>
 800560c:	4b82      	ldr	r3, [pc, #520]	; (8005818 <_svfprintf_r+0x820>)
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	2e10      	cmp	r6, #16
 8005612:	f300 81df 	bgt.w	80059d4 <_svfprintf_r+0x9dc>
 8005616:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005618:	9821      	ldr	r0, [sp, #132]	; 0x84
 800561a:	6066      	str	r6, [r4, #4]
 800561c:	3301      	adds	r3, #1
 800561e:	4406      	add	r6, r0
 8005620:	2b07      	cmp	r3, #7
 8005622:	9621      	str	r6, [sp, #132]	; 0x84
 8005624:	9320      	str	r3, [sp, #128]	; 0x80
 8005626:	f300 81ec 	bgt.w	8005a02 <_svfprintf_r+0xa0a>
 800562a:	3408      	adds	r4, #8
 800562c:	05eb      	lsls	r3, r5, #23
 800562e:	f100 81f2 	bmi.w	8005a16 <_svfprintf_r+0xa1e>
 8005632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005634:	e884 0300 	stmia.w	r4, {r8, r9}
 8005638:	444b      	add	r3, r9
 800563a:	9321      	str	r3, [sp, #132]	; 0x84
 800563c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800563e:	3301      	adds	r3, #1
 8005640:	2b07      	cmp	r3, #7
 8005642:	9320      	str	r3, [sp, #128]	; 0x80
 8005644:	f340 8419 	ble.w	8005e7a <_svfprintf_r+0xe82>
 8005648:	aa1f      	add	r2, sp, #124	; 0x7c
 800564a:	4651      	mov	r1, sl
 800564c:	4658      	mov	r0, fp
 800564e:	f002 f823 	bl	8007698 <__ssprint_r>
 8005652:	2800      	cmp	r0, #0
 8005654:	f040 8431 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005658:	ac2c      	add	r4, sp, #176	; 0xb0
 800565a:	076b      	lsls	r3, r5, #29
 800565c:	f100 8410 	bmi.w	8005e80 <_svfprintf_r+0xe88>
 8005660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005664:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005666:	428a      	cmp	r2, r1
 8005668:	bfac      	ite	ge
 800566a:	189b      	addge	r3, r3, r2
 800566c:	185b      	addlt	r3, r3, r1
 800566e:	9309      	str	r3, [sp, #36]	; 0x24
 8005670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005672:	b13b      	cbz	r3, 8005684 <_svfprintf_r+0x68c>
 8005674:	aa1f      	add	r2, sp, #124	; 0x7c
 8005676:	4651      	mov	r1, sl
 8005678:	4658      	mov	r0, fp
 800567a:	f002 f80d 	bl	8007698 <__ssprint_r>
 800567e:	2800      	cmp	r0, #0
 8005680:	f040 841b 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005684:	2300      	movs	r3, #0
 8005686:	9320      	str	r3, [sp, #128]	; 0x80
 8005688:	9f04      	ldr	r7, [sp, #16]
 800568a:	ac2c      	add	r4, sp, #176	; 0xb0
 800568c:	e4ee      	b.n	800506c <_svfprintf_r+0x74>
 800568e:	9b02      	ldr	r3, [sp, #8]
 8005690:	2b65      	cmp	r3, #101	; 0x65
 8005692:	f77f af0b 	ble.w	80054ac <_svfprintf_r+0x4b4>
 8005696:	9b02      	ldr	r3, [sp, #8]
 8005698:	2b66      	cmp	r3, #102	; 0x66
 800569a:	d124      	bne.n	80056e6 <_svfprintf_r+0x6ee>
 800569c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800569e:	2b00      	cmp	r3, #0
 80056a0:	dd19      	ble.n	80056d6 <_svfprintf_r+0x6de>
 80056a2:	f1b9 0f00 	cmp.w	r9, #0
 80056a6:	d101      	bne.n	80056ac <_svfprintf_r+0x6b4>
 80056a8:	07ea      	lsls	r2, r5, #31
 80056aa:	d502      	bpl.n	80056b2 <_svfprintf_r+0x6ba>
 80056ac:	9a08      	ldr	r2, [sp, #32]
 80056ae:	4413      	add	r3, r2
 80056b0:	444b      	add	r3, r9
 80056b2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80056b4:	4699      	mov	r9, r3
 80056b6:	e735      	b.n	8005524 <_svfprintf_r+0x52c>
 80056b8:	460a      	mov	r2, r1
 80056ba:	e70c      	b.n	80054d6 <_svfprintf_r+0x4de>
 80056bc:	f812 1b01 	ldrb.w	r1, [r2], #1
 80056c0:	f803 1b01 	strb.w	r1, [r3], #1
 80056c4:	e71c      	b.n	8005500 <_svfprintf_r+0x508>
 80056c6:	2230      	movs	r2, #48	; 0x30
 80056c8:	4413      	add	r3, r2
 80056ca:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80056ce:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80056d2:	a91c      	add	r1, sp, #112	; 0x70
 80056d4:	e718      	b.n	8005508 <_svfprintf_r+0x510>
 80056d6:	f1b9 0f00 	cmp.w	r9, #0
 80056da:	d101      	bne.n	80056e0 <_svfprintf_r+0x6e8>
 80056dc:	07eb      	lsls	r3, r5, #31
 80056de:	d515      	bpl.n	800570c <_svfprintf_r+0x714>
 80056e0:	9b08      	ldr	r3, [sp, #32]
 80056e2:	3301      	adds	r3, #1
 80056e4:	e7e4      	b.n	80056b0 <_svfprintf_r+0x6b8>
 80056e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80056e8:	9b03      	ldr	r3, [sp, #12]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	db06      	blt.n	80056fc <_svfprintf_r+0x704>
 80056ee:	07ef      	lsls	r7, r5, #31
 80056f0:	d50e      	bpl.n	8005710 <_svfprintf_r+0x718>
 80056f2:	9b08      	ldr	r3, [sp, #32]
 80056f4:	4413      	add	r3, r2
 80056f6:	2267      	movs	r2, #103	; 0x67
 80056f8:	9202      	str	r2, [sp, #8]
 80056fa:	e7da      	b.n	80056b2 <_svfprintf_r+0x6ba>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	9908      	ldr	r1, [sp, #32]
 8005700:	2a00      	cmp	r2, #0
 8005702:	440b      	add	r3, r1
 8005704:	dcf7      	bgt.n	80056f6 <_svfprintf_r+0x6fe>
 8005706:	f1c2 0201 	rsb	r2, r2, #1
 800570a:	e7f3      	b.n	80056f4 <_svfprintf_r+0x6fc>
 800570c:	2301      	movs	r3, #1
 800570e:	e7d0      	b.n	80056b2 <_svfprintf_r+0x6ba>
 8005710:	4613      	mov	r3, r2
 8005712:	e7f0      	b.n	80056f6 <_svfprintf_r+0x6fe>
 8005714:	b10b      	cbz	r3, 800571a <_svfprintf_r+0x722>
 8005716:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800571a:	f015 0f20 	tst.w	r5, #32
 800571e:	f107 0304 	add.w	r3, r7, #4
 8005722:	d008      	beq.n	8005736 <_svfprintf_r+0x73e>
 8005724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	17ce      	asrs	r6, r1, #31
 800572a:	4608      	mov	r0, r1
 800572c:	4631      	mov	r1, r6
 800572e:	e9c2 0100 	strd	r0, r1, [r2]
 8005732:	461f      	mov	r7, r3
 8005734:	e49a      	b.n	800506c <_svfprintf_r+0x74>
 8005736:	06ee      	lsls	r6, r5, #27
 8005738:	d503      	bpl.n	8005742 <_svfprintf_r+0x74a>
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800573e:	6011      	str	r1, [r2, #0]
 8005740:	e7f7      	b.n	8005732 <_svfprintf_r+0x73a>
 8005742:	0668      	lsls	r0, r5, #25
 8005744:	d5f9      	bpl.n	800573a <_svfprintf_r+0x742>
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800574c:	8011      	strh	r1, [r2, #0]
 800574e:	e7f0      	b.n	8005732 <_svfprintf_r+0x73a>
 8005750:	f045 0510 	orr.w	r5, r5, #16
 8005754:	f015 0320 	ands.w	r3, r5, #32
 8005758:	d022      	beq.n	80057a0 <_svfprintf_r+0x7a8>
 800575a:	3707      	adds	r7, #7
 800575c:	f027 0707 	bic.w	r7, r7, #7
 8005760:	f107 0308 	add.w	r3, r7, #8
 8005764:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	2300      	movs	r3, #0
 800576c:	2200      	movs	r2, #0
 800576e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005772:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005776:	f000 83db 	beq.w	8005f30 <_svfprintf_r+0xf38>
 800577a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800577e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005780:	ea56 0207 	orrs.w	r2, r6, r7
 8005784:	f040 83d9 	bne.w	8005f3a <_svfprintf_r+0xf42>
 8005788:	f1b9 0f00 	cmp.w	r9, #0
 800578c:	f000 80aa 	beq.w	80058e4 <_svfprintf_r+0x8ec>
 8005790:	2b01      	cmp	r3, #1
 8005792:	d076      	beq.n	8005882 <_svfprintf_r+0x88a>
 8005794:	2b02      	cmp	r3, #2
 8005796:	f000 8091 	beq.w	80058bc <_svfprintf_r+0x8c4>
 800579a:	2600      	movs	r6, #0
 800579c:	2700      	movs	r7, #0
 800579e:	e3d2      	b.n	8005f46 <_svfprintf_r+0xf4e>
 80057a0:	1d3a      	adds	r2, r7, #4
 80057a2:	f015 0110 	ands.w	r1, r5, #16
 80057a6:	9204      	str	r2, [sp, #16]
 80057a8:	d002      	beq.n	80057b0 <_svfprintf_r+0x7b8>
 80057aa:	683e      	ldr	r6, [r7, #0]
 80057ac:	2700      	movs	r7, #0
 80057ae:	e7dd      	b.n	800576c <_svfprintf_r+0x774>
 80057b0:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80057b4:	d0f9      	beq.n	80057aa <_svfprintf_r+0x7b2>
 80057b6:	883e      	ldrh	r6, [r7, #0]
 80057b8:	2700      	movs	r7, #0
 80057ba:	e7d6      	b.n	800576a <_svfprintf_r+0x772>
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	9304      	str	r3, [sp, #16]
 80057c0:	2330      	movs	r3, #48	; 0x30
 80057c2:	2278      	movs	r2, #120	; 0x78
 80057c4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80057c8:	4b14      	ldr	r3, [pc, #80]	; (800581c <_svfprintf_r+0x824>)
 80057ca:	683e      	ldr	r6, [r7, #0]
 80057cc:	9311      	str	r3, [sp, #68]	; 0x44
 80057ce:	2700      	movs	r7, #0
 80057d0:	f045 0502 	orr.w	r5, r5, #2
 80057d4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80057d8:	2302      	movs	r3, #2
 80057da:	9202      	str	r2, [sp, #8]
 80057dc:	e7c6      	b.n	800576c <_svfprintf_r+0x774>
 80057de:	1d3b      	adds	r3, r7, #4
 80057e0:	2600      	movs	r6, #0
 80057e2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80057e6:	9304      	str	r3, [sp, #16]
 80057e8:	f8d7 8000 	ldr.w	r8, [r7]
 80057ec:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80057f0:	d00a      	beq.n	8005808 <_svfprintf_r+0x810>
 80057f2:	464a      	mov	r2, r9
 80057f4:	4631      	mov	r1, r6
 80057f6:	4640      	mov	r0, r8
 80057f8:	f7fa fd12 	bl	8000220 <memchr>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	f000 808d 	beq.w	800591c <_svfprintf_r+0x924>
 8005802:	eba0 0908 	sub.w	r9, r0, r8
 8005806:	e5cb      	b.n	80053a0 <_svfprintf_r+0x3a8>
 8005808:	4640      	mov	r0, r8
 800580a:	f7fa fd01 	bl	8000210 <strlen>
 800580e:	4681      	mov	r9, r0
 8005810:	e5c6      	b.n	80053a0 <_svfprintf_r+0x3a8>
 8005812:	bf00      	nop
 8005814:	08007eb0 	.word	0x08007eb0
 8005818:	08007ec0 	.word	0x08007ec0
 800581c:	08007e9d 	.word	0x08007e9d
 8005820:	f045 0510 	orr.w	r5, r5, #16
 8005824:	06a9      	lsls	r1, r5, #26
 8005826:	d509      	bpl.n	800583c <_svfprintf_r+0x844>
 8005828:	3707      	adds	r7, #7
 800582a:	f027 0707 	bic.w	r7, r7, #7
 800582e:	f107 0308 	add.w	r3, r7, #8
 8005832:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005836:	9304      	str	r3, [sp, #16]
 8005838:	2301      	movs	r3, #1
 800583a:	e797      	b.n	800576c <_svfprintf_r+0x774>
 800583c:	1d3b      	adds	r3, r7, #4
 800583e:	f015 0f10 	tst.w	r5, #16
 8005842:	9304      	str	r3, [sp, #16]
 8005844:	d001      	beq.n	800584a <_svfprintf_r+0x852>
 8005846:	683e      	ldr	r6, [r7, #0]
 8005848:	e002      	b.n	8005850 <_svfprintf_r+0x858>
 800584a:	066a      	lsls	r2, r5, #25
 800584c:	d5fb      	bpl.n	8005846 <_svfprintf_r+0x84e>
 800584e:	883e      	ldrh	r6, [r7, #0]
 8005850:	2700      	movs	r7, #0
 8005852:	e7f1      	b.n	8005838 <_svfprintf_r+0x840>
 8005854:	b10b      	cbz	r3, 800585a <_svfprintf_r+0x862>
 8005856:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800585a:	4ba3      	ldr	r3, [pc, #652]	; (8005ae8 <_svfprintf_r+0xaf0>)
 800585c:	e4c2      	b.n	80051e4 <_svfprintf_r+0x1ec>
 800585e:	1d3b      	adds	r3, r7, #4
 8005860:	f015 0f10 	tst.w	r5, #16
 8005864:	9304      	str	r3, [sp, #16]
 8005866:	d001      	beq.n	800586c <_svfprintf_r+0x874>
 8005868:	683e      	ldr	r6, [r7, #0]
 800586a:	e002      	b.n	8005872 <_svfprintf_r+0x87a>
 800586c:	066e      	lsls	r6, r5, #25
 800586e:	d5fb      	bpl.n	8005868 <_svfprintf_r+0x870>
 8005870:	883e      	ldrh	r6, [r7, #0]
 8005872:	2700      	movs	r7, #0
 8005874:	e4c2      	b.n	80051fc <_svfprintf_r+0x204>
 8005876:	4643      	mov	r3, r8
 8005878:	e366      	b.n	8005f48 <_svfprintf_r+0xf50>
 800587a:	2f00      	cmp	r7, #0
 800587c:	bf08      	it	eq
 800587e:	2e0a      	cmpeq	r6, #10
 8005880:	d205      	bcs.n	800588e <_svfprintf_r+0x896>
 8005882:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005886:	3630      	adds	r6, #48	; 0x30
 8005888:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800588c:	e377      	b.n	8005f7e <_svfprintf_r+0xf86>
 800588e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005892:	4630      	mov	r0, r6
 8005894:	4639      	mov	r1, r7
 8005896:	220a      	movs	r2, #10
 8005898:	2300      	movs	r3, #0
 800589a:	f7fb f9c1 	bl	8000c20 <__aeabi_uldivmod>
 800589e:	3230      	adds	r2, #48	; 0x30
 80058a0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80058a4:	2300      	movs	r3, #0
 80058a6:	4630      	mov	r0, r6
 80058a8:	4639      	mov	r1, r7
 80058aa:	220a      	movs	r2, #10
 80058ac:	f7fb f9b8 	bl	8000c20 <__aeabi_uldivmod>
 80058b0:	4606      	mov	r6, r0
 80058b2:	460f      	mov	r7, r1
 80058b4:	ea56 0307 	orrs.w	r3, r6, r7
 80058b8:	d1eb      	bne.n	8005892 <_svfprintf_r+0x89a>
 80058ba:	e360      	b.n	8005f7e <_svfprintf_r+0xf86>
 80058bc:	2600      	movs	r6, #0
 80058be:	2700      	movs	r7, #0
 80058c0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80058c4:	f006 030f 	and.w	r3, r6, #15
 80058c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80058ca:	5cd3      	ldrb	r3, [r2, r3]
 80058cc:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80058d0:	0933      	lsrs	r3, r6, #4
 80058d2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80058d6:	093a      	lsrs	r2, r7, #4
 80058d8:	461e      	mov	r6, r3
 80058da:	4617      	mov	r7, r2
 80058dc:	ea56 0307 	orrs.w	r3, r6, r7
 80058e0:	d1f0      	bne.n	80058c4 <_svfprintf_r+0x8cc>
 80058e2:	e34c      	b.n	8005f7e <_svfprintf_r+0xf86>
 80058e4:	b93b      	cbnz	r3, 80058f6 <_svfprintf_r+0x8fe>
 80058e6:	07ea      	lsls	r2, r5, #31
 80058e8:	d505      	bpl.n	80058f6 <_svfprintf_r+0x8fe>
 80058ea:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80058ee:	2330      	movs	r3, #48	; 0x30
 80058f0:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80058f4:	e343      	b.n	8005f7e <_svfprintf_r+0xf86>
 80058f6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80058fa:	e340      	b.n	8005f7e <_svfprintf_r+0xf86>
 80058fc:	b10b      	cbz	r3, 8005902 <_svfprintf_r+0x90a>
 80058fe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005902:	9b02      	ldr	r3, [sp, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 82f7 	beq.w	8005ef8 <_svfprintf_r+0xf00>
 800590a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800590e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005912:	2600      	movs	r6, #0
 8005914:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005918:	9704      	str	r7, [sp, #16]
 800591a:	e4e8      	b.n	80052ee <_svfprintf_r+0x2f6>
 800591c:	4606      	mov	r6, r0
 800591e:	e53f      	b.n	80053a0 <_svfprintf_r+0x3a8>
 8005920:	2310      	movs	r3, #16
 8005922:	6063      	str	r3, [r4, #4]
 8005924:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005926:	3310      	adds	r3, #16
 8005928:	9321      	str	r3, [sp, #132]	; 0x84
 800592a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800592c:	3301      	adds	r3, #1
 800592e:	2b07      	cmp	r3, #7
 8005930:	9320      	str	r3, [sp, #128]	; 0x80
 8005932:	dc04      	bgt.n	800593e <_svfprintf_r+0x946>
 8005934:	3408      	adds	r4, #8
 8005936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005938:	3b10      	subs	r3, #16
 800593a:	930c      	str	r3, [sp, #48]	; 0x30
 800593c:	e615      	b.n	800556a <_svfprintf_r+0x572>
 800593e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005940:	4651      	mov	r1, sl
 8005942:	4658      	mov	r0, fp
 8005944:	f001 fea8 	bl	8007698 <__ssprint_r>
 8005948:	2800      	cmp	r0, #0
 800594a:	f040 82b6 	bne.w	8005eba <_svfprintf_r+0xec2>
 800594e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005950:	e7f1      	b.n	8005936 <_svfprintf_r+0x93e>
 8005952:	aa1f      	add	r2, sp, #124	; 0x7c
 8005954:	4651      	mov	r1, sl
 8005956:	4658      	mov	r0, fp
 8005958:	f001 fe9e 	bl	8007698 <__ssprint_r>
 800595c:	2800      	cmp	r0, #0
 800595e:	f040 82ac 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005962:	ac2c      	add	r4, sp, #176	; 0xb0
 8005964:	e614      	b.n	8005590 <_svfprintf_r+0x598>
 8005966:	aa1f      	add	r2, sp, #124	; 0x7c
 8005968:	4651      	mov	r1, sl
 800596a:	4658      	mov	r0, fp
 800596c:	f001 fe94 	bl	8007698 <__ssprint_r>
 8005970:	2800      	cmp	r0, #0
 8005972:	f040 82a2 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005976:	ac2c      	add	r4, sp, #176	; 0xb0
 8005978:	e61c      	b.n	80055b4 <_svfprintf_r+0x5bc>
 800597a:	aa1f      	add	r2, sp, #124	; 0x7c
 800597c:	4651      	mov	r1, sl
 800597e:	4658      	mov	r0, fp
 8005980:	f001 fe8a 	bl	8007698 <__ssprint_r>
 8005984:	2800      	cmp	r0, #0
 8005986:	f040 8298 	bne.w	8005eba <_svfprintf_r+0xec2>
 800598a:	ac2c      	add	r4, sp, #176	; 0xb0
 800598c:	e622      	b.n	80055d4 <_svfprintf_r+0x5dc>
 800598e:	2210      	movs	r2, #16
 8005990:	6062      	str	r2, [r4, #4]
 8005992:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005994:	3210      	adds	r2, #16
 8005996:	9221      	str	r2, [sp, #132]	; 0x84
 8005998:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800599a:	3201      	adds	r2, #1
 800599c:	2a07      	cmp	r2, #7
 800599e:	9220      	str	r2, [sp, #128]	; 0x80
 80059a0:	dc02      	bgt.n	80059a8 <_svfprintf_r+0x9b0>
 80059a2:	3408      	adds	r4, #8
 80059a4:	3b10      	subs	r3, #16
 80059a6:	e61d      	b.n	80055e4 <_svfprintf_r+0x5ec>
 80059a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80059aa:	4651      	mov	r1, sl
 80059ac:	4658      	mov	r0, fp
 80059ae:	930c      	str	r3, [sp, #48]	; 0x30
 80059b0:	f001 fe72 	bl	8007698 <__ssprint_r>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	f040 8280 	bne.w	8005eba <_svfprintf_r+0xec2>
 80059ba:	ac2c      	add	r4, sp, #176	; 0xb0
 80059bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059be:	e7f1      	b.n	80059a4 <_svfprintf_r+0x9ac>
 80059c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80059c2:	4651      	mov	r1, sl
 80059c4:	4658      	mov	r0, fp
 80059c6:	f001 fe67 	bl	8007698 <__ssprint_r>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	f040 8275 	bne.w	8005eba <_svfprintf_r+0xec2>
 80059d0:	ac2c      	add	r4, sp, #176	; 0xb0
 80059d2:	e617      	b.n	8005604 <_svfprintf_r+0x60c>
 80059d4:	2310      	movs	r3, #16
 80059d6:	6063      	str	r3, [r4, #4]
 80059d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059da:	3310      	adds	r3, #16
 80059dc:	9321      	str	r3, [sp, #132]	; 0x84
 80059de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80059e0:	3301      	adds	r3, #1
 80059e2:	2b07      	cmp	r3, #7
 80059e4:	9320      	str	r3, [sp, #128]	; 0x80
 80059e6:	dc02      	bgt.n	80059ee <_svfprintf_r+0x9f6>
 80059e8:	3408      	adds	r4, #8
 80059ea:	3e10      	subs	r6, #16
 80059ec:	e60e      	b.n	800560c <_svfprintf_r+0x614>
 80059ee:	aa1f      	add	r2, sp, #124	; 0x7c
 80059f0:	4651      	mov	r1, sl
 80059f2:	4658      	mov	r0, fp
 80059f4:	f001 fe50 	bl	8007698 <__ssprint_r>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	f040 825e 	bne.w	8005eba <_svfprintf_r+0xec2>
 80059fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a00:	e7f3      	b.n	80059ea <_svfprintf_r+0x9f2>
 8005a02:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a04:	4651      	mov	r1, sl
 8005a06:	4658      	mov	r0, fp
 8005a08:	f001 fe46 	bl	8007698 <__ssprint_r>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	f040 8254 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005a12:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a14:	e60a      	b.n	800562c <_svfprintf_r+0x634>
 8005a16:	9b02      	ldr	r3, [sp, #8]
 8005a18:	2b65      	cmp	r3, #101	; 0x65
 8005a1a:	f340 81a9 	ble.w	8005d70 <_svfprintf_r+0xd78>
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2300      	movs	r3, #0
 8005a22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a26:	f7fb f86b 	bl	8000b00 <__aeabi_dcmpeq>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d062      	beq.n	8005af4 <_svfprintf_r+0xafc>
 8005a2e:	4b2f      	ldr	r3, [pc, #188]	; (8005aec <_svfprintf_r+0xaf4>)
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	2301      	movs	r3, #1
 8005a34:	6063      	str	r3, [r4, #4]
 8005a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a38:	3301      	adds	r3, #1
 8005a3a:	9321      	str	r3, [sp, #132]	; 0x84
 8005a3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a3e:	3301      	adds	r3, #1
 8005a40:	2b07      	cmp	r3, #7
 8005a42:	9320      	str	r3, [sp, #128]	; 0x80
 8005a44:	dc25      	bgt.n	8005a92 <_svfprintf_r+0xa9a>
 8005a46:	3408      	adds	r4, #8
 8005a48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a4a:	9a03      	ldr	r2, [sp, #12]
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	db02      	blt.n	8005a56 <_svfprintf_r+0xa5e>
 8005a50:	07ee      	lsls	r6, r5, #31
 8005a52:	f57f ae02 	bpl.w	800565a <_svfprintf_r+0x662>
 8005a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	9b08      	ldr	r3, [sp, #32]
 8005a5c:	6063      	str	r3, [r4, #4]
 8005a5e:	9a08      	ldr	r2, [sp, #32]
 8005a60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a62:	4413      	add	r3, r2
 8005a64:	9321      	str	r3, [sp, #132]	; 0x84
 8005a66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a68:	3301      	adds	r3, #1
 8005a6a:	2b07      	cmp	r3, #7
 8005a6c:	9320      	str	r3, [sp, #128]	; 0x80
 8005a6e:	dc1a      	bgt.n	8005aa6 <_svfprintf_r+0xaae>
 8005a70:	3408      	adds	r4, #8
 8005a72:	9b03      	ldr	r3, [sp, #12]
 8005a74:	1e5e      	subs	r6, r3, #1
 8005a76:	2e00      	cmp	r6, #0
 8005a78:	f77f adef 	ble.w	800565a <_svfprintf_r+0x662>
 8005a7c:	4f1c      	ldr	r7, [pc, #112]	; (8005af0 <_svfprintf_r+0xaf8>)
 8005a7e:	f04f 0810 	mov.w	r8, #16
 8005a82:	2e10      	cmp	r6, #16
 8005a84:	6027      	str	r7, [r4, #0]
 8005a86:	dc18      	bgt.n	8005aba <_svfprintf_r+0xac2>
 8005a88:	6066      	str	r6, [r4, #4]
 8005a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a8c:	441e      	add	r6, r3
 8005a8e:	9621      	str	r6, [sp, #132]	; 0x84
 8005a90:	e5d4      	b.n	800563c <_svfprintf_r+0x644>
 8005a92:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a94:	4651      	mov	r1, sl
 8005a96:	4658      	mov	r0, fp
 8005a98:	f001 fdfe 	bl	8007698 <__ssprint_r>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	f040 820c 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005aa2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005aa4:	e7d0      	b.n	8005a48 <_svfprintf_r+0xa50>
 8005aa6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005aa8:	4651      	mov	r1, sl
 8005aaa:	4658      	mov	r0, fp
 8005aac:	f001 fdf4 	bl	8007698 <__ssprint_r>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	f040 8202 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005ab6:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ab8:	e7db      	b.n	8005a72 <_svfprintf_r+0xa7a>
 8005aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005abc:	f8c4 8004 	str.w	r8, [r4, #4]
 8005ac0:	3310      	adds	r3, #16
 8005ac2:	9321      	str	r3, [sp, #132]	; 0x84
 8005ac4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	2b07      	cmp	r3, #7
 8005aca:	9320      	str	r3, [sp, #128]	; 0x80
 8005acc:	dc02      	bgt.n	8005ad4 <_svfprintf_r+0xadc>
 8005ace:	3408      	adds	r4, #8
 8005ad0:	3e10      	subs	r6, #16
 8005ad2:	e7d6      	b.n	8005a82 <_svfprintf_r+0xa8a>
 8005ad4:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ad6:	4651      	mov	r1, sl
 8005ad8:	4658      	mov	r0, fp
 8005ada:	f001 fddd 	bl	8007698 <__ssprint_r>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f040 81eb 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005ae4:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ae6:	e7f3      	b.n	8005ad0 <_svfprintf_r+0xad8>
 8005ae8:	08007e9d 	.word	0x08007e9d
 8005aec:	08007eae 	.word	0x08007eae
 8005af0:	08007ec0 	.word	0x08007ec0
 8005af4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	dc7a      	bgt.n	8005bf0 <_svfprintf_r+0xbf8>
 8005afa:	4b9b      	ldr	r3, [pc, #620]	; (8005d68 <_svfprintf_r+0xd70>)
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	2301      	movs	r3, #1
 8005b00:	6063      	str	r3, [r4, #4]
 8005b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b04:	3301      	adds	r3, #1
 8005b06:	9321      	str	r3, [sp, #132]	; 0x84
 8005b08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	2b07      	cmp	r3, #7
 8005b0e:	9320      	str	r3, [sp, #128]	; 0x80
 8005b10:	dc44      	bgt.n	8005b9c <_svfprintf_r+0xba4>
 8005b12:	3408      	adds	r4, #8
 8005b14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b16:	b923      	cbnz	r3, 8005b22 <_svfprintf_r+0xb2a>
 8005b18:	9b03      	ldr	r3, [sp, #12]
 8005b1a:	b913      	cbnz	r3, 8005b22 <_svfprintf_r+0xb2a>
 8005b1c:	07e8      	lsls	r0, r5, #31
 8005b1e:	f57f ad9c 	bpl.w	800565a <_svfprintf_r+0x662>
 8005b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	9b08      	ldr	r3, [sp, #32]
 8005b28:	6063      	str	r3, [r4, #4]
 8005b2a:	9a08      	ldr	r2, [sp, #32]
 8005b2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b2e:	4413      	add	r3, r2
 8005b30:	9321      	str	r3, [sp, #132]	; 0x84
 8005b32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b34:	3301      	adds	r3, #1
 8005b36:	2b07      	cmp	r3, #7
 8005b38:	9320      	str	r3, [sp, #128]	; 0x80
 8005b3a:	dc39      	bgt.n	8005bb0 <_svfprintf_r+0xbb8>
 8005b3c:	f104 0308 	add.w	r3, r4, #8
 8005b40:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	da19      	bge.n	8005b7a <_svfprintf_r+0xb82>
 8005b46:	4f89      	ldr	r7, [pc, #548]	; (8005d6c <_svfprintf_r+0xd74>)
 8005b48:	4276      	negs	r6, r6
 8005b4a:	2410      	movs	r4, #16
 8005b4c:	2e10      	cmp	r6, #16
 8005b4e:	601f      	str	r7, [r3, #0]
 8005b50:	dc38      	bgt.n	8005bc4 <_svfprintf_r+0xbcc>
 8005b52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b54:	605e      	str	r6, [r3, #4]
 8005b56:	4416      	add	r6, r2
 8005b58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b5a:	9621      	str	r6, [sp, #132]	; 0x84
 8005b5c:	3201      	adds	r2, #1
 8005b5e:	2a07      	cmp	r2, #7
 8005b60:	f103 0308 	add.w	r3, r3, #8
 8005b64:	9220      	str	r2, [sp, #128]	; 0x80
 8005b66:	dd08      	ble.n	8005b7a <_svfprintf_r+0xb82>
 8005b68:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b6a:	4651      	mov	r1, sl
 8005b6c:	4658      	mov	r0, fp
 8005b6e:	f001 fd93 	bl	8007698 <__ssprint_r>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	f040 81a1 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005b78:	ab2c      	add	r3, sp, #176	; 0xb0
 8005b7a:	9a03      	ldr	r2, [sp, #12]
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	9903      	ldr	r1, [sp, #12]
 8005b80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b82:	f8c3 8000 	str.w	r8, [r3]
 8005b86:	440a      	add	r2, r1
 8005b88:	9221      	str	r2, [sp, #132]	; 0x84
 8005b8a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b8c:	3201      	adds	r2, #1
 8005b8e:	2a07      	cmp	r2, #7
 8005b90:	9220      	str	r2, [sp, #128]	; 0x80
 8005b92:	f73f ad59 	bgt.w	8005648 <_svfprintf_r+0x650>
 8005b96:	f103 0408 	add.w	r4, r3, #8
 8005b9a:	e55e      	b.n	800565a <_svfprintf_r+0x662>
 8005b9c:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b9e:	4651      	mov	r1, sl
 8005ba0:	4658      	mov	r0, fp
 8005ba2:	f001 fd79 	bl	8007698 <__ssprint_r>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	f040 8187 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005bac:	ac2c      	add	r4, sp, #176	; 0xb0
 8005bae:	e7b1      	b.n	8005b14 <_svfprintf_r+0xb1c>
 8005bb0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005bb2:	4651      	mov	r1, sl
 8005bb4:	4658      	mov	r0, fp
 8005bb6:	f001 fd6f 	bl	8007698 <__ssprint_r>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	f040 817d 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005bc0:	ab2c      	add	r3, sp, #176	; 0xb0
 8005bc2:	e7bd      	b.n	8005b40 <_svfprintf_r+0xb48>
 8005bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005bc6:	605c      	str	r4, [r3, #4]
 8005bc8:	3210      	adds	r2, #16
 8005bca:	9221      	str	r2, [sp, #132]	; 0x84
 8005bcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005bce:	3201      	adds	r2, #1
 8005bd0:	2a07      	cmp	r2, #7
 8005bd2:	9220      	str	r2, [sp, #128]	; 0x80
 8005bd4:	dc02      	bgt.n	8005bdc <_svfprintf_r+0xbe4>
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	3e10      	subs	r6, #16
 8005bda:	e7b7      	b.n	8005b4c <_svfprintf_r+0xb54>
 8005bdc:	aa1f      	add	r2, sp, #124	; 0x7c
 8005bde:	4651      	mov	r1, sl
 8005be0:	4658      	mov	r0, fp
 8005be2:	f001 fd59 	bl	8007698 <__ssprint_r>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f040 8167 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005bec:	ab2c      	add	r3, sp, #176	; 0xb0
 8005bee:	e7f3      	b.n	8005bd8 <_svfprintf_r+0xbe0>
 8005bf0:	9b03      	ldr	r3, [sp, #12]
 8005bf2:	42bb      	cmp	r3, r7
 8005bf4:	bfa8      	it	ge
 8005bf6:	463b      	movge	r3, r7
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	461e      	mov	r6, r3
 8005bfc:	dd0b      	ble.n	8005c16 <_svfprintf_r+0xc1e>
 8005bfe:	6063      	str	r3, [r4, #4]
 8005c00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c02:	f8c4 8000 	str.w	r8, [r4]
 8005c06:	4433      	add	r3, r6
 8005c08:	9321      	str	r3, [sp, #132]	; 0x84
 8005c0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	2b07      	cmp	r3, #7
 8005c10:	9320      	str	r3, [sp, #128]	; 0x80
 8005c12:	dc5f      	bgt.n	8005cd4 <_svfprintf_r+0xcdc>
 8005c14:	3408      	adds	r4, #8
 8005c16:	2e00      	cmp	r6, #0
 8005c18:	bfac      	ite	ge
 8005c1a:	1bbe      	subge	r6, r7, r6
 8005c1c:	463e      	movlt	r6, r7
 8005c1e:	2e00      	cmp	r6, #0
 8005c20:	dd0f      	ble.n	8005c42 <_svfprintf_r+0xc4a>
 8005c22:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8005d6c <_svfprintf_r+0xd74>
 8005c26:	f8c4 9000 	str.w	r9, [r4]
 8005c2a:	2e10      	cmp	r6, #16
 8005c2c:	dc5c      	bgt.n	8005ce8 <_svfprintf_r+0xcf0>
 8005c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c30:	6066      	str	r6, [r4, #4]
 8005c32:	441e      	add	r6, r3
 8005c34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c36:	9621      	str	r6, [sp, #132]	; 0x84
 8005c38:	3301      	adds	r3, #1
 8005c3a:	2b07      	cmp	r3, #7
 8005c3c:	9320      	str	r3, [sp, #128]	; 0x80
 8005c3e:	dc6a      	bgt.n	8005d16 <_svfprintf_r+0xd1e>
 8005c40:	3408      	adds	r4, #8
 8005c42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c44:	9a03      	ldr	r2, [sp, #12]
 8005c46:	4293      	cmp	r3, r2
 8005c48:	db01      	blt.n	8005c4e <_svfprintf_r+0xc56>
 8005c4a:	07e9      	lsls	r1, r5, #31
 8005c4c:	d50d      	bpl.n	8005c6a <_svfprintf_r+0xc72>
 8005c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	9b08      	ldr	r3, [sp, #32]
 8005c54:	6063      	str	r3, [r4, #4]
 8005c56:	9a08      	ldr	r2, [sp, #32]
 8005c58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c5a:	4413      	add	r3, r2
 8005c5c:	9321      	str	r3, [sp, #132]	; 0x84
 8005c5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c60:	3301      	adds	r3, #1
 8005c62:	2b07      	cmp	r3, #7
 8005c64:	9320      	str	r3, [sp, #128]	; 0x80
 8005c66:	dc60      	bgt.n	8005d2a <_svfprintf_r+0xd32>
 8005c68:	3408      	adds	r4, #8
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	9a03      	ldr	r2, [sp, #12]
 8005c6e:	1bde      	subs	r6, r3, r7
 8005c70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	429e      	cmp	r6, r3
 8005c76:	bfa8      	it	ge
 8005c78:	461e      	movge	r6, r3
 8005c7a:	2e00      	cmp	r6, #0
 8005c7c:	dd0b      	ble.n	8005c96 <_svfprintf_r+0xc9e>
 8005c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c80:	6066      	str	r6, [r4, #4]
 8005c82:	4433      	add	r3, r6
 8005c84:	9321      	str	r3, [sp, #132]	; 0x84
 8005c86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c88:	3301      	adds	r3, #1
 8005c8a:	4447      	add	r7, r8
 8005c8c:	2b07      	cmp	r3, #7
 8005c8e:	6027      	str	r7, [r4, #0]
 8005c90:	9320      	str	r3, [sp, #128]	; 0x80
 8005c92:	dc54      	bgt.n	8005d3e <_svfprintf_r+0xd46>
 8005c94:	3408      	adds	r4, #8
 8005c96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c98:	9a03      	ldr	r2, [sp, #12]
 8005c9a:	2e00      	cmp	r6, #0
 8005c9c:	eba2 0303 	sub.w	r3, r2, r3
 8005ca0:	bfac      	ite	ge
 8005ca2:	1b9e      	subge	r6, r3, r6
 8005ca4:	461e      	movlt	r6, r3
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	f77f acd7 	ble.w	800565a <_svfprintf_r+0x662>
 8005cac:	4f2f      	ldr	r7, [pc, #188]	; (8005d6c <_svfprintf_r+0xd74>)
 8005cae:	f04f 0810 	mov.w	r8, #16
 8005cb2:	2e10      	cmp	r6, #16
 8005cb4:	6027      	str	r7, [r4, #0]
 8005cb6:	f77f aee7 	ble.w	8005a88 <_svfprintf_r+0xa90>
 8005cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cbc:	f8c4 8004 	str.w	r8, [r4, #4]
 8005cc0:	3310      	adds	r3, #16
 8005cc2:	9321      	str	r3, [sp, #132]	; 0x84
 8005cc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	2b07      	cmp	r3, #7
 8005cca:	9320      	str	r3, [sp, #128]	; 0x80
 8005ccc:	dc41      	bgt.n	8005d52 <_svfprintf_r+0xd5a>
 8005cce:	3408      	adds	r4, #8
 8005cd0:	3e10      	subs	r6, #16
 8005cd2:	e7ee      	b.n	8005cb2 <_svfprintf_r+0xcba>
 8005cd4:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cd6:	4651      	mov	r1, sl
 8005cd8:	4658      	mov	r0, fp
 8005cda:	f001 fcdd 	bl	8007698 <__ssprint_r>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	f040 80eb 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005ce4:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ce6:	e796      	b.n	8005c16 <_svfprintf_r+0xc1e>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	6063      	str	r3, [r4, #4]
 8005cec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cee:	3310      	adds	r3, #16
 8005cf0:	9321      	str	r3, [sp, #132]	; 0x84
 8005cf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	2b07      	cmp	r3, #7
 8005cf8:	9320      	str	r3, [sp, #128]	; 0x80
 8005cfa:	dc02      	bgt.n	8005d02 <_svfprintf_r+0xd0a>
 8005cfc:	3408      	adds	r4, #8
 8005cfe:	3e10      	subs	r6, #16
 8005d00:	e791      	b.n	8005c26 <_svfprintf_r+0xc2e>
 8005d02:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d04:	4651      	mov	r1, sl
 8005d06:	4658      	mov	r0, fp
 8005d08:	f001 fcc6 	bl	8007698 <__ssprint_r>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f040 80d4 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005d12:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d14:	e7f3      	b.n	8005cfe <_svfprintf_r+0xd06>
 8005d16:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d18:	4651      	mov	r1, sl
 8005d1a:	4658      	mov	r0, fp
 8005d1c:	f001 fcbc 	bl	8007698 <__ssprint_r>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	f040 80ca 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005d26:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d28:	e78b      	b.n	8005c42 <_svfprintf_r+0xc4a>
 8005d2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	4658      	mov	r0, fp
 8005d30:	f001 fcb2 	bl	8007698 <__ssprint_r>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	f040 80c0 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005d3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d3c:	e795      	b.n	8005c6a <_svfprintf_r+0xc72>
 8005d3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d40:	4651      	mov	r1, sl
 8005d42:	4658      	mov	r0, fp
 8005d44:	f001 fca8 	bl	8007698 <__ssprint_r>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	f040 80b6 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005d4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d50:	e7a1      	b.n	8005c96 <_svfprintf_r+0xc9e>
 8005d52:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d54:	4651      	mov	r1, sl
 8005d56:	4658      	mov	r0, fp
 8005d58:	f001 fc9e 	bl	8007698 <__ssprint_r>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	f040 80ac 	bne.w	8005eba <_svfprintf_r+0xec2>
 8005d62:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d64:	e7b4      	b.n	8005cd0 <_svfprintf_r+0xcd8>
 8005d66:	bf00      	nop
 8005d68:	08007eae 	.word	0x08007eae
 8005d6c:	08007ec0 	.word	0x08007ec0
 8005d70:	9b03      	ldr	r3, [sp, #12]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	dc01      	bgt.n	8005d7a <_svfprintf_r+0xd82>
 8005d76:	07ea      	lsls	r2, r5, #31
 8005d78:	d576      	bpl.n	8005e68 <_svfprintf_r+0xe70>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	6063      	str	r3, [r4, #4]
 8005d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d80:	f8c4 8000 	str.w	r8, [r4]
 8005d84:	3301      	adds	r3, #1
 8005d86:	9321      	str	r3, [sp, #132]	; 0x84
 8005d88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	2b07      	cmp	r3, #7
 8005d8e:	9320      	str	r3, [sp, #128]	; 0x80
 8005d90:	dc36      	bgt.n	8005e00 <_svfprintf_r+0xe08>
 8005d92:	3408      	adds	r4, #8
 8005d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	9b08      	ldr	r3, [sp, #32]
 8005d9a:	6063      	str	r3, [r4, #4]
 8005d9c:	9a08      	ldr	r2, [sp, #32]
 8005d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005da0:	4413      	add	r3, r2
 8005da2:	9321      	str	r3, [sp, #132]	; 0x84
 8005da4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005da6:	3301      	adds	r3, #1
 8005da8:	2b07      	cmp	r3, #7
 8005daa:	9320      	str	r3, [sp, #128]	; 0x80
 8005dac:	dc31      	bgt.n	8005e12 <_svfprintf_r+0xe1a>
 8005dae:	3408      	adds	r4, #8
 8005db0:	2300      	movs	r3, #0
 8005db2:	2200      	movs	r2, #0
 8005db4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005db8:	f7fa fea2 	bl	8000b00 <__aeabi_dcmpeq>
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	1e5e      	subs	r6, r3, #1
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d12f      	bne.n	8005e24 <_svfprintf_r+0xe2c>
 8005dc4:	f108 0301 	add.w	r3, r8, #1
 8005dc8:	e884 0048 	stmia.w	r4, {r3, r6}
 8005dcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dce:	9a03      	ldr	r2, [sp, #12]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	4413      	add	r3, r2
 8005dd4:	9321      	str	r3, [sp, #132]	; 0x84
 8005dd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005dd8:	3301      	adds	r3, #1
 8005dda:	2b07      	cmp	r3, #7
 8005ddc:	9320      	str	r3, [sp, #128]	; 0x80
 8005dde:	dd4a      	ble.n	8005e76 <_svfprintf_r+0xe7e>
 8005de0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005de2:	4651      	mov	r1, sl
 8005de4:	4658      	mov	r0, fp
 8005de6:	f001 fc57 	bl	8007698 <__ssprint_r>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d165      	bne.n	8005eba <_svfprintf_r+0xec2>
 8005dee:	ac2c      	add	r4, sp, #176	; 0xb0
 8005df0:	ab1b      	add	r3, sp, #108	; 0x6c
 8005df2:	6023      	str	r3, [r4, #0]
 8005df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005df6:	6063      	str	r3, [r4, #4]
 8005df8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dfc:	4413      	add	r3, r2
 8005dfe:	e41c      	b.n	800563a <_svfprintf_r+0x642>
 8005e00:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e02:	4651      	mov	r1, sl
 8005e04:	4658      	mov	r0, fp
 8005e06:	f001 fc47 	bl	8007698 <__ssprint_r>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d155      	bne.n	8005eba <_svfprintf_r+0xec2>
 8005e0e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e10:	e7c0      	b.n	8005d94 <_svfprintf_r+0xd9c>
 8005e12:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e14:	4651      	mov	r1, sl
 8005e16:	4658      	mov	r0, fp
 8005e18:	f001 fc3e 	bl	8007698 <__ssprint_r>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d14c      	bne.n	8005eba <_svfprintf_r+0xec2>
 8005e20:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e22:	e7c5      	b.n	8005db0 <_svfprintf_r+0xdb8>
 8005e24:	2e00      	cmp	r6, #0
 8005e26:	dde3      	ble.n	8005df0 <_svfprintf_r+0xdf8>
 8005e28:	4f59      	ldr	r7, [pc, #356]	; (8005f90 <_svfprintf_r+0xf98>)
 8005e2a:	f04f 0810 	mov.w	r8, #16
 8005e2e:	2e10      	cmp	r6, #16
 8005e30:	6027      	str	r7, [r4, #0]
 8005e32:	dc04      	bgt.n	8005e3e <_svfprintf_r+0xe46>
 8005e34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e36:	6066      	str	r6, [r4, #4]
 8005e38:	441e      	add	r6, r3
 8005e3a:	9621      	str	r6, [sp, #132]	; 0x84
 8005e3c:	e7cb      	b.n	8005dd6 <_svfprintf_r+0xdde>
 8005e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e40:	f8c4 8004 	str.w	r8, [r4, #4]
 8005e44:	3310      	adds	r3, #16
 8005e46:	9321      	str	r3, [sp, #132]	; 0x84
 8005e48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	2b07      	cmp	r3, #7
 8005e4e:	9320      	str	r3, [sp, #128]	; 0x80
 8005e50:	dc02      	bgt.n	8005e58 <_svfprintf_r+0xe60>
 8005e52:	3408      	adds	r4, #8
 8005e54:	3e10      	subs	r6, #16
 8005e56:	e7ea      	b.n	8005e2e <_svfprintf_r+0xe36>
 8005e58:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e5a:	4651      	mov	r1, sl
 8005e5c:	4658      	mov	r0, fp
 8005e5e:	f001 fc1b 	bl	8007698 <__ssprint_r>
 8005e62:	bb50      	cbnz	r0, 8005eba <_svfprintf_r+0xec2>
 8005e64:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e66:	e7f5      	b.n	8005e54 <_svfprintf_r+0xe5c>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	6063      	str	r3, [r4, #4]
 8005e6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e6e:	f8c4 8000 	str.w	r8, [r4]
 8005e72:	3301      	adds	r3, #1
 8005e74:	e7ae      	b.n	8005dd4 <_svfprintf_r+0xddc>
 8005e76:	3408      	adds	r4, #8
 8005e78:	e7ba      	b.n	8005df0 <_svfprintf_r+0xdf8>
 8005e7a:	3408      	adds	r4, #8
 8005e7c:	f7ff bbed 	b.w	800565a <_svfprintf_r+0x662>
 8005e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e84:	1a9d      	subs	r5, r3, r2
 8005e86:	2d00      	cmp	r5, #0
 8005e88:	f77f abea 	ble.w	8005660 <_svfprintf_r+0x668>
 8005e8c:	2610      	movs	r6, #16
 8005e8e:	4b41      	ldr	r3, [pc, #260]	; (8005f94 <_svfprintf_r+0xf9c>)
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	2d10      	cmp	r5, #16
 8005e94:	dc1b      	bgt.n	8005ece <_svfprintf_r+0xed6>
 8005e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e98:	6065      	str	r5, [r4, #4]
 8005e9a:	441d      	add	r5, r3
 8005e9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e9e:	9521      	str	r5, [sp, #132]	; 0x84
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	2b07      	cmp	r3, #7
 8005ea4:	9320      	str	r3, [sp, #128]	; 0x80
 8005ea6:	f77f abdb 	ble.w	8005660 <_svfprintf_r+0x668>
 8005eaa:	aa1f      	add	r2, sp, #124	; 0x7c
 8005eac:	4651      	mov	r1, sl
 8005eae:	4658      	mov	r0, fp
 8005eb0:	f001 fbf2 	bl	8007698 <__ssprint_r>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	f43f abd3 	beq.w	8005660 <_svfprintf_r+0x668>
 8005eba:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005ebe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec4:	bf18      	it	ne
 8005ec6:	f04f 33ff 	movne.w	r3, #4294967295
 8005eca:	f7ff b8b9 	b.w	8005040 <_svfprintf_r+0x48>
 8005ece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ed0:	6066      	str	r6, [r4, #4]
 8005ed2:	3310      	adds	r3, #16
 8005ed4:	9321      	str	r3, [sp, #132]	; 0x84
 8005ed6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ed8:	3301      	adds	r3, #1
 8005eda:	2b07      	cmp	r3, #7
 8005edc:	9320      	str	r3, [sp, #128]	; 0x80
 8005ede:	dc02      	bgt.n	8005ee6 <_svfprintf_r+0xeee>
 8005ee0:	3408      	adds	r4, #8
 8005ee2:	3d10      	subs	r5, #16
 8005ee4:	e7d3      	b.n	8005e8e <_svfprintf_r+0xe96>
 8005ee6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ee8:	4651      	mov	r1, sl
 8005eea:	4658      	mov	r0, fp
 8005eec:	f001 fbd4 	bl	8007698 <__ssprint_r>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d1e2      	bne.n	8005eba <_svfprintf_r+0xec2>
 8005ef4:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ef6:	e7f4      	b.n	8005ee2 <_svfprintf_r+0xeea>
 8005ef8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0dd      	beq.n	8005eba <_svfprintf_r+0xec2>
 8005efe:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f00:	4651      	mov	r1, sl
 8005f02:	4658      	mov	r0, fp
 8005f04:	f001 fbc8 	bl	8007698 <__ssprint_r>
 8005f08:	e7d7      	b.n	8005eba <_svfprintf_r+0xec2>
 8005f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f0e:	4610      	mov	r0, r2
 8005f10:	4619      	mov	r1, r3
 8005f12:	f7fa fe27 	bl	8000b64 <__aeabi_dcmpun>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f43f aa44 	beq.w	80053a4 <_svfprintf_r+0x3ac>
 8005f1c:	4b1e      	ldr	r3, [pc, #120]	; (8005f98 <_svfprintf_r+0xfa0>)
 8005f1e:	4a1f      	ldr	r2, [pc, #124]	; (8005f9c <_svfprintf_r+0xfa4>)
 8005f20:	f7ff ba34 	b.w	800538c <_svfprintf_r+0x394>
 8005f24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f26:	eba3 0308 	sub.w	r3, r3, r8
 8005f2a:	9303      	str	r3, [sp, #12]
 8005f2c:	f7ff bab5 	b.w	800549a <_svfprintf_r+0x4a2>
 8005f30:	ea56 0207 	orrs.w	r2, r6, r7
 8005f34:	950b      	str	r5, [sp, #44]	; 0x2c
 8005f36:	f43f ac2b 	beq.w	8005790 <_svfprintf_r+0x798>
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	f43f ac9d 	beq.w	800587a <_svfprintf_r+0x882>
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	f43f acbd 	beq.w	80058c0 <_svfprintf_r+0x8c8>
 8005f46:	ab2c      	add	r3, sp, #176	; 0xb0
 8005f48:	08f1      	lsrs	r1, r6, #3
 8005f4a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8005f4e:	08f8      	lsrs	r0, r7, #3
 8005f50:	f006 0207 	and.w	r2, r6, #7
 8005f54:	4607      	mov	r7, r0
 8005f56:	460e      	mov	r6, r1
 8005f58:	3230      	adds	r2, #48	; 0x30
 8005f5a:	ea56 0107 	orrs.w	r1, r6, r7
 8005f5e:	f103 38ff 	add.w	r8, r3, #4294967295
 8005f62:	f803 2c01 	strb.w	r2, [r3, #-1]
 8005f66:	f47f ac86 	bne.w	8005876 <_svfprintf_r+0x87e>
 8005f6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f6c:	07c9      	lsls	r1, r1, #31
 8005f6e:	d506      	bpl.n	8005f7e <_svfprintf_r+0xf86>
 8005f70:	2a30      	cmp	r2, #48	; 0x30
 8005f72:	d004      	beq.n	8005f7e <_svfprintf_r+0xf86>
 8005f74:	2230      	movs	r2, #48	; 0x30
 8005f76:	f808 2c01 	strb.w	r2, [r8, #-1]
 8005f7a:	f1a3 0802 	sub.w	r8, r3, #2
 8005f7e:	464e      	mov	r6, r9
 8005f80:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005f84:	eba9 0908 	sub.w	r9, r9, r8
 8005f88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005f8a:	2700      	movs	r7, #0
 8005f8c:	f7ff bad1 	b.w	8005532 <_svfprintf_r+0x53a>
 8005f90:	08007ec0 	.word	0x08007ec0
 8005f94:	08007eb0 	.word	0x08007eb0
 8005f98:	08007e84 	.word	0x08007e84
 8005f9c:	08007e88 	.word	0x08007e88

08005fa0 <quorem>:
 8005fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	6903      	ldr	r3, [r0, #16]
 8005fa6:	690c      	ldr	r4, [r1, #16]
 8005fa8:	429c      	cmp	r4, r3
 8005faa:	4680      	mov	r8, r0
 8005fac:	f300 8082 	bgt.w	80060b4 <quorem+0x114>
 8005fb0:	3c01      	subs	r4, #1
 8005fb2:	f101 0714 	add.w	r7, r1, #20
 8005fb6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005fba:	f100 0614 	add.w	r6, r0, #20
 8005fbe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005fc2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005fc6:	eb06 030e 	add.w	r3, r6, lr
 8005fca:	3501      	adds	r5, #1
 8005fcc:	eb07 090e 	add.w	r9, r7, lr
 8005fd0:	9301      	str	r3, [sp, #4]
 8005fd2:	fbb0 f5f5 	udiv	r5, r0, r5
 8005fd6:	b395      	cbz	r5, 800603e <quorem+0x9e>
 8005fd8:	f04f 0a00 	mov.w	sl, #0
 8005fdc:	4638      	mov	r0, r7
 8005fde:	46b4      	mov	ip, r6
 8005fe0:	46d3      	mov	fp, sl
 8005fe2:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fe6:	b293      	uxth	r3, r2
 8005fe8:	fb05 a303 	mla	r3, r5, r3, sl
 8005fec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	ebab 0303 	sub.w	r3, fp, r3
 8005ff6:	0c12      	lsrs	r2, r2, #16
 8005ff8:	f8bc b000 	ldrh.w	fp, [ip]
 8005ffc:	fb05 a202 	mla	r2, r5, r2, sl
 8006000:	fa13 f38b 	uxtah	r3, r3, fp
 8006004:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006008:	fa1f fb82 	uxth.w	fp, r2
 800600c:	f8dc 2000 	ldr.w	r2, [ip]
 8006010:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006018:	b29b      	uxth	r3, r3
 800601a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800601e:	4581      	cmp	r9, r0
 8006020:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006024:	f84c 3b04 	str.w	r3, [ip], #4
 8006028:	d2db      	bcs.n	8005fe2 <quorem+0x42>
 800602a:	f856 300e 	ldr.w	r3, [r6, lr]
 800602e:	b933      	cbnz	r3, 800603e <quorem+0x9e>
 8006030:	9b01      	ldr	r3, [sp, #4]
 8006032:	3b04      	subs	r3, #4
 8006034:	429e      	cmp	r6, r3
 8006036:	461a      	mov	r2, r3
 8006038:	d330      	bcc.n	800609c <quorem+0xfc>
 800603a:	f8c8 4010 	str.w	r4, [r8, #16]
 800603e:	4640      	mov	r0, r8
 8006040:	f001 fa53 	bl	80074ea <__mcmp>
 8006044:	2800      	cmp	r0, #0
 8006046:	db25      	blt.n	8006094 <quorem+0xf4>
 8006048:	3501      	adds	r5, #1
 800604a:	4630      	mov	r0, r6
 800604c:	f04f 0e00 	mov.w	lr, #0
 8006050:	f857 2b04 	ldr.w	r2, [r7], #4
 8006054:	f8d0 c000 	ldr.w	ip, [r0]
 8006058:	b293      	uxth	r3, r2
 800605a:	ebae 0303 	sub.w	r3, lr, r3
 800605e:	0c12      	lsrs	r2, r2, #16
 8006060:	fa13 f38c 	uxtah	r3, r3, ip
 8006064:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006068:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800606c:	b29b      	uxth	r3, r3
 800606e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006072:	45b9      	cmp	r9, r7
 8006074:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006078:	f840 3b04 	str.w	r3, [r0], #4
 800607c:	d2e8      	bcs.n	8006050 <quorem+0xb0>
 800607e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006082:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006086:	b92a      	cbnz	r2, 8006094 <quorem+0xf4>
 8006088:	3b04      	subs	r3, #4
 800608a:	429e      	cmp	r6, r3
 800608c:	461a      	mov	r2, r3
 800608e:	d30b      	bcc.n	80060a8 <quorem+0x108>
 8006090:	f8c8 4010 	str.w	r4, [r8, #16]
 8006094:	4628      	mov	r0, r5
 8006096:	b003      	add	sp, #12
 8006098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609c:	6812      	ldr	r2, [r2, #0]
 800609e:	3b04      	subs	r3, #4
 80060a0:	2a00      	cmp	r2, #0
 80060a2:	d1ca      	bne.n	800603a <quorem+0x9a>
 80060a4:	3c01      	subs	r4, #1
 80060a6:	e7c5      	b.n	8006034 <quorem+0x94>
 80060a8:	6812      	ldr	r2, [r2, #0]
 80060aa:	3b04      	subs	r3, #4
 80060ac:	2a00      	cmp	r2, #0
 80060ae:	d1ef      	bne.n	8006090 <quorem+0xf0>
 80060b0:	3c01      	subs	r4, #1
 80060b2:	e7ea      	b.n	800608a <quorem+0xea>
 80060b4:	2000      	movs	r0, #0
 80060b6:	e7ee      	b.n	8006096 <quorem+0xf6>

080060b8 <_dtoa_r>:
 80060b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060bc:	ec57 6b10 	vmov	r6, r7, d0
 80060c0:	b097      	sub	sp, #92	; 0x5c
 80060c2:	e9cd 6700 	strd	r6, r7, [sp]
 80060c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060c8:	9107      	str	r1, [sp, #28]
 80060ca:	4604      	mov	r4, r0
 80060cc:	920a      	str	r2, [sp, #40]	; 0x28
 80060ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80060d0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80060d2:	b93e      	cbnz	r6, 80060e4 <_dtoa_r+0x2c>
 80060d4:	2010      	movs	r0, #16
 80060d6:	f000 fdcb 	bl	8006c70 <malloc>
 80060da:	6260      	str	r0, [r4, #36]	; 0x24
 80060dc:	6046      	str	r6, [r0, #4]
 80060de:	6086      	str	r6, [r0, #8]
 80060e0:	6006      	str	r6, [r0, #0]
 80060e2:	60c6      	str	r6, [r0, #12]
 80060e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e6:	6819      	ldr	r1, [r3, #0]
 80060e8:	b151      	cbz	r1, 8006100 <_dtoa_r+0x48>
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	604a      	str	r2, [r1, #4]
 80060ee:	2301      	movs	r3, #1
 80060f0:	4093      	lsls	r3, r2
 80060f2:	608b      	str	r3, [r1, #8]
 80060f4:	4620      	mov	r0, r4
 80060f6:	f001 f823 	bl	8007140 <_Bfree>
 80060fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	9b01      	ldr	r3, [sp, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	bfbf      	itttt	lt
 8006106:	2301      	movlt	r3, #1
 8006108:	602b      	strlt	r3, [r5, #0]
 800610a:	9b01      	ldrlt	r3, [sp, #4]
 800610c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006110:	bfb2      	itee	lt
 8006112:	9301      	strlt	r3, [sp, #4]
 8006114:	2300      	movge	r3, #0
 8006116:	602b      	strge	r3, [r5, #0]
 8006118:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800611c:	4ba8      	ldr	r3, [pc, #672]	; (80063c0 <_dtoa_r+0x308>)
 800611e:	ea33 0308 	bics.w	r3, r3, r8
 8006122:	d11b      	bne.n	800615c <_dtoa_r+0xa4>
 8006124:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006126:	f242 730f 	movw	r3, #9999	; 0x270f
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	9b00      	ldr	r3, [sp, #0]
 800612e:	b923      	cbnz	r3, 800613a <_dtoa_r+0x82>
 8006130:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006134:	2800      	cmp	r0, #0
 8006136:	f000 8578 	beq.w	8006c2a <_dtoa_r+0xb72>
 800613a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800613c:	b953      	cbnz	r3, 8006154 <_dtoa_r+0x9c>
 800613e:	4ba1      	ldr	r3, [pc, #644]	; (80063c4 <_dtoa_r+0x30c>)
 8006140:	e021      	b.n	8006186 <_dtoa_r+0xce>
 8006142:	4ba1      	ldr	r3, [pc, #644]	; (80063c8 <_dtoa_r+0x310>)
 8006144:	9302      	str	r3, [sp, #8]
 8006146:	3308      	adds	r3, #8
 8006148:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	9802      	ldr	r0, [sp, #8]
 800614e:	b017      	add	sp, #92	; 0x5c
 8006150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006154:	4b9b      	ldr	r3, [pc, #620]	; (80063c4 <_dtoa_r+0x30c>)
 8006156:	9302      	str	r3, [sp, #8]
 8006158:	3303      	adds	r3, #3
 800615a:	e7f5      	b.n	8006148 <_dtoa_r+0x90>
 800615c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006160:	2200      	movs	r2, #0
 8006162:	2300      	movs	r3, #0
 8006164:	4630      	mov	r0, r6
 8006166:	4639      	mov	r1, r7
 8006168:	f7fa fcca 	bl	8000b00 <__aeabi_dcmpeq>
 800616c:	4681      	mov	r9, r0
 800616e:	b160      	cbz	r0, 800618a <_dtoa_r+0xd2>
 8006170:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006172:	2301      	movs	r3, #1
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8553 	beq.w	8006c24 <_dtoa_r+0xb6c>
 800617e:	4b93      	ldr	r3, [pc, #588]	; (80063cc <_dtoa_r+0x314>)
 8006180:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	3b01      	subs	r3, #1
 8006186:	9302      	str	r3, [sp, #8]
 8006188:	e7e0      	b.n	800614c <_dtoa_r+0x94>
 800618a:	aa14      	add	r2, sp, #80	; 0x50
 800618c:	a915      	add	r1, sp, #84	; 0x54
 800618e:	ec47 6b10 	vmov	d0, r6, r7
 8006192:	4620      	mov	r0, r4
 8006194:	f001 fa21 	bl	80075da <__d2b>
 8006198:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800619c:	4682      	mov	sl, r0
 800619e:	2d00      	cmp	r5, #0
 80061a0:	d07e      	beq.n	80062a0 <_dtoa_r+0x1e8>
 80061a2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80061aa:	4630      	mov	r0, r6
 80061ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80061b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061b4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80061b8:	2200      	movs	r2, #0
 80061ba:	4b85      	ldr	r3, [pc, #532]	; (80063d0 <_dtoa_r+0x318>)
 80061bc:	f7fa f884 	bl	80002c8 <__aeabi_dsub>
 80061c0:	a379      	add	r3, pc, #484	; (adr r3, 80063a8 <_dtoa_r+0x2f0>)
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f7fa fa33 	bl	8000630 <__aeabi_dmul>
 80061ca:	a379      	add	r3, pc, #484	; (adr r3, 80063b0 <_dtoa_r+0x2f8>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f7fa f87c 	bl	80002cc <__adddf3>
 80061d4:	4606      	mov	r6, r0
 80061d6:	4628      	mov	r0, r5
 80061d8:	460f      	mov	r7, r1
 80061da:	f7fa f9c3 	bl	8000564 <__aeabi_i2d>
 80061de:	a376      	add	r3, pc, #472	; (adr r3, 80063b8 <_dtoa_r+0x300>)
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f7fa fa24 	bl	8000630 <__aeabi_dmul>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4630      	mov	r0, r6
 80061ee:	4639      	mov	r1, r7
 80061f0:	f7fa f86c 	bl	80002cc <__adddf3>
 80061f4:	4606      	mov	r6, r0
 80061f6:	460f      	mov	r7, r1
 80061f8:	f7fa fcca 	bl	8000b90 <__aeabi_d2iz>
 80061fc:	2200      	movs	r2, #0
 80061fe:	4683      	mov	fp, r0
 8006200:	2300      	movs	r3, #0
 8006202:	4630      	mov	r0, r6
 8006204:	4639      	mov	r1, r7
 8006206:	f7fa fc85 	bl	8000b14 <__aeabi_dcmplt>
 800620a:	b158      	cbz	r0, 8006224 <_dtoa_r+0x16c>
 800620c:	4658      	mov	r0, fp
 800620e:	f7fa f9a9 	bl	8000564 <__aeabi_i2d>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4630      	mov	r0, r6
 8006218:	4639      	mov	r1, r7
 800621a:	f7fa fc71 	bl	8000b00 <__aeabi_dcmpeq>
 800621e:	b908      	cbnz	r0, 8006224 <_dtoa_r+0x16c>
 8006220:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006224:	f1bb 0f16 	cmp.w	fp, #22
 8006228:	d859      	bhi.n	80062de <_dtoa_r+0x226>
 800622a:	496a      	ldr	r1, [pc, #424]	; (80063d4 <_dtoa_r+0x31c>)
 800622c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006238:	f7fa fc8a 	bl	8000b50 <__aeabi_dcmpgt>
 800623c:	2800      	cmp	r0, #0
 800623e:	d050      	beq.n	80062e2 <_dtoa_r+0x22a>
 8006240:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006244:	2300      	movs	r3, #0
 8006246:	930e      	str	r3, [sp, #56]	; 0x38
 8006248:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800624a:	1b5d      	subs	r5, r3, r5
 800624c:	1e6b      	subs	r3, r5, #1
 800624e:	9306      	str	r3, [sp, #24]
 8006250:	bf45      	ittet	mi
 8006252:	f1c5 0301 	rsbmi	r3, r5, #1
 8006256:	9305      	strmi	r3, [sp, #20]
 8006258:	2300      	movpl	r3, #0
 800625a:	2300      	movmi	r3, #0
 800625c:	bf4c      	ite	mi
 800625e:	9306      	strmi	r3, [sp, #24]
 8006260:	9305      	strpl	r3, [sp, #20]
 8006262:	f1bb 0f00 	cmp.w	fp, #0
 8006266:	db3e      	blt.n	80062e6 <_dtoa_r+0x22e>
 8006268:	9b06      	ldr	r3, [sp, #24]
 800626a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800626e:	445b      	add	r3, fp
 8006270:	9306      	str	r3, [sp, #24]
 8006272:	2300      	movs	r3, #0
 8006274:	9308      	str	r3, [sp, #32]
 8006276:	9b07      	ldr	r3, [sp, #28]
 8006278:	2b09      	cmp	r3, #9
 800627a:	f200 80af 	bhi.w	80063dc <_dtoa_r+0x324>
 800627e:	2b05      	cmp	r3, #5
 8006280:	bfc4      	itt	gt
 8006282:	3b04      	subgt	r3, #4
 8006284:	9307      	strgt	r3, [sp, #28]
 8006286:	9b07      	ldr	r3, [sp, #28]
 8006288:	f1a3 0302 	sub.w	r3, r3, #2
 800628c:	bfcc      	ite	gt
 800628e:	2600      	movgt	r6, #0
 8006290:	2601      	movle	r6, #1
 8006292:	2b03      	cmp	r3, #3
 8006294:	f200 80ae 	bhi.w	80063f4 <_dtoa_r+0x33c>
 8006298:	e8df f003 	tbb	[pc, r3]
 800629c:	772f8482 	.word	0x772f8482
 80062a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80062a4:	441d      	add	r5, r3
 80062a6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	dd11      	ble.n	80062d2 <_dtoa_r+0x21a>
 80062ae:	9a00      	ldr	r2, [sp, #0]
 80062b0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80062b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80062b8:	fa22 f000 	lsr.w	r0, r2, r0
 80062bc:	fa08 f303 	lsl.w	r3, r8, r3
 80062c0:	4318      	orrs	r0, r3
 80062c2:	f7fa f93f 	bl	8000544 <__aeabi_ui2d>
 80062c6:	2301      	movs	r3, #1
 80062c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80062cc:	3d01      	subs	r5, #1
 80062ce:	9312      	str	r3, [sp, #72]	; 0x48
 80062d0:	e772      	b.n	80061b8 <_dtoa_r+0x100>
 80062d2:	f1c3 0020 	rsb	r0, r3, #32
 80062d6:	9b00      	ldr	r3, [sp, #0]
 80062d8:	fa03 f000 	lsl.w	r0, r3, r0
 80062dc:	e7f1      	b.n	80062c2 <_dtoa_r+0x20a>
 80062de:	2301      	movs	r3, #1
 80062e0:	e7b1      	b.n	8006246 <_dtoa_r+0x18e>
 80062e2:	900e      	str	r0, [sp, #56]	; 0x38
 80062e4:	e7b0      	b.n	8006248 <_dtoa_r+0x190>
 80062e6:	9b05      	ldr	r3, [sp, #20]
 80062e8:	eba3 030b 	sub.w	r3, r3, fp
 80062ec:	9305      	str	r3, [sp, #20]
 80062ee:	f1cb 0300 	rsb	r3, fp, #0
 80062f2:	9308      	str	r3, [sp, #32]
 80062f4:	2300      	movs	r3, #0
 80062f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062f8:	e7bd      	b.n	8006276 <_dtoa_r+0x1be>
 80062fa:	2301      	movs	r3, #1
 80062fc:	9309      	str	r3, [sp, #36]	; 0x24
 80062fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006300:	2b00      	cmp	r3, #0
 8006302:	dd7a      	ble.n	80063fa <_dtoa_r+0x342>
 8006304:	9304      	str	r3, [sp, #16]
 8006306:	9303      	str	r3, [sp, #12]
 8006308:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800630a:	2200      	movs	r2, #0
 800630c:	606a      	str	r2, [r5, #4]
 800630e:	2104      	movs	r1, #4
 8006310:	f101 0214 	add.w	r2, r1, #20
 8006314:	429a      	cmp	r2, r3
 8006316:	d975      	bls.n	8006404 <_dtoa_r+0x34c>
 8006318:	6869      	ldr	r1, [r5, #4]
 800631a:	4620      	mov	r0, r4
 800631c:	f000 fedc 	bl	80070d8 <_Balloc>
 8006320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006322:	6028      	str	r0, [r5, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	9302      	str	r3, [sp, #8]
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	2b0e      	cmp	r3, #14
 800632c:	f200 80e5 	bhi.w	80064fa <_dtoa_r+0x442>
 8006330:	2e00      	cmp	r6, #0
 8006332:	f000 80e2 	beq.w	80064fa <_dtoa_r+0x442>
 8006336:	ed9d 7b00 	vldr	d7, [sp]
 800633a:	f1bb 0f00 	cmp.w	fp, #0
 800633e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006342:	dd74      	ble.n	800642e <_dtoa_r+0x376>
 8006344:	4a23      	ldr	r2, [pc, #140]	; (80063d4 <_dtoa_r+0x31c>)
 8006346:	f00b 030f 	and.w	r3, fp, #15
 800634a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800634e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006352:	06f0      	lsls	r0, r6, #27
 8006354:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006358:	d559      	bpl.n	800640e <_dtoa_r+0x356>
 800635a:	4b1f      	ldr	r3, [pc, #124]	; (80063d8 <_dtoa_r+0x320>)
 800635c:	ec51 0b17 	vmov	r0, r1, d7
 8006360:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006364:	f7fa fa8e 	bl	8000884 <__aeabi_ddiv>
 8006368:	e9cd 0100 	strd	r0, r1, [sp]
 800636c:	f006 060f 	and.w	r6, r6, #15
 8006370:	2503      	movs	r5, #3
 8006372:	4f19      	ldr	r7, [pc, #100]	; (80063d8 <_dtoa_r+0x320>)
 8006374:	2e00      	cmp	r6, #0
 8006376:	d14c      	bne.n	8006412 <_dtoa_r+0x35a>
 8006378:	4642      	mov	r2, r8
 800637a:	464b      	mov	r3, r9
 800637c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006380:	f7fa fa80 	bl	8000884 <__aeabi_ddiv>
 8006384:	e9cd 0100 	strd	r0, r1, [sp]
 8006388:	e06a      	b.n	8006460 <_dtoa_r+0x3a8>
 800638a:	2301      	movs	r3, #1
 800638c:	9309      	str	r3, [sp, #36]	; 0x24
 800638e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006390:	445b      	add	r3, fp
 8006392:	9304      	str	r3, [sp, #16]
 8006394:	3301      	adds	r3, #1
 8006396:	2b01      	cmp	r3, #1
 8006398:	9303      	str	r3, [sp, #12]
 800639a:	bfb8      	it	lt
 800639c:	2301      	movlt	r3, #1
 800639e:	e7b3      	b.n	8006308 <_dtoa_r+0x250>
 80063a0:	2300      	movs	r3, #0
 80063a2:	e7ab      	b.n	80062fc <_dtoa_r+0x244>
 80063a4:	2300      	movs	r3, #0
 80063a6:	e7f1      	b.n	800638c <_dtoa_r+0x2d4>
 80063a8:	636f4361 	.word	0x636f4361
 80063ac:	3fd287a7 	.word	0x3fd287a7
 80063b0:	8b60c8b3 	.word	0x8b60c8b3
 80063b4:	3fc68a28 	.word	0x3fc68a28
 80063b8:	509f79fb 	.word	0x509f79fb
 80063bc:	3fd34413 	.word	0x3fd34413
 80063c0:	7ff00000 	.word	0x7ff00000
 80063c4:	08007ed9 	.word	0x08007ed9
 80063c8:	08007ed0 	.word	0x08007ed0
 80063cc:	08007eaf 	.word	0x08007eaf
 80063d0:	3ff80000 	.word	0x3ff80000
 80063d4:	08007f10 	.word	0x08007f10
 80063d8:	08007ee8 	.word	0x08007ee8
 80063dc:	2601      	movs	r6, #1
 80063de:	2300      	movs	r3, #0
 80063e0:	9307      	str	r3, [sp, #28]
 80063e2:	9609      	str	r6, [sp, #36]	; 0x24
 80063e4:	f04f 33ff 	mov.w	r3, #4294967295
 80063e8:	9304      	str	r3, [sp, #16]
 80063ea:	9303      	str	r3, [sp, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	2312      	movs	r3, #18
 80063f0:	920a      	str	r2, [sp, #40]	; 0x28
 80063f2:	e789      	b.n	8006308 <_dtoa_r+0x250>
 80063f4:	2301      	movs	r3, #1
 80063f6:	9309      	str	r3, [sp, #36]	; 0x24
 80063f8:	e7f4      	b.n	80063e4 <_dtoa_r+0x32c>
 80063fa:	2301      	movs	r3, #1
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	9303      	str	r3, [sp, #12]
 8006400:	461a      	mov	r2, r3
 8006402:	e7f5      	b.n	80063f0 <_dtoa_r+0x338>
 8006404:	686a      	ldr	r2, [r5, #4]
 8006406:	3201      	adds	r2, #1
 8006408:	606a      	str	r2, [r5, #4]
 800640a:	0049      	lsls	r1, r1, #1
 800640c:	e780      	b.n	8006310 <_dtoa_r+0x258>
 800640e:	2502      	movs	r5, #2
 8006410:	e7af      	b.n	8006372 <_dtoa_r+0x2ba>
 8006412:	07f1      	lsls	r1, r6, #31
 8006414:	d508      	bpl.n	8006428 <_dtoa_r+0x370>
 8006416:	4640      	mov	r0, r8
 8006418:	4649      	mov	r1, r9
 800641a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641e:	f7fa f907 	bl	8000630 <__aeabi_dmul>
 8006422:	3501      	adds	r5, #1
 8006424:	4680      	mov	r8, r0
 8006426:	4689      	mov	r9, r1
 8006428:	1076      	asrs	r6, r6, #1
 800642a:	3708      	adds	r7, #8
 800642c:	e7a2      	b.n	8006374 <_dtoa_r+0x2bc>
 800642e:	f000 809d 	beq.w	800656c <_dtoa_r+0x4b4>
 8006432:	f1cb 0600 	rsb	r6, fp, #0
 8006436:	4b9f      	ldr	r3, [pc, #636]	; (80066b4 <_dtoa_r+0x5fc>)
 8006438:	4f9f      	ldr	r7, [pc, #636]	; (80066b8 <_dtoa_r+0x600>)
 800643a:	f006 020f 	and.w	r2, r6, #15
 800643e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800644a:	f7fa f8f1 	bl	8000630 <__aeabi_dmul>
 800644e:	e9cd 0100 	strd	r0, r1, [sp]
 8006452:	1136      	asrs	r6, r6, #4
 8006454:	2300      	movs	r3, #0
 8006456:	2502      	movs	r5, #2
 8006458:	2e00      	cmp	r6, #0
 800645a:	d17c      	bne.n	8006556 <_dtoa_r+0x49e>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d191      	bne.n	8006384 <_dtoa_r+0x2cc>
 8006460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 8084 	beq.w	8006570 <_dtoa_r+0x4b8>
 8006468:	e9dd 8900 	ldrd	r8, r9, [sp]
 800646c:	2200      	movs	r2, #0
 800646e:	4b93      	ldr	r3, [pc, #588]	; (80066bc <_dtoa_r+0x604>)
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7fa fb4e 	bl	8000b14 <__aeabi_dcmplt>
 8006478:	2800      	cmp	r0, #0
 800647a:	d079      	beq.n	8006570 <_dtoa_r+0x4b8>
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d076      	beq.n	8006570 <_dtoa_r+0x4b8>
 8006482:	9b04      	ldr	r3, [sp, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	dd34      	ble.n	80064f2 <_dtoa_r+0x43a>
 8006488:	2200      	movs	r2, #0
 800648a:	4b8d      	ldr	r3, [pc, #564]	; (80066c0 <_dtoa_r+0x608>)
 800648c:	4640      	mov	r0, r8
 800648e:	4649      	mov	r1, r9
 8006490:	f7fa f8ce 	bl	8000630 <__aeabi_dmul>
 8006494:	e9cd 0100 	strd	r0, r1, [sp]
 8006498:	9e04      	ldr	r6, [sp, #16]
 800649a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800649e:	3501      	adds	r5, #1
 80064a0:	4628      	mov	r0, r5
 80064a2:	f7fa f85f 	bl	8000564 <__aeabi_i2d>
 80064a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064aa:	f7fa f8c1 	bl	8000630 <__aeabi_dmul>
 80064ae:	2200      	movs	r2, #0
 80064b0:	4b84      	ldr	r3, [pc, #528]	; (80066c4 <_dtoa_r+0x60c>)
 80064b2:	f7f9 ff0b 	bl	80002cc <__adddf3>
 80064b6:	4680      	mov	r8, r0
 80064b8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80064bc:	2e00      	cmp	r6, #0
 80064be:	d15a      	bne.n	8006576 <_dtoa_r+0x4be>
 80064c0:	2200      	movs	r2, #0
 80064c2:	4b81      	ldr	r3, [pc, #516]	; (80066c8 <_dtoa_r+0x610>)
 80064c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064c8:	f7f9 fefe 	bl	80002c8 <__aeabi_dsub>
 80064cc:	4642      	mov	r2, r8
 80064ce:	464b      	mov	r3, r9
 80064d0:	e9cd 0100 	strd	r0, r1, [sp]
 80064d4:	f7fa fb3c 	bl	8000b50 <__aeabi_dcmpgt>
 80064d8:	2800      	cmp	r0, #0
 80064da:	f040 829b 	bne.w	8006a14 <_dtoa_r+0x95c>
 80064de:	4642      	mov	r2, r8
 80064e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80064e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064e8:	f7fa fb14 	bl	8000b14 <__aeabi_dcmplt>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f040 828f 	bne.w	8006a10 <_dtoa_r+0x958>
 80064f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80064f6:	e9cd 2300 	strd	r2, r3, [sp]
 80064fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f2c0 8150 	blt.w	80067a2 <_dtoa_r+0x6ea>
 8006502:	f1bb 0f0e 	cmp.w	fp, #14
 8006506:	f300 814c 	bgt.w	80067a2 <_dtoa_r+0x6ea>
 800650a:	4b6a      	ldr	r3, [pc, #424]	; (80066b4 <_dtoa_r+0x5fc>)
 800650c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006510:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	f280 80da 	bge.w	80066d0 <_dtoa_r+0x618>
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f300 80d6 	bgt.w	80066d0 <_dtoa_r+0x618>
 8006524:	f040 8273 	bne.w	8006a0e <_dtoa_r+0x956>
 8006528:	2200      	movs	r2, #0
 800652a:	4b67      	ldr	r3, [pc, #412]	; (80066c8 <_dtoa_r+0x610>)
 800652c:	4640      	mov	r0, r8
 800652e:	4649      	mov	r1, r9
 8006530:	f7fa f87e 	bl	8000630 <__aeabi_dmul>
 8006534:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006538:	f7fa fb00 	bl	8000b3c <__aeabi_dcmpge>
 800653c:	9e03      	ldr	r6, [sp, #12]
 800653e:	4637      	mov	r7, r6
 8006540:	2800      	cmp	r0, #0
 8006542:	f040 824a 	bne.w	80069da <_dtoa_r+0x922>
 8006546:	9b02      	ldr	r3, [sp, #8]
 8006548:	9a02      	ldr	r2, [sp, #8]
 800654a:	1c5d      	adds	r5, r3, #1
 800654c:	2331      	movs	r3, #49	; 0x31
 800654e:	7013      	strb	r3, [r2, #0]
 8006550:	f10b 0b01 	add.w	fp, fp, #1
 8006554:	e245      	b.n	80069e2 <_dtoa_r+0x92a>
 8006556:	07f2      	lsls	r2, r6, #31
 8006558:	d505      	bpl.n	8006566 <_dtoa_r+0x4ae>
 800655a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800655e:	f7fa f867 	bl	8000630 <__aeabi_dmul>
 8006562:	3501      	adds	r5, #1
 8006564:	2301      	movs	r3, #1
 8006566:	1076      	asrs	r6, r6, #1
 8006568:	3708      	adds	r7, #8
 800656a:	e775      	b.n	8006458 <_dtoa_r+0x3a0>
 800656c:	2502      	movs	r5, #2
 800656e:	e777      	b.n	8006460 <_dtoa_r+0x3a8>
 8006570:	465f      	mov	r7, fp
 8006572:	9e03      	ldr	r6, [sp, #12]
 8006574:	e794      	b.n	80064a0 <_dtoa_r+0x3e8>
 8006576:	9a02      	ldr	r2, [sp, #8]
 8006578:	4b4e      	ldr	r3, [pc, #312]	; (80066b4 <_dtoa_r+0x5fc>)
 800657a:	4432      	add	r2, r6
 800657c:	9213      	str	r2, [sp, #76]	; 0x4c
 800657e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006580:	1e71      	subs	r1, r6, #1
 8006582:	2a00      	cmp	r2, #0
 8006584:	d048      	beq.n	8006618 <_dtoa_r+0x560>
 8006586:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	2000      	movs	r0, #0
 8006590:	494e      	ldr	r1, [pc, #312]	; (80066cc <_dtoa_r+0x614>)
 8006592:	f7fa f977 	bl	8000884 <__aeabi_ddiv>
 8006596:	4642      	mov	r2, r8
 8006598:	464b      	mov	r3, r9
 800659a:	f7f9 fe95 	bl	80002c8 <__aeabi_dsub>
 800659e:	9d02      	ldr	r5, [sp, #8]
 80065a0:	4680      	mov	r8, r0
 80065a2:	4689      	mov	r9, r1
 80065a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065a8:	f7fa faf2 	bl	8000b90 <__aeabi_d2iz>
 80065ac:	4606      	mov	r6, r0
 80065ae:	f7f9 ffd9 	bl	8000564 <__aeabi_i2d>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ba:	f7f9 fe85 	bl	80002c8 <__aeabi_dsub>
 80065be:	3630      	adds	r6, #48	; 0x30
 80065c0:	f805 6b01 	strb.w	r6, [r5], #1
 80065c4:	4642      	mov	r2, r8
 80065c6:	464b      	mov	r3, r9
 80065c8:	e9cd 0100 	strd	r0, r1, [sp]
 80065cc:	f7fa faa2 	bl	8000b14 <__aeabi_dcmplt>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d165      	bne.n	80066a0 <_dtoa_r+0x5e8>
 80065d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065d8:	2000      	movs	r0, #0
 80065da:	4938      	ldr	r1, [pc, #224]	; (80066bc <_dtoa_r+0x604>)
 80065dc:	f7f9 fe74 	bl	80002c8 <__aeabi_dsub>
 80065e0:	4642      	mov	r2, r8
 80065e2:	464b      	mov	r3, r9
 80065e4:	f7fa fa96 	bl	8000b14 <__aeabi_dcmplt>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	f040 80ba 	bne.w	8006762 <_dtoa_r+0x6aa>
 80065ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065f0:	429d      	cmp	r5, r3
 80065f2:	f43f af7e 	beq.w	80064f2 <_dtoa_r+0x43a>
 80065f6:	2200      	movs	r2, #0
 80065f8:	4b31      	ldr	r3, [pc, #196]	; (80066c0 <_dtoa_r+0x608>)
 80065fa:	4640      	mov	r0, r8
 80065fc:	4649      	mov	r1, r9
 80065fe:	f7fa f817 	bl	8000630 <__aeabi_dmul>
 8006602:	2200      	movs	r2, #0
 8006604:	4680      	mov	r8, r0
 8006606:	4689      	mov	r9, r1
 8006608:	4b2d      	ldr	r3, [pc, #180]	; (80066c0 <_dtoa_r+0x608>)
 800660a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800660e:	f7fa f80f 	bl	8000630 <__aeabi_dmul>
 8006612:	e9cd 0100 	strd	r0, r1, [sp]
 8006616:	e7c5      	b.n	80065a4 <_dtoa_r+0x4ec>
 8006618:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800661c:	4642      	mov	r2, r8
 800661e:	464b      	mov	r3, r9
 8006620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006624:	f7fa f804 	bl	8000630 <__aeabi_dmul>
 8006628:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800662c:	9d02      	ldr	r5, [sp, #8]
 800662e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006632:	f7fa faad 	bl	8000b90 <__aeabi_d2iz>
 8006636:	4606      	mov	r6, r0
 8006638:	f7f9 ff94 	bl	8000564 <__aeabi_i2d>
 800663c:	3630      	adds	r6, #48	; 0x30
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006646:	f7f9 fe3f 	bl	80002c8 <__aeabi_dsub>
 800664a:	f805 6b01 	strb.w	r6, [r5], #1
 800664e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006650:	42ab      	cmp	r3, r5
 8006652:	4680      	mov	r8, r0
 8006654:	4689      	mov	r9, r1
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	d125      	bne.n	80066a8 <_dtoa_r+0x5f0>
 800665c:	4b1b      	ldr	r3, [pc, #108]	; (80066cc <_dtoa_r+0x614>)
 800665e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006662:	f7f9 fe33 	bl	80002cc <__adddf3>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4640      	mov	r0, r8
 800666c:	4649      	mov	r1, r9
 800666e:	f7fa fa6f 	bl	8000b50 <__aeabi_dcmpgt>
 8006672:	2800      	cmp	r0, #0
 8006674:	d175      	bne.n	8006762 <_dtoa_r+0x6aa>
 8006676:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800667a:	2000      	movs	r0, #0
 800667c:	4913      	ldr	r1, [pc, #76]	; (80066cc <_dtoa_r+0x614>)
 800667e:	f7f9 fe23 	bl	80002c8 <__aeabi_dsub>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4640      	mov	r0, r8
 8006688:	4649      	mov	r1, r9
 800668a:	f7fa fa43 	bl	8000b14 <__aeabi_dcmplt>
 800668e:	2800      	cmp	r0, #0
 8006690:	f43f af2f 	beq.w	80064f2 <_dtoa_r+0x43a>
 8006694:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006698:	2b30      	cmp	r3, #48	; 0x30
 800669a:	f105 32ff 	add.w	r2, r5, #4294967295
 800669e:	d001      	beq.n	80066a4 <_dtoa_r+0x5ec>
 80066a0:	46bb      	mov	fp, r7
 80066a2:	e04d      	b.n	8006740 <_dtoa_r+0x688>
 80066a4:	4615      	mov	r5, r2
 80066a6:	e7f5      	b.n	8006694 <_dtoa_r+0x5dc>
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <_dtoa_r+0x608>)
 80066aa:	f7f9 ffc1 	bl	8000630 <__aeabi_dmul>
 80066ae:	e9cd 0100 	strd	r0, r1, [sp]
 80066b2:	e7bc      	b.n	800662e <_dtoa_r+0x576>
 80066b4:	08007f10 	.word	0x08007f10
 80066b8:	08007ee8 	.word	0x08007ee8
 80066bc:	3ff00000 	.word	0x3ff00000
 80066c0:	40240000 	.word	0x40240000
 80066c4:	401c0000 	.word	0x401c0000
 80066c8:	40140000 	.word	0x40140000
 80066cc:	3fe00000 	.word	0x3fe00000
 80066d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80066d4:	9d02      	ldr	r5, [sp, #8]
 80066d6:	4642      	mov	r2, r8
 80066d8:	464b      	mov	r3, r9
 80066da:	4630      	mov	r0, r6
 80066dc:	4639      	mov	r1, r7
 80066de:	f7fa f8d1 	bl	8000884 <__aeabi_ddiv>
 80066e2:	f7fa fa55 	bl	8000b90 <__aeabi_d2iz>
 80066e6:	9000      	str	r0, [sp, #0]
 80066e8:	f7f9 ff3c 	bl	8000564 <__aeabi_i2d>
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	f7f9 ff9e 	bl	8000630 <__aeabi_dmul>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4630      	mov	r0, r6
 80066fa:	4639      	mov	r1, r7
 80066fc:	f7f9 fde4 	bl	80002c8 <__aeabi_dsub>
 8006700:	9e00      	ldr	r6, [sp, #0]
 8006702:	9f03      	ldr	r7, [sp, #12]
 8006704:	3630      	adds	r6, #48	; 0x30
 8006706:	f805 6b01 	strb.w	r6, [r5], #1
 800670a:	9e02      	ldr	r6, [sp, #8]
 800670c:	1bae      	subs	r6, r5, r6
 800670e:	42b7      	cmp	r7, r6
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	d138      	bne.n	8006788 <_dtoa_r+0x6d0>
 8006716:	f7f9 fdd9 	bl	80002cc <__adddf3>
 800671a:	4606      	mov	r6, r0
 800671c:	460f      	mov	r7, r1
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4640      	mov	r0, r8
 8006724:	4649      	mov	r1, r9
 8006726:	f7fa f9f5 	bl	8000b14 <__aeabi_dcmplt>
 800672a:	b9c8      	cbnz	r0, 8006760 <_dtoa_r+0x6a8>
 800672c:	4632      	mov	r2, r6
 800672e:	463b      	mov	r3, r7
 8006730:	4640      	mov	r0, r8
 8006732:	4649      	mov	r1, r9
 8006734:	f7fa f9e4 	bl	8000b00 <__aeabi_dcmpeq>
 8006738:	b110      	cbz	r0, 8006740 <_dtoa_r+0x688>
 800673a:	9b00      	ldr	r3, [sp, #0]
 800673c:	07db      	lsls	r3, r3, #31
 800673e:	d40f      	bmi.n	8006760 <_dtoa_r+0x6a8>
 8006740:	4651      	mov	r1, sl
 8006742:	4620      	mov	r0, r4
 8006744:	f000 fcfc 	bl	8007140 <_Bfree>
 8006748:	2300      	movs	r3, #0
 800674a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800674c:	702b      	strb	r3, [r5, #0]
 800674e:	f10b 0301 	add.w	r3, fp, #1
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006756:	2b00      	cmp	r3, #0
 8006758:	f43f acf8 	beq.w	800614c <_dtoa_r+0x94>
 800675c:	601d      	str	r5, [r3, #0]
 800675e:	e4f5      	b.n	800614c <_dtoa_r+0x94>
 8006760:	465f      	mov	r7, fp
 8006762:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006766:	2a39      	cmp	r2, #57	; 0x39
 8006768:	f105 33ff 	add.w	r3, r5, #4294967295
 800676c:	d106      	bne.n	800677c <_dtoa_r+0x6c4>
 800676e:	9a02      	ldr	r2, [sp, #8]
 8006770:	429a      	cmp	r2, r3
 8006772:	d107      	bne.n	8006784 <_dtoa_r+0x6cc>
 8006774:	2330      	movs	r3, #48	; 0x30
 8006776:	7013      	strb	r3, [r2, #0]
 8006778:	3701      	adds	r7, #1
 800677a:	4613      	mov	r3, r2
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	3201      	adds	r2, #1
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	e78d      	b.n	80066a0 <_dtoa_r+0x5e8>
 8006784:	461d      	mov	r5, r3
 8006786:	e7ec      	b.n	8006762 <_dtoa_r+0x6aa>
 8006788:	2200      	movs	r2, #0
 800678a:	4ba4      	ldr	r3, [pc, #656]	; (8006a1c <_dtoa_r+0x964>)
 800678c:	f7f9 ff50 	bl	8000630 <__aeabi_dmul>
 8006790:	2200      	movs	r2, #0
 8006792:	2300      	movs	r3, #0
 8006794:	4606      	mov	r6, r0
 8006796:	460f      	mov	r7, r1
 8006798:	f7fa f9b2 	bl	8000b00 <__aeabi_dcmpeq>
 800679c:	2800      	cmp	r0, #0
 800679e:	d09a      	beq.n	80066d6 <_dtoa_r+0x61e>
 80067a0:	e7ce      	b.n	8006740 <_dtoa_r+0x688>
 80067a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067a4:	2a00      	cmp	r2, #0
 80067a6:	f000 80cd 	beq.w	8006944 <_dtoa_r+0x88c>
 80067aa:	9a07      	ldr	r2, [sp, #28]
 80067ac:	2a01      	cmp	r2, #1
 80067ae:	f300 80af 	bgt.w	8006910 <_dtoa_r+0x858>
 80067b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067b4:	2a00      	cmp	r2, #0
 80067b6:	f000 80a7 	beq.w	8006908 <_dtoa_r+0x850>
 80067ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067be:	9e08      	ldr	r6, [sp, #32]
 80067c0:	9d05      	ldr	r5, [sp, #20]
 80067c2:	9a05      	ldr	r2, [sp, #20]
 80067c4:	441a      	add	r2, r3
 80067c6:	9205      	str	r2, [sp, #20]
 80067c8:	9a06      	ldr	r2, [sp, #24]
 80067ca:	2101      	movs	r1, #1
 80067cc:	441a      	add	r2, r3
 80067ce:	4620      	mov	r0, r4
 80067d0:	9206      	str	r2, [sp, #24]
 80067d2:	f000 fd55 	bl	8007280 <__i2b>
 80067d6:	4607      	mov	r7, r0
 80067d8:	2d00      	cmp	r5, #0
 80067da:	dd0c      	ble.n	80067f6 <_dtoa_r+0x73e>
 80067dc:	9b06      	ldr	r3, [sp, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	dd09      	ble.n	80067f6 <_dtoa_r+0x73e>
 80067e2:	42ab      	cmp	r3, r5
 80067e4:	9a05      	ldr	r2, [sp, #20]
 80067e6:	bfa8      	it	ge
 80067e8:	462b      	movge	r3, r5
 80067ea:	1ad2      	subs	r2, r2, r3
 80067ec:	9205      	str	r2, [sp, #20]
 80067ee:	9a06      	ldr	r2, [sp, #24]
 80067f0:	1aed      	subs	r5, r5, r3
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	9306      	str	r3, [sp, #24]
 80067f6:	9b08      	ldr	r3, [sp, #32]
 80067f8:	b1f3      	cbz	r3, 8006838 <_dtoa_r+0x780>
 80067fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80a5 	beq.w	800694c <_dtoa_r+0x894>
 8006802:	2e00      	cmp	r6, #0
 8006804:	dd10      	ble.n	8006828 <_dtoa_r+0x770>
 8006806:	4639      	mov	r1, r7
 8006808:	4632      	mov	r2, r6
 800680a:	4620      	mov	r0, r4
 800680c:	f000 fdce 	bl	80073ac <__pow5mult>
 8006810:	4652      	mov	r2, sl
 8006812:	4601      	mov	r1, r0
 8006814:	4607      	mov	r7, r0
 8006816:	4620      	mov	r0, r4
 8006818:	f000 fd3b 	bl	8007292 <__multiply>
 800681c:	4651      	mov	r1, sl
 800681e:	4680      	mov	r8, r0
 8006820:	4620      	mov	r0, r4
 8006822:	f000 fc8d 	bl	8007140 <_Bfree>
 8006826:	46c2      	mov	sl, r8
 8006828:	9b08      	ldr	r3, [sp, #32]
 800682a:	1b9a      	subs	r2, r3, r6
 800682c:	d004      	beq.n	8006838 <_dtoa_r+0x780>
 800682e:	4651      	mov	r1, sl
 8006830:	4620      	mov	r0, r4
 8006832:	f000 fdbb 	bl	80073ac <__pow5mult>
 8006836:	4682      	mov	sl, r0
 8006838:	2101      	movs	r1, #1
 800683a:	4620      	mov	r0, r4
 800683c:	f000 fd20 	bl	8007280 <__i2b>
 8006840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006842:	2b00      	cmp	r3, #0
 8006844:	4606      	mov	r6, r0
 8006846:	f340 8083 	ble.w	8006950 <_dtoa_r+0x898>
 800684a:	461a      	mov	r2, r3
 800684c:	4601      	mov	r1, r0
 800684e:	4620      	mov	r0, r4
 8006850:	f000 fdac 	bl	80073ac <__pow5mult>
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	2b01      	cmp	r3, #1
 8006858:	4606      	mov	r6, r0
 800685a:	dd7c      	ble.n	8006956 <_dtoa_r+0x89e>
 800685c:	f04f 0800 	mov.w	r8, #0
 8006860:	6933      	ldr	r3, [r6, #16]
 8006862:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006866:	6918      	ldr	r0, [r3, #16]
 8006868:	f000 fcbc 	bl	80071e4 <__hi0bits>
 800686c:	f1c0 0020 	rsb	r0, r0, #32
 8006870:	9b06      	ldr	r3, [sp, #24]
 8006872:	4418      	add	r0, r3
 8006874:	f010 001f 	ands.w	r0, r0, #31
 8006878:	f000 8096 	beq.w	80069a8 <_dtoa_r+0x8f0>
 800687c:	f1c0 0320 	rsb	r3, r0, #32
 8006880:	2b04      	cmp	r3, #4
 8006882:	f340 8087 	ble.w	8006994 <_dtoa_r+0x8dc>
 8006886:	9b05      	ldr	r3, [sp, #20]
 8006888:	f1c0 001c 	rsb	r0, r0, #28
 800688c:	4403      	add	r3, r0
 800688e:	9305      	str	r3, [sp, #20]
 8006890:	9b06      	ldr	r3, [sp, #24]
 8006892:	4405      	add	r5, r0
 8006894:	4403      	add	r3, r0
 8006896:	9306      	str	r3, [sp, #24]
 8006898:	9b05      	ldr	r3, [sp, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	dd05      	ble.n	80068aa <_dtoa_r+0x7f2>
 800689e:	4651      	mov	r1, sl
 80068a0:	461a      	mov	r2, r3
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 fdd0 	bl	8007448 <__lshift>
 80068a8:	4682      	mov	sl, r0
 80068aa:	9b06      	ldr	r3, [sp, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	dd05      	ble.n	80068bc <_dtoa_r+0x804>
 80068b0:	4631      	mov	r1, r6
 80068b2:	461a      	mov	r2, r3
 80068b4:	4620      	mov	r0, r4
 80068b6:	f000 fdc7 	bl	8007448 <__lshift>
 80068ba:	4606      	mov	r6, r0
 80068bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d074      	beq.n	80069ac <_dtoa_r+0x8f4>
 80068c2:	4631      	mov	r1, r6
 80068c4:	4650      	mov	r0, sl
 80068c6:	f000 fe10 	bl	80074ea <__mcmp>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	da6e      	bge.n	80069ac <_dtoa_r+0x8f4>
 80068ce:	2300      	movs	r3, #0
 80068d0:	4651      	mov	r1, sl
 80068d2:	220a      	movs	r2, #10
 80068d4:	4620      	mov	r0, r4
 80068d6:	f000 fc4a 	bl	800716e <__multadd>
 80068da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068e0:	4682      	mov	sl, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 81a8 	beq.w	8006c38 <_dtoa_r+0xb80>
 80068e8:	2300      	movs	r3, #0
 80068ea:	4639      	mov	r1, r7
 80068ec:	220a      	movs	r2, #10
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 fc3d 	bl	800716e <__multadd>
 80068f4:	9b04      	ldr	r3, [sp, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	4607      	mov	r7, r0
 80068fa:	f300 80c8 	bgt.w	8006a8e <_dtoa_r+0x9d6>
 80068fe:	9b07      	ldr	r3, [sp, #28]
 8006900:	2b02      	cmp	r3, #2
 8006902:	f340 80c4 	ble.w	8006a8e <_dtoa_r+0x9d6>
 8006906:	e059      	b.n	80069bc <_dtoa_r+0x904>
 8006908:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800690a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800690e:	e756      	b.n	80067be <_dtoa_r+0x706>
 8006910:	9b03      	ldr	r3, [sp, #12]
 8006912:	1e5e      	subs	r6, r3, #1
 8006914:	9b08      	ldr	r3, [sp, #32]
 8006916:	42b3      	cmp	r3, r6
 8006918:	bfbf      	itttt	lt
 800691a:	9b08      	ldrlt	r3, [sp, #32]
 800691c:	9608      	strlt	r6, [sp, #32]
 800691e:	1af2      	sublt	r2, r6, r3
 8006920:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006922:	bfb6      	itet	lt
 8006924:	189b      	addlt	r3, r3, r2
 8006926:	1b9e      	subge	r6, r3, r6
 8006928:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800692a:	9b03      	ldr	r3, [sp, #12]
 800692c:	bfb8      	it	lt
 800692e:	2600      	movlt	r6, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	bfb9      	ittee	lt
 8006934:	9b05      	ldrlt	r3, [sp, #20]
 8006936:	9a03      	ldrlt	r2, [sp, #12]
 8006938:	9d05      	ldrge	r5, [sp, #20]
 800693a:	9b03      	ldrge	r3, [sp, #12]
 800693c:	bfbc      	itt	lt
 800693e:	1a9d      	sublt	r5, r3, r2
 8006940:	2300      	movlt	r3, #0
 8006942:	e73e      	b.n	80067c2 <_dtoa_r+0x70a>
 8006944:	9e08      	ldr	r6, [sp, #32]
 8006946:	9d05      	ldr	r5, [sp, #20]
 8006948:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800694a:	e745      	b.n	80067d8 <_dtoa_r+0x720>
 800694c:	9a08      	ldr	r2, [sp, #32]
 800694e:	e76e      	b.n	800682e <_dtoa_r+0x776>
 8006950:	9b07      	ldr	r3, [sp, #28]
 8006952:	2b01      	cmp	r3, #1
 8006954:	dc19      	bgt.n	800698a <_dtoa_r+0x8d2>
 8006956:	9b00      	ldr	r3, [sp, #0]
 8006958:	b9bb      	cbnz	r3, 800698a <_dtoa_r+0x8d2>
 800695a:	9b01      	ldr	r3, [sp, #4]
 800695c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006960:	b99b      	cbnz	r3, 800698a <_dtoa_r+0x8d2>
 8006962:	9b01      	ldr	r3, [sp, #4]
 8006964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006968:	0d1b      	lsrs	r3, r3, #20
 800696a:	051b      	lsls	r3, r3, #20
 800696c:	b183      	cbz	r3, 8006990 <_dtoa_r+0x8d8>
 800696e:	9b05      	ldr	r3, [sp, #20]
 8006970:	3301      	adds	r3, #1
 8006972:	9305      	str	r3, [sp, #20]
 8006974:	9b06      	ldr	r3, [sp, #24]
 8006976:	3301      	adds	r3, #1
 8006978:	9306      	str	r3, [sp, #24]
 800697a:	f04f 0801 	mov.w	r8, #1
 800697e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006980:	2b00      	cmp	r3, #0
 8006982:	f47f af6d 	bne.w	8006860 <_dtoa_r+0x7a8>
 8006986:	2001      	movs	r0, #1
 8006988:	e772      	b.n	8006870 <_dtoa_r+0x7b8>
 800698a:	f04f 0800 	mov.w	r8, #0
 800698e:	e7f6      	b.n	800697e <_dtoa_r+0x8c6>
 8006990:	4698      	mov	r8, r3
 8006992:	e7f4      	b.n	800697e <_dtoa_r+0x8c6>
 8006994:	d080      	beq.n	8006898 <_dtoa_r+0x7e0>
 8006996:	9a05      	ldr	r2, [sp, #20]
 8006998:	331c      	adds	r3, #28
 800699a:	441a      	add	r2, r3
 800699c:	9205      	str	r2, [sp, #20]
 800699e:	9a06      	ldr	r2, [sp, #24]
 80069a0:	441a      	add	r2, r3
 80069a2:	441d      	add	r5, r3
 80069a4:	4613      	mov	r3, r2
 80069a6:	e776      	b.n	8006896 <_dtoa_r+0x7de>
 80069a8:	4603      	mov	r3, r0
 80069aa:	e7f4      	b.n	8006996 <_dtoa_r+0x8de>
 80069ac:	9b03      	ldr	r3, [sp, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dc36      	bgt.n	8006a20 <_dtoa_r+0x968>
 80069b2:	9b07      	ldr	r3, [sp, #28]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	dd33      	ble.n	8006a20 <_dtoa_r+0x968>
 80069b8:	9b03      	ldr	r3, [sp, #12]
 80069ba:	9304      	str	r3, [sp, #16]
 80069bc:	9b04      	ldr	r3, [sp, #16]
 80069be:	b963      	cbnz	r3, 80069da <_dtoa_r+0x922>
 80069c0:	4631      	mov	r1, r6
 80069c2:	2205      	movs	r2, #5
 80069c4:	4620      	mov	r0, r4
 80069c6:	f000 fbd2 	bl	800716e <__multadd>
 80069ca:	4601      	mov	r1, r0
 80069cc:	4606      	mov	r6, r0
 80069ce:	4650      	mov	r0, sl
 80069d0:	f000 fd8b 	bl	80074ea <__mcmp>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	f73f adb6 	bgt.w	8006546 <_dtoa_r+0x48e>
 80069da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069dc:	9d02      	ldr	r5, [sp, #8]
 80069de:	ea6f 0b03 	mvn.w	fp, r3
 80069e2:	2300      	movs	r3, #0
 80069e4:	9303      	str	r3, [sp, #12]
 80069e6:	4631      	mov	r1, r6
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fba9 	bl	8007140 <_Bfree>
 80069ee:	2f00      	cmp	r7, #0
 80069f0:	f43f aea6 	beq.w	8006740 <_dtoa_r+0x688>
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	b12b      	cbz	r3, 8006a04 <_dtoa_r+0x94c>
 80069f8:	42bb      	cmp	r3, r7
 80069fa:	d003      	beq.n	8006a04 <_dtoa_r+0x94c>
 80069fc:	4619      	mov	r1, r3
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fb9e 	bl	8007140 <_Bfree>
 8006a04:	4639      	mov	r1, r7
 8006a06:	4620      	mov	r0, r4
 8006a08:	f000 fb9a 	bl	8007140 <_Bfree>
 8006a0c:	e698      	b.n	8006740 <_dtoa_r+0x688>
 8006a0e:	2600      	movs	r6, #0
 8006a10:	4637      	mov	r7, r6
 8006a12:	e7e2      	b.n	80069da <_dtoa_r+0x922>
 8006a14:	46bb      	mov	fp, r7
 8006a16:	4637      	mov	r7, r6
 8006a18:	e595      	b.n	8006546 <_dtoa_r+0x48e>
 8006a1a:	bf00      	nop
 8006a1c:	40240000 	.word	0x40240000
 8006a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a22:	bb93      	cbnz	r3, 8006a8a <_dtoa_r+0x9d2>
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	9304      	str	r3, [sp, #16]
 8006a28:	9d02      	ldr	r5, [sp, #8]
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4650      	mov	r0, sl
 8006a2e:	f7ff fab7 	bl	8005fa0 <quorem>
 8006a32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a36:	f805 9b01 	strb.w	r9, [r5], #1
 8006a3a:	9b02      	ldr	r3, [sp, #8]
 8006a3c:	9a04      	ldr	r2, [sp, #16]
 8006a3e:	1aeb      	subs	r3, r5, r3
 8006a40:	429a      	cmp	r2, r3
 8006a42:	f300 80dc 	bgt.w	8006bfe <_dtoa_r+0xb46>
 8006a46:	9b02      	ldr	r3, [sp, #8]
 8006a48:	2a01      	cmp	r2, #1
 8006a4a:	bfac      	ite	ge
 8006a4c:	189b      	addge	r3, r3, r2
 8006a4e:	3301      	addlt	r3, #1
 8006a50:	4698      	mov	r8, r3
 8006a52:	2300      	movs	r3, #0
 8006a54:	9303      	str	r3, [sp, #12]
 8006a56:	4651      	mov	r1, sl
 8006a58:	2201      	movs	r2, #1
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 fcf4 	bl	8007448 <__lshift>
 8006a60:	4631      	mov	r1, r6
 8006a62:	4682      	mov	sl, r0
 8006a64:	f000 fd41 	bl	80074ea <__mcmp>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	f300 808d 	bgt.w	8006b88 <_dtoa_r+0xad0>
 8006a6e:	d103      	bne.n	8006a78 <_dtoa_r+0x9c0>
 8006a70:	f019 0f01 	tst.w	r9, #1
 8006a74:	f040 8088 	bne.w	8006b88 <_dtoa_r+0xad0>
 8006a78:	4645      	mov	r5, r8
 8006a7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a7e:	2b30      	cmp	r3, #48	; 0x30
 8006a80:	f105 32ff 	add.w	r2, r5, #4294967295
 8006a84:	d1af      	bne.n	80069e6 <_dtoa_r+0x92e>
 8006a86:	4615      	mov	r5, r2
 8006a88:	e7f7      	b.n	8006a7a <_dtoa_r+0x9c2>
 8006a8a:	9b03      	ldr	r3, [sp, #12]
 8006a8c:	9304      	str	r3, [sp, #16]
 8006a8e:	2d00      	cmp	r5, #0
 8006a90:	dd05      	ble.n	8006a9e <_dtoa_r+0x9e6>
 8006a92:	4639      	mov	r1, r7
 8006a94:	462a      	mov	r2, r5
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 fcd6 	bl	8007448 <__lshift>
 8006a9c:	4607      	mov	r7, r0
 8006a9e:	f1b8 0f00 	cmp.w	r8, #0
 8006aa2:	d04c      	beq.n	8006b3e <_dtoa_r+0xa86>
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 fb16 	bl	80070d8 <_Balloc>
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	3202      	adds	r2, #2
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	0092      	lsls	r2, r2, #2
 8006ab4:	f107 010c 	add.w	r1, r7, #12
 8006ab8:	300c      	adds	r0, #12
 8006aba:	f7fe fa67 	bl	8004f8c <memcpy>
 8006abe:	2201      	movs	r2, #1
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 fcc0 	bl	8007448 <__lshift>
 8006ac8:	9b00      	ldr	r3, [sp, #0]
 8006aca:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006ace:	9703      	str	r7, [sp, #12]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	9305      	str	r3, [sp, #20]
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4650      	mov	r0, sl
 8006adc:	f7ff fa60 	bl	8005fa0 <quorem>
 8006ae0:	9903      	ldr	r1, [sp, #12]
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ae8:	4650      	mov	r0, sl
 8006aea:	f000 fcfe 	bl	80074ea <__mcmp>
 8006aee:	463a      	mov	r2, r7
 8006af0:	9000      	str	r0, [sp, #0]
 8006af2:	4631      	mov	r1, r6
 8006af4:	4620      	mov	r0, r4
 8006af6:	f000 fd12 	bl	800751e <__mdiff>
 8006afa:	68c3      	ldr	r3, [r0, #12]
 8006afc:	4602      	mov	r2, r0
 8006afe:	bb03      	cbnz	r3, 8006b42 <_dtoa_r+0xa8a>
 8006b00:	4601      	mov	r1, r0
 8006b02:	9006      	str	r0, [sp, #24]
 8006b04:	4650      	mov	r0, sl
 8006b06:	f000 fcf0 	bl	80074ea <__mcmp>
 8006b0a:	9a06      	ldr	r2, [sp, #24]
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4611      	mov	r1, r2
 8006b10:	4620      	mov	r0, r4
 8006b12:	9306      	str	r3, [sp, #24]
 8006b14:	f000 fb14 	bl	8007140 <_Bfree>
 8006b18:	9b06      	ldr	r3, [sp, #24]
 8006b1a:	b9a3      	cbnz	r3, 8006b46 <_dtoa_r+0xa8e>
 8006b1c:	9a07      	ldr	r2, [sp, #28]
 8006b1e:	b992      	cbnz	r2, 8006b46 <_dtoa_r+0xa8e>
 8006b20:	9a05      	ldr	r2, [sp, #20]
 8006b22:	b982      	cbnz	r2, 8006b46 <_dtoa_r+0xa8e>
 8006b24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006b28:	d029      	beq.n	8006b7e <_dtoa_r+0xac6>
 8006b2a:	9b00      	ldr	r3, [sp, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dd01      	ble.n	8006b34 <_dtoa_r+0xa7c>
 8006b30:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006b34:	f108 0501 	add.w	r5, r8, #1
 8006b38:	f888 9000 	strb.w	r9, [r8]
 8006b3c:	e753      	b.n	80069e6 <_dtoa_r+0x92e>
 8006b3e:	4638      	mov	r0, r7
 8006b40:	e7c2      	b.n	8006ac8 <_dtoa_r+0xa10>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e7e3      	b.n	8006b0e <_dtoa_r+0xa56>
 8006b46:	9a00      	ldr	r2, [sp, #0]
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	db04      	blt.n	8006b56 <_dtoa_r+0xa9e>
 8006b4c:	d125      	bne.n	8006b9a <_dtoa_r+0xae2>
 8006b4e:	9a07      	ldr	r2, [sp, #28]
 8006b50:	bb1a      	cbnz	r2, 8006b9a <_dtoa_r+0xae2>
 8006b52:	9a05      	ldr	r2, [sp, #20]
 8006b54:	bb0a      	cbnz	r2, 8006b9a <_dtoa_r+0xae2>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	ddec      	ble.n	8006b34 <_dtoa_r+0xa7c>
 8006b5a:	4651      	mov	r1, sl
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f000 fc72 	bl	8007448 <__lshift>
 8006b64:	4631      	mov	r1, r6
 8006b66:	4682      	mov	sl, r0
 8006b68:	f000 fcbf 	bl	80074ea <__mcmp>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	dc03      	bgt.n	8006b78 <_dtoa_r+0xac0>
 8006b70:	d1e0      	bne.n	8006b34 <_dtoa_r+0xa7c>
 8006b72:	f019 0f01 	tst.w	r9, #1
 8006b76:	d0dd      	beq.n	8006b34 <_dtoa_r+0xa7c>
 8006b78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006b7c:	d1d8      	bne.n	8006b30 <_dtoa_r+0xa78>
 8006b7e:	2339      	movs	r3, #57	; 0x39
 8006b80:	f888 3000 	strb.w	r3, [r8]
 8006b84:	f108 0801 	add.w	r8, r8, #1
 8006b88:	4645      	mov	r5, r8
 8006b8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b8e:	2b39      	cmp	r3, #57	; 0x39
 8006b90:	f105 32ff 	add.w	r2, r5, #4294967295
 8006b94:	d03b      	beq.n	8006c0e <_dtoa_r+0xb56>
 8006b96:	3301      	adds	r3, #1
 8006b98:	e040      	b.n	8006c1c <_dtoa_r+0xb64>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f108 0501 	add.w	r5, r8, #1
 8006ba0:	dd05      	ble.n	8006bae <_dtoa_r+0xaf6>
 8006ba2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ba6:	d0ea      	beq.n	8006b7e <_dtoa_r+0xac6>
 8006ba8:	f109 0901 	add.w	r9, r9, #1
 8006bac:	e7c4      	b.n	8006b38 <_dtoa_r+0xa80>
 8006bae:	9b02      	ldr	r3, [sp, #8]
 8006bb0:	9a04      	ldr	r2, [sp, #16]
 8006bb2:	f805 9c01 	strb.w	r9, [r5, #-1]
 8006bb6:	1aeb      	subs	r3, r5, r3
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	46a8      	mov	r8, r5
 8006bbc:	f43f af4b 	beq.w	8006a56 <_dtoa_r+0x99e>
 8006bc0:	4651      	mov	r1, sl
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	220a      	movs	r2, #10
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f000 fad1 	bl	800716e <__multadd>
 8006bcc:	9b03      	ldr	r3, [sp, #12]
 8006bce:	9903      	ldr	r1, [sp, #12]
 8006bd0:	42bb      	cmp	r3, r7
 8006bd2:	4682      	mov	sl, r0
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	f04f 020a 	mov.w	r2, #10
 8006bdc:	4620      	mov	r0, r4
 8006bde:	d104      	bne.n	8006bea <_dtoa_r+0xb32>
 8006be0:	f000 fac5 	bl	800716e <__multadd>
 8006be4:	9003      	str	r0, [sp, #12]
 8006be6:	4607      	mov	r7, r0
 8006be8:	e776      	b.n	8006ad8 <_dtoa_r+0xa20>
 8006bea:	f000 fac0 	bl	800716e <__multadd>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	9003      	str	r0, [sp, #12]
 8006bf2:	220a      	movs	r2, #10
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 fab9 	bl	800716e <__multadd>
 8006bfc:	e7f3      	b.n	8006be6 <_dtoa_r+0xb2e>
 8006bfe:	4651      	mov	r1, sl
 8006c00:	2300      	movs	r3, #0
 8006c02:	220a      	movs	r2, #10
 8006c04:	4620      	mov	r0, r4
 8006c06:	f000 fab2 	bl	800716e <__multadd>
 8006c0a:	4682      	mov	sl, r0
 8006c0c:	e70d      	b.n	8006a2a <_dtoa_r+0x972>
 8006c0e:	9b02      	ldr	r3, [sp, #8]
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d105      	bne.n	8006c20 <_dtoa_r+0xb68>
 8006c14:	9a02      	ldr	r2, [sp, #8]
 8006c16:	f10b 0b01 	add.w	fp, fp, #1
 8006c1a:	2331      	movs	r3, #49	; 0x31
 8006c1c:	7013      	strb	r3, [r2, #0]
 8006c1e:	e6e2      	b.n	80069e6 <_dtoa_r+0x92e>
 8006c20:	4615      	mov	r5, r2
 8006c22:	e7b2      	b.n	8006b8a <_dtoa_r+0xad2>
 8006c24:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <_dtoa_r+0xb94>)
 8006c26:	f7ff baae 	b.w	8006186 <_dtoa_r+0xce>
 8006c2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f47f aa88 	bne.w	8006142 <_dtoa_r+0x8a>
 8006c32:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <_dtoa_r+0xb98>)
 8006c34:	f7ff baa7 	b.w	8006186 <_dtoa_r+0xce>
 8006c38:	9b04      	ldr	r3, [sp, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f73f aef4 	bgt.w	8006a28 <_dtoa_r+0x970>
 8006c40:	9b07      	ldr	r3, [sp, #28]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	f77f aef0 	ble.w	8006a28 <_dtoa_r+0x970>
 8006c48:	e6b8      	b.n	80069bc <_dtoa_r+0x904>
 8006c4a:	bf00      	nop
 8006c4c:	08007eae 	.word	0x08007eae
 8006c50:	08007ed0 	.word	0x08007ed0

08006c54 <_localeconv_r>:
 8006c54:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <_localeconv_r+0x14>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6a18      	ldr	r0, [r3, #32]
 8006c5a:	4b04      	ldr	r3, [pc, #16]	; (8006c6c <_localeconv_r+0x18>)
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	bf08      	it	eq
 8006c60:	4618      	moveq	r0, r3
 8006c62:	30f0      	adds	r0, #240	; 0xf0
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	2000000c 	.word	0x2000000c
 8006c6c:	20000100 	.word	0x20000100

08006c70 <malloc>:
 8006c70:	4b02      	ldr	r3, [pc, #8]	; (8006c7c <malloc+0xc>)
 8006c72:	4601      	mov	r1, r0
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f000 b803 	b.w	8006c80 <_malloc_r>
 8006c7a:	bf00      	nop
 8006c7c:	2000000c 	.word	0x2000000c

08006c80 <_malloc_r>:
 8006c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c84:	f101 040b 	add.w	r4, r1, #11
 8006c88:	2c16      	cmp	r4, #22
 8006c8a:	4681      	mov	r9, r0
 8006c8c:	d907      	bls.n	8006c9e <_malloc_r+0x1e>
 8006c8e:	f034 0407 	bics.w	r4, r4, #7
 8006c92:	d505      	bpl.n	8006ca0 <_malloc_r+0x20>
 8006c94:	230c      	movs	r3, #12
 8006c96:	f8c9 3000 	str.w	r3, [r9]
 8006c9a:	2600      	movs	r6, #0
 8006c9c:	e131      	b.n	8006f02 <_malloc_r+0x282>
 8006c9e:	2410      	movs	r4, #16
 8006ca0:	428c      	cmp	r4, r1
 8006ca2:	d3f7      	bcc.n	8006c94 <_malloc_r+0x14>
 8006ca4:	4648      	mov	r0, r9
 8006ca6:	f000 fa0b 	bl	80070c0 <__malloc_lock>
 8006caa:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006cae:	4d9c      	ldr	r5, [pc, #624]	; (8006f20 <_malloc_r+0x2a0>)
 8006cb0:	d236      	bcs.n	8006d20 <_malloc_r+0xa0>
 8006cb2:	f104 0208 	add.w	r2, r4, #8
 8006cb6:	442a      	add	r2, r5
 8006cb8:	f1a2 0108 	sub.w	r1, r2, #8
 8006cbc:	6856      	ldr	r6, [r2, #4]
 8006cbe:	428e      	cmp	r6, r1
 8006cc0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8006cc4:	d102      	bne.n	8006ccc <_malloc_r+0x4c>
 8006cc6:	68d6      	ldr	r6, [r2, #12]
 8006cc8:	42b2      	cmp	r2, r6
 8006cca:	d010      	beq.n	8006cee <_malloc_r+0x6e>
 8006ccc:	6873      	ldr	r3, [r6, #4]
 8006cce:	68f2      	ldr	r2, [r6, #12]
 8006cd0:	68b1      	ldr	r1, [r6, #8]
 8006cd2:	f023 0303 	bic.w	r3, r3, #3
 8006cd6:	60ca      	str	r2, [r1, #12]
 8006cd8:	4433      	add	r3, r6
 8006cda:	6091      	str	r1, [r2, #8]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	605a      	str	r2, [r3, #4]
 8006ce4:	4648      	mov	r0, r9
 8006ce6:	f000 f9f1 	bl	80070cc <__malloc_unlock>
 8006cea:	3608      	adds	r6, #8
 8006cec:	e109      	b.n	8006f02 <_malloc_r+0x282>
 8006cee:	3302      	adds	r3, #2
 8006cf0:	4a8c      	ldr	r2, [pc, #560]	; (8006f24 <_malloc_r+0x2a4>)
 8006cf2:	692e      	ldr	r6, [r5, #16]
 8006cf4:	4296      	cmp	r6, r2
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	d06d      	beq.n	8006dd6 <_malloc_r+0x156>
 8006cfa:	6870      	ldr	r0, [r6, #4]
 8006cfc:	f020 0003 	bic.w	r0, r0, #3
 8006d00:	1b07      	subs	r7, r0, r4
 8006d02:	2f0f      	cmp	r7, #15
 8006d04:	dd47      	ble.n	8006d96 <_malloc_r+0x116>
 8006d06:	1933      	adds	r3, r6, r4
 8006d08:	f044 0401 	orr.w	r4, r4, #1
 8006d0c:	6074      	str	r4, [r6, #4]
 8006d0e:	616b      	str	r3, [r5, #20]
 8006d10:	612b      	str	r3, [r5, #16]
 8006d12:	60da      	str	r2, [r3, #12]
 8006d14:	609a      	str	r2, [r3, #8]
 8006d16:	f047 0201 	orr.w	r2, r7, #1
 8006d1a:	605a      	str	r2, [r3, #4]
 8006d1c:	5037      	str	r7, [r6, r0]
 8006d1e:	e7e1      	b.n	8006ce4 <_malloc_r+0x64>
 8006d20:	0a63      	lsrs	r3, r4, #9
 8006d22:	d02a      	beq.n	8006d7a <_malloc_r+0xfa>
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d812      	bhi.n	8006d4e <_malloc_r+0xce>
 8006d28:	09a3      	lsrs	r3, r4, #6
 8006d2a:	3338      	adds	r3, #56	; 0x38
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006d32:	f1a2 0008 	sub.w	r0, r2, #8
 8006d36:	6856      	ldr	r6, [r2, #4]
 8006d38:	4286      	cmp	r6, r0
 8006d3a:	d006      	beq.n	8006d4a <_malloc_r+0xca>
 8006d3c:	6872      	ldr	r2, [r6, #4]
 8006d3e:	f022 0203 	bic.w	r2, r2, #3
 8006d42:	1b11      	subs	r1, r2, r4
 8006d44:	290f      	cmp	r1, #15
 8006d46:	dd1c      	ble.n	8006d82 <_malloc_r+0x102>
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	e7d0      	b.n	8006cf0 <_malloc_r+0x70>
 8006d4e:	2b14      	cmp	r3, #20
 8006d50:	d801      	bhi.n	8006d56 <_malloc_r+0xd6>
 8006d52:	335b      	adds	r3, #91	; 0x5b
 8006d54:	e7ea      	b.n	8006d2c <_malloc_r+0xac>
 8006d56:	2b54      	cmp	r3, #84	; 0x54
 8006d58:	d802      	bhi.n	8006d60 <_malloc_r+0xe0>
 8006d5a:	0b23      	lsrs	r3, r4, #12
 8006d5c:	336e      	adds	r3, #110	; 0x6e
 8006d5e:	e7e5      	b.n	8006d2c <_malloc_r+0xac>
 8006d60:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006d64:	d802      	bhi.n	8006d6c <_malloc_r+0xec>
 8006d66:	0be3      	lsrs	r3, r4, #15
 8006d68:	3377      	adds	r3, #119	; 0x77
 8006d6a:	e7df      	b.n	8006d2c <_malloc_r+0xac>
 8006d6c:	f240 5254 	movw	r2, #1364	; 0x554
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d804      	bhi.n	8006d7e <_malloc_r+0xfe>
 8006d74:	0ca3      	lsrs	r3, r4, #18
 8006d76:	337c      	adds	r3, #124	; 0x7c
 8006d78:	e7d8      	b.n	8006d2c <_malloc_r+0xac>
 8006d7a:	233f      	movs	r3, #63	; 0x3f
 8006d7c:	e7d6      	b.n	8006d2c <_malloc_r+0xac>
 8006d7e:	237e      	movs	r3, #126	; 0x7e
 8006d80:	e7d4      	b.n	8006d2c <_malloc_r+0xac>
 8006d82:	2900      	cmp	r1, #0
 8006d84:	68f1      	ldr	r1, [r6, #12]
 8006d86:	db04      	blt.n	8006d92 <_malloc_r+0x112>
 8006d88:	68b3      	ldr	r3, [r6, #8]
 8006d8a:	60d9      	str	r1, [r3, #12]
 8006d8c:	608b      	str	r3, [r1, #8]
 8006d8e:	18b3      	adds	r3, r6, r2
 8006d90:	e7a4      	b.n	8006cdc <_malloc_r+0x5c>
 8006d92:	460e      	mov	r6, r1
 8006d94:	e7d0      	b.n	8006d38 <_malloc_r+0xb8>
 8006d96:	2f00      	cmp	r7, #0
 8006d98:	616a      	str	r2, [r5, #20]
 8006d9a:	612a      	str	r2, [r5, #16]
 8006d9c:	db05      	blt.n	8006daa <_malloc_r+0x12a>
 8006d9e:	4430      	add	r0, r6
 8006da0:	6843      	ldr	r3, [r0, #4]
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	6043      	str	r3, [r0, #4]
 8006da8:	e79c      	b.n	8006ce4 <_malloc_r+0x64>
 8006daa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006dae:	d244      	bcs.n	8006e3a <_malloc_r+0x1ba>
 8006db0:	08c0      	lsrs	r0, r0, #3
 8006db2:	1087      	asrs	r7, r0, #2
 8006db4:	2201      	movs	r2, #1
 8006db6:	fa02 f707 	lsl.w	r7, r2, r7
 8006dba:	686a      	ldr	r2, [r5, #4]
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	433a      	orrs	r2, r7
 8006dc0:	606a      	str	r2, [r5, #4]
 8006dc2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006dc6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8006dca:	60b7      	str	r7, [r6, #8]
 8006dcc:	3a08      	subs	r2, #8
 8006dce:	60f2      	str	r2, [r6, #12]
 8006dd0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8006dd4:	60fe      	str	r6, [r7, #12]
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	109a      	asrs	r2, r3, #2
 8006dda:	fa00 f202 	lsl.w	r2, r0, r2
 8006dde:	6868      	ldr	r0, [r5, #4]
 8006de0:	4282      	cmp	r2, r0
 8006de2:	f200 80a1 	bhi.w	8006f28 <_malloc_r+0x2a8>
 8006de6:	4202      	tst	r2, r0
 8006de8:	d106      	bne.n	8006df8 <_malloc_r+0x178>
 8006dea:	f023 0303 	bic.w	r3, r3, #3
 8006dee:	0052      	lsls	r2, r2, #1
 8006df0:	4202      	tst	r2, r0
 8006df2:	f103 0304 	add.w	r3, r3, #4
 8006df6:	d0fa      	beq.n	8006dee <_malloc_r+0x16e>
 8006df8:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8006dfc:	46e0      	mov	r8, ip
 8006dfe:	469e      	mov	lr, r3
 8006e00:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8006e04:	4546      	cmp	r6, r8
 8006e06:	d153      	bne.n	8006eb0 <_malloc_r+0x230>
 8006e08:	f10e 0e01 	add.w	lr, lr, #1
 8006e0c:	f01e 0f03 	tst.w	lr, #3
 8006e10:	f108 0808 	add.w	r8, r8, #8
 8006e14:	d1f4      	bne.n	8006e00 <_malloc_r+0x180>
 8006e16:	0798      	lsls	r0, r3, #30
 8006e18:	d179      	bne.n	8006f0e <_malloc_r+0x28e>
 8006e1a:	686b      	ldr	r3, [r5, #4]
 8006e1c:	ea23 0302 	bic.w	r3, r3, r2
 8006e20:	606b      	str	r3, [r5, #4]
 8006e22:	6868      	ldr	r0, [r5, #4]
 8006e24:	0052      	lsls	r2, r2, #1
 8006e26:	4282      	cmp	r2, r0
 8006e28:	d87e      	bhi.n	8006f28 <_malloc_r+0x2a8>
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	d07c      	beq.n	8006f28 <_malloc_r+0x2a8>
 8006e2e:	4673      	mov	r3, lr
 8006e30:	4202      	tst	r2, r0
 8006e32:	d1e1      	bne.n	8006df8 <_malloc_r+0x178>
 8006e34:	3304      	adds	r3, #4
 8006e36:	0052      	lsls	r2, r2, #1
 8006e38:	e7fa      	b.n	8006e30 <_malloc_r+0x1b0>
 8006e3a:	0a42      	lsrs	r2, r0, #9
 8006e3c:	2a04      	cmp	r2, #4
 8006e3e:	d815      	bhi.n	8006e6c <_malloc_r+0x1ec>
 8006e40:	0982      	lsrs	r2, r0, #6
 8006e42:	3238      	adds	r2, #56	; 0x38
 8006e44:	1c57      	adds	r7, r2, #1
 8006e46:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8006e4a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8006e4e:	45be      	cmp	lr, r7
 8006e50:	d126      	bne.n	8006ea0 <_malloc_r+0x220>
 8006e52:	2001      	movs	r0, #1
 8006e54:	1092      	asrs	r2, r2, #2
 8006e56:	fa00 f202 	lsl.w	r2, r0, r2
 8006e5a:	6868      	ldr	r0, [r5, #4]
 8006e5c:	4310      	orrs	r0, r2
 8006e5e:	6068      	str	r0, [r5, #4]
 8006e60:	f8c6 e00c 	str.w	lr, [r6, #12]
 8006e64:	60b7      	str	r7, [r6, #8]
 8006e66:	f8ce 6008 	str.w	r6, [lr, #8]
 8006e6a:	e7b3      	b.n	8006dd4 <_malloc_r+0x154>
 8006e6c:	2a14      	cmp	r2, #20
 8006e6e:	d801      	bhi.n	8006e74 <_malloc_r+0x1f4>
 8006e70:	325b      	adds	r2, #91	; 0x5b
 8006e72:	e7e7      	b.n	8006e44 <_malloc_r+0x1c4>
 8006e74:	2a54      	cmp	r2, #84	; 0x54
 8006e76:	d802      	bhi.n	8006e7e <_malloc_r+0x1fe>
 8006e78:	0b02      	lsrs	r2, r0, #12
 8006e7a:	326e      	adds	r2, #110	; 0x6e
 8006e7c:	e7e2      	b.n	8006e44 <_malloc_r+0x1c4>
 8006e7e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006e82:	d802      	bhi.n	8006e8a <_malloc_r+0x20a>
 8006e84:	0bc2      	lsrs	r2, r0, #15
 8006e86:	3277      	adds	r2, #119	; 0x77
 8006e88:	e7dc      	b.n	8006e44 <_malloc_r+0x1c4>
 8006e8a:	f240 5754 	movw	r7, #1364	; 0x554
 8006e8e:	42ba      	cmp	r2, r7
 8006e90:	bf9a      	itte	ls
 8006e92:	0c82      	lsrls	r2, r0, #18
 8006e94:	327c      	addls	r2, #124	; 0x7c
 8006e96:	227e      	movhi	r2, #126	; 0x7e
 8006e98:	e7d4      	b.n	8006e44 <_malloc_r+0x1c4>
 8006e9a:	68bf      	ldr	r7, [r7, #8]
 8006e9c:	45be      	cmp	lr, r7
 8006e9e:	d004      	beq.n	8006eaa <_malloc_r+0x22a>
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	f022 0203 	bic.w	r2, r2, #3
 8006ea6:	4290      	cmp	r0, r2
 8006ea8:	d3f7      	bcc.n	8006e9a <_malloc_r+0x21a>
 8006eaa:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8006eae:	e7d7      	b.n	8006e60 <_malloc_r+0x1e0>
 8006eb0:	6870      	ldr	r0, [r6, #4]
 8006eb2:	68f7      	ldr	r7, [r6, #12]
 8006eb4:	f020 0003 	bic.w	r0, r0, #3
 8006eb8:	eba0 0a04 	sub.w	sl, r0, r4
 8006ebc:	f1ba 0f0f 	cmp.w	sl, #15
 8006ec0:	dd10      	ble.n	8006ee4 <_malloc_r+0x264>
 8006ec2:	68b2      	ldr	r2, [r6, #8]
 8006ec4:	1933      	adds	r3, r6, r4
 8006ec6:	f044 0401 	orr.w	r4, r4, #1
 8006eca:	6074      	str	r4, [r6, #4]
 8006ecc:	60d7      	str	r7, [r2, #12]
 8006ece:	60ba      	str	r2, [r7, #8]
 8006ed0:	f04a 0201 	orr.w	r2, sl, #1
 8006ed4:	616b      	str	r3, [r5, #20]
 8006ed6:	612b      	str	r3, [r5, #16]
 8006ed8:	60d9      	str	r1, [r3, #12]
 8006eda:	6099      	str	r1, [r3, #8]
 8006edc:	605a      	str	r2, [r3, #4]
 8006ede:	f846 a000 	str.w	sl, [r6, r0]
 8006ee2:	e6ff      	b.n	8006ce4 <_malloc_r+0x64>
 8006ee4:	f1ba 0f00 	cmp.w	sl, #0
 8006ee8:	db0f      	blt.n	8006f0a <_malloc_r+0x28a>
 8006eea:	4430      	add	r0, r6
 8006eec:	6843      	ldr	r3, [r0, #4]
 8006eee:	f043 0301 	orr.w	r3, r3, #1
 8006ef2:	6043      	str	r3, [r0, #4]
 8006ef4:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8006ef8:	4648      	mov	r0, r9
 8006efa:	60df      	str	r7, [r3, #12]
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	f000 f8e5 	bl	80070cc <__malloc_unlock>
 8006f02:	4630      	mov	r0, r6
 8006f04:	b003      	add	sp, #12
 8006f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0a:	463e      	mov	r6, r7
 8006f0c:	e77a      	b.n	8006e04 <_malloc_r+0x184>
 8006f0e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8006f12:	4584      	cmp	ip, r0
 8006f14:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f18:	f43f af7d 	beq.w	8006e16 <_malloc_r+0x196>
 8006f1c:	e781      	b.n	8006e22 <_malloc_r+0x1a2>
 8006f1e:	bf00      	nop
 8006f20:	2000026c 	.word	0x2000026c
 8006f24:	20000274 	.word	0x20000274
 8006f28:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8006f2c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006f30:	f026 0603 	bic.w	r6, r6, #3
 8006f34:	42b4      	cmp	r4, r6
 8006f36:	d803      	bhi.n	8006f40 <_malloc_r+0x2c0>
 8006f38:	1b33      	subs	r3, r6, r4
 8006f3a:	2b0f      	cmp	r3, #15
 8006f3c:	f300 8096 	bgt.w	800706c <_malloc_r+0x3ec>
 8006f40:	4a4f      	ldr	r2, [pc, #316]	; (8007080 <_malloc_r+0x400>)
 8006f42:	6817      	ldr	r7, [r2, #0]
 8006f44:	4a4f      	ldr	r2, [pc, #316]	; (8007084 <_malloc_r+0x404>)
 8006f46:	6811      	ldr	r1, [r2, #0]
 8006f48:	3710      	adds	r7, #16
 8006f4a:	3101      	adds	r1, #1
 8006f4c:	eb0b 0306 	add.w	r3, fp, r6
 8006f50:	4427      	add	r7, r4
 8006f52:	d005      	beq.n	8006f60 <_malloc_r+0x2e0>
 8006f54:	494c      	ldr	r1, [pc, #304]	; (8007088 <_malloc_r+0x408>)
 8006f56:	3901      	subs	r1, #1
 8006f58:	440f      	add	r7, r1
 8006f5a:	3101      	adds	r1, #1
 8006f5c:	4249      	negs	r1, r1
 8006f5e:	400f      	ands	r7, r1
 8006f60:	4639      	mov	r1, r7
 8006f62:	4648      	mov	r0, r9
 8006f64:	9201      	str	r2, [sp, #4]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	f000 fb86 	bl	8007678 <_sbrk_r>
 8006f6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f70:	4680      	mov	r8, r0
 8006f72:	d056      	beq.n	8007022 <_malloc_r+0x3a2>
 8006f74:	9b00      	ldr	r3, [sp, #0]
 8006f76:	9a01      	ldr	r2, [sp, #4]
 8006f78:	4283      	cmp	r3, r0
 8006f7a:	d901      	bls.n	8006f80 <_malloc_r+0x300>
 8006f7c:	45ab      	cmp	fp, r5
 8006f7e:	d150      	bne.n	8007022 <_malloc_r+0x3a2>
 8006f80:	4842      	ldr	r0, [pc, #264]	; (800708c <_malloc_r+0x40c>)
 8006f82:	6801      	ldr	r1, [r0, #0]
 8006f84:	4543      	cmp	r3, r8
 8006f86:	eb07 0e01 	add.w	lr, r7, r1
 8006f8a:	f8c0 e000 	str.w	lr, [r0]
 8006f8e:	4940      	ldr	r1, [pc, #256]	; (8007090 <_malloc_r+0x410>)
 8006f90:	4682      	mov	sl, r0
 8006f92:	d113      	bne.n	8006fbc <_malloc_r+0x33c>
 8006f94:	420b      	tst	r3, r1
 8006f96:	d111      	bne.n	8006fbc <_malloc_r+0x33c>
 8006f98:	68ab      	ldr	r3, [r5, #8]
 8006f9a:	443e      	add	r6, r7
 8006f9c:	f046 0601 	orr.w	r6, r6, #1
 8006fa0:	605e      	str	r6, [r3, #4]
 8006fa2:	4a3c      	ldr	r2, [pc, #240]	; (8007094 <_malloc_r+0x414>)
 8006fa4:	f8da 3000 	ldr.w	r3, [sl]
 8006fa8:	6811      	ldr	r1, [r2, #0]
 8006faa:	428b      	cmp	r3, r1
 8006fac:	bf88      	it	hi
 8006fae:	6013      	strhi	r3, [r2, #0]
 8006fb0:	4a39      	ldr	r2, [pc, #228]	; (8007098 <_malloc_r+0x418>)
 8006fb2:	6811      	ldr	r1, [r2, #0]
 8006fb4:	428b      	cmp	r3, r1
 8006fb6:	bf88      	it	hi
 8006fb8:	6013      	strhi	r3, [r2, #0]
 8006fba:	e032      	b.n	8007022 <_malloc_r+0x3a2>
 8006fbc:	6810      	ldr	r0, [r2, #0]
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	bf1b      	ittet	ne
 8006fc2:	eba8 0303 	subne.w	r3, r8, r3
 8006fc6:	4473      	addne	r3, lr
 8006fc8:	f8c2 8000 	streq.w	r8, [r2]
 8006fcc:	f8ca 3000 	strne.w	r3, [sl]
 8006fd0:	f018 0007 	ands.w	r0, r8, #7
 8006fd4:	bf1c      	itt	ne
 8006fd6:	f1c0 0008 	rsbne	r0, r0, #8
 8006fda:	4480      	addne	r8, r0
 8006fdc:	4b2a      	ldr	r3, [pc, #168]	; (8007088 <_malloc_r+0x408>)
 8006fde:	4447      	add	r7, r8
 8006fe0:	4418      	add	r0, r3
 8006fe2:	400f      	ands	r7, r1
 8006fe4:	1bc7      	subs	r7, r0, r7
 8006fe6:	4639      	mov	r1, r7
 8006fe8:	4648      	mov	r0, r9
 8006fea:	f000 fb45 	bl	8007678 <_sbrk_r>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	bf08      	it	eq
 8006ff2:	4640      	moveq	r0, r8
 8006ff4:	f8da 3000 	ldr.w	r3, [sl]
 8006ff8:	f8c5 8008 	str.w	r8, [r5, #8]
 8006ffc:	bf08      	it	eq
 8006ffe:	2700      	moveq	r7, #0
 8007000:	eba0 0008 	sub.w	r0, r0, r8
 8007004:	443b      	add	r3, r7
 8007006:	4407      	add	r7, r0
 8007008:	f047 0701 	orr.w	r7, r7, #1
 800700c:	45ab      	cmp	fp, r5
 800700e:	f8ca 3000 	str.w	r3, [sl]
 8007012:	f8c8 7004 	str.w	r7, [r8, #4]
 8007016:	d0c4      	beq.n	8006fa2 <_malloc_r+0x322>
 8007018:	2e0f      	cmp	r6, #15
 800701a:	d810      	bhi.n	800703e <_malloc_r+0x3be>
 800701c:	2301      	movs	r3, #1
 800701e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007022:	68ab      	ldr	r3, [r5, #8]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	f022 0203 	bic.w	r2, r2, #3
 800702a:	4294      	cmp	r4, r2
 800702c:	eba2 0304 	sub.w	r3, r2, r4
 8007030:	d801      	bhi.n	8007036 <_malloc_r+0x3b6>
 8007032:	2b0f      	cmp	r3, #15
 8007034:	dc1a      	bgt.n	800706c <_malloc_r+0x3ec>
 8007036:	4648      	mov	r0, r9
 8007038:	f000 f848 	bl	80070cc <__malloc_unlock>
 800703c:	e62d      	b.n	8006c9a <_malloc_r+0x1a>
 800703e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007042:	3e0c      	subs	r6, #12
 8007044:	f026 0607 	bic.w	r6, r6, #7
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	4333      	orrs	r3, r6
 800704e:	f8cb 3004 	str.w	r3, [fp, #4]
 8007052:	eb0b 0306 	add.w	r3, fp, r6
 8007056:	2205      	movs	r2, #5
 8007058:	2e0f      	cmp	r6, #15
 800705a:	605a      	str	r2, [r3, #4]
 800705c:	609a      	str	r2, [r3, #8]
 800705e:	d9a0      	bls.n	8006fa2 <_malloc_r+0x322>
 8007060:	f10b 0108 	add.w	r1, fp, #8
 8007064:	4648      	mov	r0, r9
 8007066:	f000 fc21 	bl	80078ac <_free_r>
 800706a:	e79a      	b.n	8006fa2 <_malloc_r+0x322>
 800706c:	68ae      	ldr	r6, [r5, #8]
 800706e:	f044 0201 	orr.w	r2, r4, #1
 8007072:	4434      	add	r4, r6
 8007074:	f043 0301 	orr.w	r3, r3, #1
 8007078:	6072      	str	r2, [r6, #4]
 800707a:	60ac      	str	r4, [r5, #8]
 800707c:	6063      	str	r3, [r4, #4]
 800707e:	e631      	b.n	8006ce4 <_malloc_r+0x64>
 8007080:	200006d4 	.word	0x200006d4
 8007084:	20000674 	.word	0x20000674
 8007088:	00000080 	.word	0x00000080
 800708c:	200006a4 	.word	0x200006a4
 8007090:	0000007f 	.word	0x0000007f
 8007094:	200006cc 	.word	0x200006cc
 8007098:	200006d0 	.word	0x200006d0

0800709c <__ascii_mbtowc>:
 800709c:	b082      	sub	sp, #8
 800709e:	b901      	cbnz	r1, 80070a2 <__ascii_mbtowc+0x6>
 80070a0:	a901      	add	r1, sp, #4
 80070a2:	b142      	cbz	r2, 80070b6 <__ascii_mbtowc+0x1a>
 80070a4:	b14b      	cbz	r3, 80070ba <__ascii_mbtowc+0x1e>
 80070a6:	7813      	ldrb	r3, [r2, #0]
 80070a8:	600b      	str	r3, [r1, #0]
 80070aa:	7812      	ldrb	r2, [r2, #0]
 80070ac:	1c10      	adds	r0, r2, #0
 80070ae:	bf18      	it	ne
 80070b0:	2001      	movne	r0, #1
 80070b2:	b002      	add	sp, #8
 80070b4:	4770      	bx	lr
 80070b6:	4610      	mov	r0, r2
 80070b8:	e7fb      	b.n	80070b2 <__ascii_mbtowc+0x16>
 80070ba:	f06f 0001 	mvn.w	r0, #1
 80070be:	e7f8      	b.n	80070b2 <__ascii_mbtowc+0x16>

080070c0 <__malloc_lock>:
 80070c0:	4801      	ldr	r0, [pc, #4]	; (80070c8 <__malloc_lock+0x8>)
 80070c2:	f000 bcaf 	b.w	8007a24 <__retarget_lock_acquire_recursive>
 80070c6:	bf00      	nop
 80070c8:	20000f04 	.word	0x20000f04

080070cc <__malloc_unlock>:
 80070cc:	4801      	ldr	r0, [pc, #4]	; (80070d4 <__malloc_unlock+0x8>)
 80070ce:	f000 bcaa 	b.w	8007a26 <__retarget_lock_release_recursive>
 80070d2:	bf00      	nop
 80070d4:	20000f04 	.word	0x20000f04

080070d8 <_Balloc>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070dc:	4604      	mov	r4, r0
 80070de:	460e      	mov	r6, r1
 80070e0:	b93d      	cbnz	r5, 80070f2 <_Balloc+0x1a>
 80070e2:	2010      	movs	r0, #16
 80070e4:	f7ff fdc4 	bl	8006c70 <malloc>
 80070e8:	6260      	str	r0, [r4, #36]	; 0x24
 80070ea:	6045      	str	r5, [r0, #4]
 80070ec:	6085      	str	r5, [r0, #8]
 80070ee:	6005      	str	r5, [r0, #0]
 80070f0:	60c5      	str	r5, [r0, #12]
 80070f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80070f4:	68eb      	ldr	r3, [r5, #12]
 80070f6:	b183      	cbz	r3, 800711a <_Balloc+0x42>
 80070f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007100:	b9b8      	cbnz	r0, 8007132 <_Balloc+0x5a>
 8007102:	2101      	movs	r1, #1
 8007104:	fa01 f506 	lsl.w	r5, r1, r6
 8007108:	1d6a      	adds	r2, r5, #5
 800710a:	0092      	lsls	r2, r2, #2
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fb4a 	bl	80077a6 <_calloc_r>
 8007112:	b160      	cbz	r0, 800712e <_Balloc+0x56>
 8007114:	6046      	str	r6, [r0, #4]
 8007116:	6085      	str	r5, [r0, #8]
 8007118:	e00e      	b.n	8007138 <_Balloc+0x60>
 800711a:	2221      	movs	r2, #33	; 0x21
 800711c:	2104      	movs	r1, #4
 800711e:	4620      	mov	r0, r4
 8007120:	f000 fb41 	bl	80077a6 <_calloc_r>
 8007124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007126:	60e8      	str	r0, [r5, #12]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e4      	bne.n	80070f8 <_Balloc+0x20>
 800712e:	2000      	movs	r0, #0
 8007130:	bd70      	pop	{r4, r5, r6, pc}
 8007132:	6802      	ldr	r2, [r0, #0]
 8007134:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007138:	2300      	movs	r3, #0
 800713a:	6103      	str	r3, [r0, #16]
 800713c:	60c3      	str	r3, [r0, #12]
 800713e:	bd70      	pop	{r4, r5, r6, pc}

08007140 <_Bfree>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007144:	4606      	mov	r6, r0
 8007146:	460d      	mov	r5, r1
 8007148:	b93c      	cbnz	r4, 800715a <_Bfree+0x1a>
 800714a:	2010      	movs	r0, #16
 800714c:	f7ff fd90 	bl	8006c70 <malloc>
 8007150:	6270      	str	r0, [r6, #36]	; 0x24
 8007152:	6044      	str	r4, [r0, #4]
 8007154:	6084      	str	r4, [r0, #8]
 8007156:	6004      	str	r4, [r0, #0]
 8007158:	60c4      	str	r4, [r0, #12]
 800715a:	b13d      	cbz	r5, 800716c <_Bfree+0x2c>
 800715c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800715e:	686a      	ldr	r2, [r5, #4]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007166:	6029      	str	r1, [r5, #0]
 8007168:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800716c:	bd70      	pop	{r4, r5, r6, pc}

0800716e <__multadd>:
 800716e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007172:	690d      	ldr	r5, [r1, #16]
 8007174:	461f      	mov	r7, r3
 8007176:	4606      	mov	r6, r0
 8007178:	460c      	mov	r4, r1
 800717a:	f101 0e14 	add.w	lr, r1, #20
 800717e:	2300      	movs	r3, #0
 8007180:	f8de 0000 	ldr.w	r0, [lr]
 8007184:	b281      	uxth	r1, r0
 8007186:	fb02 7101 	mla	r1, r2, r1, r7
 800718a:	0c0f      	lsrs	r7, r1, #16
 800718c:	0c00      	lsrs	r0, r0, #16
 800718e:	fb02 7000 	mla	r0, r2, r0, r7
 8007192:	b289      	uxth	r1, r1
 8007194:	3301      	adds	r3, #1
 8007196:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800719a:	429d      	cmp	r5, r3
 800719c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80071a0:	f84e 1b04 	str.w	r1, [lr], #4
 80071a4:	dcec      	bgt.n	8007180 <__multadd+0x12>
 80071a6:	b1d7      	cbz	r7, 80071de <__multadd+0x70>
 80071a8:	68a3      	ldr	r3, [r4, #8]
 80071aa:	429d      	cmp	r5, r3
 80071ac:	db12      	blt.n	80071d4 <__multadd+0x66>
 80071ae:	6861      	ldr	r1, [r4, #4]
 80071b0:	4630      	mov	r0, r6
 80071b2:	3101      	adds	r1, #1
 80071b4:	f7ff ff90 	bl	80070d8 <_Balloc>
 80071b8:	6922      	ldr	r2, [r4, #16]
 80071ba:	3202      	adds	r2, #2
 80071bc:	f104 010c 	add.w	r1, r4, #12
 80071c0:	4680      	mov	r8, r0
 80071c2:	0092      	lsls	r2, r2, #2
 80071c4:	300c      	adds	r0, #12
 80071c6:	f7fd fee1 	bl	8004f8c <memcpy>
 80071ca:	4621      	mov	r1, r4
 80071cc:	4630      	mov	r0, r6
 80071ce:	f7ff ffb7 	bl	8007140 <_Bfree>
 80071d2:	4644      	mov	r4, r8
 80071d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071d8:	3501      	adds	r5, #1
 80071da:	615f      	str	r7, [r3, #20]
 80071dc:	6125      	str	r5, [r4, #16]
 80071de:	4620      	mov	r0, r4
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080071e4 <__hi0bits>:
 80071e4:	0c02      	lsrs	r2, r0, #16
 80071e6:	0412      	lsls	r2, r2, #16
 80071e8:	4603      	mov	r3, r0
 80071ea:	b9b2      	cbnz	r2, 800721a <__hi0bits+0x36>
 80071ec:	0403      	lsls	r3, r0, #16
 80071ee:	2010      	movs	r0, #16
 80071f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80071f4:	bf04      	itt	eq
 80071f6:	021b      	lsleq	r3, r3, #8
 80071f8:	3008      	addeq	r0, #8
 80071fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80071fe:	bf04      	itt	eq
 8007200:	011b      	lsleq	r3, r3, #4
 8007202:	3004      	addeq	r0, #4
 8007204:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007208:	bf04      	itt	eq
 800720a:	009b      	lsleq	r3, r3, #2
 800720c:	3002      	addeq	r0, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	db06      	blt.n	8007220 <__hi0bits+0x3c>
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	d503      	bpl.n	800721e <__hi0bits+0x3a>
 8007216:	3001      	adds	r0, #1
 8007218:	4770      	bx	lr
 800721a:	2000      	movs	r0, #0
 800721c:	e7e8      	b.n	80071f0 <__hi0bits+0xc>
 800721e:	2020      	movs	r0, #32
 8007220:	4770      	bx	lr

08007222 <__lo0bits>:
 8007222:	6803      	ldr	r3, [r0, #0]
 8007224:	f013 0207 	ands.w	r2, r3, #7
 8007228:	4601      	mov	r1, r0
 800722a:	d00b      	beq.n	8007244 <__lo0bits+0x22>
 800722c:	07da      	lsls	r2, r3, #31
 800722e:	d423      	bmi.n	8007278 <__lo0bits+0x56>
 8007230:	0798      	lsls	r0, r3, #30
 8007232:	bf49      	itett	mi
 8007234:	085b      	lsrmi	r3, r3, #1
 8007236:	089b      	lsrpl	r3, r3, #2
 8007238:	2001      	movmi	r0, #1
 800723a:	600b      	strmi	r3, [r1, #0]
 800723c:	bf5c      	itt	pl
 800723e:	600b      	strpl	r3, [r1, #0]
 8007240:	2002      	movpl	r0, #2
 8007242:	4770      	bx	lr
 8007244:	b298      	uxth	r0, r3
 8007246:	b9a8      	cbnz	r0, 8007274 <__lo0bits+0x52>
 8007248:	0c1b      	lsrs	r3, r3, #16
 800724a:	2010      	movs	r0, #16
 800724c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007250:	bf04      	itt	eq
 8007252:	0a1b      	lsreq	r3, r3, #8
 8007254:	3008      	addeq	r0, #8
 8007256:	071a      	lsls	r2, r3, #28
 8007258:	bf04      	itt	eq
 800725a:	091b      	lsreq	r3, r3, #4
 800725c:	3004      	addeq	r0, #4
 800725e:	079a      	lsls	r2, r3, #30
 8007260:	bf04      	itt	eq
 8007262:	089b      	lsreq	r3, r3, #2
 8007264:	3002      	addeq	r0, #2
 8007266:	07da      	lsls	r2, r3, #31
 8007268:	d402      	bmi.n	8007270 <__lo0bits+0x4e>
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	d006      	beq.n	800727c <__lo0bits+0x5a>
 800726e:	3001      	adds	r0, #1
 8007270:	600b      	str	r3, [r1, #0]
 8007272:	4770      	bx	lr
 8007274:	4610      	mov	r0, r2
 8007276:	e7e9      	b.n	800724c <__lo0bits+0x2a>
 8007278:	2000      	movs	r0, #0
 800727a:	4770      	bx	lr
 800727c:	2020      	movs	r0, #32
 800727e:	4770      	bx	lr

08007280 <__i2b>:
 8007280:	b510      	push	{r4, lr}
 8007282:	460c      	mov	r4, r1
 8007284:	2101      	movs	r1, #1
 8007286:	f7ff ff27 	bl	80070d8 <_Balloc>
 800728a:	2201      	movs	r2, #1
 800728c:	6144      	str	r4, [r0, #20]
 800728e:	6102      	str	r2, [r0, #16]
 8007290:	bd10      	pop	{r4, pc}

08007292 <__multiply>:
 8007292:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007296:	4614      	mov	r4, r2
 8007298:	690a      	ldr	r2, [r1, #16]
 800729a:	6923      	ldr	r3, [r4, #16]
 800729c:	429a      	cmp	r2, r3
 800729e:	bfb8      	it	lt
 80072a0:	460b      	movlt	r3, r1
 80072a2:	4689      	mov	r9, r1
 80072a4:	bfbc      	itt	lt
 80072a6:	46a1      	movlt	r9, r4
 80072a8:	461c      	movlt	r4, r3
 80072aa:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80072ae:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80072b2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80072b6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80072ba:	eb07 060a 	add.w	r6, r7, sl
 80072be:	429e      	cmp	r6, r3
 80072c0:	bfc8      	it	gt
 80072c2:	3101      	addgt	r1, #1
 80072c4:	f7ff ff08 	bl	80070d8 <_Balloc>
 80072c8:	f100 0514 	add.w	r5, r0, #20
 80072cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072d0:	462b      	mov	r3, r5
 80072d2:	2200      	movs	r2, #0
 80072d4:	4543      	cmp	r3, r8
 80072d6:	d316      	bcc.n	8007306 <__multiply+0x74>
 80072d8:	f104 0214 	add.w	r2, r4, #20
 80072dc:	f109 0114 	add.w	r1, r9, #20
 80072e0:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80072e4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	9c01      	ldr	r4, [sp, #4]
 80072ec:	4294      	cmp	r4, r2
 80072ee:	4613      	mov	r3, r2
 80072f0:	d80c      	bhi.n	800730c <__multiply+0x7a>
 80072f2:	2e00      	cmp	r6, #0
 80072f4:	dd03      	ble.n	80072fe <__multiply+0x6c>
 80072f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d054      	beq.n	80073a8 <__multiply+0x116>
 80072fe:	6106      	str	r6, [r0, #16]
 8007300:	b003      	add	sp, #12
 8007302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007306:	f843 2b04 	str.w	r2, [r3], #4
 800730a:	e7e3      	b.n	80072d4 <__multiply+0x42>
 800730c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007310:	3204      	adds	r2, #4
 8007312:	f1ba 0f00 	cmp.w	sl, #0
 8007316:	d020      	beq.n	800735a <__multiply+0xc8>
 8007318:	46ae      	mov	lr, r5
 800731a:	4689      	mov	r9, r1
 800731c:	f04f 0c00 	mov.w	ip, #0
 8007320:	f859 4b04 	ldr.w	r4, [r9], #4
 8007324:	f8be b000 	ldrh.w	fp, [lr]
 8007328:	b2a3      	uxth	r3, r4
 800732a:	fb0a b303 	mla	r3, sl, r3, fp
 800732e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007332:	f8de 4000 	ldr.w	r4, [lr]
 8007336:	4463      	add	r3, ip
 8007338:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800733c:	fb0a c40b 	mla	r4, sl, fp, ip
 8007340:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007344:	b29b      	uxth	r3, r3
 8007346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800734a:	454f      	cmp	r7, r9
 800734c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007350:	f84e 3b04 	str.w	r3, [lr], #4
 8007354:	d8e4      	bhi.n	8007320 <__multiply+0x8e>
 8007356:	f8ce c000 	str.w	ip, [lr]
 800735a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800735e:	f1b9 0f00 	cmp.w	r9, #0
 8007362:	d01f      	beq.n	80073a4 <__multiply+0x112>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	46ae      	mov	lr, r5
 8007368:	468c      	mov	ip, r1
 800736a:	f04f 0a00 	mov.w	sl, #0
 800736e:	f8bc 4000 	ldrh.w	r4, [ip]
 8007372:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007376:	fb09 b404 	mla	r4, r9, r4, fp
 800737a:	44a2      	add	sl, r4
 800737c:	b29b      	uxth	r3, r3
 800737e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007382:	f84e 3b04 	str.w	r3, [lr], #4
 8007386:	f85c 3b04 	ldr.w	r3, [ip], #4
 800738a:	f8be 4000 	ldrh.w	r4, [lr]
 800738e:	0c1b      	lsrs	r3, r3, #16
 8007390:	fb09 4303 	mla	r3, r9, r3, r4
 8007394:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007398:	4567      	cmp	r7, ip
 800739a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800739e:	d8e6      	bhi.n	800736e <__multiply+0xdc>
 80073a0:	f8ce 3000 	str.w	r3, [lr]
 80073a4:	3504      	adds	r5, #4
 80073a6:	e7a0      	b.n	80072ea <__multiply+0x58>
 80073a8:	3e01      	subs	r6, #1
 80073aa:	e7a2      	b.n	80072f2 <__multiply+0x60>

080073ac <__pow5mult>:
 80073ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b0:	4615      	mov	r5, r2
 80073b2:	f012 0203 	ands.w	r2, r2, #3
 80073b6:	4606      	mov	r6, r0
 80073b8:	460f      	mov	r7, r1
 80073ba:	d007      	beq.n	80073cc <__pow5mult+0x20>
 80073bc:	3a01      	subs	r2, #1
 80073be:	4c21      	ldr	r4, [pc, #132]	; (8007444 <__pow5mult+0x98>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073c6:	f7ff fed2 	bl	800716e <__multadd>
 80073ca:	4607      	mov	r7, r0
 80073cc:	10ad      	asrs	r5, r5, #2
 80073ce:	d035      	beq.n	800743c <__pow5mult+0x90>
 80073d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073d2:	b93c      	cbnz	r4, 80073e4 <__pow5mult+0x38>
 80073d4:	2010      	movs	r0, #16
 80073d6:	f7ff fc4b 	bl	8006c70 <malloc>
 80073da:	6270      	str	r0, [r6, #36]	; 0x24
 80073dc:	6044      	str	r4, [r0, #4]
 80073de:	6084      	str	r4, [r0, #8]
 80073e0:	6004      	str	r4, [r0, #0]
 80073e2:	60c4      	str	r4, [r0, #12]
 80073e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073ec:	b94c      	cbnz	r4, 8007402 <__pow5mult+0x56>
 80073ee:	f240 2171 	movw	r1, #625	; 0x271
 80073f2:	4630      	mov	r0, r6
 80073f4:	f7ff ff44 	bl	8007280 <__i2b>
 80073f8:	2300      	movs	r3, #0
 80073fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80073fe:	4604      	mov	r4, r0
 8007400:	6003      	str	r3, [r0, #0]
 8007402:	f04f 0800 	mov.w	r8, #0
 8007406:	07eb      	lsls	r3, r5, #31
 8007408:	d50a      	bpl.n	8007420 <__pow5mult+0x74>
 800740a:	4639      	mov	r1, r7
 800740c:	4622      	mov	r2, r4
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff ff3f 	bl	8007292 <__multiply>
 8007414:	4639      	mov	r1, r7
 8007416:	4681      	mov	r9, r0
 8007418:	4630      	mov	r0, r6
 800741a:	f7ff fe91 	bl	8007140 <_Bfree>
 800741e:	464f      	mov	r7, r9
 8007420:	106d      	asrs	r5, r5, #1
 8007422:	d00b      	beq.n	800743c <__pow5mult+0x90>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	b938      	cbnz	r0, 8007438 <__pow5mult+0x8c>
 8007428:	4622      	mov	r2, r4
 800742a:	4621      	mov	r1, r4
 800742c:	4630      	mov	r0, r6
 800742e:	f7ff ff30 	bl	8007292 <__multiply>
 8007432:	6020      	str	r0, [r4, #0]
 8007434:	f8c0 8000 	str.w	r8, [r0]
 8007438:	4604      	mov	r4, r0
 800743a:	e7e4      	b.n	8007406 <__pow5mult+0x5a>
 800743c:	4638      	mov	r0, r7
 800743e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007442:	bf00      	nop
 8007444:	08007fd8 	.word	0x08007fd8

08007448 <__lshift>:
 8007448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800744c:	460c      	mov	r4, r1
 800744e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007452:	6923      	ldr	r3, [r4, #16]
 8007454:	6849      	ldr	r1, [r1, #4]
 8007456:	eb0a 0903 	add.w	r9, sl, r3
 800745a:	68a3      	ldr	r3, [r4, #8]
 800745c:	4607      	mov	r7, r0
 800745e:	4616      	mov	r6, r2
 8007460:	f109 0501 	add.w	r5, r9, #1
 8007464:	42ab      	cmp	r3, r5
 8007466:	db31      	blt.n	80074cc <__lshift+0x84>
 8007468:	4638      	mov	r0, r7
 800746a:	f7ff fe35 	bl	80070d8 <_Balloc>
 800746e:	2200      	movs	r2, #0
 8007470:	4680      	mov	r8, r0
 8007472:	f100 0314 	add.w	r3, r0, #20
 8007476:	4611      	mov	r1, r2
 8007478:	4552      	cmp	r2, sl
 800747a:	db2a      	blt.n	80074d2 <__lshift+0x8a>
 800747c:	6920      	ldr	r0, [r4, #16]
 800747e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007482:	f104 0114 	add.w	r1, r4, #20
 8007486:	f016 021f 	ands.w	r2, r6, #31
 800748a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800748e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007492:	d022      	beq.n	80074da <__lshift+0x92>
 8007494:	f1c2 0c20 	rsb	ip, r2, #32
 8007498:	2000      	movs	r0, #0
 800749a:	680e      	ldr	r6, [r1, #0]
 800749c:	4096      	lsls	r6, r2
 800749e:	4330      	orrs	r0, r6
 80074a0:	f843 0b04 	str.w	r0, [r3], #4
 80074a4:	f851 0b04 	ldr.w	r0, [r1], #4
 80074a8:	458e      	cmp	lr, r1
 80074aa:	fa20 f00c 	lsr.w	r0, r0, ip
 80074ae:	d8f4      	bhi.n	800749a <__lshift+0x52>
 80074b0:	6018      	str	r0, [r3, #0]
 80074b2:	b108      	cbz	r0, 80074b8 <__lshift+0x70>
 80074b4:	f109 0502 	add.w	r5, r9, #2
 80074b8:	3d01      	subs	r5, #1
 80074ba:	4638      	mov	r0, r7
 80074bc:	f8c8 5010 	str.w	r5, [r8, #16]
 80074c0:	4621      	mov	r1, r4
 80074c2:	f7ff fe3d 	bl	8007140 <_Bfree>
 80074c6:	4640      	mov	r0, r8
 80074c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074cc:	3101      	adds	r1, #1
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	e7c8      	b.n	8007464 <__lshift+0x1c>
 80074d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074d6:	3201      	adds	r2, #1
 80074d8:	e7ce      	b.n	8007478 <__lshift+0x30>
 80074da:	3b04      	subs	r3, #4
 80074dc:	f851 2b04 	ldr.w	r2, [r1], #4
 80074e0:	f843 2f04 	str.w	r2, [r3, #4]!
 80074e4:	458e      	cmp	lr, r1
 80074e6:	d8f9      	bhi.n	80074dc <__lshift+0x94>
 80074e8:	e7e6      	b.n	80074b8 <__lshift+0x70>

080074ea <__mcmp>:
 80074ea:	6903      	ldr	r3, [r0, #16]
 80074ec:	690a      	ldr	r2, [r1, #16]
 80074ee:	1a9b      	subs	r3, r3, r2
 80074f0:	b530      	push	{r4, r5, lr}
 80074f2:	d10c      	bne.n	800750e <__mcmp+0x24>
 80074f4:	0092      	lsls	r2, r2, #2
 80074f6:	3014      	adds	r0, #20
 80074f8:	3114      	adds	r1, #20
 80074fa:	1884      	adds	r4, r0, r2
 80074fc:	4411      	add	r1, r2
 80074fe:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007502:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007506:	4295      	cmp	r5, r2
 8007508:	d003      	beq.n	8007512 <__mcmp+0x28>
 800750a:	d305      	bcc.n	8007518 <__mcmp+0x2e>
 800750c:	2301      	movs	r3, #1
 800750e:	4618      	mov	r0, r3
 8007510:	bd30      	pop	{r4, r5, pc}
 8007512:	42a0      	cmp	r0, r4
 8007514:	d3f3      	bcc.n	80074fe <__mcmp+0x14>
 8007516:	e7fa      	b.n	800750e <__mcmp+0x24>
 8007518:	f04f 33ff 	mov.w	r3, #4294967295
 800751c:	e7f7      	b.n	800750e <__mcmp+0x24>

0800751e <__mdiff>:
 800751e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007522:	460d      	mov	r5, r1
 8007524:	4607      	mov	r7, r0
 8007526:	4611      	mov	r1, r2
 8007528:	4628      	mov	r0, r5
 800752a:	4614      	mov	r4, r2
 800752c:	f7ff ffdd 	bl	80074ea <__mcmp>
 8007530:	1e06      	subs	r6, r0, #0
 8007532:	d108      	bne.n	8007546 <__mdiff+0x28>
 8007534:	4631      	mov	r1, r6
 8007536:	4638      	mov	r0, r7
 8007538:	f7ff fdce 	bl	80070d8 <_Balloc>
 800753c:	2301      	movs	r3, #1
 800753e:	6103      	str	r3, [r0, #16]
 8007540:	6146      	str	r6, [r0, #20]
 8007542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007546:	bfa4      	itt	ge
 8007548:	4623      	movge	r3, r4
 800754a:	462c      	movge	r4, r5
 800754c:	4638      	mov	r0, r7
 800754e:	6861      	ldr	r1, [r4, #4]
 8007550:	bfa6      	itte	ge
 8007552:	461d      	movge	r5, r3
 8007554:	2600      	movge	r6, #0
 8007556:	2601      	movlt	r6, #1
 8007558:	f7ff fdbe 	bl	80070d8 <_Balloc>
 800755c:	692b      	ldr	r3, [r5, #16]
 800755e:	60c6      	str	r6, [r0, #12]
 8007560:	6926      	ldr	r6, [r4, #16]
 8007562:	f105 0914 	add.w	r9, r5, #20
 8007566:	f104 0214 	add.w	r2, r4, #20
 800756a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800756e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007572:	f100 0514 	add.w	r5, r0, #20
 8007576:	f04f 0c00 	mov.w	ip, #0
 800757a:	f852 ab04 	ldr.w	sl, [r2], #4
 800757e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007582:	fa1c f18a 	uxtah	r1, ip, sl
 8007586:	b2a3      	uxth	r3, r4
 8007588:	1ac9      	subs	r1, r1, r3
 800758a:	0c23      	lsrs	r3, r4, #16
 800758c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007590:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007594:	b289      	uxth	r1, r1
 8007596:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800759a:	45c8      	cmp	r8, r9
 800759c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80075a0:	4696      	mov	lr, r2
 80075a2:	f845 3b04 	str.w	r3, [r5], #4
 80075a6:	d8e8      	bhi.n	800757a <__mdiff+0x5c>
 80075a8:	45be      	cmp	lr, r7
 80075aa:	d305      	bcc.n	80075b8 <__mdiff+0x9a>
 80075ac:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80075b0:	b18b      	cbz	r3, 80075d6 <__mdiff+0xb8>
 80075b2:	6106      	str	r6, [r0, #16]
 80075b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b8:	f85e 1b04 	ldr.w	r1, [lr], #4
 80075bc:	fa1c f381 	uxtah	r3, ip, r1
 80075c0:	141a      	asrs	r2, r3, #16
 80075c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075d0:	f845 3b04 	str.w	r3, [r5], #4
 80075d4:	e7e8      	b.n	80075a8 <__mdiff+0x8a>
 80075d6:	3e01      	subs	r6, #1
 80075d8:	e7e8      	b.n	80075ac <__mdiff+0x8e>

080075da <__d2b>:
 80075da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075de:	460e      	mov	r6, r1
 80075e0:	2101      	movs	r1, #1
 80075e2:	ec59 8b10 	vmov	r8, r9, d0
 80075e6:	4615      	mov	r5, r2
 80075e8:	f7ff fd76 	bl	80070d8 <_Balloc>
 80075ec:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80075f0:	4607      	mov	r7, r0
 80075f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075f6:	bb34      	cbnz	r4, 8007646 <__d2b+0x6c>
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	f1b8 0f00 	cmp.w	r8, #0
 80075fe:	d027      	beq.n	8007650 <__d2b+0x76>
 8007600:	a802      	add	r0, sp, #8
 8007602:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007606:	f7ff fe0c 	bl	8007222 <__lo0bits>
 800760a:	9900      	ldr	r1, [sp, #0]
 800760c:	b1f0      	cbz	r0, 800764c <__d2b+0x72>
 800760e:	9a01      	ldr	r2, [sp, #4]
 8007610:	f1c0 0320 	rsb	r3, r0, #32
 8007614:	fa02 f303 	lsl.w	r3, r2, r3
 8007618:	430b      	orrs	r3, r1
 800761a:	40c2      	lsrs	r2, r0
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	9201      	str	r2, [sp, #4]
 8007620:	9b01      	ldr	r3, [sp, #4]
 8007622:	61bb      	str	r3, [r7, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	bf14      	ite	ne
 8007628:	2102      	movne	r1, #2
 800762a:	2101      	moveq	r1, #1
 800762c:	6139      	str	r1, [r7, #16]
 800762e:	b1c4      	cbz	r4, 8007662 <__d2b+0x88>
 8007630:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007634:	4404      	add	r4, r0
 8007636:	6034      	str	r4, [r6, #0]
 8007638:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800763c:	6028      	str	r0, [r5, #0]
 800763e:	4638      	mov	r0, r7
 8007640:	b003      	add	sp, #12
 8007642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800764a:	e7d5      	b.n	80075f8 <__d2b+0x1e>
 800764c:	6179      	str	r1, [r7, #20]
 800764e:	e7e7      	b.n	8007620 <__d2b+0x46>
 8007650:	a801      	add	r0, sp, #4
 8007652:	f7ff fde6 	bl	8007222 <__lo0bits>
 8007656:	9b01      	ldr	r3, [sp, #4]
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	2101      	movs	r1, #1
 800765c:	6139      	str	r1, [r7, #16]
 800765e:	3020      	adds	r0, #32
 8007660:	e7e5      	b.n	800762e <__d2b+0x54>
 8007662:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007666:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800766a:	6030      	str	r0, [r6, #0]
 800766c:	6918      	ldr	r0, [r3, #16]
 800766e:	f7ff fdb9 	bl	80071e4 <__hi0bits>
 8007672:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007676:	e7e1      	b.n	800763c <__d2b+0x62>

08007678 <_sbrk_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4c06      	ldr	r4, [pc, #24]	; (8007694 <_sbrk_r+0x1c>)
 800767c:	2300      	movs	r3, #0
 800767e:	4605      	mov	r5, r0
 8007680:	4608      	mov	r0, r1
 8007682:	6023      	str	r3, [r4, #0]
 8007684:	f000 fb6a 	bl	8007d5c <_sbrk>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_sbrk_r+0x1a>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	b103      	cbz	r3, 8007692 <_sbrk_r+0x1a>
 8007690:	602b      	str	r3, [r5, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	20000efc 	.word	0x20000efc

08007698 <__ssprint_r>:
 8007698:	6893      	ldr	r3, [r2, #8]
 800769a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769e:	4681      	mov	r9, r0
 80076a0:	460c      	mov	r4, r1
 80076a2:	4617      	mov	r7, r2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d060      	beq.n	800776a <__ssprint_r+0xd2>
 80076a8:	f04f 0b00 	mov.w	fp, #0
 80076ac:	f8d2 a000 	ldr.w	sl, [r2]
 80076b0:	465e      	mov	r6, fp
 80076b2:	b356      	cbz	r6, 800770a <__ssprint_r+0x72>
 80076b4:	68a3      	ldr	r3, [r4, #8]
 80076b6:	429e      	cmp	r6, r3
 80076b8:	d344      	bcc.n	8007744 <__ssprint_r+0xac>
 80076ba:	89a2      	ldrh	r2, [r4, #12]
 80076bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076c0:	d03e      	beq.n	8007740 <__ssprint_r+0xa8>
 80076c2:	6825      	ldr	r5, [r4, #0]
 80076c4:	6921      	ldr	r1, [r4, #16]
 80076c6:	eba5 0801 	sub.w	r8, r5, r1
 80076ca:	6965      	ldr	r5, [r4, #20]
 80076cc:	2302      	movs	r3, #2
 80076ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076d2:	fb95 f5f3 	sdiv	r5, r5, r3
 80076d6:	f108 0301 	add.w	r3, r8, #1
 80076da:	4433      	add	r3, r6
 80076dc:	429d      	cmp	r5, r3
 80076de:	bf38      	it	cc
 80076e0:	461d      	movcc	r5, r3
 80076e2:	0553      	lsls	r3, r2, #21
 80076e4:	d546      	bpl.n	8007774 <__ssprint_r+0xdc>
 80076e6:	4629      	mov	r1, r5
 80076e8:	4648      	mov	r0, r9
 80076ea:	f7ff fac9 	bl	8006c80 <_malloc_r>
 80076ee:	b998      	cbnz	r0, 8007718 <__ssprint_r+0x80>
 80076f0:	230c      	movs	r3, #12
 80076f2:	f8c9 3000 	str.w	r3, [r9]
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	2300      	movs	r3, #0
 8007700:	60bb      	str	r3, [r7, #8]
 8007702:	607b      	str	r3, [r7, #4]
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	e031      	b.n	800776e <__ssprint_r+0xd6>
 800770a:	f8da b000 	ldr.w	fp, [sl]
 800770e:	f8da 6004 	ldr.w	r6, [sl, #4]
 8007712:	f10a 0a08 	add.w	sl, sl, #8
 8007716:	e7cc      	b.n	80076b2 <__ssprint_r+0x1a>
 8007718:	4642      	mov	r2, r8
 800771a:	6921      	ldr	r1, [r4, #16]
 800771c:	9001      	str	r0, [sp, #4]
 800771e:	f7fd fc35 	bl	8004f8c <memcpy>
 8007722:	89a2      	ldrh	r2, [r4, #12]
 8007724:	9b01      	ldr	r3, [sp, #4]
 8007726:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800772a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800772e:	81a2      	strh	r2, [r4, #12]
 8007730:	6123      	str	r3, [r4, #16]
 8007732:	6165      	str	r5, [r4, #20]
 8007734:	4443      	add	r3, r8
 8007736:	eba5 0508 	sub.w	r5, r5, r8
 800773a:	6023      	str	r3, [r4, #0]
 800773c:	60a5      	str	r5, [r4, #8]
 800773e:	4633      	mov	r3, r6
 8007740:	429e      	cmp	r6, r3
 8007742:	d200      	bcs.n	8007746 <__ssprint_r+0xae>
 8007744:	4633      	mov	r3, r6
 8007746:	461a      	mov	r2, r3
 8007748:	4659      	mov	r1, fp
 800774a:	6820      	ldr	r0, [r4, #0]
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	f000 f96b 	bl	8007a28 <memmove>
 8007752:	68a2      	ldr	r2, [r4, #8]
 8007754:	9b01      	ldr	r3, [sp, #4]
 8007756:	1ad2      	subs	r2, r2, r3
 8007758:	60a2      	str	r2, [r4, #8]
 800775a:	6822      	ldr	r2, [r4, #0]
 800775c:	4413      	add	r3, r2
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	1b9e      	subs	r6, r3, r6
 8007764:	60be      	str	r6, [r7, #8]
 8007766:	2e00      	cmp	r6, #0
 8007768:	d1cf      	bne.n	800770a <__ssprint_r+0x72>
 800776a:	2000      	movs	r0, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	b003      	add	sp, #12
 8007770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007774:	462a      	mov	r2, r5
 8007776:	4648      	mov	r0, r9
 8007778:	f000 f970 	bl	8007a5c <_realloc_r>
 800777c:	4603      	mov	r3, r0
 800777e:	2800      	cmp	r0, #0
 8007780:	d1d6      	bne.n	8007730 <__ssprint_r+0x98>
 8007782:	6921      	ldr	r1, [r4, #16]
 8007784:	4648      	mov	r0, r9
 8007786:	f000 f891 	bl	80078ac <_free_r>
 800778a:	e7b1      	b.n	80076f0 <__ssprint_r+0x58>

0800778c <__ascii_wctomb>:
 800778c:	b149      	cbz	r1, 80077a2 <__ascii_wctomb+0x16>
 800778e:	2aff      	cmp	r2, #255	; 0xff
 8007790:	bf85      	ittet	hi
 8007792:	238a      	movhi	r3, #138	; 0x8a
 8007794:	6003      	strhi	r3, [r0, #0]
 8007796:	700a      	strbls	r2, [r1, #0]
 8007798:	f04f 30ff 	movhi.w	r0, #4294967295
 800779c:	bf98      	it	ls
 800779e:	2001      	movls	r0, #1
 80077a0:	4770      	bx	lr
 80077a2:	4608      	mov	r0, r1
 80077a4:	4770      	bx	lr

080077a6 <_calloc_r>:
 80077a6:	b510      	push	{r4, lr}
 80077a8:	4351      	muls	r1, r2
 80077aa:	f7ff fa69 	bl	8006c80 <_malloc_r>
 80077ae:	4604      	mov	r4, r0
 80077b0:	b198      	cbz	r0, 80077da <_calloc_r+0x34>
 80077b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80077b6:	f022 0203 	bic.w	r2, r2, #3
 80077ba:	3a04      	subs	r2, #4
 80077bc:	2a24      	cmp	r2, #36	; 0x24
 80077be:	d81b      	bhi.n	80077f8 <_calloc_r+0x52>
 80077c0:	2a13      	cmp	r2, #19
 80077c2:	d917      	bls.n	80077f4 <_calloc_r+0x4e>
 80077c4:	2100      	movs	r1, #0
 80077c6:	2a1b      	cmp	r2, #27
 80077c8:	6001      	str	r1, [r0, #0]
 80077ca:	6041      	str	r1, [r0, #4]
 80077cc:	d807      	bhi.n	80077de <_calloc_r+0x38>
 80077ce:	f100 0308 	add.w	r3, r0, #8
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	605a      	str	r2, [r3, #4]
 80077d8:	609a      	str	r2, [r3, #8]
 80077da:	4620      	mov	r0, r4
 80077dc:	bd10      	pop	{r4, pc}
 80077de:	2a24      	cmp	r2, #36	; 0x24
 80077e0:	6081      	str	r1, [r0, #8]
 80077e2:	60c1      	str	r1, [r0, #12]
 80077e4:	bf11      	iteee	ne
 80077e6:	f100 0310 	addne.w	r3, r0, #16
 80077ea:	6101      	streq	r1, [r0, #16]
 80077ec:	f100 0318 	addeq.w	r3, r0, #24
 80077f0:	6141      	streq	r1, [r0, #20]
 80077f2:	e7ee      	b.n	80077d2 <_calloc_r+0x2c>
 80077f4:	4603      	mov	r3, r0
 80077f6:	e7ec      	b.n	80077d2 <_calloc_r+0x2c>
 80077f8:	2100      	movs	r1, #0
 80077fa:	f7fd fbd2 	bl	8004fa2 <memset>
 80077fe:	e7ec      	b.n	80077da <_calloc_r+0x34>

08007800 <_malloc_trim_r>:
 8007800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007804:	4f25      	ldr	r7, [pc, #148]	; (800789c <_malloc_trim_r+0x9c>)
 8007806:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80078a8 <_malloc_trim_r+0xa8>
 800780a:	4689      	mov	r9, r1
 800780c:	4606      	mov	r6, r0
 800780e:	f7ff fc57 	bl	80070c0 <__malloc_lock>
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	685d      	ldr	r5, [r3, #4]
 8007816:	f1a8 0411 	sub.w	r4, r8, #17
 800781a:	f025 0503 	bic.w	r5, r5, #3
 800781e:	eba4 0409 	sub.w	r4, r4, r9
 8007822:	442c      	add	r4, r5
 8007824:	fbb4 f4f8 	udiv	r4, r4, r8
 8007828:	3c01      	subs	r4, #1
 800782a:	fb08 f404 	mul.w	r4, r8, r4
 800782e:	4544      	cmp	r4, r8
 8007830:	da05      	bge.n	800783e <_malloc_trim_r+0x3e>
 8007832:	4630      	mov	r0, r6
 8007834:	f7ff fc4a 	bl	80070cc <__malloc_unlock>
 8007838:	2000      	movs	r0, #0
 800783a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800783e:	2100      	movs	r1, #0
 8007840:	4630      	mov	r0, r6
 8007842:	f7ff ff19 	bl	8007678 <_sbrk_r>
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	442b      	add	r3, r5
 800784a:	4298      	cmp	r0, r3
 800784c:	d1f1      	bne.n	8007832 <_malloc_trim_r+0x32>
 800784e:	4261      	negs	r1, r4
 8007850:	4630      	mov	r0, r6
 8007852:	f7ff ff11 	bl	8007678 <_sbrk_r>
 8007856:	3001      	adds	r0, #1
 8007858:	d110      	bne.n	800787c <_malloc_trim_r+0x7c>
 800785a:	2100      	movs	r1, #0
 800785c:	4630      	mov	r0, r6
 800785e:	f7ff ff0b 	bl	8007678 <_sbrk_r>
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	1a83      	subs	r3, r0, r2
 8007866:	2b0f      	cmp	r3, #15
 8007868:	dde3      	ble.n	8007832 <_malloc_trim_r+0x32>
 800786a:	490d      	ldr	r1, [pc, #52]	; (80078a0 <_malloc_trim_r+0xa0>)
 800786c:	6809      	ldr	r1, [r1, #0]
 800786e:	1a40      	subs	r0, r0, r1
 8007870:	490c      	ldr	r1, [pc, #48]	; (80078a4 <_malloc_trim_r+0xa4>)
 8007872:	f043 0301 	orr.w	r3, r3, #1
 8007876:	6008      	str	r0, [r1, #0]
 8007878:	6053      	str	r3, [r2, #4]
 800787a:	e7da      	b.n	8007832 <_malloc_trim_r+0x32>
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4a09      	ldr	r2, [pc, #36]	; (80078a4 <_malloc_trim_r+0xa4>)
 8007880:	1b2d      	subs	r5, r5, r4
 8007882:	f045 0501 	orr.w	r5, r5, #1
 8007886:	605d      	str	r5, [r3, #4]
 8007888:	6813      	ldr	r3, [r2, #0]
 800788a:	4630      	mov	r0, r6
 800788c:	1b1c      	subs	r4, r3, r4
 800788e:	6014      	str	r4, [r2, #0]
 8007890:	f7ff fc1c 	bl	80070cc <__malloc_unlock>
 8007894:	2001      	movs	r0, #1
 8007896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800789a:	bf00      	nop
 800789c:	2000026c 	.word	0x2000026c
 80078a0:	20000674 	.word	0x20000674
 80078a4:	200006a4 	.word	0x200006a4
 80078a8:	00000080 	.word	0x00000080

080078ac <_free_r>:
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	4604      	mov	r4, r0
 80078b2:	4688      	mov	r8, r1
 80078b4:	2900      	cmp	r1, #0
 80078b6:	f000 80ab 	beq.w	8007a10 <_free_r+0x164>
 80078ba:	f7ff fc01 	bl	80070c0 <__malloc_lock>
 80078be:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80078c2:	4d54      	ldr	r5, [pc, #336]	; (8007a14 <_free_r+0x168>)
 80078c4:	f022 0001 	bic.w	r0, r2, #1
 80078c8:	f1a8 0308 	sub.w	r3, r8, #8
 80078cc:	181f      	adds	r7, r3, r0
 80078ce:	68a9      	ldr	r1, [r5, #8]
 80078d0:	687e      	ldr	r6, [r7, #4]
 80078d2:	428f      	cmp	r7, r1
 80078d4:	f026 0603 	bic.w	r6, r6, #3
 80078d8:	f002 0201 	and.w	r2, r2, #1
 80078dc:	d11b      	bne.n	8007916 <_free_r+0x6a>
 80078de:	4430      	add	r0, r6
 80078e0:	b93a      	cbnz	r2, 80078f2 <_free_r+0x46>
 80078e2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80078e6:	1a9b      	subs	r3, r3, r2
 80078e8:	4410      	add	r0, r2
 80078ea:	6899      	ldr	r1, [r3, #8]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	60ca      	str	r2, [r1, #12]
 80078f0:	6091      	str	r1, [r2, #8]
 80078f2:	f040 0201 	orr.w	r2, r0, #1
 80078f6:	605a      	str	r2, [r3, #4]
 80078f8:	60ab      	str	r3, [r5, #8]
 80078fa:	4b47      	ldr	r3, [pc, #284]	; (8007a18 <_free_r+0x16c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4298      	cmp	r0, r3
 8007900:	d304      	bcc.n	800790c <_free_r+0x60>
 8007902:	4b46      	ldr	r3, [pc, #280]	; (8007a1c <_free_r+0x170>)
 8007904:	4620      	mov	r0, r4
 8007906:	6819      	ldr	r1, [r3, #0]
 8007908:	f7ff ff7a 	bl	8007800 <_malloc_trim_r>
 800790c:	4620      	mov	r0, r4
 800790e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007912:	f7ff bbdb 	b.w	80070cc <__malloc_unlock>
 8007916:	607e      	str	r6, [r7, #4]
 8007918:	2a00      	cmp	r2, #0
 800791a:	d139      	bne.n	8007990 <_free_r+0xe4>
 800791c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8007920:	1a5b      	subs	r3, r3, r1
 8007922:	4408      	add	r0, r1
 8007924:	6899      	ldr	r1, [r3, #8]
 8007926:	f105 0e08 	add.w	lr, r5, #8
 800792a:	4571      	cmp	r1, lr
 800792c:	d032      	beq.n	8007994 <_free_r+0xe8>
 800792e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8007932:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007936:	f8ce 1008 	str.w	r1, [lr, #8]
 800793a:	19b9      	adds	r1, r7, r6
 800793c:	6849      	ldr	r1, [r1, #4]
 800793e:	07c9      	lsls	r1, r1, #31
 8007940:	d40a      	bmi.n	8007958 <_free_r+0xac>
 8007942:	4430      	add	r0, r6
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	bb3a      	cbnz	r2, 8007998 <_free_r+0xec>
 8007948:	4e35      	ldr	r6, [pc, #212]	; (8007a20 <_free_r+0x174>)
 800794a:	42b1      	cmp	r1, r6
 800794c:	d124      	bne.n	8007998 <_free_r+0xec>
 800794e:	616b      	str	r3, [r5, #20]
 8007950:	612b      	str	r3, [r5, #16]
 8007952:	2201      	movs	r2, #1
 8007954:	60d9      	str	r1, [r3, #12]
 8007956:	6099      	str	r1, [r3, #8]
 8007958:	f040 0101 	orr.w	r1, r0, #1
 800795c:	6059      	str	r1, [r3, #4]
 800795e:	5018      	str	r0, [r3, r0]
 8007960:	2a00      	cmp	r2, #0
 8007962:	d1d3      	bne.n	800790c <_free_r+0x60>
 8007964:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007968:	d21a      	bcs.n	80079a0 <_free_r+0xf4>
 800796a:	08c0      	lsrs	r0, r0, #3
 800796c:	1081      	asrs	r1, r0, #2
 800796e:	2201      	movs	r2, #1
 8007970:	408a      	lsls	r2, r1
 8007972:	6869      	ldr	r1, [r5, #4]
 8007974:	3001      	adds	r0, #1
 8007976:	430a      	orrs	r2, r1
 8007978:	606a      	str	r2, [r5, #4]
 800797a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800797e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8007982:	6099      	str	r1, [r3, #8]
 8007984:	3a08      	subs	r2, #8
 8007986:	60da      	str	r2, [r3, #12]
 8007988:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800798c:	60cb      	str	r3, [r1, #12]
 800798e:	e7bd      	b.n	800790c <_free_r+0x60>
 8007990:	2200      	movs	r2, #0
 8007992:	e7d2      	b.n	800793a <_free_r+0x8e>
 8007994:	2201      	movs	r2, #1
 8007996:	e7d0      	b.n	800793a <_free_r+0x8e>
 8007998:	68fe      	ldr	r6, [r7, #12]
 800799a:	60ce      	str	r6, [r1, #12]
 800799c:	60b1      	str	r1, [r6, #8]
 800799e:	e7db      	b.n	8007958 <_free_r+0xac>
 80079a0:	0a42      	lsrs	r2, r0, #9
 80079a2:	2a04      	cmp	r2, #4
 80079a4:	d813      	bhi.n	80079ce <_free_r+0x122>
 80079a6:	0982      	lsrs	r2, r0, #6
 80079a8:	3238      	adds	r2, #56	; 0x38
 80079aa:	1c51      	adds	r1, r2, #1
 80079ac:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80079b0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80079b4:	428e      	cmp	r6, r1
 80079b6:	d124      	bne.n	8007a02 <_free_r+0x156>
 80079b8:	2001      	movs	r0, #1
 80079ba:	1092      	asrs	r2, r2, #2
 80079bc:	fa00 f202 	lsl.w	r2, r0, r2
 80079c0:	6868      	ldr	r0, [r5, #4]
 80079c2:	4302      	orrs	r2, r0
 80079c4:	606a      	str	r2, [r5, #4]
 80079c6:	60de      	str	r6, [r3, #12]
 80079c8:	6099      	str	r1, [r3, #8]
 80079ca:	60b3      	str	r3, [r6, #8]
 80079cc:	e7de      	b.n	800798c <_free_r+0xe0>
 80079ce:	2a14      	cmp	r2, #20
 80079d0:	d801      	bhi.n	80079d6 <_free_r+0x12a>
 80079d2:	325b      	adds	r2, #91	; 0x5b
 80079d4:	e7e9      	b.n	80079aa <_free_r+0xfe>
 80079d6:	2a54      	cmp	r2, #84	; 0x54
 80079d8:	d802      	bhi.n	80079e0 <_free_r+0x134>
 80079da:	0b02      	lsrs	r2, r0, #12
 80079dc:	326e      	adds	r2, #110	; 0x6e
 80079de:	e7e4      	b.n	80079aa <_free_r+0xfe>
 80079e0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80079e4:	d802      	bhi.n	80079ec <_free_r+0x140>
 80079e6:	0bc2      	lsrs	r2, r0, #15
 80079e8:	3277      	adds	r2, #119	; 0x77
 80079ea:	e7de      	b.n	80079aa <_free_r+0xfe>
 80079ec:	f240 5154 	movw	r1, #1364	; 0x554
 80079f0:	428a      	cmp	r2, r1
 80079f2:	bf9a      	itte	ls
 80079f4:	0c82      	lsrls	r2, r0, #18
 80079f6:	327c      	addls	r2, #124	; 0x7c
 80079f8:	227e      	movhi	r2, #126	; 0x7e
 80079fa:	e7d6      	b.n	80079aa <_free_r+0xfe>
 80079fc:	6889      	ldr	r1, [r1, #8]
 80079fe:	428e      	cmp	r6, r1
 8007a00:	d004      	beq.n	8007a0c <_free_r+0x160>
 8007a02:	684a      	ldr	r2, [r1, #4]
 8007a04:	f022 0203 	bic.w	r2, r2, #3
 8007a08:	4290      	cmp	r0, r2
 8007a0a:	d3f7      	bcc.n	80079fc <_free_r+0x150>
 8007a0c:	68ce      	ldr	r6, [r1, #12]
 8007a0e:	e7da      	b.n	80079c6 <_free_r+0x11a>
 8007a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a14:	2000026c 	.word	0x2000026c
 8007a18:	20000678 	.word	0x20000678
 8007a1c:	200006d4 	.word	0x200006d4
 8007a20:	20000274 	.word	0x20000274

08007a24 <__retarget_lock_acquire_recursive>:
 8007a24:	4770      	bx	lr

08007a26 <__retarget_lock_release_recursive>:
 8007a26:	4770      	bx	lr

08007a28 <memmove>:
 8007a28:	4288      	cmp	r0, r1
 8007a2a:	b510      	push	{r4, lr}
 8007a2c:	eb01 0302 	add.w	r3, r1, r2
 8007a30:	d803      	bhi.n	8007a3a <memmove+0x12>
 8007a32:	1e42      	subs	r2, r0, #1
 8007a34:	4299      	cmp	r1, r3
 8007a36:	d10c      	bne.n	8007a52 <memmove+0x2a>
 8007a38:	bd10      	pop	{r4, pc}
 8007a3a:	4298      	cmp	r0, r3
 8007a3c:	d2f9      	bcs.n	8007a32 <memmove+0xa>
 8007a3e:	1881      	adds	r1, r0, r2
 8007a40:	1ad2      	subs	r2, r2, r3
 8007a42:	42d3      	cmn	r3, r2
 8007a44:	d100      	bne.n	8007a48 <memmove+0x20>
 8007a46:	bd10      	pop	{r4, pc}
 8007a48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007a50:	e7f7      	b.n	8007a42 <memmove+0x1a>
 8007a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a56:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007a5a:	e7eb      	b.n	8007a34 <memmove+0xc>

08007a5c <_realloc_r>:
 8007a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a60:	4682      	mov	sl, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	b929      	cbnz	r1, 8007a72 <_realloc_r+0x16>
 8007a66:	4611      	mov	r1, r2
 8007a68:	b003      	add	sp, #12
 8007a6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6e:	f7ff b907 	b.w	8006c80 <_malloc_r>
 8007a72:	9201      	str	r2, [sp, #4]
 8007a74:	f7ff fb24 	bl	80070c0 <__malloc_lock>
 8007a78:	9a01      	ldr	r2, [sp, #4]
 8007a7a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8007a7e:	f102 080b 	add.w	r8, r2, #11
 8007a82:	f1b8 0f16 	cmp.w	r8, #22
 8007a86:	f1a4 0908 	sub.w	r9, r4, #8
 8007a8a:	f025 0603 	bic.w	r6, r5, #3
 8007a8e:	d90a      	bls.n	8007aa6 <_realloc_r+0x4a>
 8007a90:	f038 0807 	bics.w	r8, r8, #7
 8007a94:	d509      	bpl.n	8007aaa <_realloc_r+0x4e>
 8007a96:	230c      	movs	r3, #12
 8007a98:	f8ca 3000 	str.w	r3, [sl]
 8007a9c:	2700      	movs	r7, #0
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	b003      	add	sp, #12
 8007aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa6:	f04f 0810 	mov.w	r8, #16
 8007aaa:	4590      	cmp	r8, r2
 8007aac:	d3f3      	bcc.n	8007a96 <_realloc_r+0x3a>
 8007aae:	45b0      	cmp	r8, r6
 8007ab0:	f340 8145 	ble.w	8007d3e <_realloc_r+0x2e2>
 8007ab4:	4ba8      	ldr	r3, [pc, #672]	; (8007d58 <_realloc_r+0x2fc>)
 8007ab6:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8007aba:	eb09 0106 	add.w	r1, r9, r6
 8007abe:	4571      	cmp	r1, lr
 8007ac0:	469b      	mov	fp, r3
 8007ac2:	684b      	ldr	r3, [r1, #4]
 8007ac4:	d005      	beq.n	8007ad2 <_realloc_r+0x76>
 8007ac6:	f023 0001 	bic.w	r0, r3, #1
 8007aca:	4408      	add	r0, r1
 8007acc:	6840      	ldr	r0, [r0, #4]
 8007ace:	07c7      	lsls	r7, r0, #31
 8007ad0:	d447      	bmi.n	8007b62 <_realloc_r+0x106>
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	4571      	cmp	r1, lr
 8007ad8:	eb06 0703 	add.w	r7, r6, r3
 8007adc:	d119      	bne.n	8007b12 <_realloc_r+0xb6>
 8007ade:	f108 0010 	add.w	r0, r8, #16
 8007ae2:	4287      	cmp	r7, r0
 8007ae4:	db3f      	blt.n	8007b66 <_realloc_r+0x10a>
 8007ae6:	eb09 0308 	add.w	r3, r9, r8
 8007aea:	eba7 0708 	sub.w	r7, r7, r8
 8007aee:	f047 0701 	orr.w	r7, r7, #1
 8007af2:	f8cb 3008 	str.w	r3, [fp, #8]
 8007af6:	605f      	str	r7, [r3, #4]
 8007af8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	ea43 0308 	orr.w	r3, r3, r8
 8007b04:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b08:	4650      	mov	r0, sl
 8007b0a:	f7ff fadf 	bl	80070cc <__malloc_unlock>
 8007b0e:	4627      	mov	r7, r4
 8007b10:	e7c5      	b.n	8007a9e <_realloc_r+0x42>
 8007b12:	45b8      	cmp	r8, r7
 8007b14:	dc27      	bgt.n	8007b66 <_realloc_r+0x10a>
 8007b16:	68cb      	ldr	r3, [r1, #12]
 8007b18:	688a      	ldr	r2, [r1, #8]
 8007b1a:	60d3      	str	r3, [r2, #12]
 8007b1c:	609a      	str	r2, [r3, #8]
 8007b1e:	eba7 0008 	sub.w	r0, r7, r8
 8007b22:	280f      	cmp	r0, #15
 8007b24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007b28:	eb09 0207 	add.w	r2, r9, r7
 8007b2c:	f240 8109 	bls.w	8007d42 <_realloc_r+0x2e6>
 8007b30:	eb09 0108 	add.w	r1, r9, r8
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	ea43 0308 	orr.w	r3, r3, r8
 8007b3c:	f040 0001 	orr.w	r0, r0, #1
 8007b40:	f8c9 3004 	str.w	r3, [r9, #4]
 8007b44:	6048      	str	r0, [r1, #4]
 8007b46:	6853      	ldr	r3, [r2, #4]
 8007b48:	f043 0301 	orr.w	r3, r3, #1
 8007b4c:	6053      	str	r3, [r2, #4]
 8007b4e:	3108      	adds	r1, #8
 8007b50:	4650      	mov	r0, sl
 8007b52:	f7ff feab 	bl	80078ac <_free_r>
 8007b56:	4650      	mov	r0, sl
 8007b58:	f7ff fab8 	bl	80070cc <__malloc_unlock>
 8007b5c:	f109 0708 	add.w	r7, r9, #8
 8007b60:	e79d      	b.n	8007a9e <_realloc_r+0x42>
 8007b62:	2300      	movs	r3, #0
 8007b64:	4619      	mov	r1, r3
 8007b66:	07e8      	lsls	r0, r5, #31
 8007b68:	f100 8084 	bmi.w	8007c74 <_realloc_r+0x218>
 8007b6c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007b70:	eba9 0505 	sub.w	r5, r9, r5
 8007b74:	6868      	ldr	r0, [r5, #4]
 8007b76:	f020 0003 	bic.w	r0, r0, #3
 8007b7a:	4430      	add	r0, r6
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	d076      	beq.n	8007c6e <_realloc_r+0x212>
 8007b80:	4571      	cmp	r1, lr
 8007b82:	d150      	bne.n	8007c26 <_realloc_r+0x1ca>
 8007b84:	4403      	add	r3, r0
 8007b86:	f108 0110 	add.w	r1, r8, #16
 8007b8a:	428b      	cmp	r3, r1
 8007b8c:	db6f      	blt.n	8007c6e <_realloc_r+0x212>
 8007b8e:	462f      	mov	r7, r5
 8007b90:	68ea      	ldr	r2, [r5, #12]
 8007b92:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007b96:	60ca      	str	r2, [r1, #12]
 8007b98:	6091      	str	r1, [r2, #8]
 8007b9a:	1f32      	subs	r2, r6, #4
 8007b9c:	2a24      	cmp	r2, #36	; 0x24
 8007b9e:	d83b      	bhi.n	8007c18 <_realloc_r+0x1bc>
 8007ba0:	2a13      	cmp	r2, #19
 8007ba2:	d936      	bls.n	8007c12 <_realloc_r+0x1b6>
 8007ba4:	6821      	ldr	r1, [r4, #0]
 8007ba6:	60a9      	str	r1, [r5, #8]
 8007ba8:	6861      	ldr	r1, [r4, #4]
 8007baa:	60e9      	str	r1, [r5, #12]
 8007bac:	2a1b      	cmp	r2, #27
 8007bae:	d81c      	bhi.n	8007bea <_realloc_r+0x18e>
 8007bb0:	f105 0210 	add.w	r2, r5, #16
 8007bb4:	f104 0108 	add.w	r1, r4, #8
 8007bb8:	6808      	ldr	r0, [r1, #0]
 8007bba:	6010      	str	r0, [r2, #0]
 8007bbc:	6848      	ldr	r0, [r1, #4]
 8007bbe:	6050      	str	r0, [r2, #4]
 8007bc0:	6889      	ldr	r1, [r1, #8]
 8007bc2:	6091      	str	r1, [r2, #8]
 8007bc4:	eb05 0208 	add.w	r2, r5, r8
 8007bc8:	eba3 0308 	sub.w	r3, r3, r8
 8007bcc:	f043 0301 	orr.w	r3, r3, #1
 8007bd0:	f8cb 2008 	str.w	r2, [fp, #8]
 8007bd4:	6053      	str	r3, [r2, #4]
 8007bd6:	686b      	ldr	r3, [r5, #4]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	ea43 0308 	orr.w	r3, r3, r8
 8007be0:	606b      	str	r3, [r5, #4]
 8007be2:	4650      	mov	r0, sl
 8007be4:	f7ff fa72 	bl	80070cc <__malloc_unlock>
 8007be8:	e759      	b.n	8007a9e <_realloc_r+0x42>
 8007bea:	68a1      	ldr	r1, [r4, #8]
 8007bec:	6129      	str	r1, [r5, #16]
 8007bee:	68e1      	ldr	r1, [r4, #12]
 8007bf0:	6169      	str	r1, [r5, #20]
 8007bf2:	2a24      	cmp	r2, #36	; 0x24
 8007bf4:	bf01      	itttt	eq
 8007bf6:	6922      	ldreq	r2, [r4, #16]
 8007bf8:	61aa      	streq	r2, [r5, #24]
 8007bfa:	6960      	ldreq	r0, [r4, #20]
 8007bfc:	61e8      	streq	r0, [r5, #28]
 8007bfe:	bf19      	ittee	ne
 8007c00:	f105 0218 	addne.w	r2, r5, #24
 8007c04:	f104 0110 	addne.w	r1, r4, #16
 8007c08:	f105 0220 	addeq.w	r2, r5, #32
 8007c0c:	f104 0118 	addeq.w	r1, r4, #24
 8007c10:	e7d2      	b.n	8007bb8 <_realloc_r+0x15c>
 8007c12:	463a      	mov	r2, r7
 8007c14:	4621      	mov	r1, r4
 8007c16:	e7cf      	b.n	8007bb8 <_realloc_r+0x15c>
 8007c18:	4621      	mov	r1, r4
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	9301      	str	r3, [sp, #4]
 8007c1e:	f7ff ff03 	bl	8007a28 <memmove>
 8007c22:	9b01      	ldr	r3, [sp, #4]
 8007c24:	e7ce      	b.n	8007bc4 <_realloc_r+0x168>
 8007c26:	18c7      	adds	r7, r0, r3
 8007c28:	45b8      	cmp	r8, r7
 8007c2a:	dc20      	bgt.n	8007c6e <_realloc_r+0x212>
 8007c2c:	68cb      	ldr	r3, [r1, #12]
 8007c2e:	688a      	ldr	r2, [r1, #8]
 8007c30:	60d3      	str	r3, [r2, #12]
 8007c32:	609a      	str	r2, [r3, #8]
 8007c34:	4628      	mov	r0, r5
 8007c36:	68eb      	ldr	r3, [r5, #12]
 8007c38:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007c3c:	60d3      	str	r3, [r2, #12]
 8007c3e:	609a      	str	r2, [r3, #8]
 8007c40:	1f32      	subs	r2, r6, #4
 8007c42:	2a24      	cmp	r2, #36	; 0x24
 8007c44:	d842      	bhi.n	8007ccc <_realloc_r+0x270>
 8007c46:	2a13      	cmp	r2, #19
 8007c48:	d93e      	bls.n	8007cc8 <_realloc_r+0x26c>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	60ab      	str	r3, [r5, #8]
 8007c4e:	6863      	ldr	r3, [r4, #4]
 8007c50:	60eb      	str	r3, [r5, #12]
 8007c52:	2a1b      	cmp	r2, #27
 8007c54:	d824      	bhi.n	8007ca0 <_realloc_r+0x244>
 8007c56:	f105 0010 	add.w	r0, r5, #16
 8007c5a:	f104 0308 	add.w	r3, r4, #8
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	6002      	str	r2, [r0, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	6042      	str	r2, [r0, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	6083      	str	r3, [r0, #8]
 8007c6a:	46a9      	mov	r9, r5
 8007c6c:	e757      	b.n	8007b1e <_realloc_r+0xc2>
 8007c6e:	4580      	cmp	r8, r0
 8007c70:	4607      	mov	r7, r0
 8007c72:	dddf      	ble.n	8007c34 <_realloc_r+0x1d8>
 8007c74:	4611      	mov	r1, r2
 8007c76:	4650      	mov	r0, sl
 8007c78:	f7ff f802 	bl	8006c80 <_malloc_r>
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d0af      	beq.n	8007be2 <_realloc_r+0x186>
 8007c82:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	f1a0 0208 	sub.w	r2, r0, #8
 8007c8e:	444b      	add	r3, r9
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d11f      	bne.n	8007cd4 <_realloc_r+0x278>
 8007c94:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8007c98:	f027 0703 	bic.w	r7, r7, #3
 8007c9c:	4437      	add	r7, r6
 8007c9e:	e73e      	b.n	8007b1e <_realloc_r+0xc2>
 8007ca0:	68a3      	ldr	r3, [r4, #8]
 8007ca2:	612b      	str	r3, [r5, #16]
 8007ca4:	68e3      	ldr	r3, [r4, #12]
 8007ca6:	616b      	str	r3, [r5, #20]
 8007ca8:	2a24      	cmp	r2, #36	; 0x24
 8007caa:	bf01      	itttt	eq
 8007cac:	6923      	ldreq	r3, [r4, #16]
 8007cae:	61ab      	streq	r3, [r5, #24]
 8007cb0:	6962      	ldreq	r2, [r4, #20]
 8007cb2:	61ea      	streq	r2, [r5, #28]
 8007cb4:	bf19      	ittee	ne
 8007cb6:	f105 0018 	addne.w	r0, r5, #24
 8007cba:	f104 0310 	addne.w	r3, r4, #16
 8007cbe:	f105 0020 	addeq.w	r0, r5, #32
 8007cc2:	f104 0318 	addeq.w	r3, r4, #24
 8007cc6:	e7ca      	b.n	8007c5e <_realloc_r+0x202>
 8007cc8:	4623      	mov	r3, r4
 8007cca:	e7c8      	b.n	8007c5e <_realloc_r+0x202>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	f7ff feab 	bl	8007a28 <memmove>
 8007cd2:	e7ca      	b.n	8007c6a <_realloc_r+0x20e>
 8007cd4:	1f32      	subs	r2, r6, #4
 8007cd6:	2a24      	cmp	r2, #36	; 0x24
 8007cd8:	d82d      	bhi.n	8007d36 <_realloc_r+0x2da>
 8007cda:	2a13      	cmp	r2, #19
 8007cdc:	d928      	bls.n	8007d30 <_realloc_r+0x2d4>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	6003      	str	r3, [r0, #0]
 8007ce2:	6863      	ldr	r3, [r4, #4]
 8007ce4:	6043      	str	r3, [r0, #4]
 8007ce6:	2a1b      	cmp	r2, #27
 8007ce8:	d80e      	bhi.n	8007d08 <_realloc_r+0x2ac>
 8007cea:	f100 0308 	add.w	r3, r0, #8
 8007cee:	f104 0208 	add.w	r2, r4, #8
 8007cf2:	6811      	ldr	r1, [r2, #0]
 8007cf4:	6019      	str	r1, [r3, #0]
 8007cf6:	6851      	ldr	r1, [r2, #4]
 8007cf8:	6059      	str	r1, [r3, #4]
 8007cfa:	6892      	ldr	r2, [r2, #8]
 8007cfc:	609a      	str	r2, [r3, #8]
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4650      	mov	r0, sl
 8007d02:	f7ff fdd3 	bl	80078ac <_free_r>
 8007d06:	e76c      	b.n	8007be2 <_realloc_r+0x186>
 8007d08:	68a3      	ldr	r3, [r4, #8]
 8007d0a:	6083      	str	r3, [r0, #8]
 8007d0c:	68e3      	ldr	r3, [r4, #12]
 8007d0e:	60c3      	str	r3, [r0, #12]
 8007d10:	2a24      	cmp	r2, #36	; 0x24
 8007d12:	bf01      	itttt	eq
 8007d14:	6923      	ldreq	r3, [r4, #16]
 8007d16:	6103      	streq	r3, [r0, #16]
 8007d18:	6961      	ldreq	r1, [r4, #20]
 8007d1a:	6141      	streq	r1, [r0, #20]
 8007d1c:	bf19      	ittee	ne
 8007d1e:	f100 0310 	addne.w	r3, r0, #16
 8007d22:	f104 0210 	addne.w	r2, r4, #16
 8007d26:	f100 0318 	addeq.w	r3, r0, #24
 8007d2a:	f104 0218 	addeq.w	r2, r4, #24
 8007d2e:	e7e0      	b.n	8007cf2 <_realloc_r+0x296>
 8007d30:	4603      	mov	r3, r0
 8007d32:	4622      	mov	r2, r4
 8007d34:	e7dd      	b.n	8007cf2 <_realloc_r+0x296>
 8007d36:	4621      	mov	r1, r4
 8007d38:	f7ff fe76 	bl	8007a28 <memmove>
 8007d3c:	e7df      	b.n	8007cfe <_realloc_r+0x2a2>
 8007d3e:	4637      	mov	r7, r6
 8007d40:	e6ed      	b.n	8007b1e <_realloc_r+0xc2>
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	431f      	orrs	r7, r3
 8007d48:	f8c9 7004 	str.w	r7, [r9, #4]
 8007d4c:	6853      	ldr	r3, [r2, #4]
 8007d4e:	f043 0301 	orr.w	r3, r3, #1
 8007d52:	6053      	str	r3, [r2, #4]
 8007d54:	e6ff      	b.n	8007b56 <_realloc_r+0xfa>
 8007d56:	bf00      	nop
 8007d58:	2000026c 	.word	0x2000026c

08007d5c <_sbrk>:
 8007d5c:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <_sbrk+0x14>)
 8007d5e:	6819      	ldr	r1, [r3, #0]
 8007d60:	4602      	mov	r2, r0
 8007d62:	b909      	cbnz	r1, 8007d68 <_sbrk+0xc>
 8007d64:	4903      	ldr	r1, [pc, #12]	; (8007d74 <_sbrk+0x18>)
 8007d66:	6019      	str	r1, [r3, #0]
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	4402      	add	r2, r0
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	4770      	bx	lr
 8007d70:	200006d8 	.word	0x200006d8
 8007d74:	20000f0c 	.word	0x20000f0c

08007d78 <_init>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	bf00      	nop
 8007d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7e:	bc08      	pop	{r3}
 8007d80:	469e      	mov	lr, r3
 8007d82:	4770      	bx	lr

08007d84 <_fini>:
 8007d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d86:	bf00      	nop
 8007d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8a:	bc08      	pop	{r3}
 8007d8c:	469e      	mov	lr, r3
 8007d8e:	4770      	bx	lr
