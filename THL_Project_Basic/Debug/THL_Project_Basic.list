
THL_Project_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080076c0  080076c0  000176c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000067c  20000000  08007a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000670  2000067c  08008114  0002067c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000cec  08008114  00020cec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002134f  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003a75  00000000  00000000  000419fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c362  00000000  00000000  00045470  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001150  00000000  00000000  000517d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001068  00000000  00000000  00052928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009162  00000000  00000000  00053990  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000504c  00000000  00000000  0005caf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00061b3e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c68  00000000  00000000  00061bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000df  00000000  00000000  00065824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000067c 	.word	0x2000067c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080076a8 	.word	0x080076a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000680 	.word	0x20000680
 800020c:	080076a8 	.word	0x080076a8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b97a 	b.w	8000eec <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460d      	mov	r5, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9e08      	ldr	r6, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d151      	bne.n	8000cc4 <__udivmoddi4+0xb4>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96d      	bls.n	8000d02 <__udivmoddi4+0xf2>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0c20 	rsb	ip, lr, #32
 8000c34:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c40:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c4c:	0c25      	lsrs	r5, r4, #16
 8000c4e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c52:	fa1f f987 	uxth.w	r9, r7
 8000c56:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c5e:	fb08 f309 	mul.w	r3, r8, r9
 8000c62:	42ab      	cmp	r3, r5
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x6c>
 8000c66:	19ed      	adds	r5, r5, r7
 8000c68:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c6c:	f080 8123 	bcs.w	8000eb6 <__udivmoddi4+0x2a6>
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	f240 8120 	bls.w	8000eb6 <__udivmoddi4+0x2a6>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	443d      	add	r5, r7
 8000c7c:	1aed      	subs	r5, r5, r3
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c84:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c8c:	fb00 f909 	mul.w	r9, r0, r9
 8000c90:	45a1      	cmp	r9, r4
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x98>
 8000c94:	19e4      	adds	r4, r4, r7
 8000c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9a:	f080 810a 	bcs.w	8000eb2 <__udivmoddi4+0x2a2>
 8000c9e:	45a1      	cmp	r9, r4
 8000ca0:	f240 8107 	bls.w	8000eb2 <__udivmoddi4+0x2a2>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	443c      	add	r4, r7
 8000ca8:	eba4 0409 	sub.w	r4, r4, r9
 8000cac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d061      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cba:	2300      	movs	r3, #0
 8000cbc:	6034      	str	r4, [r6, #0]
 8000cbe:	6073      	str	r3, [r6, #4]
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0xc8>
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d054      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd8:	fab3 f183 	clz	r1, r3
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	f040 808e 	bne.w	8000dfe <__udivmoddi4+0x1ee>
 8000ce2:	42ab      	cmp	r3, r5
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xdc>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80fa 	bhi.w	8000ee0 <__udivmoddi4+0x2d0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb65 0503 	sbc.w	r5, r5, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	46ac      	mov	ip, r5
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d03f      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cfa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	b912      	cbnz	r2, 8000d0a <__udivmoddi4+0xfa>
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d0a:	fab7 fe87 	clz	lr, r7
 8000d0e:	f1be 0f00 	cmp.w	lr, #0
 8000d12:	d134      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d14:	1beb      	subs	r3, r5, r7
 8000d16:	0c3a      	lsrs	r2, r7, #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d22:	0c25      	lsrs	r5, r4, #16
 8000d24:	fb02 3318 	mls	r3, r2, r8, r3
 8000d28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d2c:	fb0c f308 	mul.w	r3, ip, r8
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19ed      	adds	r5, r5, r7
 8000d36:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	f200 80d1 	bhi.w	8000ee4 <__udivmoddi4+0x2d4>
 8000d42:	4680      	mov	r8, r0
 8000d44:	1aed      	subs	r5, r5, r3
 8000d46:	b2a3      	uxth	r3, r4
 8000d48:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d4c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d54:	fb0c fc00 	mul.w	ip, ip, r0
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	f200 80b8 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	eba4 040c 	sub.w	r4, r4, ip
 8000d70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d74:	e79d      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000d76:	4631      	mov	r1, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	f1ce 0420 	rsb	r4, lr, #32
 8000d82:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d8e:	0c3a      	lsrs	r2, r7, #16
 8000d90:	fa25 f404 	lsr.w	r4, r5, r4
 8000d94:	ea48 0803 	orr.w	r8, r8, r3
 8000d98:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000da0:	fb02 4411 	mls	r4, r2, r1, r4
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dac:	fb01 f30c 	mul.w	r3, r1, ip
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db6:	d909      	bls.n	8000dcc <__udivmoddi4+0x1bc>
 8000db8:	19ed      	adds	r5, r5, r7
 8000dba:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dbe:	f080 808a 	bcs.w	8000ed6 <__udivmoddi4+0x2c6>
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	f240 8087 	bls.w	8000ed6 <__udivmoddi4+0x2c6>
 8000dc8:	3902      	subs	r1, #2
 8000dca:	443d      	add	r5, r7
 8000dcc:	1aeb      	subs	r3, r5, r3
 8000dce:	fa1f f588 	uxth.w	r5, r8
 8000dd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dd6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dde:	fb00 f30c 	mul.w	r3, r0, ip
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1e6>
 8000de6:	19ed      	adds	r5, r5, r7
 8000de8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dec:	d26f      	bcs.n	8000ece <__udivmoddi4+0x2be>
 8000dee:	42ab      	cmp	r3, r5
 8000df0:	d96d      	bls.n	8000ece <__udivmoddi4+0x2be>
 8000df2:	3802      	subs	r0, #2
 8000df4:	443d      	add	r5, r7
 8000df6:	1aeb      	subs	r3, r5, r3
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	e78f      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000dfe:	f1c1 0720 	rsb	r7, r1, #32
 8000e02:	fa22 f807 	lsr.w	r8, r2, r7
 8000e06:	408b      	lsls	r3, r1
 8000e08:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0c:	ea48 0303 	orr.w	r3, r8, r3
 8000e10:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e1e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e22:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e26:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e2a:	fa1f f883 	uxth.w	r8, r3
 8000e2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e32:	fb09 f408 	mul.w	r4, r9, r8
 8000e36:	42ac      	cmp	r4, r5
 8000e38:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x244>
 8000e42:	18ed      	adds	r5, r5, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	d243      	bcs.n	8000ed2 <__udivmoddi4+0x2c2>
 8000e4a:	42ac      	cmp	r4, r5
 8000e4c:	d941      	bls.n	8000ed2 <__udivmoddi4+0x2c2>
 8000e4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e52:	441d      	add	r5, r3
 8000e54:	1b2d      	subs	r5, r5, r4
 8000e56:	fa1f fe8e 	uxth.w	lr, lr
 8000e5a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e5e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e66:	fb00 f808 	mul.w	r8, r0, r8
 8000e6a:	45a0      	cmp	r8, r4
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x26e>
 8000e6e:	18e4      	adds	r4, r4, r3
 8000e70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e74:	d229      	bcs.n	8000eca <__udivmoddi4+0x2ba>
 8000e76:	45a0      	cmp	r8, r4
 8000e78:	d927      	bls.n	8000eca <__udivmoddi4+0x2ba>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	441c      	add	r4, r3
 8000e7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e82:	eba4 0408 	sub.w	r4, r4, r8
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	454c      	cmp	r4, r9
 8000e8c:	46c6      	mov	lr, r8
 8000e8e:	464d      	mov	r5, r9
 8000e90:	d315      	bcc.n	8000ebe <__udivmoddi4+0x2ae>
 8000e92:	d012      	beq.n	8000eba <__udivmoddi4+0x2aa>
 8000e94:	b156      	cbz	r6, 8000eac <__udivmoddi4+0x29c>
 8000e96:	ebba 030e 	subs.w	r3, sl, lr
 8000e9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea2:	40cb      	lsrs	r3, r1
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	40cc      	lsrs	r4, r1
 8000ea8:	6037      	str	r7, [r6, #0]
 8000eaa:	6074      	str	r4, [r6, #4]
 8000eac:	2100      	movs	r1, #0
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e6f8      	b.n	8000ca8 <__udivmoddi4+0x98>
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	e6e0      	b.n	8000c7c <__udivmoddi4+0x6c>
 8000eba:	45c2      	cmp	sl, r8
 8000ebc:	d2ea      	bcs.n	8000e94 <__udivmoddi4+0x284>
 8000ebe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ec6:	3801      	subs	r0, #1
 8000ec8:	e7e4      	b.n	8000e94 <__udivmoddi4+0x284>
 8000eca:	4628      	mov	r0, r5
 8000ecc:	e7d7      	b.n	8000e7e <__udivmoddi4+0x26e>
 8000ece:	4640      	mov	r0, r8
 8000ed0:	e791      	b.n	8000df6 <__udivmoddi4+0x1e6>
 8000ed2:	4681      	mov	r9, r0
 8000ed4:	e7be      	b.n	8000e54 <__udivmoddi4+0x244>
 8000ed6:	4601      	mov	r1, r0
 8000ed8:	e778      	b.n	8000dcc <__udivmoddi4+0x1bc>
 8000eda:	3802      	subs	r0, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	e745      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e708      	b.n	8000cf6 <__udivmoddi4+0xe6>
 8000ee4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee8:	443d      	add	r5, r7
 8000eea:	e72b      	b.n	8000d44 <__udivmoddi4+0x134>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_InitTick+0x40>)
 8000ef6:	7818      	ldrb	r0, [r3, #0]
 8000ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f00:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <HAL_InitTick+0x44>)
 8000f02:	6810      	ldr	r0, [r2, #0]
 8000f04:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f08:	f000 f894 	bl	8001034 <HAL_SYSTICK_Config>
 8000f0c:	b968      	cbnz	r0, 8000f2a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	2c0f      	cmp	r4, #15
 8000f10:	d901      	bls.n	8000f16 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f12:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000f14:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f16:	2200      	movs	r2, #0
 8000f18:	4621      	mov	r1, r4
 8000f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1e:	f000 f84b 	bl	8000fb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_InitTick+0x48>)
 8000f24:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000f26:	2000      	movs	r0, #0
 8000f28:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_Init>:
{
 8000f3c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_Init+0x30>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f46:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f4e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f56:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f81b 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff ffc6 	bl	8000ef0 <HAL_InitTick>
  HAL_MspInit();
 8000f64:	f002 ffa4 	bl	8003eb0 <HAL_MspInit>
}
 8000f68:	2000      	movs	r0, #0
 8000f6a:	bd08      	pop	{r3, pc}
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f70:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <HAL_IncTick+0x10>)
 8000f72:	6811      	ldr	r1, [r2, #0]
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_IncTick+0x14>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	440b      	add	r3, r1
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200006d4 	.word	0x200006d4
 8000f84:	20000000 	.word	0x20000000

08000f88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f88:	4b01      	ldr	r3, [pc, #4]	; (8000f90 <HAL_GetTick+0x8>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200006d4 	.word	0x200006d4

08000f94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f96:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f9c:	041b      	lsls	r3, r3, #16
 8000f9e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fa0:	0200      	lsls	r0, r0, #8
 8000fa2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000fa8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000fac:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000fb0:	60d0      	str	r0, [r2, #12]
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_NVIC_SetPriority+0x5c>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc2:	f1c3 0407 	rsb	r4, r3, #7
 8000fc6:	2c04      	cmp	r4, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fcc:	1d1d      	adds	r5, r3, #4
 8000fce:	2d06      	cmp	r5, #6
 8000fd0:	d917      	bls.n	8001002 <HAL_NVIC_SetPriority+0x4a>
 8000fd2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	2501      	movs	r5, #1
 8000fd6:	fa05 f404 	lsl.w	r4, r5, r4
 8000fda:	3c01      	subs	r4, #1
 8000fdc:	4021      	ands	r1, r4
 8000fde:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	fa05 f303 	lsl.w	r3, r5, r3
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000fea:	2800      	cmp	r0, #0
 8000fec:	db0b      	blt.n	8001006 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	0109      	lsls	r1, r1, #4
 8000ff0:	b2c9      	uxtb	r1, r1
 8000ff2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ff6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000ffa:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ffe:	bc30      	pop	{r4, r5}
 8001000:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	2300      	movs	r3, #0
 8001004:	e7e6      	b.n	8000fd4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	f000 000f 	and.w	r0, r0, #15
 800100a:	0109      	lsls	r1, r1, #4
 800100c:	b2c9      	uxtb	r1, r1
 800100e:	4b02      	ldr	r3, [pc, #8]	; (8001018 <HAL_NVIC_SetPriority+0x60>)
 8001010:	5419      	strb	r1, [r3, r0]
 8001012:	e7f4      	b.n	8000ffe <HAL_NVIC_SetPriority+0x46>
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	e000ed14 	.word	0xe000ed14

0800101c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800101c:	0942      	lsrs	r2, r0, #5
 800101e:	f000 001f 	and.w	r0, r0, #31
 8001022:	2301      	movs	r3, #1
 8001024:	fa03 f000 	lsl.w	r0, r3, r0
 8001028:	4b01      	ldr	r3, [pc, #4]	; (8001030 <HAL_NVIC_EnableIRQ+0x14>)
 800102a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100

08001034 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	3801      	subs	r0, #1
 8001036:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800103a:	d20a      	bcs.n	8001052 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_SYSTICK_Config+0x24>)
 800103e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	21f0      	movs	r1, #240	; 0xf0
 8001042:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_SYSTICK_Config+0x28>)
 8001044:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	2000      	movs	r0, #0
 800104a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001060:	6802      	ldr	r2, [r0, #0]
 8001062:	b2d3      	uxtb	r3, r2
 8001064:	3b10      	subs	r3, #16
 8001066:	490b      	ldr	r1, [pc, #44]	; (8001094 <DMA_CalcBaseAndBitshift+0x34>)
 8001068:	fba1 1303 	umull	r1, r3, r1, r3
 800106c:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800106e:	490a      	ldr	r1, [pc, #40]	; (8001098 <DMA_CalcBaseAndBitshift+0x38>)
 8001070:	5cc9      	ldrb	r1, [r1, r3]
 8001072:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001074:	2b03      	cmp	r3, #3
 8001076:	d806      	bhi.n	8001086 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001078:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800107c:	f022 0203 	bic.w	r2, r2, #3
 8001080:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001082:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001084:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001086:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800108a:	f022 0203 	bic.w	r2, r2, #3
 800108e:	3204      	adds	r2, #4
 8001090:	6582      	str	r2, [r0, #88]	; 0x58
 8001092:	e7f6      	b.n	8001082 <DMA_CalcBaseAndBitshift+0x22>
 8001094:	aaaaaaab 	.word	0xaaaaaaab
 8001098:	080076c0 	.word	0x080076c0

0800109c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800109c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800109e:	6982      	ldr	r2, [r0, #24]
 80010a0:	b992      	cbnz	r2, 80010c8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d00a      	beq.n	80010bc <DMA_CheckFifoParam+0x20>
 80010a6:	b11b      	cbz	r3, 80010b0 <DMA_CheckFifoParam+0x14>
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d001      	beq.n	80010b0 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80010ac:	2000      	movs	r0, #0
 80010ae:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80010b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80010b6:	d12c      	bne.n	8001112 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80010b8:	2000      	movs	r0, #0
 80010ba:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80010bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80010c2:	d028      	beq.n	8001116 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80010c4:	2000      	movs	r0, #0
 80010c6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80010c8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80010cc:	d005      	beq.n	80010da <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d929      	bls.n	8001126 <DMA_CheckFifoParam+0x8a>
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d015      	beq.n	8001102 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80010d6:	2000      	movs	r0, #0
 80010d8:	4770      	bx	lr
    switch (tmp)
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d803      	bhi.n	80010e6 <DMA_CheckFifoParam+0x4a>
 80010de:	e8df f003 	tbb	[pc, r3]
 80010e2:	041c      	.short	0x041c
 80010e4:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80010e6:	2000      	movs	r0, #0
 80010e8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80010ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80010f0:	d115      	bne.n	800111e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80010f2:	2000      	movs	r0, #0
 80010f4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80010f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80010fc:	d011      	beq.n	8001122 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80010fe:	2000      	movs	r0, #0
 8001100:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001102:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001104:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001108:	d001      	beq.n	800110e <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 800110a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800110c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800110e:	2000      	movs	r0, #0
 8001110:	4770      	bx	lr
        status = HAL_ERROR;
 8001112:	2001      	movs	r0, #1
 8001114:	4770      	bx	lr
        status = HAL_ERROR;
 8001116:	2001      	movs	r0, #1
 8001118:	4770      	bx	lr
      status = HAL_ERROR;
 800111a:	2001      	movs	r0, #1
 800111c:	4770      	bx	lr
        status = HAL_ERROR;
 800111e:	2001      	movs	r0, #1
 8001120:	4770      	bx	lr
        status = HAL_ERROR;
 8001122:	2001      	movs	r0, #1
 8001124:	4770      	bx	lr
      status = HAL_ERROR;
 8001126:	2001      	movs	r0, #1
 8001128:	4770      	bx	lr
	...

0800112c <HAL_DMA_Init>:
{
 800112c:	b570      	push	{r4, r5, r6, lr}
 800112e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ff2a 	bl	8000f88 <HAL_GetTick>
  if(hdma == NULL)
 8001134:	2c00      	cmp	r4, #0
 8001136:	d05d      	beq.n	80011f4 <HAL_DMA_Init+0xc8>
 8001138:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800113a:	2300      	movs	r3, #0
 800113c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001140:	2302      	movs	r3, #2
 8001142:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001146:	6822      	ldr	r2, [r4, #0]
 8001148:	6813      	ldr	r3, [r2, #0]
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	f012 0f01 	tst.w	r2, #1
 8001158:	d00a      	beq.n	8001170 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800115a:	f7ff ff15 	bl	8000f88 <HAL_GetTick>
 800115e:	1b40      	subs	r0, r0, r5
 8001160:	2805      	cmp	r0, #5
 8001162:	d9f5      	bls.n	8001150 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001164:	2320      	movs	r3, #32
 8001166:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001168:	2003      	movs	r0, #3
 800116a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800116e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001170:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001172:	4921      	ldr	r1, [pc, #132]	; (80011f8 <HAL_DMA_Init+0xcc>)
 8001174:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001176:	6862      	ldr	r2, [r4, #4]
 8001178:	68a0      	ldr	r0, [r4, #8]
 800117a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800117c:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800117e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001180:	6920      	ldr	r0, [r4, #16]
 8001182:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001184:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001186:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001188:	69a0      	ldr	r0, [r4, #24]
 800118a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800118c:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800118e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001190:	6a20      	ldr	r0, [r4, #32]
 8001192:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001194:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001196:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001198:	2904      	cmp	r1, #4
 800119a:	d016      	beq.n	80011ca <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 800119c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800119e:	6826      	ldr	r6, [r4, #0]
 80011a0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011a2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80011a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011a8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d012      	beq.n	80011d4 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 80011ae:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff ff55 	bl	8001060 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011b8:	233f      	movs	r3, #63	; 0x3f
 80011ba:	4093      	lsls	r3, r2
 80011bc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011be:	2000      	movs	r0, #0
 80011c0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80011c2:	2301      	movs	r3, #1
 80011c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80011c8:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80011cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80011ce:	4301      	orrs	r1, r0
 80011d0:	430a      	orrs	r2, r1
 80011d2:	e7e3      	b.n	800119c <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 80011d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011d6:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0e7      	beq.n	80011ae <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011de:	4620      	mov	r0, r4
 80011e0:	f7ff ff5c 	bl	800109c <DMA_CheckFifoParam>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d0e2      	beq.n	80011ae <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011e8:	2340      	movs	r3, #64	; 0x40
 80011ea:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80011ec:	2001      	movs	r0, #1
 80011ee:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80011f2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80011f4:	2001      	movs	r0, #1
}
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
 80011f8:	f010803f 	.word	0xf010803f

080011fc <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011fc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d003      	beq.n	800120e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800120a:	2001      	movs	r0, #1
 800120c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800120e:	2305      	movs	r3, #5
 8001210:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001214:	6802      	ldr	r2, [r0, #0]
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800121e:	2000      	movs	r0, #0
}
 8001220:	4770      	bx	lr
	...

08001224 <HAL_DMA_IRQHandler>:
{
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	b083      	sub	sp, #12
 8001228:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800122e:	4b72      	ldr	r3, [pc, #456]	; (80013f8 <HAL_DMA_IRQHandler+0x1d4>)
 8001230:	681d      	ldr	r5, [r3, #0]
 8001232:	4b72      	ldr	r3, [pc, #456]	; (80013fc <HAL_DMA_IRQHandler+0x1d8>)
 8001234:	fba3 3505 	umull	r3, r5, r3, r5
 8001238:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800123a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800123c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800123e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001240:	2308      	movs	r3, #8
 8001242:	4093      	lsls	r3, r2
 8001244:	421e      	tst	r6, r3
 8001246:	d010      	beq.n	800126a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001248:	6803      	ldr	r3, [r0, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f012 0f04 	tst.w	r2, #4
 8001250:	d00b      	beq.n	800126a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f022 0204 	bic.w	r2, r2, #4
 8001258:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800125a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800125c:	2308      	movs	r3, #8
 800125e:	4093      	lsls	r3, r2
 8001260:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001262:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800126a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800126c:	2301      	movs	r3, #1
 800126e:	4093      	lsls	r3, r2
 8001270:	421e      	tst	r6, r3
 8001272:	d009      	beq.n	8001288 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001274:	6822      	ldr	r2, [r4, #0]
 8001276:	6952      	ldr	r2, [r2, #20]
 8001278:	f012 0f80 	tst.w	r2, #128	; 0x80
 800127c:	d004      	beq.n	8001288 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800127e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001280:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001288:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800128a:	2304      	movs	r3, #4
 800128c:	4093      	lsls	r3, r2
 800128e:	421e      	tst	r6, r3
 8001290:	d009      	beq.n	80012a6 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001292:	6822      	ldr	r2, [r4, #0]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	f012 0f02 	tst.w	r2, #2
 800129a:	d004      	beq.n	80012a6 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800129c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800129e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012a8:	2310      	movs	r3, #16
 80012aa:	4093      	lsls	r3, r2
 80012ac:	421e      	tst	r6, r3
 80012ae:	d024      	beq.n	80012fa <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012b0:	6822      	ldr	r2, [r4, #0]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	f012 0f08 	tst.w	r2, #8
 80012b8:	d01f      	beq.n	80012fa <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012ba:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80012c4:	d00d      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80012cc:	d104      	bne.n	80012d8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80012ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012d0:	b19b      	cbz	r3, 80012fa <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80012d2:	4620      	mov	r0, r4
 80012d4:	4798      	blx	r3
 80012d6:	e010      	b.n	80012fa <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012da:	b173      	cbz	r3, 80012fa <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80012dc:	4620      	mov	r0, r4
 80012de:	4798      	blx	r3
 80012e0:	e00b      	b.n	80012fa <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80012e8:	d103      	bne.n	80012f2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	f022 0208 	bic.w	r2, r2, #8
 80012f0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80012f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012f4:	b10b      	cbz	r3, 80012fa <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80012f6:	4620      	mov	r0, r4
 80012f8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012fc:	2320      	movs	r3, #32
 80012fe:	4093      	lsls	r3, r2
 8001300:	421e      	tst	r6, r3
 8001302:	d055      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001304:	6822      	ldr	r2, [r4, #0]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	f012 0f10 	tst.w	r2, #16
 800130c:	d050      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800130e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001310:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b05      	cmp	r3, #5
 8001318:	d00e      	beq.n	8001338 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001322:	d033      	beq.n	800138c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800132a:	d12a      	bne.n	8001382 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800132c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800132e:	2b00      	cmp	r3, #0
 8001330:	d03e      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001332:	4620      	mov	r0, r4
 8001334:	4798      	blx	r3
 8001336:	e03b      	b.n	80013b0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001338:	6822      	ldr	r2, [r4, #0]
 800133a:	6813      	ldr	r3, [r2, #0]
 800133c:	f023 0316 	bic.w	r3, r3, #22
 8001340:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001342:	6822      	ldr	r2, [r4, #0]
 8001344:	6953      	ldr	r3, [r2, #20]
 8001346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800134a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800134c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800134e:	b1a3      	cbz	r3, 800137a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001350:	6822      	ldr	r2, [r4, #0]
 8001352:	6813      	ldr	r3, [r2, #0]
 8001354:	f023 0308 	bic.w	r3, r3, #8
 8001358:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800135a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800135c:	233f      	movs	r3, #63	; 0x3f
 800135e:	4093      	lsls	r3, r2
 8001360:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001362:	2300      	movs	r3, #0
 8001364:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001368:	2301      	movs	r3, #1
 800136a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800136e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001370:	2b00      	cmp	r3, #0
 8001372:	d03f      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001374:	4620      	mov	r0, r4
 8001376:	4798      	blx	r3
 8001378:	e03c      	b.n	80013f4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800137a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1e7      	bne.n	8001350 <HAL_DMA_IRQHandler+0x12c>
 8001380:	e7eb      	b.n	800135a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001382:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001384:	b1a3      	cbz	r3, 80013b0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001386:	4620      	mov	r0, r4
 8001388:	4798      	blx	r3
 800138a:	e011      	b.n	80013b0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001392:	d109      	bne.n	80013a8 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	f022 0210 	bic.w	r2, r2, #16
 800139a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 800139c:	2300      	movs	r3, #0
 800139e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80013a2:	2301      	movs	r3, #1
 80013a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80013a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013aa:	b10b      	cbz	r3, 80013b0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80013ac:	4620      	mov	r0, r4
 80013ae:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013b2:	b1fb      	cbz	r3, 80013f4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013b6:	f013 0f01 	tst.w	r3, #1
 80013ba:	d017      	beq.n	80013ec <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80013bc:	2305      	movs	r3, #5
 80013be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80013c2:	6822      	ldr	r2, [r4, #0]
 80013c4:	6813      	ldr	r3, [r2, #0]
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80013cc:	9b01      	ldr	r3, [sp, #4]
 80013ce:	3301      	adds	r3, #1
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	429d      	cmp	r5, r3
 80013d4:	d304      	bcc.n	80013e0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f013 0f01 	tst.w	r3, #1
 80013de:	d1f5      	bne.n	80013cc <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80013e0:	2300      	movs	r3, #0
 80013e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80013ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80013ee:	b10b      	cbz	r3, 80013f4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80013f0:	4620      	mov	r0, r4
 80013f2:	4798      	blx	r3
}
 80013f4:	b003      	add	sp, #12
 80013f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f8:	20000008 	.word	0x20000008
 80013fc:	1b4e81b5 	.word	0x1b4e81b5

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001402:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001404:	2400      	movs	r4, #0
 8001406:	e098      	b.n	800153a <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001408:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 800140c:	f10e 0e08 	add.w	lr, lr, #8
 8001410:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001414:	f004 0607 	and.w	r6, r4, #7
 8001418:	00b6      	lsls	r6, r6, #2
 800141a:	270f      	movs	r7, #15
 800141c:	40b7      	lsls	r7, r6
 800141e:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001422:	690f      	ldr	r7, [r1, #16]
 8001424:	fa07 f606 	lsl.w	r6, r7, r6
 8001428:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 800142a:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 800142e:	e094      	b.n	800155a <HAL_GPIO_Init+0x15a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001430:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001432:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001434:	68cf      	ldr	r7, [r1, #12]
 8001436:	fa07 f70e 	lsl.w	r7, r7, lr
 800143a:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800143c:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001440:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001444:	684e      	ldr	r6, [r1, #4]
 8001446:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800144a:	40a6      	lsls	r6, r4
 800144c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800144e:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001450:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001452:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001454:	688b      	ldr	r3, [r1, #8]
 8001456:	fa03 f30e 	lsl.w	r3, r3, lr
 800145a:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 800145c:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800145e:	684b      	ldr	r3, [r1, #4]
 8001460:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001464:	d068      	beq.n	8001538 <HAL_GPIO_Init+0x138>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <HAL_GPIO_Init+0x1b0>)
 800146c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800146e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001472:	645a      	str	r2, [r3, #68]	; 0x44
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	9b01      	ldr	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147e:	08a3      	lsrs	r3, r4, #2
 8001480:	1c9e      	adds	r6, r3, #2
 8001482:	4a4c      	ldr	r2, [pc, #304]	; (80015b4 <HAL_GPIO_Init+0x1b4>)
 8001484:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001488:	f004 0603 	and.w	r6, r4, #3
 800148c:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8001490:	260f      	movs	r6, #15
 8001492:	fa06 f60e 	lsl.w	r6, r6, lr
 8001496:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149a:	4f47      	ldr	r7, [pc, #284]	; (80015b8 <HAL_GPIO_Init+0x1b8>)
 800149c:	42b8      	cmp	r0, r7
 800149e:	d079      	beq.n	8001594 <HAL_GPIO_Init+0x194>
 80014a0:	4e46      	ldr	r6, [pc, #280]	; (80015bc <HAL_GPIO_Init+0x1bc>)
 80014a2:	42b0      	cmp	r0, r6
 80014a4:	d078      	beq.n	8001598 <HAL_GPIO_Init+0x198>
 80014a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80014aa:	42b0      	cmp	r0, r6
 80014ac:	d076      	beq.n	800159c <HAL_GPIO_Init+0x19c>
 80014ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80014b2:	42b0      	cmp	r0, r6
 80014b4:	d074      	beq.n	80015a0 <HAL_GPIO_Init+0x1a0>
 80014b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80014ba:	42b0      	cmp	r0, r6
 80014bc:	d072      	beq.n	80015a4 <HAL_GPIO_Init+0x1a4>
 80014be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80014c2:	42b0      	cmp	r0, r6
 80014c4:	d070      	beq.n	80015a8 <HAL_GPIO_Init+0x1a8>
 80014c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80014ca:	42b0      	cmp	r0, r6
 80014cc:	d060      	beq.n	8001590 <HAL_GPIO_Init+0x190>
 80014ce:	2607      	movs	r6, #7
 80014d0:	fa06 f60e 	lsl.w	r6, r6, lr
 80014d4:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d6:	3302      	adds	r3, #2
 80014d8:	4e36      	ldr	r6, [pc, #216]	; (80015b4 <HAL_GPIO_Init+0x1b4>)
 80014da:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014de:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <HAL_GPIO_Init+0x1c0>)
 80014e0:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	43eb      	mvns	r3, r5
 80014e4:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e8:	684f      	ldr	r7, [r1, #4]
 80014ea:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80014ee:	d001      	beq.n	80014f4 <HAL_GPIO_Init+0xf4>
        {
          temp |= iocurrent;
 80014f0:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 80014f4:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <HAL_GPIO_Init+0x1c0>)
 80014f6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80014f8:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fe:	684f      	ldr	r7, [r1, #4]
 8001500:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001504:	d001      	beq.n	800150a <HAL_GPIO_Init+0x10a>
        {
          temp |= iocurrent;
 8001506:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 800150a:	4a2d      	ldr	r2, [pc, #180]	; (80015c0 <HAL_GPIO_Init+0x1c0>)
 800150c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150e:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001510:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001514:	684f      	ldr	r7, [r1, #4]
 8001516:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800151a:	d001      	beq.n	8001520 <HAL_GPIO_Init+0x120>
        {
          temp |= iocurrent;
 800151c:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8001520:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <HAL_GPIO_Init+0x1c0>)
 8001522:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001524:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001526:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001528:	684e      	ldr	r6, [r1, #4]
 800152a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800152e:	d001      	beq.n	8001534 <HAL_GPIO_Init+0x134>
        {
          temp |= iocurrent;
 8001530:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8001534:	4a22      	ldr	r2, [pc, #136]	; (80015c0 <HAL_GPIO_Init+0x1c0>)
 8001536:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001538:	3401      	adds	r4, #1
 800153a:	2c0f      	cmp	r4, #15
 800153c:	d836      	bhi.n	80015ac <HAL_GPIO_Init+0x1ac>
    ioposition = 0x01U << position;
 800153e:	2301      	movs	r3, #1
 8001540:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001542:	680a      	ldr	r2, [r1, #0]
 8001544:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8001548:	42ab      	cmp	r3, r5
 800154a:	d1f5      	bne.n	8001538 <HAL_GPIO_Init+0x138>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154c:	684a      	ldr	r2, [r1, #4]
 800154e:	2a02      	cmp	r2, #2
 8001550:	f43f af5a 	beq.w	8001408 <HAL_GPIO_Init+0x8>
 8001554:	2a12      	cmp	r2, #18
 8001556:	f43f af57 	beq.w	8001408 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 800155a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155c:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001560:	2203      	movs	r2, #3
 8001562:	fa02 f20e 	lsl.w	r2, r2, lr
 8001566:	43d2      	mvns	r2, r2
 8001568:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156a:	684f      	ldr	r7, [r1, #4]
 800156c:	f007 0703 	and.w	r7, r7, #3
 8001570:	fa07 f70e 	lsl.w	r7, r7, lr
 8001574:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001576:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001578:	684e      	ldr	r6, [r1, #4]
 800157a:	1e77      	subs	r7, r6, #1
 800157c:	2f01      	cmp	r7, #1
 800157e:	f67f af57 	bls.w	8001430 <HAL_GPIO_Init+0x30>
 8001582:	2e11      	cmp	r6, #17
 8001584:	f43f af54 	beq.w	8001430 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001588:	2e12      	cmp	r6, #18
 800158a:	f47f af61 	bne.w	8001450 <HAL_GPIO_Init+0x50>
 800158e:	e74f      	b.n	8001430 <HAL_GPIO_Init+0x30>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001590:	2606      	movs	r6, #6
 8001592:	e79d      	b.n	80014d0 <HAL_GPIO_Init+0xd0>
 8001594:	2600      	movs	r6, #0
 8001596:	e79b      	b.n	80014d0 <HAL_GPIO_Init+0xd0>
 8001598:	2601      	movs	r6, #1
 800159a:	e799      	b.n	80014d0 <HAL_GPIO_Init+0xd0>
 800159c:	2602      	movs	r6, #2
 800159e:	e797      	b.n	80014d0 <HAL_GPIO_Init+0xd0>
 80015a0:	2603      	movs	r6, #3
 80015a2:	e795      	b.n	80014d0 <HAL_GPIO_Init+0xd0>
 80015a4:	2604      	movs	r6, #4
 80015a6:	e793      	b.n	80014d0 <HAL_GPIO_Init+0xd0>
 80015a8:	2605      	movs	r6, #5
 80015aa:	e791      	b.n	80014d0 <HAL_GPIO_Init+0xd0>
      }
    }
  }
}
 80015ac:	b003      	add	sp, #12
 80015ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40013800 	.word	0x40013800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40020400 	.word	0x40020400
 80015c0:	40013c00 	.word	0x40013c00

080015c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015c4:	6903      	ldr	r3, [r0, #16]
 80015c6:	4219      	tst	r1, r3
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ca:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80015cc:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80015ce:	2001      	movs	r0, #1
 80015d0:	4770      	bx	lr

080015d2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d2:	b912      	cbnz	r2, 80015da <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015d4:	0409      	lsls	r1, r1, #16
 80015d6:	6181      	str	r1, [r0, #24]
 80015d8:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80015da:	6181      	str	r1, [r0, #24]
 80015dc:	4770      	bx	lr

080015de <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80015de:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b40      	cmp	r3, #64	; 0x40
 80015e6:	d013      	beq.n	8001610 <I2C_Master_SB+0x32>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015e8:	6903      	ldr	r3, [r0, #16]
 80015ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015ee:	d01e      	beq.n	800162e <I2C_Master_SB+0x50>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 80015f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d02d      	beq.n	8001652 <I2C_Master_SB+0x74>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
      }
      else if(hi2c->EventCount == 1U)
 80015f6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d133      	bne.n	8001664 <I2C_Master_SB+0x86>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80015fc:	6802      	ldr	r2, [r0, #0]
 80015fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001600:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8001604:	f003 0306 	and.w	r3, r3, #6
 8001608:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 800160c:	6113      	str	r3, [r2, #16]
 800160e:	e029      	b.n	8001664 <I2C_Master_SB+0x86>
    if(hi2c->EventCount == 0U)
 8001610:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001612:	b92b      	cbnz	r3, 8001620 <I2C_Master_SB+0x42>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001614:	6802      	ldr	r2, [r0, #0]
 8001616:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001618:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800161c:	6113      	str	r3, [r2, #16]
 800161e:	e021      	b.n	8001664 <I2C_Master_SB+0x86>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001620:	6802      	ldr	r2, [r0, #0]
 8001622:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	6113      	str	r3, [r2, #16]
 800162c:	e01a      	b.n	8001664 <I2C_Master_SB+0x86>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 800162e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b21      	cmp	r3, #33	; 0x21
 8001636:	d006      	beq.n	8001646 <I2C_Master_SB+0x68>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001638:	6802      	ldr	r2, [r0, #0]
 800163a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	b2db      	uxtb	r3, r3
 8001642:	6113      	str	r3, [r2, #16]
 8001644:	e00e      	b.n	8001664 <I2C_Master_SB+0x86>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001646:	6802      	ldr	r2, [r0, #0]
 8001648:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800164a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800164e:	6113      	str	r3, [r2, #16]
 8001650:	e008      	b.n	8001664 <I2C_Master_SB+0x86>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001652:	6802      	ldr	r2, [r0, #0]
 8001654:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001656:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800165a:	f003 0306 	and.w	r3, r3, #6
 800165e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001662:	6113      	str	r3, [r2, #16]
      }
    }
  }

  return HAL_OK;
}
 8001664:	2000      	movs	r0, #0
 8001666:	4770      	bx	lr

08001668 <I2C_Master_ADD10>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001668:	6802      	ldr	r2, [r0, #0]
 800166a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800166c:	b2db      	uxtb	r3, r3
 800166e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
}
 8001670:	2000      	movs	r0, #0
 8001672:	4770      	bx	lr

08001674 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001674:	b410      	push	{r4}
 8001676:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 8001678:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800167c:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800167e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8001680:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001682:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b22      	cmp	r3, #34	; 0x22
 800168a:	d00c      	beq.n	80016a6 <I2C_Master_ADDR+0x32>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800168c:	2300      	movs	r3, #0
 800168e:	9309      	str	r3, [sp, #36]	; 0x24
 8001690:	6803      	ldr	r3, [r0, #0]
 8001692:	695a      	ldr	r2, [r3, #20]
 8001694:	9209      	str	r2, [sp, #36]	; 0x24
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	9309      	str	r3, [sp, #36]	; 0x24
 800169a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  return HAL_OK;
}
 800169c:	2000      	movs	r0, #0
 800169e:	b00b      	add	sp, #44	; 0x2c
 80016a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016a4:	4770      	bx	lr
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80016a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80016a8:	b90b      	cbnz	r3, 80016ae <I2C_Master_ADDR+0x3a>
 80016aa:	2a40      	cmp	r2, #64	; 0x40
 80016ac:	d017      	beq.n	80016de <I2C_Master_ADDR+0x6a>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80016ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80016b0:	b91b      	cbnz	r3, 80016ba <I2C_Master_ADDR+0x46>
 80016b2:	6903      	ldr	r3, [r0, #16]
 80016b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80016b8:	d019      	beq.n	80016ee <I2C_Master_ADDR+0x7a>
      if(hi2c->XferCount == 0U)
 80016ba:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d125      	bne.n	800170e <I2C_Master_ADDR+0x9a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	6803      	ldr	r3, [r0, #0]
 80016c6:	695a      	ldr	r2, [r3, #20]
 80016c8:	9202      	str	r2, [sp, #8]
 80016ca:	699a      	ldr	r2, [r3, #24]
 80016cc:	9202      	str	r2, [sp, #8]
 80016ce:	9a02      	ldr	r2, [sp, #8]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	6503      	str	r3, [r0, #80]	; 0x50
 80016dc:	e7de      	b.n	800169c <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	6803      	ldr	r3, [r0, #0]
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	9200      	str	r2, [sp, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	9b00      	ldr	r3, [sp, #0]
 80016ec:	e7d6      	b.n	800169c <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ee:	2300      	movs	r3, #0
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	6803      	ldr	r3, [r0, #0]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	9201      	str	r2, [sp, #4]
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	9201      	str	r2, [sp, #4]
 80016fc:	9a01      	ldr	r2, [sp, #4]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001704:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001706:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001708:	3301      	adds	r3, #1
 800170a:	6503      	str	r3, [r0, #80]	; 0x50
 800170c:	e7c6      	b.n	800169c <I2C_Master_ADDR+0x28>
      else if(hi2c->XferCount == 1U)   
 800170e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	2b01      	cmp	r3, #1
 8001714:	d01a      	beq.n	800174c <I2C_Master_ADDR+0xd8>
      else if(hi2c->XferCount == 2U)
 8001716:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001718:	b29b      	uxth	r3, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d06b      	beq.n	80017f6 <I2C_Master_ADDR+0x182>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800171e:	6802      	ldr	r2, [r0, #0]
 8001720:	6813      	ldr	r3, [r2, #0]
 8001722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001728:	6803      	ldr	r3, [r0, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001730:	d003      	beq.n	800173a <I2C_Master_ADDR+0xc6>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001738:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800173a:	2300      	movs	r3, #0
 800173c:	9308      	str	r3, [sp, #32]
 800173e:	6803      	ldr	r3, [r0, #0]
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	9208      	str	r2, [sp, #32]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	9308      	str	r3, [sp, #32]
 8001748:	9b08      	ldr	r3, [sp, #32]
 800174a:	e7c5      	b.n	80016d8 <I2C_Master_ADDR+0x64>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800174c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001750:	d016      	beq.n	8001780 <I2C_Master_ADDR+0x10c>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001752:	2904      	cmp	r1, #4
 8001754:	d03d      	beq.n	80017d2 <I2C_Master_ADDR+0x15e>
 8001756:	2908      	cmp	r1, #8
 8001758:	d03b      	beq.n	80017d2 <I2C_Master_ADDR+0x15e>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 800175a:	2c12      	cmp	r4, #18
 800175c:	d039      	beq.n	80017d2 <I2C_Master_ADDR+0x15e>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 800175e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001760:	2b02      	cmp	r3, #2
 8001762:	d030      	beq.n	80017c6 <I2C_Master_ADDR+0x152>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001764:	6802      	ldr	r2, [r0, #0]
 8001766:	6813      	ldr	r3, [r2, #0]
 8001768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800176c:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800176e:	2300      	movs	r3, #0
 8001770:	9305      	str	r3, [sp, #20]
 8001772:	6803      	ldr	r3, [r0, #0]
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	9205      	str	r2, [sp, #20]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	9305      	str	r3, [sp, #20]
 800177c:	9b05      	ldr	r3, [sp, #20]
 800177e:	e7ab      	b.n	80016d8 <I2C_Master_ADDR+0x64>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001780:	6802      	ldr	r2, [r0, #0]
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001788:	6013      	str	r3, [r2, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800178a:	6803      	ldr	r3, [r0, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001792:	d00c      	beq.n	80017ae <I2C_Master_ADDR+0x13a>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179a:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800179c:	2300      	movs	r3, #0
 800179e:	9303      	str	r3, [sp, #12]
 80017a0:	6803      	ldr	r3, [r0, #0]
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	9203      	str	r2, [sp, #12]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	9303      	str	r3, [sp, #12]
 80017aa:	9b03      	ldr	r3, [sp, #12]
 80017ac:	e794      	b.n	80016d8 <I2C_Master_ADDR+0x64>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ae:	2200      	movs	r2, #0
 80017b0:	9204      	str	r2, [sp, #16]
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	9204      	str	r2, [sp, #16]
 80017b6:	699a      	ldr	r2, [r3, #24]
 80017b8:	9204      	str	r2, [sp, #16]
 80017ba:	9a04      	ldr	r2, [sp, #16]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e788      	b.n	80016d8 <I2C_Master_ADDR+0x64>
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017c6:	6802      	ldr	r2, [r0, #0]
 80017c8:	6813      	ldr	r3, [r2, #0]
 80017ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	e7cd      	b.n	800176e <I2C_Master_ADDR+0xfa>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80017d2:	6802      	ldr	r2, [r0, #0]
 80017d4:	6813      	ldr	r3, [r2, #0]
 80017d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017da:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017dc:	2300      	movs	r3, #0
 80017de:	9306      	str	r3, [sp, #24]
 80017e0:	6803      	ldr	r3, [r0, #0]
 80017e2:	695a      	ldr	r2, [r3, #20]
 80017e4:	9206      	str	r2, [sp, #24]
 80017e6:	699a      	ldr	r2, [r3, #24]
 80017e8:	9206      	str	r2, [sp, #24]
 80017ea:	9a06      	ldr	r2, [sp, #24]
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	e770      	b.n	80016d8 <I2C_Master_ADDR+0x64>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80017f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d01b      	beq.n	8001834 <I2C_Master_ADDR+0x1c0>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80017fc:	6802      	ldr	r2, [r0, #0]
 80017fe:	6813      	ldr	r3, [r2, #0]
 8001800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001804:	6013      	str	r3, [r2, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001806:	6802      	ldr	r2, [r0, #0]
 8001808:	6813      	ldr	r3, [r2, #0]
 800180a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800180e:	6013      	str	r3, [r2, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001810:	6803      	ldr	r3, [r0, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001818:	d003      	beq.n	8001822 <I2C_Master_ADDR+0x1ae>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001820:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001822:	2300      	movs	r3, #0
 8001824:	9307      	str	r3, [sp, #28]
 8001826:	6803      	ldr	r3, [r0, #0]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	9207      	str	r2, [sp, #28]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	9307      	str	r3, [sp, #28]
 8001830:	9b07      	ldr	r3, [sp, #28]
 8001832:	e751      	b.n	80016d8 <I2C_Master_ADDR+0x64>
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001834:	6802      	ldr	r2, [r0, #0]
 8001836:	6813      	ldr	r3, [r2, #0]
 8001838:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e7e7      	b.n	8001810 <I2C_Master_ADDR+0x19c>

08001840 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 8001840:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001842:	b29b      	uxth	r3, r3
 8001844:	b153      	cbz	r3, 800185c <I2C_SlaveTransmit_BTF+0x1c>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001846:	6802      	ldr	r2, [r0, #0]
 8001848:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800184a:	1c59      	adds	r1, r3, #1
 800184c:	6241      	str	r1, [r0, #36]	; 0x24
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8001852:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001854:	b29b      	uxth	r3, r3
 8001856:	3b01      	subs	r3, #1
 8001858:	b29b      	uxth	r3, r3
 800185a:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  return HAL_OK;
}
 800185c:	2000      	movs	r0, #0
 800185e:	4770      	bx	lr

08001860 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 8001860:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001862:	b29b      	uxth	r3, r3
 8001864:	b153      	cbz	r3, 800187c <I2C_SlaveReceive_BTF+0x1c>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001866:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	6242      	str	r2, [r0, #36]	; 0x24
 800186c:	6802      	ldr	r2, [r0, #0]
 800186e:	6912      	ldr	r2, [r2, #16]
 8001870:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001872:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001874:	b29b      	uxth	r3, r3
 8001876:	3b01      	subs	r3, #1
 8001878:	b29b      	uxth	r3, r3
 800187a:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  return HAL_OK;
}
 800187c:	2000      	movs	r0, #0
 800187e:	4770      	bx	lr

08001880 <HAL_I2C_Init>:
  if(hi2c == NULL)
 8001880:	2800      	cmp	r0, #0
 8001882:	f000 8082 	beq.w	800198a <HAL_I2C_Init+0x10a>
{
 8001886:	b538      	push	{r3, r4, r5, lr}
 8001888:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800188a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800188e:	2b00      	cmp	r3, #0
 8001890:	d041      	beq.n	8001916 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001892:	2324      	movs	r3, #36	; 0x24
 8001894:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001898:	6822      	ldr	r2, [r4, #0]
 800189a:	6813      	ldr	r3, [r2, #0]
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018a2:	f000 ff31 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
  freqrange = I2C_FREQRANGE(pclk1);
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <HAL_I2C_Init+0x110>)
 80018a8:	fba3 2300 	umull	r2, r3, r3, r0
 80018ac:	0c9b      	lsrs	r3, r3, #18
  hi2c->Instance->CR2 = freqrange;
 80018ae:	6822      	ldr	r2, [r4, #0]
 80018b0:	6053      	str	r3, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80018b2:	6821      	ldr	r1, [r4, #0]
 80018b4:	6865      	ldr	r5, [r4, #4]
 80018b6:	4a37      	ldr	r2, [pc, #220]	; (8001994 <HAL_I2C_Init+0x114>)
 80018b8:	4295      	cmp	r5, r2
 80018ba:	d831      	bhi.n	8001920 <HAL_I2C_Init+0xa0>
 80018bc:	3301      	adds	r3, #1
 80018be:	620b      	str	r3, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80018c0:	6821      	ldr	r1, [r4, #0]
 80018c2:	6863      	ldr	r3, [r4, #4]
 80018c4:	4a33      	ldr	r2, [pc, #204]	; (8001994 <HAL_I2C_Init+0x114>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d834      	bhi.n	8001934 <HAL_I2C_Init+0xb4>
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80018d0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d800      	bhi.n	80018da <HAL_I2C_Init+0x5a>
 80018d8:	2004      	movs	r0, #4
 80018da:	61c8      	str	r0, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018dc:	6822      	ldr	r2, [r4, #0]
 80018de:	69e3      	ldr	r3, [r4, #28]
 80018e0:	6a21      	ldr	r1, [r4, #32]
 80018e2:	430b      	orrs	r3, r1
 80018e4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80018e6:	6822      	ldr	r2, [r4, #0]
 80018e8:	6923      	ldr	r3, [r4, #16]
 80018ea:	68e1      	ldr	r1, [r4, #12]
 80018ec:	430b      	orrs	r3, r1
 80018ee:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80018f0:	6822      	ldr	r2, [r4, #0]
 80018f2:	6963      	ldr	r3, [r4, #20]
 80018f4:	69a1      	ldr	r1, [r4, #24]
 80018f6:	430b      	orrs	r3, r1
 80018f8:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80018fa:	6822      	ldr	r2, [r4, #0]
 80018fc:	6813      	ldr	r3, [r2, #0]
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001904:	2000      	movs	r0, #0
 8001906:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001908:	2320      	movs	r3, #32
 800190a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800190e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001910:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001914:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001916:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800191a:	f002 fae9 	bl	8003ef0 <HAL_I2C_MspInit>
 800191e:	e7b8      	b.n	8001892 <HAL_I2C_Init+0x12>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001920:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_I2C_Init+0x118>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	099b      	lsrs	r3, r3, #6
 8001930:	3301      	adds	r3, #1
 8001932:	e7c4      	b.n	80018be <HAL_I2C_Init+0x3e>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001934:	68a5      	ldr	r5, [r4, #8]
 8001936:	b98d      	cbnz	r5, 800195c <HAL_I2C_Init+0xdc>
 8001938:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800193c:	fbb0 f2f2 	udiv	r2, r0, r2
 8001940:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001944:	fab2 f282 	clz	r2, r2
 8001948:	0952      	lsrs	r2, r2, #5
 800194a:	b9e2      	cbnz	r2, 8001986 <HAL_I2C_Init+0x106>
 800194c:	b995      	cbnz	r5, 8001974 <HAL_I2C_Init+0xf4>
 800194e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001952:	fbb0 f0f3 	udiv	r0, r0, r3
 8001956:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800195a:	e7be      	b.n	80018da <HAL_I2C_Init+0x5a>
 800195c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001960:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001964:	fbb0 f2f2 	udiv	r2, r0, r2
 8001968:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800196c:	fab2 f282 	clz	r2, r2
 8001970:	0952      	lsrs	r2, r2, #5
 8001972:	e7ea      	b.n	800194a <HAL_I2C_Init+0xca>
 8001974:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001978:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800197c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001980:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001984:	e7a9      	b.n	80018da <HAL_I2C_Init+0x5a>
 8001986:	2001      	movs	r0, #1
 8001988:	e7a7      	b.n	80018da <HAL_I2C_Init+0x5a>
    return HAL_ERROR;
 800198a:	2001      	movs	r0, #1
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	431bde83 	.word	0x431bde83
 8001994:	000186a0 	.word	0x000186a0
 8001998:	10624dd3 	.word	0x10624dd3

0800199c <HAL_I2C_Master_Transmit_IT>:
{
 800199c:	b430      	push	{r4, r5}
 800199e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80019a0:	2400      	movs	r4, #0
 80019a2:	9401      	str	r4, [sp, #4]
  if(hi2c->State == HAL_I2C_STATE_READY)
 80019a4:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80019a8:	b2e4      	uxtb	r4, r4
 80019aa:	2c20      	cmp	r4, #32
 80019ac:	d003      	beq.n	80019b6 <HAL_I2C_Master_Transmit_IT+0x1a>
    return HAL_BUSY;
 80019ae:	2002      	movs	r0, #2
}
 80019b0:	b002      	add	sp, #8
 80019b2:	bc30      	pop	{r4, r5}
 80019b4:	4770      	bx	lr
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80019b6:	4c29      	ldr	r4, [pc, #164]	; (8001a5c <HAL_I2C_Master_Transmit_IT+0xc0>)
 80019b8:	6824      	ldr	r4, [r4, #0]
 80019ba:	08e4      	lsrs	r4, r4, #3
 80019bc:	4d28      	ldr	r5, [pc, #160]	; (8001a60 <HAL_I2C_Master_Transmit_IT+0xc4>)
 80019be:	fba5 5404 	umull	r5, r4, r5, r4
 80019c2:	0a24      	lsrs	r4, r4, #8
 80019c4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80019c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80019cc:	9401      	str	r4, [sp, #4]
      if(count-- == 0U)
 80019ce:	9c01      	ldr	r4, [sp, #4]
 80019d0:	1e65      	subs	r5, r4, #1
 80019d2:	9501      	str	r5, [sp, #4]
 80019d4:	2c00      	cmp	r4, #0
 80019d6:	d035      	beq.n	8001a44 <HAL_I2C_Master_Transmit_IT+0xa8>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80019d8:	6804      	ldr	r4, [r0, #0]
 80019da:	69a5      	ldr	r5, [r4, #24]
 80019dc:	f015 0f02 	tst.w	r5, #2
 80019e0:	d1f5      	bne.n	80019ce <HAL_I2C_Master_Transmit_IT+0x32>
    __HAL_LOCK(hi2c);
 80019e2:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 80019e6:	2d01      	cmp	r5, #1
 80019e8:	d035      	beq.n	8001a56 <HAL_I2C_Master_Transmit_IT+0xba>
 80019ea:	2501      	movs	r5, #1
 80019ec:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019f0:	6825      	ldr	r5, [r4, #0]
 80019f2:	f015 0f01 	tst.w	r5, #1
 80019f6:	d103      	bne.n	8001a00 <HAL_I2C_Master_Transmit_IT+0x64>
      __HAL_I2C_ENABLE(hi2c);
 80019f8:	6825      	ldr	r5, [r4, #0]
 80019fa:	f045 0501 	orr.w	r5, r5, #1
 80019fe:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a00:	6805      	ldr	r5, [r0, #0]
 8001a02:	682c      	ldr	r4, [r5, #0]
 8001a04:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8001a08:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a0a:	2421      	movs	r4, #33	; 0x21
 8001a0c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a10:	2410      	movs	r4, #16
 8001a12:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a16:	2400      	movs	r4, #0
 8001a18:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001a1a:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a1c:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_I2C_Master_Transmit_IT+0xc8>)
 8001a20:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001a22:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a24:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8001a26:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a28:	6802      	ldr	r2, [r0, #0]
 8001a2a:	6813      	ldr	r3, [r2, #0]
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a30:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001a32:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a36:	6802      	ldr	r2, [r0, #0]
 8001a38:	6853      	ldr	r3, [r2, #4]
 8001a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a3e:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8001a40:	4620      	mov	r0, r4
 8001a42:	e7b5      	b.n	80019b0 <HAL_I2C_Master_Transmit_IT+0x14>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001a4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001a52:	2003      	movs	r0, #3
 8001a54:	e7ac      	b.n	80019b0 <HAL_I2C_Master_Transmit_IT+0x14>
    __HAL_LOCK(hi2c);
 8001a56:	2002      	movs	r0, #2
 8001a58:	e7aa      	b.n	80019b0 <HAL_I2C_Master_Transmit_IT+0x14>
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	14f8b589 	.word	0x14f8b589
 8001a64:	ffff0000 	.word	0xffff0000

08001a68 <HAL_I2C_Slave_Transmit_IT>:
{
 8001a68:	b410      	push	{r4}
 8001a6a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9301      	str	r3, [sp, #4]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a70:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b20      	cmp	r3, #32
 8001a78:	d004      	beq.n	8001a84 <HAL_I2C_Slave_Transmit_IT+0x1c>
    return HAL_BUSY;
 8001a7a:	2002      	movs	r0, #2
}
 8001a7c:	b003      	add	sp, #12
 8001a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a82:	4770      	bx	lr
    if((pData == NULL) || (Size == 0U))
 8001a84:	2900      	cmp	r1, #0
 8001a86:	d04f      	beq.n	8001b28 <HAL_I2C_Slave_Transmit_IT+0xc0>
 8001a88:	2a00      	cmp	r2, #0
 8001a8a:	d04f      	beq.n	8001b2c <HAL_I2C_Slave_Transmit_IT+0xc4>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8001a8c:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <HAL_I2C_Slave_Transmit_IT+0xcc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	08db      	lsrs	r3, r3, #3
 8001a92:	4c29      	ldr	r4, [pc, #164]	; (8001b38 <HAL_I2C_Slave_Transmit_IT+0xd0>)
 8001a94:	fba4 4303 	umull	r4, r3, r4, r3
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001aa2:	9301      	str	r3, [sp, #4]
      if(count-- == 0U)
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	1e5c      	subs	r4, r3, #1
 8001aa8:	9401      	str	r4, [sp, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d034      	beq.n	8001b18 <HAL_I2C_Slave_Transmit_IT+0xb0>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001aae:	6803      	ldr	r3, [r0, #0]
 8001ab0:	699c      	ldr	r4, [r3, #24]
 8001ab2:	f014 0f02 	tst.w	r4, #2
 8001ab6:	d1f5      	bne.n	8001aa4 <HAL_I2C_Slave_Transmit_IT+0x3c>
    __HAL_LOCK(hi2c);
 8001ab8:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8001abc:	2c01      	cmp	r4, #1
 8001abe:	d037      	beq.n	8001b30 <HAL_I2C_Slave_Transmit_IT+0xc8>
 8001ac0:	2401      	movs	r4, #1
 8001ac2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac6:	681c      	ldr	r4, [r3, #0]
 8001ac8:	f014 0f01 	tst.w	r4, #1
 8001acc:	d103      	bne.n	8001ad6 <HAL_I2C_Slave_Transmit_IT+0x6e>
      __HAL_I2C_ENABLE(hi2c);
 8001ace:	681c      	ldr	r4, [r3, #0]
 8001ad0:	f044 0401 	orr.w	r4, r4, #1
 8001ad4:	601c      	str	r4, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ad6:	6804      	ldr	r4, [r0, #0]
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ade:	6023      	str	r3, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ae0:	2321      	movs	r3, #33	; 0x21
 8001ae2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001af0:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001af2:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001af4:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8001af6:	62c2      	str	r2, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001af8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001afa:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001afc:	6801      	ldr	r1, [r0, #0]
 8001afe:	680a      	ldr	r2, [r1, #0]
 8001b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b04:	600a      	str	r2, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8001b06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b0a:	6801      	ldr	r1, [r0, #0]
 8001b0c:	684a      	ldr	r2, [r1, #4]
 8001b0e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001b12:	604a      	str	r2, [r1, #4]
    return HAL_OK;
 8001b14:	4618      	mov	r0, r3
 8001b16:	e7b1      	b.n	8001a7c <HAL_I2C_Slave_Transmit_IT+0x14>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b18:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001b20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_TIMEOUT; 
 8001b24:	2003      	movs	r0, #3
 8001b26:	e7a9      	b.n	8001a7c <HAL_I2C_Slave_Transmit_IT+0x14>
      return  HAL_ERROR;
 8001b28:	2001      	movs	r0, #1
 8001b2a:	e7a7      	b.n	8001a7c <HAL_I2C_Slave_Transmit_IT+0x14>
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	e7a5      	b.n	8001a7c <HAL_I2C_Slave_Transmit_IT+0x14>
    __HAL_LOCK(hi2c);
 8001b30:	2002      	movs	r0, #2
 8001b32:	e7a3      	b.n	8001a7c <HAL_I2C_Slave_Transmit_IT+0x14>
 8001b34:	20000008 	.word	0x20000008
 8001b38:	14f8b589 	.word	0x14f8b589
 8001b3c:	ffff0000 	.word	0xffff0000

08001b40 <HAL_I2C_MasterRxCpltCallback>:
{
 8001b40:	4770      	bx	lr

08001b42 <I2C_SlaveTransmit_TXE>:
  uint32_t CurrentState = hi2c->State;
 8001b42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b46:	b2da      	uxtb	r2, r3
  if(hi2c->XferCount != 0U)
 8001b48:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	b1fb      	cbz	r3, 8001b8e <I2C_SlaveTransmit_TXE+0x4c>
{
 8001b4e:	b510      	push	{r4, lr}
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b50:	6801      	ldr	r1, [r0, #0]
 8001b52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b54:	1c5c      	adds	r4, r3, #1
 8001b56:	6244      	str	r4, [r0, #36]	; 0x24
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	610b      	str	r3, [r1, #16]
    hi2c->XferCount--;
 8001b5c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b66:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b90b      	cbnz	r3, 8001b70 <I2C_SlaveTransmit_TXE+0x2e>
 8001b6c:	2a29      	cmp	r2, #41	; 0x29
 8001b6e:	d001      	beq.n	8001b74 <I2C_SlaveTransmit_TXE+0x32>
}
 8001b70:	2000      	movs	r0, #0
 8001b72:	bd10      	pop	{r4, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b74:	6802      	ldr	r2, [r0, #0]
 8001b76:	6853      	ldr	r3, [r2, #4]
 8001b78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b7c:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b7e:	2321      	movs	r3, #33	; 0x21
 8001b80:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001b82:	2328      	movs	r3, #40	; 0x28
 8001b84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b88:	f002 fd50 	bl	800462c <HAL_I2C_SlaveTxCpltCallback>
 8001b8c:	e7f0      	b.n	8001b70 <I2C_SlaveTransmit_TXE+0x2e>
}
 8001b8e:	2000      	movs	r0, #0
 8001b90:	4770      	bx	lr

08001b92 <HAL_I2C_SlaveRxCpltCallback>:
{
 8001b92:	4770      	bx	lr

08001b94 <I2C_SlaveReceive_RXNE>:
{
 8001b94:	b508      	push	{r3, lr}
  uint32_t CurrentState = hi2c->State;
 8001b96:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b9a:	b2da      	uxtb	r2, r3
  if(hi2c->XferCount != 0U)
 8001b9c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b17b      	cbz	r3, 8001bc2 <I2C_SlaveReceive_RXNE+0x2e>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ba2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	6241      	str	r1, [r0, #36]	; 0x24
 8001ba8:	6801      	ldr	r1, [r0, #0]
 8001baa:	6909      	ldr	r1, [r1, #16]
 8001bac:	7019      	strb	r1, [r3, #0]
    hi2c->XferCount--;
 8001bae:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001bb8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b90b      	cbnz	r3, 8001bc2 <I2C_SlaveReceive_RXNE+0x2e>
 8001bbe:	2a2a      	cmp	r2, #42	; 0x2a
 8001bc0:	d001      	beq.n	8001bc6 <I2C_SlaveReceive_RXNE+0x32>
}
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bc6:	6802      	ldr	r2, [r0, #0]
 8001bc8:	6853      	ldr	r3, [r2, #4]
 8001bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bce:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001bd0:	2322      	movs	r3, #34	; 0x22
 8001bd2:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001bd4:	2328      	movs	r3, #40	; 0x28
 8001bd6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001bda:	f7ff ffda 	bl	8001b92 <HAL_I2C_SlaveRxCpltCallback>
 8001bde:	e7f0      	b.n	8001bc2 <I2C_SlaveReceive_RXNE+0x2e>

08001be0 <HAL_I2C_AddrCallback>:
{
 8001be0:	4770      	bx	lr

08001be2 <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001be2:	b508      	push	{r3, lr}
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
  uint16_t SlaveAddrCode = 0U;

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001be4:	6803      	ldr	r3, [r0, #0]
 8001be6:	699a      	ldr	r2, [r3, #24]
 8001be8:	f012 0f04 	tst.w	r2, #4
 8001bec:	d009      	beq.n	8001c02 <I2C_Slave_ADDR+0x20>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001bee:	2100      	movs	r1, #0
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bf6:	d006      	beq.n	8001c06 <I2C_Slave_ADDR+0x24>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8001bf8:	8b02      	ldrh	r2, [r0, #24]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001bfa:	f7ff fff1 	bl	8001be0 <HAL_I2C_AddrCallback>

  return HAL_OK;
}
 8001bfe:	2000      	movs	r0, #0
 8001c00:	bd08      	pop	{r3, pc}
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8001c02:	2101      	movs	r1, #1
 8001c04:	e7f4      	b.n	8001bf0 <I2C_Slave_ADDR+0xe>
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8001c06:	8982      	ldrh	r2, [r0, #12]
 8001c08:	e7f7      	b.n	8001bfa <I2C_Slave_ADDR+0x18>

08001c0a <HAL_I2C_ListenCpltCallback>:
{
 8001c0a:	4770      	bx	lr

08001c0c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8001c0c:	b508      	push	{r3, lr}
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8001c0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c12:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c14:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001c16:	2a04      	cmp	r2, #4
 8001c18:	d009      	beq.n	8001c2e <I2C_Slave_AF+0x22>
 8001c1a:	2a08      	cmp	r2, #8
 8001c1c:	d007      	beq.n	8001c2e <I2C_Slave_AF+0x22>
    hi2c->Mode = HAL_I2C_MODE_NONE;
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001c1e:	2b21      	cmp	r3, #33	; 0x21
 8001c20:	d021      	beq.n	8001c66 <I2C_Slave_AF+0x5a>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c22:	6803      	ldr	r3, [r0, #0]
 8001c24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c28:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
}
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	bd08      	pop	{r3, pc}
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001c2e:	2b28      	cmp	r3, #40	; 0x28
 8001c30:	d1f5      	bne.n	8001c1e <I2C_Slave_AF+0x12>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <I2C_Slave_AF+0x90>)
 8001c34:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c36:	6802      	ldr	r2, [r0, #0]
 8001c38:	6853      	ldr	r3, [r2, #4]
 8001c3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c3e:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c40:	6803      	ldr	r3, [r0, #0]
 8001c42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c46:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c48:	6802      	ldr	r2, [r0, #0]
 8001c4a:	6813      	ldr	r3, [r2, #0]
 8001c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c50:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	2220      	movs	r2, #32
 8001c58:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001c60:	f7ff ffd3 	bl	8001c0a <HAL_I2C_ListenCpltCallback>
 8001c64:	e7e1      	b.n	8001c2a <I2C_Slave_AF+0x1e>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <I2C_Slave_AF+0x90>)
 8001c68:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c6a:	2321      	movs	r3, #33	; 0x21
 8001c6c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c7a:	6802      	ldr	r2, [r0, #0]
 8001c7c:	6853      	ldr	r3, [r2, #4]
 8001c7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c82:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c84:	6803      	ldr	r3, [r0, #0]
 8001c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c8a:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c8c:	6802      	ldr	r2, [r0, #0]
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c94:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c96:	f002 fcc9 	bl	800462c <HAL_I2C_SlaveTxCpltCallback>
 8001c9a:	e7c6      	b.n	8001c2a <I2C_Slave_AF+0x1e>
 8001c9c:	ffff0000 	.word	0xffff0000

08001ca0 <HAL_I2C_MemTxCpltCallback>:
{
 8001ca0:	4770      	bx	lr

08001ca2 <I2C_MasterTransmit_TXE>:
{
 8001ca2:	b510      	push	{r4, lr}
  uint32_t CurrentState       = hi2c->State;
 8001ca4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ca8:	b2db      	uxtb	r3, r3
  uint32_t CurrentMode        = hi2c->Mode;
 8001caa:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001cae:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cb0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cb2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8001cb4:	b909      	cbnz	r1, 8001cba <I2C_MasterTransmit_TXE+0x18>
 8001cb6:	2b21      	cmp	r3, #33	; 0x21
 8001cb8:	d005      	beq.n	8001cc6 <I2C_MasterTransmit_TXE+0x24>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001cba:	2b21      	cmp	r3, #33	; 0x21
 8001cbc:	d03c      	beq.n	8001d38 <I2C_MasterTransmit_TXE+0x96>
 8001cbe:	2a40      	cmp	r2, #64	; 0x40
 8001cc0:	d038      	beq.n	8001d34 <I2C_MasterTransmit_TXE+0x92>
}
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	bd10      	pop	{r4, pc}
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cc6:	2c04      	cmp	r4, #4
 8001cc8:	d004      	beq.n	8001cd4 <I2C_MasterTransmit_TXE+0x32>
 8001cca:	2c08      	cmp	r4, #8
 8001ccc:	d002      	beq.n	8001cd4 <I2C_MasterTransmit_TXE+0x32>
 8001cce:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8001cd2:	d119      	bne.n	8001d08 <I2C_MasterTransmit_TXE+0x66>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cd4:	6802      	ldr	r2, [r0, #0]
 8001cd6:	6853      	ldr	r3, [r2, #4]
 8001cd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cdc:	6053      	str	r3, [r2, #4]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cde:	6802      	ldr	r2, [r0, #0]
 8001ce0:	6813      	ldr	r3, [r2, #0]
 8001ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce6:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001cec:	2320      	movs	r3, #32
 8001cee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cf2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b40      	cmp	r3, #64	; 0x40
 8001cfa:	d015      	beq.n	8001d28 <I2C_MasterTransmit_TXE+0x86>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d02:	f002 fc75 	bl	80045f0 <HAL_I2C_MasterTxCpltCallback>
 8001d06:	e7dc      	b.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d08:	6802      	ldr	r2, [r0, #0]
 8001d0a:	6853      	ldr	r3, [r2, #4]
 8001d0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d10:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d12:	2311      	movs	r3, #17
 8001d14:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d22:	f002 fc65 	bl	80045f0 <HAL_I2C_MasterTxCpltCallback>
 8001d26:	e7cc      	b.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001d2e:	f7ff ffb7 	bl	8001ca0 <HAL_I2C_MemTxCpltCallback>
 8001d32:	e7c6      	b.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001d34:	2b22      	cmp	r3, #34	; 0x22
 8001d36:	d1c4      	bne.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>
    if(hi2c->XferCount == 0U)
 8001d38:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	b183      	cbz	r3, 8001d60 <I2C_MasterTransmit_TXE+0xbe>
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d3e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b40      	cmp	r3, #64	; 0x40
 8001d46:	d011      	beq.n	8001d6c <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d48:	6802      	ldr	r2, [r0, #0]
 8001d4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d4c:	1c59      	adds	r1, r3, #1
 8001d4e:	6241      	str	r1, [r0, #36]	; 0x24
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001d54:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001d5e:	e7b0      	b.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d60:	6802      	ldr	r2, [r0, #0]
 8001d62:	6853      	ldr	r3, [r2, #4]
 8001d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d68:	6053      	str	r3, [r2, #4]
 8001d6a:	e7aa      	b.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>
        if(hi2c->EventCount == 0)
 8001d6c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001d6e:	b99b      	cbnz	r3, 8001d98 <I2C_MasterTransmit_TXE+0xf6>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001d70:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d008      	beq.n	8001d88 <I2C_MasterTransmit_TXE+0xe6>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001d76:	6802      	ldr	r2, [r0, #0]
 8001d78:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001d7a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001d7e:	6113      	str	r3, [r2, #16]
            hi2c->EventCount++;
 8001d80:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001d82:	3301      	adds	r3, #1
 8001d84:	6503      	str	r3, [r0, #80]	; 0x50
 8001d86:	e79c      	b.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d88:	6802      	ldr	r2, [r0, #0]
 8001d8a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	6113      	str	r3, [r2, #16]
            hi2c->EventCount += 2;
 8001d90:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001d92:	3302      	adds	r3, #2
 8001d94:	6503      	str	r3, [r0, #80]	; 0x50
 8001d96:	e794      	b.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>
        else if(hi2c->EventCount == 1)
 8001d98:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d018      	beq.n	8001dd0 <I2C_MasterTransmit_TXE+0x12e>
        else if(hi2c->EventCount == 2)
 8001d9e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d18e      	bne.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001da4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b22      	cmp	r3, #34	; 0x22
 8001dac:	d018      	beq.n	8001de0 <I2C_MasterTransmit_TXE+0x13e>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b21      	cmp	r3, #33	; 0x21
 8001db6:	d184      	bne.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001db8:	6802      	ldr	r2, [r0, #0]
 8001dba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001dbc:	1c59      	adds	r1, r3, #1
 8001dbe:	6241      	str	r1, [r0, #36]	; 0x24
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	6113      	str	r3, [r2, #16]
            hi2c->XferCount--;
 8001dc4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001dce:	e778      	b.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001dd0:	6802      	ldr	r2, [r0, #0]
 8001dd2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	6113      	str	r3, [r2, #16]
          hi2c->EventCount++;
 8001dd8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001dda:	3301      	adds	r3, #1
 8001ddc:	6503      	str	r3, [r0, #80]	; 0x50
 8001dde:	e770      	b.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001de0:	6802      	ldr	r2, [r0, #0]
 8001de2:	6813      	ldr	r3, [r2, #0]
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	e76a      	b.n	8001cc2 <I2C_MasterTransmit_TXE+0x20>

08001dec <I2C_MasterTransmit_BTF>:
{
 8001dec:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001df0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b21      	cmp	r3, #33	; 0x21
 8001df8:	d001      	beq.n	8001dfe <I2C_MasterTransmit_BTF+0x12>
}
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	bd08      	pop	{r3, pc}
    if(hi2c->XferCount != 0U)
 8001dfe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	bb03      	cbnz	r3, 8001e46 <I2C_MasterTransmit_BTF+0x5a>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e04:	2a04      	cmp	r2, #4
 8001e06:	d004      	beq.n	8001e12 <I2C_MasterTransmit_BTF+0x26>
 8001e08:	2a08      	cmp	r2, #8
 8001e0a:	d002      	beq.n	8001e12 <I2C_MasterTransmit_BTF+0x26>
 8001e0c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e10:	d125      	bne.n	8001e5e <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e12:	6802      	ldr	r2, [r0, #0]
 8001e14:	6853      	ldr	r3, [r2, #4]
 8001e16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e1a:	6053      	str	r3, [r2, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e1c:	6802      	ldr	r2, [r0, #0]
 8001e1e:	6813      	ldr	r3, [r2, #0]
 8001e20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e24:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	2320      	movs	r3, #32
 8001e2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e30:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b40      	cmp	r3, #64	; 0x40
 8001e38:	d021      	beq.n	8001e7e <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e40:	f002 fbd6 	bl	80045f0 <HAL_I2C_MasterTxCpltCallback>
 8001e44:	e7d9      	b.n	8001dfa <I2C_MasterTransmit_BTF+0xe>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e46:	6802      	ldr	r2, [r0, #0]
 8001e48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	6241      	str	r1, [r0, #36]	; 0x24
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001e52:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001e5c:	e7cd      	b.n	8001dfa <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e5e:	6802      	ldr	r2, [r0, #0]
 8001e60:	6853      	ldr	r3, [r2, #4]
 8001e62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e66:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e68:	2311      	movs	r3, #17
 8001e6a:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001e72:	2320      	movs	r3, #32
 8001e74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e78:	f002 fbba 	bl	80045f0 <HAL_I2C_MasterTxCpltCallback>
 8001e7c:	e7bd      	b.n	8001dfa <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e84:	f7ff ff0c 	bl	8001ca0 <HAL_I2C_MemTxCpltCallback>
 8001e88:	e7b7      	b.n	8001dfa <I2C_MasterTransmit_BTF+0xe>

08001e8a <HAL_I2C_MemRxCpltCallback>:
{
 8001e8a:	4770      	bx	lr

08001e8c <I2C_MasterReceive_RXNE>:
{
 8001e8c:	b508      	push	{r3, lr}
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b22      	cmp	r3, #34	; 0x22
 8001e96:	d001      	beq.n	8001e9c <I2C_MasterReceive_RXNE+0x10>
}
 8001e98:	2000      	movs	r0, #0
 8001e9a:	bd08      	pop	{r3, pc}
    tmp = hi2c->XferCount;
 8001e9c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e9e:	b29b      	uxth	r3, r3
    if(tmp > 3U)
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d914      	bls.n	8001ece <I2C_MasterReceive_RXNE+0x42>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ea4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	6242      	str	r2, [r0, #36]	; 0x24
 8001eaa:	6802      	ldr	r2, [r0, #0]
 8001eac:	6912      	ldr	r2, [r2, #16]
 8001eae:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8001eb0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 8001eba:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d1ea      	bne.n	8001e98 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ec2:	6802      	ldr	r2, [r0, #0]
 8001ec4:	6853      	ldr	r3, [r2, #4]
 8001ec6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eca:	6053      	str	r3, [r2, #4]
 8001ecc:	e7e4      	b.n	8001e98 <I2C_MasterReceive_RXNE+0xc>
    else if((tmp == 1U) || (tmp == 0U))
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d8e2      	bhi.n	8001e98 <I2C_MasterReceive_RXNE+0xc>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ed2:	6802      	ldr	r2, [r0, #0]
 8001ed4:	6813      	ldr	r3, [r2, #0]
 8001ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eda:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001edc:	6802      	ldr	r2, [r0, #0]
 8001ede:	6853      	ldr	r3, [r2, #4]
 8001ee0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ee4:	6053      	str	r3, [r2, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ee6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	6242      	str	r2, [r0, #36]	; 0x24
 8001eec:	6802      	ldr	r2, [r0, #0]
 8001eee:	6912      	ldr	r2, [r2, #16]
 8001ef0:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8001ef2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	2320      	movs	r3, #32
 8001efe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	6303      	str	r3, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f06:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b40      	cmp	r3, #64	; 0x40
 8001f0e:	d005      	beq.n	8001f1c <I2C_MasterReceive_RXNE+0x90>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f16:	f7ff fe13 	bl	8001b40 <HAL_I2C_MasterRxCpltCallback>
 8001f1a:	e7bd      	b.n	8001e98 <I2C_MasterReceive_RXNE+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001f22:	f7ff ffb2 	bl	8001e8a <HAL_I2C_MemRxCpltCallback>
 8001f26:	e7b7      	b.n	8001e98 <I2C_MasterReceive_RXNE+0xc>

08001f28 <I2C_MasterReceive_BTF>:
{
 8001f28:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f2a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 8001f2c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d014      	beq.n	8001f5e <I2C_MasterReceive_BTF+0x36>
  else if(hi2c->XferCount == 3U)
 8001f34:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d021      	beq.n	8001f80 <I2C_MasterReceive_BTF+0x58>
  else if(hi2c->XferCount == 2U)
 8001f3c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d033      	beq.n	8001fac <I2C_MasterReceive_BTF+0x84>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	6242      	str	r2, [r0, #36]	; 0x24
 8001f4a:	6802      	ldr	r2, [r0, #0]
 8001f4c:	6912      	ldr	r2, [r2, #16]
 8001f4e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001f50:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f5e:	6802      	ldr	r2, [r0, #0]
 8001f60:	6853      	ldr	r3, [r2, #4]
 8001f62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f66:	6053      	str	r3, [r2, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	6242      	str	r2, [r0, #36]	; 0x24
 8001f6e:	6802      	ldr	r2, [r0, #0]
 8001f70:	6912      	ldr	r2, [r2, #16]
 8001f72:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001f74:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001f7e:	e7ec      	b.n	8001f5a <I2C_MasterReceive_BTF+0x32>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f80:	6802      	ldr	r2, [r0, #0]
 8001f82:	6853      	ldr	r3, [r2, #4]
 8001f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f88:	6053      	str	r3, [r2, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f8a:	6802      	ldr	r2, [r0, #0]
 8001f8c:	6813      	ldr	r3, [r2, #0]
 8001f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f92:	6013      	str	r3, [r2, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	6242      	str	r2, [r0, #36]	; 0x24
 8001f9a:	6802      	ldr	r2, [r0, #0]
 8001f9c:	6912      	ldr	r2, [r2, #16]
 8001f9e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001fa0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001faa:	e7d6      	b.n	8001f5a <I2C_MasterReceive_BTF+0x32>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8001fac:	3a01      	subs	r2, #1
 8001fae:	2a01      	cmp	r2, #1
 8001fb0:	d92f      	bls.n	8002012 <I2C_MasterReceive_BTF+0xea>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fb2:	6802      	ldr	r2, [r0, #0]
 8001fb4:	6813      	ldr	r3, [r2, #0]
 8001fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fba:	6013      	str	r3, [r2, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	6242      	str	r2, [r0, #36]	; 0x24
 8001fc2:	6802      	ldr	r2, [r0, #0]
 8001fc4:	6912      	ldr	r2, [r2, #16]
 8001fc6:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001fc8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fd2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	6242      	str	r2, [r0, #36]	; 0x24
 8001fd8:	6802      	ldr	r2, [r0, #0]
 8001fda:	6912      	ldr	r2, [r2, #16]
 8001fdc:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001fde:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001fe8:	6802      	ldr	r2, [r0, #0]
 8001fea:	6853      	ldr	r3, [r2, #4]
 8001fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff0:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ffc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b40      	cmp	r3, #64	; 0x40
 8002004:	d010      	beq.n	8002028 <I2C_MasterReceive_BTF+0x100>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002006:	2300      	movs	r3, #0
 8002008:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800200c:	f7ff fd98 	bl	8001b40 <HAL_I2C_MasterRxCpltCallback>
 8002010:	e7a3      	b.n	8001f5a <I2C_MasterReceive_BTF+0x32>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002012:	6802      	ldr	r2, [r0, #0]
 8002014:	6813      	ldr	r3, [r2, #0]
 8002016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800201a:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800201c:	6802      	ldr	r2, [r0, #0]
 800201e:	6813      	ldr	r3, [r2, #0]
 8002020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e7c9      	b.n	8001fbc <I2C_MasterReceive_BTF+0x94>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002028:	2300      	movs	r3, #0
 800202a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 800202e:	f7ff ff2c 	bl	8001e8a <HAL_I2C_MemRxCpltCallback>
 8002032:	e792      	b.n	8001f5a <I2C_MasterReceive_BTF+0x32>

08002034 <HAL_I2C_ErrorCallback>:
{
 8002034:	4770      	bx	lr

08002036 <HAL_I2C_AbortCpltCallback>:
{
 8002036:	4770      	bx	lr

08002038 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002038:	b510      	push	{r4, lr}
 800203a:	4604      	mov	r4, r0
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 800203c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002040:	3b29      	subs	r3, #41	; 0x29
 8002042:	2b01      	cmp	r3, #1
 8002044:	d937      	bls.n	80020b6 <I2C_ITError+0x7e>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8002046:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b60      	cmp	r3, #96	; 0x60
 800204e:	d007      	beq.n	8002060 <I2C_ITError+0x28>
 8002050:	6803      	ldr	r3, [r0, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002058:	d102      	bne.n	8002060 <I2C_ITError+0x28>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800205a:	2320      	movs	r3, #32
 800205c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002060:	2300      	movs	r3, #0
 8002062:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002068:	6822      	ldr	r2, [r4, #0]
 800206a:	6813      	ldr	r3, [r2, #0]
 800206c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002070:	6013      	str	r3, [r2, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800207a:	d03f      	beq.n	80020fc <I2C_ITError+0xc4>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002082:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002084:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002086:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d018      	beq.n	80020c2 <I2C_ITError+0x8a>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002090:	4b3a      	ldr	r3, [pc, #232]	; (800217c <I2C_ITError+0x144>)
 8002092:	6513      	str	r3, [r2, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002094:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002096:	f7ff f8b1 	bl	80011fc <HAL_DMA_Abort_IT>
 800209a:	2800      	cmp	r0, #0
 800209c:	d03f      	beq.n	800211e <I2C_ITError+0xe6>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800209e:	6822      	ldr	r2, [r4, #0]
 80020a0:	6813      	ldr	r3, [r2, #0]
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	2320      	movs	r3, #32
 80020aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80020ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80020b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80020b2:	4798      	blx	r3
 80020b4:	e033      	b.n	800211e <I2C_ITError+0xe6>
    hi2c->PreviousState = I2C_STATE_NONE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80020ba:	2328      	movs	r3, #40	; 0x28
 80020bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80020c0:	e7d2      	b.n	8002068 <I2C_ITError+0x30>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80020c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020c4:	4a2d      	ldr	r2, [pc, #180]	; (800217c <I2C_ITError+0x144>)
 80020c6:	651a      	str	r2, [r3, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80020c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80020ca:	f7ff f897 	bl	80011fc <HAL_DMA_Abort_IT>
 80020ce:	b330      	cbz	r0, 800211e <I2C_ITError+0xe6>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020d8:	d004      	beq.n	80020e4 <I2C_ITError+0xac>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020dc:	1c51      	adds	r1, r2, #1
 80020de:	6261      	str	r1, [r4, #36]	; 0x24
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	7013      	strb	r3, [r2, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80020e4:	6822      	ldr	r2, [r4, #0]
 80020e6:	6813      	ldr	r3, [r2, #0]
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	2320      	movs	r3, #32
 80020f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80020f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80020f6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80020f8:	4798      	blx	r3
 80020fa:	e010      	b.n	800211e <I2C_ITError+0xe6>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 80020fc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	2a60      	cmp	r2, #96	; 0x60
 8002104:	d011      	beq.n	800212a <I2C_ITError+0xf2>
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	f012 0f40 	tst.w	r2, #64	; 0x40
 800210c:	d004      	beq.n	8002118 <I2C_ITError+0xe0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800210e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002110:	1c51      	adds	r1, r2, #1
 8002112:	6261      	str	r1, [r4, #36]	; 0x24
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	7013      	strb	r3, [r2, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 8002118:	4620      	mov	r0, r4
 800211a:	f7ff ff8b 	bl	8002034 <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 800211e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b28      	cmp	r3, #40	; 0x28
 8002126:	d017      	beq.n	8002158 <I2C_ITError+0x120>
 8002128:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800212a:	2220      	movs	r2, #32
 800212c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002130:	2200      	movs	r2, #0
 8002132:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	f012 0f40 	tst.w	r2, #64	; 0x40
 800213a:	d004      	beq.n	8002146 <I2C_ITError+0x10e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800213c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800213e:	1c51      	adds	r1, r2, #1
 8002140:	6261      	str	r1, [r4, #36]	; 0x24
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002146:	6822      	ldr	r2, [r4, #0]
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002150:	4620      	mov	r0, r4
 8002152:	f7ff ff70 	bl	8002036 <HAL_I2C_AbortCpltCallback>
 8002156:	e7e2      	b.n	800211e <I2C_ITError+0xe6>
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8002158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800215a:	f013 0f04 	tst.w	r3, #4
 800215e:	d0e3      	beq.n	8002128 <I2C_ITError+0xf0>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <I2C_ITError+0x148>)
 8002162:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002164:	2300      	movs	r3, #0
 8002166:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8002168:	2220      	movs	r2, #32
 800216a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800216e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8002172:	4620      	mov	r0, r4
 8002174:	f7ff fd49 	bl	8001c0a <HAL_I2C_ListenCpltCallback>
  }
}
 8002178:	e7d6      	b.n	8002128 <I2C_ITError+0xf0>
 800217a:	bf00      	nop
 800217c:	080024c5 	.word	0x080024c5
 8002180:	ffff0000 	.word	0xffff0000

08002184 <I2C_Slave_STOPF>:
{
 8002184:	b510      	push	{r4, lr}
 8002186:	b082      	sub	sp, #8
  uint32_t CurrentState = hi2c->State;
 8002188:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800218c:	b2db      	uxtb	r3, r3
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800218e:	6801      	ldr	r1, [r0, #0]
 8002190:	684a      	ldr	r2, [r1, #4]
 8002192:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002196:	604a      	str	r2, [r1, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002198:	2200      	movs	r2, #0
 800219a:	9201      	str	r2, [sp, #4]
 800219c:	6802      	ldr	r2, [r0, #0]
 800219e:	6951      	ldr	r1, [r2, #20]
 80021a0:	9101      	str	r1, [sp, #4]
 80021a2:	6811      	ldr	r1, [r2, #0]
 80021a4:	f041 0101 	orr.w	r1, r1, #1
 80021a8:	6011      	str	r1, [r2, #0]
 80021aa:	9a01      	ldr	r2, [sp, #4]
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021ac:	6801      	ldr	r1, [r0, #0]
 80021ae:	680a      	ldr	r2, [r1, #0]
 80021b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b4:	600a      	str	r2, [r1, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80021b6:	6801      	ldr	r1, [r0, #0]
 80021b8:	684a      	ldr	r2, [r1, #4]
 80021ba:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80021be:	d00e      	beq.n	80021de <I2C_Slave_STOPF+0x5a>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80021c0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	2a22      	cmp	r2, #34	; 0x22
 80021c8:	d044      	beq.n	8002254 <I2C_Slave_STOPF+0xd0>
 80021ca:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	2a2a      	cmp	r2, #42	; 0x2a
 80021d2:	d03f      	beq.n	8002254 <I2C_Slave_STOPF+0xd0>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80021d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	6852      	ldr	r2, [r2, #4]
 80021da:	b292      	uxth	r2, r2
 80021dc:	8542      	strh	r2, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 80021de:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80021e0:	b292      	uxth	r2, r2
 80021e2:	b302      	cbz	r2, 8002226 <I2C_Slave_STOPF+0xa2>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021e4:	694a      	ldr	r2, [r1, #20]
 80021e6:	f012 0f04 	tst.w	r2, #4
 80021ea:	d009      	beq.n	8002200 <I2C_Slave_STOPF+0x7c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80021ee:	1c54      	adds	r4, r2, #1
 80021f0:	6244      	str	r4, [r0, #36]	; 0x24
 80021f2:	6909      	ldr	r1, [r1, #16]
 80021f4:	7011      	strb	r1, [r2, #0]
      hi2c->XferCount--;
 80021f6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80021f8:	b292      	uxth	r2, r2
 80021fa:	3a01      	subs	r2, #1
 80021fc:	b292      	uxth	r2, r2
 80021fe:	8542      	strh	r2, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002200:	6802      	ldr	r2, [r0, #0]
 8002202:	6951      	ldr	r1, [r2, #20]
 8002204:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002208:	d009      	beq.n	800221e <I2C_Slave_STOPF+0x9a>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800220a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800220c:	1c4c      	adds	r4, r1, #1
 800220e:	6244      	str	r4, [r0, #36]	; 0x24
 8002210:	6912      	ldr	r2, [r2, #16]
 8002212:	700a      	strb	r2, [r1, #0]
      hi2c->XferCount--;
 8002214:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002216:	b292      	uxth	r2, r2
 8002218:	3a01      	subs	r2, #1
 800221a:	b292      	uxth	r2, r2
 800221c:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800221e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002220:	f042 0204 	orr.w	r2, r2, #4
 8002224:	6402      	str	r2, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002226:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002228:	b9d2      	cbnz	r2, 8002260 <I2C_Slave_STOPF+0xdc>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 800222a:	2b28      	cmp	r3, #40	; 0x28
 800222c:	d01b      	beq.n	8002266 <I2C_Slave_STOPF+0xe2>
 800222e:	2b2a      	cmp	r3, #42	; 0x2a
 8002230:	d019      	beq.n	8002266 <I2C_Slave_STOPF+0xe2>
 8002232:	2b29      	cmp	r3, #41	; 0x29
 8002234:	d017      	beq.n	8002266 <I2C_Slave_STOPF+0xe2>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002236:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002238:	2a22      	cmp	r2, #34	; 0x22
 800223a:	d001      	beq.n	8002240 <I2C_Slave_STOPF+0xbc>
 800223c:	2b22      	cmp	r3, #34	; 0x22
 800223e:	d11d      	bne.n	800227c <I2C_Slave_STOPF+0xf8>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002240:	2300      	movs	r3, #0
 8002242:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002244:	2220      	movs	r2, #32
 8002246:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800224a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800224e:	f7ff fca0 	bl	8001b92 <HAL_I2C_SlaveRxCpltCallback>
 8002252:	e013      	b.n	800227c <I2C_Slave_STOPF+0xf8>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002254:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	6852      	ldr	r2, [r2, #4]
 800225a:	b292      	uxth	r2, r2
 800225c:	8542      	strh	r2, [r0, #42]	; 0x2a
 800225e:	e7be      	b.n	80021de <I2C_Slave_STOPF+0x5a>
    I2C_ITError(hi2c);
 8002260:	f7ff feea 	bl	8002038 <I2C_ITError>
 8002264:	e00a      	b.n	800227c <I2C_Slave_STOPF+0xf8>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <I2C_Slave_STOPF+0x100>)
 8002268:	62c3      	str	r3, [r0, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800226a:	2300      	movs	r3, #0
 800226c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800226e:	2220      	movs	r2, #32
 8002270:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002278:	f7ff fcc7 	bl	8001c0a <HAL_I2C_ListenCpltCallback>
}
 800227c:	2000      	movs	r0, #0
 800227e:	b002      	add	sp, #8
 8002280:	bd10      	pop	{r4, pc}
 8002282:	bf00      	nop
 8002284:	ffff0000 	.word	0xffff0000

08002288 <HAL_I2C_EV_IRQHandler>:
{
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	4605      	mov	r5, r0
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800228c:	6803      	ldr	r3, [r0, #0]
 800228e:	699f      	ldr	r7, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002290:	695c      	ldr	r4, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8002292:	685e      	ldr	r6, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8002294:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002298:	b2db      	uxtb	r3, r3
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800229a:	2b10      	cmp	r3, #16
 800229c:	d025      	beq.n	80022ea <HAL_I2C_EV_IRQHandler+0x62>
 800229e:	2b40      	cmp	r3, #64	; 0x40
 80022a0:	d023      	beq.n	80022ea <HAL_I2C_EV_IRQHandler+0x62>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80022a2:	4b4c      	ldr	r3, [pc, #304]	; (80023d4 <HAL_I2C_EV_IRQHandler+0x14c>)
 80022a4:	4023      	ands	r3, r4
 80022a6:	b113      	cbz	r3, 80022ae <HAL_I2C_EV_IRQHandler+0x26>
 80022a8:	f416 7f00 	tst.w	r6, #512	; 0x200
 80022ac:	d16e      	bne.n	800238c <HAL_I2C_EV_IRQHandler+0x104>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80022ae:	4b4a      	ldr	r3, [pc, #296]	; (80023d8 <HAL_I2C_EV_IRQHandler+0x150>)
 80022b0:	4023      	ands	r3, r4
 80022b2:	b113      	cbz	r3, 80022ba <HAL_I2C_EV_IRQHandler+0x32>
 80022b4:	f416 7f00 	tst.w	r6, #512	; 0x200
 80022b8:	d16b      	bne.n	8002392 <HAL_I2C_EV_IRQHandler+0x10a>
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80022ba:	4b48      	ldr	r3, [pc, #288]	; (80023dc <HAL_I2C_EV_IRQHandler+0x154>)
 80022bc:	403b      	ands	r3, r7
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d06f      	beq.n	80023a2 <HAL_I2C_EV_IRQHandler+0x11a>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80022c2:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_I2C_EV_IRQHandler+0x158>)
 80022c4:	4023      	ands	r3, r4
 80022c6:	b133      	cbz	r3, 80022d6 <HAL_I2C_EV_IRQHandler+0x4e>
 80022c8:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80022cc:	d003      	beq.n	80022d6 <HAL_I2C_EV_IRQHandler+0x4e>
 80022ce:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <HAL_I2C_EV_IRQHandler+0x15c>)
 80022d0:	4023      	ands	r3, r4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d061      	beq.n	800239a <HAL_I2C_EV_IRQHandler+0x112>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80022d6:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <HAL_I2C_EV_IRQHandler+0x15c>)
 80022d8:	4023      	ands	r3, r4
 80022da:	b353      	cbz	r3, 8002332 <HAL_I2C_EV_IRQHandler+0xaa>
 80022dc:	f416 7f00 	tst.w	r6, #512	; 0x200
 80022e0:	d027      	beq.n	8002332 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveTransmit_BTF(hi2c);
 80022e2:	4628      	mov	r0, r5
 80022e4:	f7ff faac 	bl	8001840 <I2C_SlaveTransmit_BTF>
 80022e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80022ea:	f014 1f01 	tst.w	r4, #65537	; 0x10001
 80022ee:	d002      	beq.n	80022f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80022f0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80022f4:	d11e      	bne.n	8002334 <HAL_I2C_EV_IRQHandler+0xac>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80022f6:	4b3c      	ldr	r3, [pc, #240]	; (80023e8 <HAL_I2C_EV_IRQHandler+0x160>)
 80022f8:	4023      	ands	r3, r4
 80022fa:	b113      	cbz	r3, 8002302 <HAL_I2C_EV_IRQHandler+0x7a>
 80022fc:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002300:	d11c      	bne.n	800233c <HAL_I2C_EV_IRQHandler+0xb4>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002302:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <HAL_I2C_EV_IRQHandler+0x14c>)
 8002304:	4023      	ands	r3, r4
 8002306:	b113      	cbz	r3, 800230e <HAL_I2C_EV_IRQHandler+0x86>
 8002308:	f416 7f00 	tst.w	r6, #512	; 0x200
 800230c:	d11a      	bne.n	8002344 <HAL_I2C_EV_IRQHandler+0xbc>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800230e:	4b33      	ldr	r3, [pc, #204]	; (80023dc <HAL_I2C_EV_IRQHandler+0x154>)
 8002310:	403b      	ands	r3, r7
 8002312:	b31b      	cbz	r3, 800235c <HAL_I2C_EV_IRQHandler+0xd4>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002314:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <HAL_I2C_EV_IRQHandler+0x158>)
 8002316:	4023      	ands	r3, r4
 8002318:	b12b      	cbz	r3, 8002326 <HAL_I2C_EV_IRQHandler+0x9e>
 800231a:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800231e:	d002      	beq.n	8002326 <HAL_I2C_EV_IRQHandler+0x9e>
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002322:	4023      	ands	r3, r4
 8002324:	b193      	cbz	r3, 800234c <HAL_I2C_EV_IRQHandler+0xc4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002326:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002328:	4023      	ands	r3, r4
 800232a:	b113      	cbz	r3, 8002332 <HAL_I2C_EV_IRQHandler+0xaa>
 800232c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002330:	d110      	bne.n	8002354 <HAL_I2C_EV_IRQHandler+0xcc>
 8002332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Master_SB(hi2c);
 8002334:	4628      	mov	r0, r5
 8002336:	f7ff f952 	bl	80015de <I2C_Master_SB>
 800233a:	e7e8      	b.n	800230e <HAL_I2C_EV_IRQHandler+0x86>
      I2C_Master_ADD10(hi2c);
 800233c:	4628      	mov	r0, r5
 800233e:	f7ff f993 	bl	8001668 <I2C_Master_ADD10>
 8002342:	e7e4      	b.n	800230e <HAL_I2C_EV_IRQHandler+0x86>
      I2C_Master_ADDR(hi2c);
 8002344:	4628      	mov	r0, r5
 8002346:	f7ff f995 	bl	8001674 <I2C_Master_ADDR>
 800234a:	e7e0      	b.n	800230e <HAL_I2C_EV_IRQHandler+0x86>
        I2C_MasterTransmit_TXE(hi2c);
 800234c:	4628      	mov	r0, r5
 800234e:	f7ff fca8 	bl	8001ca2 <I2C_MasterTransmit_TXE>
 8002352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_MasterTransmit_BTF(hi2c);
 8002354:	4628      	mov	r0, r5
 8002356:	f7ff fd49 	bl	8001dec <I2C_MasterTransmit_BTF>
 800235a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800235c:	4b23      	ldr	r3, [pc, #140]	; (80023ec <HAL_I2C_EV_IRQHandler+0x164>)
 800235e:	4023      	ands	r3, r4
 8002360:	b12b      	cbz	r3, 800236e <HAL_I2C_EV_IRQHandler+0xe6>
 8002362:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002366:	d002      	beq.n	800236e <HAL_I2C_EV_IRQHandler+0xe6>
 8002368:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_I2C_EV_IRQHandler+0x15c>)
 800236a:	4023      	ands	r3, r4
 800236c:	b153      	cbz	r3, 8002384 <HAL_I2C_EV_IRQHandler+0xfc>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002370:	4023      	ands	r3, r4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0dd      	beq.n	8002332 <HAL_I2C_EV_IRQHandler+0xaa>
 8002376:	f416 7f00 	tst.w	r6, #512	; 0x200
 800237a:	d0da      	beq.n	8002332 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_MasterReceive_BTF(hi2c);
 800237c:	4628      	mov	r0, r5
 800237e:	f7ff fdd3 	bl	8001f28 <I2C_MasterReceive_BTF>
 8002382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_MasterReceive_RXNE(hi2c);
 8002384:	4628      	mov	r0, r5
 8002386:	f7ff fd81 	bl	8001e8c <I2C_MasterReceive_RXNE>
 800238a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Slave_ADDR(hi2c);
 800238c:	f7ff fc29 	bl	8001be2 <I2C_Slave_ADDR>
 8002390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Slave_STOPF(hi2c);
 8002392:	4628      	mov	r0, r5
 8002394:	f7ff fef6 	bl	8002184 <I2C_Slave_STOPF>
 8002398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_SlaveTransmit_TXE(hi2c);
 800239a:	4628      	mov	r0, r5
 800239c:	f7ff fbd1 	bl	8001b42 <I2C_SlaveTransmit_TXE>
 80023a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_I2C_EV_IRQHandler+0x164>)
 80023a4:	4023      	ands	r3, r4
 80023a6:	b12b      	cbz	r3, 80023b4 <HAL_I2C_EV_IRQHandler+0x12c>
 80023a8:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80023ac:	d002      	beq.n	80023b4 <HAL_I2C_EV_IRQHandler+0x12c>
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <HAL_I2C_EV_IRQHandler+0x15c>)
 80023b0:	4023      	ands	r3, r4
 80023b2:	b153      	cbz	r3, 80023ca <HAL_I2C_EV_IRQHandler+0x142>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_I2C_EV_IRQHandler+0x15c>)
 80023b6:	4023      	ands	r3, r4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0ba      	beq.n	8002332 <HAL_I2C_EV_IRQHandler+0xaa>
 80023bc:	f416 7f00 	tst.w	r6, #512	; 0x200
 80023c0:	d0b7      	beq.n	8002332 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveReceive_BTF(hi2c);
 80023c2:	4628      	mov	r0, r5
 80023c4:	f7ff fa4c 	bl	8001860 <I2C_SlaveReceive_BTF>
}
 80023c8:	e7b3      	b.n	8002332 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveReceive_RXNE(hi2c);
 80023ca:	4628      	mov	r0, r5
 80023cc:	f7ff fbe2 	bl	8001b94 <I2C_SlaveReceive_RXNE>
 80023d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023d2:	bf00      	nop
 80023d4:	00010002 	.word	0x00010002
 80023d8:	00010010 	.word	0x00010010
 80023dc:	00100004 	.word	0x00100004
 80023e0:	00010080 	.word	0x00010080
 80023e4:	00010004 	.word	0x00010004
 80023e8:	00010008 	.word	0x00010008
 80023ec:	00010040 	.word	0x00010040

080023f0 <HAL_I2C_ER_IRQHandler>:
{
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80023f4:	6803      	ldr	r3, [r0, #0]
 80023f6:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80023f8:	685e      	ldr	r6, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80023fa:	4a31      	ldr	r2, [pc, #196]	; (80024c0 <HAL_I2C_ER_IRQHandler+0xd0>)
 80023fc:	4215      	tst	r5, r2
 80023fe:	d009      	beq.n	8002414 <HAL_I2C_ER_IRQHandler+0x24>
 8002400:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002404:	d006      	beq.n	8002414 <HAL_I2C_ER_IRQHandler+0x24>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002406:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800240e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002412:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002414:	f415 3f81 	tst.w	r5, #66048	; 0x10200
 8002418:	d00a      	beq.n	8002430 <HAL_I2C_ER_IRQHandler+0x40>
 800241a:	f416 7f80 	tst.w	r6, #256	; 0x100
 800241e:	d007      	beq.n	8002430 <HAL_I2C_ER_IRQHandler+0x40>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002422:	f043 0302 	orr.w	r3, r3, #2
 8002426:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800242e:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002430:	f415 3f82 	tst.w	r5, #66560	; 0x10400
 8002434:	d01a      	beq.n	800246c <HAL_I2C_ER_IRQHandler+0x7c>
 8002436:	f416 7f80 	tst.w	r6, #256	; 0x100
 800243a:	d017      	beq.n	800246c <HAL_I2C_ER_IRQHandler+0x7c>
    tmp1 = hi2c->Mode;
 800243c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002440:	b2db      	uxtb	r3, r3
    tmp2 = hi2c->XferCount;
 8002442:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002444:	b291      	uxth	r1, r2
    tmp3 = hi2c->State;
 8002446:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800244a:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 800244c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800244e:	2b20      	cmp	r3, #32
 8002450:	d01d      	beq.n	800248e <HAL_I2C_ER_IRQHandler+0x9e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	6423      	str	r3, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 800245a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b10      	cmp	r3, #16
 8002462:	d022      	beq.n	80024aa <HAL_I2C_ER_IRQHandler+0xba>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800246a:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800246c:	f415 3f84 	tst.w	r5, #67584	; 0x10800
 8002470:	d00a      	beq.n	8002488 <HAL_I2C_ER_IRQHandler+0x98>
 8002472:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002476:	d007      	beq.n	8002488 <HAL_I2C_ER_IRQHandler+0x98>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002478:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002486:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002488:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800248a:	b9a3      	cbnz	r3, 80024b6 <HAL_I2C_ER_IRQHandler+0xc6>
 800248c:	bd70      	pop	{r4, r5, r6, pc}
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800248e:	2900      	cmp	r1, #0
 8002490:	d1df      	bne.n	8002452 <HAL_I2C_ER_IRQHandler+0x62>
 8002492:	2a21      	cmp	r2, #33	; 0x21
 8002494:	d005      	beq.n	80024a2 <HAL_I2C_ER_IRQHandler+0xb2>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002496:	2a29      	cmp	r2, #41	; 0x29
 8002498:	d003      	beq.n	80024a2 <HAL_I2C_ER_IRQHandler+0xb2>
 800249a:	2a28      	cmp	r2, #40	; 0x28
 800249c:	d1d9      	bne.n	8002452 <HAL_I2C_ER_IRQHandler+0x62>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800249e:	2821      	cmp	r0, #33	; 0x21
 80024a0:	d1d7      	bne.n	8002452 <HAL_I2C_ER_IRQHandler+0x62>
      I2C_Slave_AF(hi2c);
 80024a2:	4620      	mov	r0, r4
 80024a4:	f7ff fbb2 	bl	8001c0c <I2C_Slave_AF>
 80024a8:	e7e0      	b.n	800246c <HAL_I2C_ER_IRQHandler+0x7c>
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80024aa:	6822      	ldr	r2, [r4, #0]
 80024ac:	6813      	ldr	r3, [r2, #0]
 80024ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e7d6      	b.n	8002464 <HAL_I2C_ER_IRQHandler+0x74>
    I2C_ITError(hi2c);
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7ff fdbe 	bl	8002038 <I2C_ITError>
}
 80024bc:	e7e6      	b.n	800248c <HAL_I2C_ER_IRQHandler+0x9c>
 80024be:	bf00      	nop
 80024c0:	00010100 	.word	0x00010100

080024c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80024c4:	b508      	push	{r3, lr}
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80024c8:	6802      	ldr	r2, [r0, #0]
 80024ca:	6813      	ldr	r3, [r2, #0]
 80024cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024d0:	6013      	str	r3, [r2, #0]

  hi2c->XferCount = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	8543      	strh	r3, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80024d6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80024d8:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80024da:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80024dc:	6513      	str	r3, [r2, #80]	; 0x50

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80024de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b60      	cmp	r3, #96	; 0x60
 80024e6:	d00d      	beq.n	8002504 <I2C_DMAAbort+0x40>
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80024e8:	2320      	movs	r3, #32
 80024ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80024f4:	6802      	ldr	r2, [r0, #0]
 80024f6:	6813      	ldr	r3, [r2, #0]
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6013      	str	r3, [r2, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 80024fe:	f7ff fd99 	bl	8002034 <HAL_I2C_ErrorCallback>
 8002502:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002504:	2320      	movs	r3, #32
 8002506:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800250a:	2300      	movs	r3, #0
 800250c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002510:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002512:	6802      	ldr	r2, [r0, #0]
 8002514:	6813      	ldr	r3, [r2, #0]
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800251c:	f7ff fd8b 	bl	8002036 <HAL_I2C_AbortCpltCallback>
 8002520:	bd08      	pop	{r3, pc}
	...

08002524 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002524:	b510      	push	{r4, lr}
 8002526:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002528:	2300      	movs	r3, #0
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_PWREx_EnableOverDrive+0x70>)
 800252e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002530:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002540:	2201      	movs	r2, #1
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_PWREx_EnableOverDrive+0x74>)
 8002544:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002546:	f7fe fd1f 	bl	8000f88 <HAL_GetTick>
 800254a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <HAL_PWREx_EnableOverDrive+0x78>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002554:	d108      	bne.n	8002568 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002556:	f7fe fd17 	bl	8000f88 <HAL_GetTick>
 800255a:	1b00      	subs	r0, r0, r4
 800255c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002560:	d9f4      	bls.n	800254c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8002562:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002564:	b002      	add	sp, #8
 8002566:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002568:	2201      	movs	r2, #1
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_PWREx_EnableOverDrive+0x7c>)
 800256c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800256e:	f7fe fd0b 	bl	8000f88 <HAL_GetTick>
 8002572:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_PWREx_EnableOverDrive+0x78>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800257c:	d107      	bne.n	800258e <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800257e:	f7fe fd03 	bl	8000f88 <HAL_GetTick>
 8002582:	1b00      	subs	r0, r0, r4
 8002584:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002588:	d9f4      	bls.n	8002574 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 800258a:	2003      	movs	r0, #3
 800258c:	e7ea      	b.n	8002564 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800258e:	2000      	movs	r0, #0
 8002590:	e7e8      	b.n	8002564 <HAL_PWREx_EnableOverDrive+0x40>
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	420e0040 	.word	0x420e0040
 800259c:	40007000 	.word	0x40007000
 80025a0:	420e0044 	.word	0x420e0044

080025a4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a4:	2800      	cmp	r0, #0
 80025a6:	f000 809d 	beq.w	80026e4 <HAL_RCC_ClockConfig+0x140>
{
 80025aa:	b570      	push	{r4, r5, r6, lr}
 80025ac:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ae:	4b4f      	ldr	r3, [pc, #316]	; (80026ec <HAL_RCC_ClockConfig+0x148>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	428b      	cmp	r3, r1
 80025b8:	d209      	bcs.n	80025ce <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	b2cb      	uxtb	r3, r1
 80025bc:	4a4b      	ldr	r2, [pc, #300]	; (80026ec <HAL_RCC_ClockConfig+0x148>)
 80025be:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c0:	6813      	ldr	r3, [r2, #0]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	4299      	cmp	r1, r3
 80025c8:	d001      	beq.n	80025ce <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 80025ca:	2001      	movs	r0, #1
 80025cc:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	f013 0f02 	tst.w	r3, #2
 80025d4:	d017      	beq.n	8002606 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d6:	f013 0f04 	tst.w	r3, #4
 80025da:	d004      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025dc:	4a44      	ldr	r2, [pc, #272]	; (80026f0 <HAL_RCC_ClockConfig+0x14c>)
 80025de:	6893      	ldr	r3, [r2, #8]
 80025e0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025e4:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	f013 0f08 	tst.w	r3, #8
 80025ec:	d004      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ee:	4a40      	ldr	r2, [pc, #256]	; (80026f0 <HAL_RCC_ClockConfig+0x14c>)
 80025f0:	6893      	ldr	r3, [r2, #8]
 80025f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f8:	4a3d      	ldr	r2, [pc, #244]	; (80026f0 <HAL_RCC_ClockConfig+0x14c>)
 80025fa:	6893      	ldr	r3, [r2, #8]
 80025fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002600:	68a0      	ldr	r0, [r4, #8]
 8002602:	4303      	orrs	r3, r0
 8002604:	6093      	str	r3, [r2, #8]
 8002606:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	f013 0f01 	tst.w	r3, #1
 800260e:	d032      	beq.n	8002676 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002610:	6863      	ldr	r3, [r4, #4]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d021      	beq.n	800265a <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002616:	1e9a      	subs	r2, r3, #2
 8002618:	2a01      	cmp	r2, #1
 800261a:	d925      	bls.n	8002668 <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	4a34      	ldr	r2, [pc, #208]	; (80026f0 <HAL_RCC_ClockConfig+0x14c>)
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	f012 0f02 	tst.w	r2, #2
 8002624:	d060      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002626:	4932      	ldr	r1, [pc, #200]	; (80026f0 <HAL_RCC_ClockConfig+0x14c>)
 8002628:	688a      	ldr	r2, [r1, #8]
 800262a:	f022 0203 	bic.w	r2, r2, #3
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002632:	f7fe fca9 	bl	8000f88 <HAL_GetTick>
 8002636:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_ClockConfig+0x14c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	6862      	ldr	r2, [r4, #4]
 8002642:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002646:	d016      	beq.n	8002676 <HAL_RCC_ClockConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7fe fc9e 	bl	8000f88 <HAL_GetTick>
 800264c:	1b80      	subs	r0, r0, r6
 800264e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002652:	4298      	cmp	r0, r3
 8002654:	d9f0      	bls.n	8002638 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_TIMEOUT;
 8002656:	2003      	movs	r0, #3
 8002658:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <HAL_RCC_ClockConfig+0x14c>)
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002662:	d1e0      	bne.n	8002626 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002664:	2001      	movs	r0, #1
 8002666:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002668:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <HAL_RCC_ClockConfig+0x14c>)
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002670:	d1d9      	bne.n	8002626 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002672:	2001      	movs	r0, #1
 8002674:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_RCC_ClockConfig+0x148>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	429d      	cmp	r5, r3
 8002680:	d209      	bcs.n	8002696 <HAL_RCC_ClockConfig+0xf2>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	b2ea      	uxtb	r2, r5
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_ClockConfig+0x148>)
 8002686:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	429d      	cmp	r5, r3
 8002690:	d001      	beq.n	8002696 <HAL_RCC_ClockConfig+0xf2>
    {
      return HAL_ERROR;
 8002692:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8002694:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	f013 0f04 	tst.w	r3, #4
 800269c:	d006      	beq.n	80026ac <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269e:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <HAL_RCC_ClockConfig+0x14c>)
 80026a0:	6893      	ldr	r3, [r2, #8]
 80026a2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80026a6:	68e1      	ldr	r1, [r4, #12]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	f013 0f08 	tst.w	r3, #8
 80026b2:	d007      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b4:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <HAL_RCC_ClockConfig+0x14c>)
 80026b6:	6893      	ldr	r3, [r2, #8]
 80026b8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80026bc:	6921      	ldr	r1, [r4, #16]
 80026be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026c2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026c4:	f000 f840 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_ClockConfig+0x14c>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026d0:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <HAL_RCC_ClockConfig+0x150>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	40d8      	lsrs	r0, r3
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_RCC_ClockConfig+0x154>)
 80026d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80026da:	2000      	movs	r0, #0
 80026dc:	f7fe fc08 	bl	8000ef0 <HAL_InitTick>
  return HAL_OK;
 80026e0:	2000      	movs	r0, #0
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80026e4:	2001      	movs	r0, #1
 80026e6:	4770      	bx	lr
        return HAL_ERROR;
 80026e8:	2001      	movs	r0, #1
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
 80026ec:	40023c00 	.word	0x40023c00
 80026f0:	40023800 	.word	0x40023800
 80026f4:	080076c8 	.word	0x080076c8
 80026f8:	20000008 	.word	0x20000008

080026fc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80026fc:	4b01      	ldr	r3, [pc, #4]	; (8002704 <HAL_RCC_GetHCLKFreq+0x8>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000008 	.word	0x20000008

08002708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002708:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800270a:	f7ff fff7 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002716:	4a03      	ldr	r2, [pc, #12]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002718:	5cd3      	ldrb	r3, [r2, r3]
}
 800271a:	40d8      	lsrs	r0, r3
 800271c:	bd08      	pop	{r3, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	080076d8 	.word	0x080076d8

08002728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002728:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800272a:	f7ff ffe7 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002736:	4a03      	ldr	r2, [pc, #12]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
}
 800273a:	40d8      	lsrs	r0, r3
 800273c:	bd08      	pop	{r3, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	080076d8 	.word	0x080076d8

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800274a:	4b5c      	ldr	r3, [pc, #368]	; (80028bc <HAL_RCC_GetSysClockFreq+0x174>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b08      	cmp	r3, #8
 8002754:	d006      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x1c>
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d05a      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0xc8>
 800275a:	2b04      	cmp	r3, #4
 800275c:	f000 80ac 	beq.w	80028b8 <HAL_RCC_GetSysClockFreq+0x170>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002760:	4857      	ldr	r0, [pc, #348]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x178>)
 8002762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002764:	4b55      	ldr	r3, [pc, #340]	; (80028bc <HAL_RCC_GetSysClockFreq+0x174>)
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002772:	d02a      	beq.n	80027ca <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002774:	4b51      	ldr	r3, [pc, #324]	; (80028bc <HAL_RCC_GetSysClockFreq+0x174>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800277c:	461e      	mov	r6, r3
 800277e:	2700      	movs	r7, #0
 8002780:	015c      	lsls	r4, r3, #5
 8002782:	2500      	movs	r5, #0
 8002784:	1ae4      	subs	r4, r4, r3
 8002786:	eb65 0507 	sbc.w	r5, r5, r7
 800278a:	01a9      	lsls	r1, r5, #6
 800278c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002790:	01a0      	lsls	r0, r4, #6
 8002792:	1b00      	subs	r0, r0, r4
 8002794:	eb61 0105 	sbc.w	r1, r1, r5
 8002798:	00cb      	lsls	r3, r1, #3
 800279a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800279e:	00c4      	lsls	r4, r0, #3
 80027a0:	19a0      	adds	r0, r4, r6
 80027a2:	eb43 0107 	adc.w	r1, r3, r7
 80027a6:	024b      	lsls	r3, r1, #9
 80027a8:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80027ac:	0244      	lsls	r4, r0, #9
 80027ae:	4620      	mov	r0, r4
 80027b0:	4619      	mov	r1, r3
 80027b2:	2300      	movs	r3, #0
 80027b4:	f7fe fa14 	bl	8000be0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027b8:	4b40      	ldr	r3, [pc, #256]	; (80028bc <HAL_RCC_GetSysClockFreq+0x174>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80027c0:	3301      	adds	r3, #1
 80027c2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80027c4:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80027c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ca:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <HAL_RCC_GetSysClockFreq+0x174>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80027d2:	461e      	mov	r6, r3
 80027d4:	2700      	movs	r7, #0
 80027d6:	015c      	lsls	r4, r3, #5
 80027d8:	2500      	movs	r5, #0
 80027da:	1ae4      	subs	r4, r4, r3
 80027dc:	eb65 0507 	sbc.w	r5, r5, r7
 80027e0:	01a9      	lsls	r1, r5, #6
 80027e2:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80027e6:	01a0      	lsls	r0, r4, #6
 80027e8:	1b00      	subs	r0, r0, r4
 80027ea:	eb61 0105 	sbc.w	r1, r1, r5
 80027ee:	00cb      	lsls	r3, r1, #3
 80027f0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80027f4:	00c4      	lsls	r4, r0, #3
 80027f6:	19a0      	adds	r0, r4, r6
 80027f8:	eb43 0107 	adc.w	r1, r3, r7
 80027fc:	028b      	lsls	r3, r1, #10
 80027fe:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002802:	0284      	lsls	r4, r0, #10
 8002804:	4620      	mov	r0, r4
 8002806:	4619      	mov	r1, r3
 8002808:	2300      	movs	r3, #0
 800280a:	f7fe f9e9 	bl	8000be0 <__aeabi_uldivmod>
 800280e:	e7d3      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x70>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002810:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <HAL_RCC_GetSysClockFreq+0x174>)
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800281e:	d028      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x12a>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002820:	4b26      	ldr	r3, [pc, #152]	; (80028bc <HAL_RCC_GetSysClockFreq+0x174>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002828:	461e      	mov	r6, r3
 800282a:	2700      	movs	r7, #0
 800282c:	015c      	lsls	r4, r3, #5
 800282e:	2500      	movs	r5, #0
 8002830:	1ae4      	subs	r4, r4, r3
 8002832:	eb65 0507 	sbc.w	r5, r5, r7
 8002836:	01a9      	lsls	r1, r5, #6
 8002838:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800283c:	01a0      	lsls	r0, r4, #6
 800283e:	1b00      	subs	r0, r0, r4
 8002840:	eb61 0105 	sbc.w	r1, r1, r5
 8002844:	00cb      	lsls	r3, r1, #3
 8002846:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800284a:	00c4      	lsls	r4, r0, #3
 800284c:	19a0      	adds	r0, r4, r6
 800284e:	eb43 0107 	adc.w	r1, r3, r7
 8002852:	024b      	lsls	r3, r1, #9
 8002854:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002858:	0244      	lsls	r4, r0, #9
 800285a:	4620      	mov	r0, r4
 800285c:	4619      	mov	r1, r3
 800285e:	2300      	movs	r3, #0
 8002860:	f7fe f9be 	bl	8000be0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_RCC_GetSysClockFreq+0x174>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 800286c:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_RCC_GetSysClockFreq+0x174>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800287a:	461e      	mov	r6, r3
 800287c:	2700      	movs	r7, #0
 800287e:	015c      	lsls	r4, r3, #5
 8002880:	2500      	movs	r5, #0
 8002882:	1ae4      	subs	r4, r4, r3
 8002884:	eb65 0507 	sbc.w	r5, r5, r7
 8002888:	01a9      	lsls	r1, r5, #6
 800288a:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800288e:	01a0      	lsls	r0, r4, #6
 8002890:	1b00      	subs	r0, r0, r4
 8002892:	eb61 0105 	sbc.w	r1, r1, r5
 8002896:	00cb      	lsls	r3, r1, #3
 8002898:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800289c:	00c4      	lsls	r4, r0, #3
 800289e:	19a0      	adds	r0, r4, r6
 80028a0:	eb43 0107 	adc.w	r1, r3, r7
 80028a4:	028b      	lsls	r3, r1, #10
 80028a6:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80028aa:	0284      	lsls	r4, r0, #10
 80028ac:	4620      	mov	r0, r4
 80028ae:	4619      	mov	r1, r3
 80028b0:	2300      	movs	r3, #0
 80028b2:	f7fe f995 	bl	8000be0 <__aeabi_uldivmod>
 80028b6:	e7d5      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x11c>
      sysclockfreq = HSE_VALUE;
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x17c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80028ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	00f42400 	.word	0x00f42400
 80028c4:	007a1200 	.word	0x007a1200

080028c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ce:	6803      	ldr	r3, [r0, #0]
 80028d0:	f013 0f01 	tst.w	r3, #1
 80028d4:	d041      	beq.n	800295a <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028d6:	4ba6      	ldr	r3, [pc, #664]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d032      	beq.n	8002948 <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028e2:	4ba3      	ldr	r3, [pc, #652]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d027      	beq.n	800293e <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ee:	4ba0      	ldr	r3, [pc, #640]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d059      	beq.n	80029ae <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fa:	6863      	ldr	r3, [r4, #4]
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002900:	d05b      	beq.n	80029ba <HAL_RCC_OscConfig+0xf2>
 8002902:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002906:	d05e      	beq.n	80029c6 <HAL_RCC_OscConfig+0xfe>
 8002908:	4b99      	ldr	r3, [pc, #612]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002918:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800291a:	6863      	ldr	r3, [r4, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d05c      	beq.n	80029da <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fb32 	bl	8000f88 <HAL_GetTick>
 8002924:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b92      	ldr	r3, [pc, #584]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800292e:	d114      	bne.n	800295a <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002930:	f7fe fb2a 	bl	8000f88 <HAL_GetTick>
 8002934:	1b40      	subs	r0, r0, r5
 8002936:	2864      	cmp	r0, #100	; 0x64
 8002938:	d9f5      	bls.n	8002926 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 800293a:	2003      	movs	r0, #3
 800293c:	e19d      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800293e:	4b8c      	ldr	r3, [pc, #560]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002946:	d0d2      	beq.n	80028ee <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	4b89      	ldr	r3, [pc, #548]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002950:	d003      	beq.n	800295a <HAL_RCC_OscConfig+0x92>
 8002952:	6863      	ldr	r3, [r4, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 818d 	beq.w	8002c74 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	f013 0f02 	tst.w	r3, #2
 8002960:	d067      	beq.n	8002a32 <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002962:	4b83      	ldr	r3, [pc, #524]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f013 0f0c 	tst.w	r3, #12
 800296a:	d04a      	beq.n	8002a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800296c:	4b80      	ldr	r3, [pc, #512]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002974:	2b08      	cmp	r3, #8
 8002976:	d03f      	beq.n	80029f8 <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002978:	4b7d      	ldr	r3, [pc, #500]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002980:	2b0c      	cmp	r3, #12
 8002982:	d048      	beq.n	8002a16 <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002984:	68e3      	ldr	r3, [r4, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d074      	beq.n	8002a74 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298a:	2201      	movs	r2, #1
 800298c:	4b79      	ldr	r3, [pc, #484]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fafa 	bl	8000f88 <HAL_GetTick>
 8002994:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002996:	4b76      	ldr	r3, [pc, #472]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f013 0f02 	tst.w	r3, #2
 800299e:	d160      	bne.n	8002a62 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a0:	f7fe faf2 	bl	8000f88 <HAL_GetTick>
 80029a4:	1b40      	subs	r0, r0, r5
 80029a6:	2802      	cmp	r0, #2
 80029a8:	d9f5      	bls.n	8002996 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 80029aa:	2003      	movs	r0, #3
 80029ac:	e165      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ae:	4b70      	ldr	r3, [pc, #448]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80029b6:	d0a0      	beq.n	80028fa <HAL_RCC_OscConfig+0x32>
 80029b8:	e7c6      	b.n	8002948 <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ba:	4a6d      	ldr	r2, [pc, #436]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 80029bc:	6813      	ldr	r3, [r2, #0]
 80029be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	e7a9      	b.n	800291a <HAL_RCC_OscConfig+0x52>
 80029c6:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	e79f      	b.n	800291a <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 80029da:	f7fe fad5 	bl	8000f88 <HAL_GetTick>
 80029de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e0:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80029e8:	d0b7      	beq.n	800295a <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ea:	f7fe facd 	bl	8000f88 <HAL_GetTick>
 80029ee:	1b40      	subs	r0, r0, r5
 80029f0:	2864      	cmp	r0, #100	; 0x64
 80029f2:	d9f5      	bls.n	80029e0 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80029f4:	2003      	movs	r0, #3
 80029f6:	e140      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029f8:	4b5d      	ldr	r3, [pc, #372]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002a00:	d1ba      	bne.n	8002978 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	4b5b      	ldr	r3, [pc, #364]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f013 0f02 	tst.w	r3, #2
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCC_OscConfig+0x15a>
 8002a0c:	68e3      	ldr	r3, [r4, #12]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d007      	beq.n	8002a22 <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 8002a12:	2001      	movs	r0, #1
 8002a14:	e131      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a16:	4b56      	ldr	r3, [pc, #344]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002a1e:	d1b1      	bne.n	8002984 <HAL_RCC_OscConfig+0xbc>
 8002a20:	e7ef      	b.n	8002a02 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a22:	4a53      	ldr	r2, [pc, #332]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002a24:	6813      	ldr	r3, [r2, #0]
 8002a26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a2a:	6921      	ldr	r1, [r4, #16]
 8002a2c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a30:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	f013 0f08 	tst.w	r3, #8
 8002a38:	d040      	beq.n	8002abc <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a3a:	6963      	ldr	r3, [r4, #20]
 8002a3c:	b363      	cbz	r3, 8002a98 <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <HAL_RCC_OscConfig+0x2b0>)
 8002a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe faa0 	bl	8000f88 <HAL_GetTick>
 8002a48:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4e:	f013 0f02 	tst.w	r3, #2
 8002a52:	d133      	bne.n	8002abc <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a54:	f7fe fa98 	bl	8000f88 <HAL_GetTick>
 8002a58:	1b40      	subs	r0, r0, r5
 8002a5a:	2802      	cmp	r0, #2
 8002a5c:	d9f5      	bls.n	8002a4a <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8002a5e:	2003      	movs	r0, #3
 8002a60:	e10b      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a62:	4a43      	ldr	r2, [pc, #268]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002a64:	6813      	ldr	r3, [r2, #0]
 8002a66:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a6a:	6921      	ldr	r1, [r4, #16]
 8002a6c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e7de      	b.n	8002a32 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 8002a74:	2200      	movs	r2, #0
 8002a76:	4b3f      	ldr	r3, [pc, #252]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fa85 	bl	8000f88 <HAL_GetTick>
 8002a7e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a80:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f013 0f02 	tst.w	r3, #2
 8002a88:	d0d3      	beq.n	8002a32 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8a:	f7fe fa7d 	bl	8000f88 <HAL_GetTick>
 8002a8e:	1b40      	subs	r0, r0, r5
 8002a90:	2802      	cmp	r0, #2
 8002a92:	d9f5      	bls.n	8002a80 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8002a94:	2003      	movs	r0, #3
 8002a96:	e0f0      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HAL_RCC_OscConfig+0x2b0>)
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fa73 	bl	8000f88 <HAL_GetTick>
 8002aa2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa8:	f013 0f02 	tst.w	r3, #2
 8002aac:	d006      	beq.n	8002abc <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aae:	f7fe fa6b 	bl	8000f88 <HAL_GetTick>
 8002ab2:	1b40      	subs	r0, r0, r5
 8002ab4:	2802      	cmp	r0, #2
 8002ab6:	d9f5      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8002ab8:	2003      	movs	r0, #3
 8002aba:	e0de      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	f013 0f04 	tst.w	r3, #4
 8002ac2:	d079      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac4:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002acc:	d133      	bne.n	8002b36 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ae6:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_RCC_OscConfig+0x2b4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002af0:	d023      	beq.n	8002b3a <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af2:	68a3      	ldr	r3, [r4, #8]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d034      	beq.n	8002b62 <HAL_RCC_OscConfig+0x29a>
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d041      	beq.n	8002b80 <HAL_RCC_OscConfig+0x2b8>
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002afe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	671a      	str	r2, [r3, #112]	; 0x70
 8002b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b08:	f022 0204 	bic.w	r2, r2, #4
 8002b0c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b0e:	68a3      	ldr	r3, [r4, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d03f      	beq.n	8002b94 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7fe fa38 	bl	8000f88 <HAL_GetTick>
 8002b18:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	f013 0f02 	tst.w	r3, #2
 8002b22:	d148      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe fa30 	bl	8000f88 <HAL_GetTick>
 8002b28:	1b80      	subs	r0, r0, r6
 8002b2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b2e:	4298      	cmp	r0, r3
 8002b30:	d9f3      	bls.n	8002b1a <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 8002b32:	2003      	movs	r0, #3
 8002b34:	e0a1      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002b36:	2500      	movs	r5, #0
 8002b38:	e7d6      	b.n	8002ae8 <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3a:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <HAL_RCC_OscConfig+0x2b4>)
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002b44:	f7fe fa20 	bl	8000f88 <HAL_GetTick>
 8002b48:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <HAL_RCC_OscConfig+0x2b4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b52:	d1ce      	bne.n	8002af2 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b54:	f7fe fa18 	bl	8000f88 <HAL_GetTick>
 8002b58:	1b80      	subs	r0, r0, r6
 8002b5a:	2802      	cmp	r0, #2
 8002b5c:	d9f5      	bls.n	8002b4a <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8002b5e:	2003      	movs	r0, #3
 8002b60:	e08b      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b62:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <HAL_RCC_OscConfig+0x2a8>)
 8002b64:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6c:	e7cf      	b.n	8002b0e <HAL_RCC_OscConfig+0x246>
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	42470000 	.word	0x42470000
 8002b78:	42470e80 	.word	0x42470e80
 8002b7c:	40007000 	.word	0x40007000
 8002b80:	4b40      	ldr	r3, [pc, #256]	; (8002c84 <HAL_RCC_OscConfig+0x3bc>)
 8002b82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b84:	f042 0204 	orr.w	r2, r2, #4
 8002b88:	671a      	str	r2, [r3, #112]	; 0x70
 8002b8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	671a      	str	r2, [r3, #112]	; 0x70
 8002b92:	e7bc      	b.n	8002b0e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe f9f8 	bl	8000f88 <HAL_GetTick>
 8002b98:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9a:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <HAL_RCC_OscConfig+0x3bc>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	f013 0f02 	tst.w	r3, #2
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fe f9f0 	bl	8000f88 <HAL_GetTick>
 8002ba8:	1b80      	subs	r0, r0, r6
 8002baa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bae:	4298      	cmp	r0, r3
 8002bb0:	d9f3      	bls.n	8002b9a <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8002bb2:	2003      	movs	r0, #3
 8002bb4:	e061      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb6:	b9e5      	cbnz	r5, 8002bf2 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb8:	69a3      	ldr	r3, [r4, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d05c      	beq.n	8002c78 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bbe:	4a31      	ldr	r2, [pc, #196]	; (8002c84 <HAL_RCC_OscConfig+0x3bc>)
 8002bc0:	6892      	ldr	r2, [r2, #8]
 8002bc2:	f002 020c 	and.w	r2, r2, #12
 8002bc6:	2a08      	cmp	r2, #8
 8002bc8:	d059      	beq.n	8002c7e <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d017      	beq.n	8002bfe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bce:	2200      	movs	r2, #0
 8002bd0:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <HAL_RCC_OscConfig+0x3c0>)
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe f9d8 	bl	8000f88 <HAL_GetTick>
 8002bd8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <HAL_RCC_OscConfig+0x3bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002be2:	d045      	beq.n	8002c70 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe f9d0 	bl	8000f88 <HAL_GetTick>
 8002be8:	1b00      	subs	r0, r0, r4
 8002bea:	2802      	cmp	r0, #2
 8002bec:	d9f5      	bls.n	8002bda <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 8002bee:	2003      	movs	r0, #3
 8002bf0:	e043      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf2:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <HAL_RCC_OscConfig+0x3bc>)
 8002bf4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfc:	e7dc      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 8002bfe:	2200      	movs	r2, #0
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_RCC_OscConfig+0x3c0>)
 8002c02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c04:	f7fe f9c0 	bl	8000f88 <HAL_GetTick>
 8002c08:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <HAL_RCC_OscConfig+0x3bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c12:	d006      	beq.n	8002c22 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe f9b8 	bl	8000f88 <HAL_GetTick>
 8002c18:	1b40      	subs	r0, r0, r5
 8002c1a:	2802      	cmp	r0, #2
 8002c1c:	d9f5      	bls.n	8002c0a <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 8002c1e:	2003      	movs	r0, #3
 8002c20:	e02b      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c22:	69e3      	ldr	r3, [r4, #28]
 8002c24:	6a22      	ldr	r2, [r4, #32]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c2a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c30:	0852      	lsrs	r2, r2, #1
 8002c32:	3a01      	subs	r2, #1
 8002c34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c3e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c40:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002c44:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <HAL_RCC_OscConfig+0x3bc>)
 8002c46:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <HAL_RCC_OscConfig+0x3c0>)
 8002c4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c4e:	f7fe f99b 	bl	8000f88 <HAL_GetTick>
 8002c52:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_OscConfig+0x3bc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe f993 	bl	8000f88 <HAL_GetTick>
 8002c62:	1b00      	subs	r0, r0, r4
 8002c64:	2802      	cmp	r0, #2
 8002c66:	d9f5      	bls.n	8002c54 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 8002c68:	2003      	movs	r0, #3
 8002c6a:	e006      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	e004      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
 8002c70:	2000      	movs	r0, #0
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 8002c74:	2001      	movs	r0, #1
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 8002c78:	2000      	movs	r0, #0
}
 8002c7a:	b002      	add	sp, #8
 8002c7c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002c7e:	2001      	movs	r0, #1
 8002c80:	e7fb      	b.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	42470060 	.word	0x42470060

08002c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c8c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c8e:	6a03      	ldr	r3, [r0, #32]
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c96:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002c98:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c9a:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c9c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ca0:	680d      	ldr	r5, [r1, #0]
 8002ca2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ca4:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ca8:	688d      	ldr	r5, [r1, #8]
 8002caa:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002cac:	4d0f      	ldr	r5, [pc, #60]	; (8002cec <TIM_OC1_SetConfig+0x60>)
 8002cae:	42a8      	cmp	r0, r5
 8002cb0:	d01a      	beq.n	8002ce8 <TIM_OC1_SetConfig+0x5c>
 8002cb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cb6:	42a8      	cmp	r0, r5
 8002cb8:	d014      	beq.n	8002ce4 <TIM_OC1_SetConfig+0x58>
 8002cba:	2500      	movs	r5, #0
 8002cbc:	b15d      	cbz	r5, 8002cd6 <TIM_OC1_SetConfig+0x4a>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cbe:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cc2:	68cd      	ldr	r5, [r1, #12]
 8002cc4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cca:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cce:	694d      	ldr	r5, [r1, #20]
 8002cd0:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cd2:	698d      	ldr	r5, [r1, #24]
 8002cd4:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd6:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cd8:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cda:	684a      	ldr	r2, [r1, #4]
 8002cdc:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002cde:	6203      	str	r3, [r0, #32]
} 
 8002ce0:	bc30      	pop	{r4, r5}
 8002ce2:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002ce4:	2501      	movs	r5, #1
 8002ce6:	e7e9      	b.n	8002cbc <TIM_OC1_SetConfig+0x30>
 8002ce8:	2501      	movs	r5, #1
 8002cea:	e7e7      	b.n	8002cbc <TIM_OC1_SetConfig+0x30>
 8002cec:	40010000 	.word	0x40010000

08002cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cf0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cf2:	6a03      	ldr	r3, [r0, #32]
 8002cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cf8:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cfa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002cfc:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cfe:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002d00:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d04:	680d      	ldr	r5, [r1, #0]
 8002d06:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d0c:	688d      	ldr	r5, [r1, #8]
 8002d0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002d12:	4d11      	ldr	r5, [pc, #68]	; (8002d58 <TIM_OC3_SetConfig+0x68>)
 8002d14:	42a8      	cmp	r0, r5
 8002d16:	d01d      	beq.n	8002d54 <TIM_OC3_SetConfig+0x64>
 8002d18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d1c:	42a8      	cmp	r0, r5
 8002d1e:	d017      	beq.n	8002d50 <TIM_OC3_SetConfig+0x60>
 8002d20:	2500      	movs	r5, #0
 8002d22:	b175      	cbz	r5, 8002d42 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d28:	68cd      	ldr	r5, [r1, #12]
 8002d2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d32:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d36:	694d      	ldr	r5, [r1, #20]
 8002d38:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d3c:	698d      	ldr	r5, [r1, #24]
 8002d3e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d42:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d44:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d46:	684a      	ldr	r2, [r1, #4]
 8002d48:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4a:	6203      	str	r3, [r0, #32]
}
 8002d4c:	bc30      	pop	{r4, r5}
 8002d4e:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002d50:	2501      	movs	r5, #1
 8002d52:	e7e6      	b.n	8002d22 <TIM_OC3_SetConfig+0x32>
 8002d54:	2501      	movs	r5, #1
 8002d56:	e7e4      	b.n	8002d22 <TIM_OC3_SetConfig+0x32>
 8002d58:	40010000 	.word	0x40010000

08002d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d5c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d5e:	6a03      	ldr	r3, [r0, #32]
 8002d60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d64:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d66:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002d68:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d6a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d6c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d70:	680d      	ldr	r5, [r1, #0]
 8002d72:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d7a:	688d      	ldr	r5, [r1, #8]
 8002d7c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002d80:	4d0c      	ldr	r5, [pc, #48]	; (8002db4 <TIM_OC4_SetConfig+0x58>)
 8002d82:	42a8      	cmp	r0, r5
 8002d84:	d013      	beq.n	8002dae <TIM_OC4_SetConfig+0x52>
 8002d86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d8a:	42a8      	cmp	r0, r5
 8002d8c:	d00d      	beq.n	8002daa <TIM_OC4_SetConfig+0x4e>
 8002d8e:	2500      	movs	r5, #0
 8002d90:	b125      	cbz	r5, 8002d9c <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d92:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d96:	694d      	ldr	r5, [r1, #20]
 8002d98:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d9c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002d9e:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002da0:	684a      	ldr	r2, [r1, #4]
 8002da2:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da4:	6203      	str	r3, [r0, #32]
}
 8002da6:	bc30      	pop	{r4, r5}
 8002da8:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002daa:	2501      	movs	r5, #1
 8002dac:	e7f0      	b.n	8002d90 <TIM_OC4_SetConfig+0x34>
 8002dae:	2501      	movs	r5, #1
 8002db0:	e7ee      	b.n	8002d90 <TIM_OC4_SetConfig+0x34>
 8002db2:	bf00      	nop
 8002db4:	40010000 	.word	0x40010000

08002db8 <TIM_TI2_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002db8:	b430      	push	{r4, r5}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dba:	6a04      	ldr	r4, [r0, #32]
 8002dbc:	f024 0410 	bic.w	r4, r4, #16
 8002dc0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002dc4:	6a05      	ldr	r5, [r0, #32]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002dc6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002dca:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dce:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002dd2:	031b      	lsls	r3, r3, #12
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd8:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002ddc:	0109      	lsls	r1, r1, #4
 8002dde:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8002de2:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002de4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002de6:	6205      	str	r5, [r0, #32]
}
 8002de8:	bc30      	pop	{r4, r5}
 8002dea:	4770      	bx	lr

08002dec <TIM_TI3_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002dec:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dee:	6a04      	ldr	r4, [r0, #32]
 8002df0:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8002df4:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002df6:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8002df8:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002dfa:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8002dfe:	4322      	orrs	r2, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002e00:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002e0a:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002e0e:	0209      	lsls	r1, r1, #8
 8002e10:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8002e14:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e16:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8002e18:	6205      	str	r5, [r0, #32]
}
 8002e1a:	bc30      	pop	{r4, r5}
 8002e1c:	4770      	bx	lr

08002e1e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002e1e:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e20:	6a04      	ldr	r4, [r0, #32]
 8002e22:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002e26:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e28:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8002e2a:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e2c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e30:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e34:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e38:	031b      	lsls	r3, r3, #12
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002e3e:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002e42:	0309      	lsls	r1, r1, #12
 8002e44:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8002e48:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e4a:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8002e4c:	6205      	str	r5, [r0, #32]
}
 8002e4e:	bc30      	pop	{r4, r5}
 8002e50:	4770      	bx	lr

08002e52 <HAL_TIM_IC_MspInit>:
{
 8002e52:	4770      	bx	lr

08002e54 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002e54:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002e56:	4a45      	ldr	r2, [pc, #276]	; (8002f6c <TIM_Base_SetConfig+0x118>)
 8002e58:	4290      	cmp	r0, r2
 8002e5a:	d04a      	beq.n	8002ef2 <TIM_Base_SetConfig+0x9e>
 8002e5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e60:	d049      	beq.n	8002ef6 <TIM_Base_SetConfig+0xa2>
 8002e62:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002e66:	4290      	cmp	r0, r2
 8002e68:	d047      	beq.n	8002efa <TIM_Base_SetConfig+0xa6>
 8002e6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e6e:	4290      	cmp	r0, r2
 8002e70:	d045      	beq.n	8002efe <TIM_Base_SetConfig+0xaa>
 8002e72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e76:	4290      	cmp	r0, r2
 8002e78:	d043      	beq.n	8002f02 <TIM_Base_SetConfig+0xae>
 8002e7a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002e7e:	4290      	cmp	r0, r2
 8002e80:	d035      	beq.n	8002eee <TIM_Base_SetConfig+0x9a>
 8002e82:	2200      	movs	r2, #0
 8002e84:	b11a      	cbz	r2, 8002e8e <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e8a:	684a      	ldr	r2, [r1, #4]
 8002e8c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002e8e:	4a37      	ldr	r2, [pc, #220]	; (8002f6c <TIM_Base_SetConfig+0x118>)
 8002e90:	4290      	cmp	r0, r2
 8002e92:	d03a      	beq.n	8002f0a <TIM_Base_SetConfig+0xb6>
 8002e94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e98:	d050      	beq.n	8002f3c <TIM_Base_SetConfig+0xe8>
 8002e9a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002e9e:	4290      	cmp	r0, r2
 8002ea0:	d04e      	beq.n	8002f40 <TIM_Base_SetConfig+0xec>
 8002ea2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ea6:	4290      	cmp	r0, r2
 8002ea8:	d04c      	beq.n	8002f44 <TIM_Base_SetConfig+0xf0>
 8002eaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002eae:	4290      	cmp	r0, r2
 8002eb0:	d04a      	beq.n	8002f48 <TIM_Base_SetConfig+0xf4>
 8002eb2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002eb6:	4290      	cmp	r0, r2
 8002eb8:	d048      	beq.n	8002f4c <TIM_Base_SetConfig+0xf8>
 8002eba:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002ebe:	4290      	cmp	r0, r2
 8002ec0:	d046      	beq.n	8002f50 <TIM_Base_SetConfig+0xfc>
 8002ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ec6:	4290      	cmp	r0, r2
 8002ec8:	d044      	beq.n	8002f54 <TIM_Base_SetConfig+0x100>
 8002eca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ece:	4290      	cmp	r0, r2
 8002ed0:	d042      	beq.n	8002f58 <TIM_Base_SetConfig+0x104>
 8002ed2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002ed6:	4290      	cmp	r0, r2
 8002ed8:	d040      	beq.n	8002f5c <TIM_Base_SetConfig+0x108>
 8002eda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ede:	4290      	cmp	r0, r2
 8002ee0:	d03e      	beq.n	8002f60 <TIM_Base_SetConfig+0x10c>
 8002ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ee6:	4290      	cmp	r0, r2
 8002ee8:	d00d      	beq.n	8002f06 <TIM_Base_SetConfig+0xb2>
 8002eea:	2200      	movs	r2, #0
 8002eec:	e00e      	b.n	8002f0c <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002eee:	2201      	movs	r2, #1
 8002ef0:	e7c8      	b.n	8002e84 <TIM_Base_SetConfig+0x30>
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	e7c6      	b.n	8002e84 <TIM_Base_SetConfig+0x30>
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	e7c4      	b.n	8002e84 <TIM_Base_SetConfig+0x30>
 8002efa:	2201      	movs	r2, #1
 8002efc:	e7c2      	b.n	8002e84 <TIM_Base_SetConfig+0x30>
 8002efe:	2201      	movs	r2, #1
 8002f00:	e7c0      	b.n	8002e84 <TIM_Base_SetConfig+0x30>
 8002f02:	2201      	movs	r2, #1
 8002f04:	e7be      	b.n	8002e84 <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002f06:	2201      	movs	r2, #1
 8002f08:	e000      	b.n	8002f0c <TIM_Base_SetConfig+0xb8>
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	b11a      	cbz	r2, 8002f16 <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f12:	68ca      	ldr	r2, [r1, #12]
 8002f14:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002f16:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f18:	688b      	ldr	r3, [r1, #8]
 8002f1a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002f1c:	680b      	ldr	r3, [r1, #0]
 8002f1e:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <TIM_Base_SetConfig+0x118>)
 8002f22:	4298      	cmp	r0, r3
 8002f24:	d020      	beq.n	8002f68 <TIM_Base_SetConfig+0x114>
 8002f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f2a:	4298      	cmp	r0, r3
 8002f2c:	d01a      	beq.n	8002f64 <TIM_Base_SetConfig+0x110>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	b10b      	cbz	r3, 8002f36 <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 8002f32:	690b      	ldr	r3, [r1, #16]
 8002f34:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002f36:	2301      	movs	r3, #1
 8002f38:	6143      	str	r3, [r0, #20]
 8002f3a:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	e7e5      	b.n	8002f0c <TIM_Base_SetConfig+0xb8>
 8002f40:	2201      	movs	r2, #1
 8002f42:	e7e3      	b.n	8002f0c <TIM_Base_SetConfig+0xb8>
 8002f44:	2201      	movs	r2, #1
 8002f46:	e7e1      	b.n	8002f0c <TIM_Base_SetConfig+0xb8>
 8002f48:	2201      	movs	r2, #1
 8002f4a:	e7df      	b.n	8002f0c <TIM_Base_SetConfig+0xb8>
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	e7dd      	b.n	8002f0c <TIM_Base_SetConfig+0xb8>
 8002f50:	2201      	movs	r2, #1
 8002f52:	e7db      	b.n	8002f0c <TIM_Base_SetConfig+0xb8>
 8002f54:	2201      	movs	r2, #1
 8002f56:	e7d9      	b.n	8002f0c <TIM_Base_SetConfig+0xb8>
 8002f58:	2201      	movs	r2, #1
 8002f5a:	e7d7      	b.n	8002f0c <TIM_Base_SetConfig+0xb8>
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	e7d5      	b.n	8002f0c <TIM_Base_SetConfig+0xb8>
 8002f60:	2201      	movs	r2, #1
 8002f62:	e7d3      	b.n	8002f0c <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002f64:	2301      	movs	r3, #1
 8002f66:	e7e3      	b.n	8002f30 <TIM_Base_SetConfig+0xdc>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e7e1      	b.n	8002f30 <TIM_Base_SetConfig+0xdc>
 8002f6c:	40010000 	.word	0x40010000

08002f70 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8002f70:	b1a8      	cbz	r0, 8002f9e <HAL_TIM_PWM_Init+0x2e>
{
 8002f72:	b510      	push	{r4, lr}
 8002f74:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002f76:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f7a:	b15b      	cbz	r3, 8002f94 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002f82:	1d21      	adds	r1, r4, #4
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	f7ff ff65 	bl	8002e54 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002f90:	2000      	movs	r0, #0
 8002f92:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002f94:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002f98:	f001 f87e 	bl	8004098 <HAL_TIM_PWM_MspInit>
 8002f9c:	e7ee      	b.n	8002f7c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_TIM_IC_Init>:
  if(htim == NULL)
 8002fa2:	b1a8      	cbz	r0, 8002fd0 <HAL_TIM_IC_Init+0x2e>
{
 8002fa4:	b510      	push	{r4, lr}
 8002fa6:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002fa8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002fac:	b15b      	cbz	r3, 8002fc6 <HAL_TIM_IC_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;   
 8002fae:	2302      	movs	r3, #2
 8002fb0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002fb4:	1d21      	adds	r1, r4, #4
 8002fb6:	6820      	ldr	r0, [r4, #0]
 8002fb8:	f7ff ff4c 	bl	8002e54 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002fc6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8002fca:	f7ff ff42 	bl	8002e52 <HAL_TIM_IC_MspInit>
 8002fce:	e7ee      	b.n	8002fae <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIM_Encoder_Init>:
  if(htim == NULL)
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d047      	beq.n	8003068 <HAL_TIM_Encoder_Init+0x94>
{
 8002fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fda:	4605      	mov	r5, r0
 8002fdc:	460c      	mov	r4, r1
  if(htim->State == HAL_TIM_STATE_RESET)
 8002fde:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d03b      	beq.n	800305e <HAL_TIM_Encoder_Init+0x8a>
  htim->State= HAL_TIM_STATE_BUSY;   
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002fec:	4629      	mov	r1, r5
 8002fee:	f851 2b04 	ldr.w	r2, [r1], #4
 8002ff2:	6893      	ldr	r3, [r2, #8]
 8002ff4:	f023 0307 	bic.w	r3, r3, #7
 8002ff8:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8002ffa:	6828      	ldr	r0, [r5, #0]
 8002ffc:	f7ff ff2a 	bl	8002e54 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003000:	6828      	ldr	r0, [r5, #0]
 8003002:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8003004:	6983      	ldr	r3, [r0, #24]
  tmpccer = htim->Instance->CCER;
 8003006:	6a02      	ldr	r2, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003008:	6821      	ldr	r1, [r4, #0]
 800300a:	430e      	orrs	r6, r1
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800300c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003010:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003014:	68a1      	ldr	r1, [r4, #8]
 8003016:	69a7      	ldr	r7, [r4, #24]
 8003018:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800301c:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800301e:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8003022:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003026:	68e1      	ldr	r1, [r4, #12]
 8003028:	69e7      	ldr	r7, [r4, #28]
 800302a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800302e:	430b      	orrs	r3, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003030:	6927      	ldr	r7, [r4, #16]
 8003032:	6a21      	ldr	r1, [r4, #32]
 8003034:	0309      	lsls	r1, r1, #12
 8003036:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 800303a:	430b      	orrs	r3, r1
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800303c:	f022 02aa 	bic.w	r2, r2, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003040:	6861      	ldr	r1, [r4, #4]
 8003042:	6964      	ldr	r4, [r4, #20]
 8003044:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 8003048:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800304a:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800304c:	6829      	ldr	r1, [r5, #0]
 800304e:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	621a      	str	r2, [r3, #32]
  htim->State= HAL_TIM_STATE_READY;
 8003054:	2301      	movs	r3, #1
 8003056:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 800305a:	2000      	movs	r0, #0
 800305c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800305e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 8003062:	f001 f84f 	bl	8004104 <HAL_TIM_Encoder_MspInit>
 8003066:	e7be      	b.n	8002fe6 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8003068:	2001      	movs	r0, #1
 800306a:	4770      	bx	lr

0800306c <TIM_TI1_SetConfig>:
{
 800306c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306e:	6a04      	ldr	r4, [r0, #32]
 8003070:	f024 0401 	bic.w	r4, r4, #1
 8003074:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003076:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003078:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800307a:	4e23      	ldr	r6, [pc, #140]	; (8003108 <TIM_TI1_SetConfig+0x9c>)
 800307c:	42b0      	cmp	r0, r6
 800307e:	d030      	beq.n	80030e2 <TIM_TI1_SetConfig+0x76>
 8003080:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003084:	d02f      	beq.n	80030e6 <TIM_TI1_SetConfig+0x7a>
 8003086:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800308a:	42b0      	cmp	r0, r6
 800308c:	d02d      	beq.n	80030ea <TIM_TI1_SetConfig+0x7e>
 800308e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003092:	42b0      	cmp	r0, r6
 8003094:	d02b      	beq.n	80030ee <TIM_TI1_SetConfig+0x82>
 8003096:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800309a:	42b0      	cmp	r0, r6
 800309c:	d029      	beq.n	80030f2 <TIM_TI1_SetConfig+0x86>
 800309e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80030a2:	42b0      	cmp	r0, r6
 80030a4:	d027      	beq.n	80030f6 <TIM_TI1_SetConfig+0x8a>
 80030a6:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80030aa:	42b0      	cmp	r0, r6
 80030ac:	d025      	beq.n	80030fa <TIM_TI1_SetConfig+0x8e>
 80030ae:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80030b2:	42b0      	cmp	r0, r6
 80030b4:	d013      	beq.n	80030de <TIM_TI1_SetConfig+0x72>
 80030b6:	2600      	movs	r6, #0
 80030b8:	bb0e      	cbnz	r6, 80030fe <TIM_TI1_SetConfig+0x92>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80030ba:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80030be:	f042 0201 	orr.w	r2, r2, #1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030cc:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80030d0:	f001 010a 	and.w	r1, r1, #10
 80030d4:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 80030d6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80030d8:	6201      	str	r1, [r0, #32]
}
 80030da:	bc70      	pop	{r4, r5, r6}
 80030dc:	4770      	bx	lr
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80030de:	2601      	movs	r6, #1
 80030e0:	e7ea      	b.n	80030b8 <TIM_TI1_SetConfig+0x4c>
 80030e2:	2601      	movs	r6, #1
 80030e4:	e7e8      	b.n	80030b8 <TIM_TI1_SetConfig+0x4c>
 80030e6:	2601      	movs	r6, #1
 80030e8:	e7e6      	b.n	80030b8 <TIM_TI1_SetConfig+0x4c>
 80030ea:	2601      	movs	r6, #1
 80030ec:	e7e4      	b.n	80030b8 <TIM_TI1_SetConfig+0x4c>
 80030ee:	2601      	movs	r6, #1
 80030f0:	e7e2      	b.n	80030b8 <TIM_TI1_SetConfig+0x4c>
 80030f2:	2601      	movs	r6, #1
 80030f4:	e7e0      	b.n	80030b8 <TIM_TI1_SetConfig+0x4c>
 80030f6:	2601      	movs	r6, #1
 80030f8:	e7de      	b.n	80030b8 <TIM_TI1_SetConfig+0x4c>
 80030fa:	2601      	movs	r6, #1
 80030fc:	e7dc      	b.n	80030b8 <TIM_TI1_SetConfig+0x4c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80030fe:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003102:	4322      	orrs	r2, r4
 8003104:	e7dd      	b.n	80030c2 <TIM_TI1_SetConfig+0x56>
 8003106:	bf00      	nop
 8003108:	40010000 	.word	0x40010000

0800310c <HAL_TIM_IC_ConfigChannel>:
{
 800310c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800310e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003112:	2b01      	cmp	r3, #1
 8003114:	d058      	beq.n	80031c8 <HAL_TIM_IC_ConfigChannel+0xbc>
 8003116:	460d      	mov	r5, r1
 8003118:	4604      	mov	r4, r0
 800311a:	2301      	movs	r3, #1
 800311c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	2302      	movs	r3, #2
 8003122:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8003126:	b1da      	cbz	r2, 8003160 <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 8003128:	2a04      	cmp	r2, #4
 800312a:	d02a      	beq.n	8003182 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 800312c:	2a08      	cmp	r2, #8
 800312e:	d03a      	beq.n	80031a6 <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance, 
 8003130:	68cb      	ldr	r3, [r1, #12]
 8003132:	684a      	ldr	r2, [r1, #4]
 8003134:	6809      	ldr	r1, [r1, #0]
 8003136:	6800      	ldr	r0, [r0, #0]
 8003138:	f7ff fe71 	bl	8002e1e <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800313c:	6822      	ldr	r2, [r4, #0]
 800313e:	69d3      	ldr	r3, [r2, #28]
 8003140:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003144:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003146:	6822      	ldr	r2, [r4, #0]
 8003148:	69d3      	ldr	r3, [r2, #28]
 800314a:	68a9      	ldr	r1, [r5, #8]
 800314c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003150:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8003152:	2301      	movs	r3, #1
 8003154:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003158:	2000      	movs	r0, #0
 800315a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK; 
 800315e:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8003160:	68cb      	ldr	r3, [r1, #12]
 8003162:	684a      	ldr	r2, [r1, #4]
 8003164:	6809      	ldr	r1, [r1, #0]
 8003166:	6800      	ldr	r0, [r0, #0]
 8003168:	f7ff ff80 	bl	800306c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800316c:	6822      	ldr	r2, [r4, #0]
 800316e:	6993      	ldr	r3, [r2, #24]
 8003170:	f023 030c 	bic.w	r3, r3, #12
 8003174:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003176:	6822      	ldr	r2, [r4, #0]
 8003178:	6993      	ldr	r3, [r2, #24]
 800317a:	68a9      	ldr	r1, [r5, #8]
 800317c:	430b      	orrs	r3, r1
 800317e:	6193      	str	r3, [r2, #24]
 8003180:	e7e7      	b.n	8003152 <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance, 
 8003182:	68cb      	ldr	r3, [r1, #12]
 8003184:	684a      	ldr	r2, [r1, #4]
 8003186:	6809      	ldr	r1, [r1, #0]
 8003188:	6800      	ldr	r0, [r0, #0]
 800318a:	f7ff fe15 	bl	8002db8 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	6993      	ldr	r3, [r2, #24]
 8003192:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003196:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003198:	6822      	ldr	r2, [r4, #0]
 800319a:	6993      	ldr	r3, [r2, #24]
 800319c:	68a9      	ldr	r1, [r5, #8]
 800319e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80031a2:	6193      	str	r3, [r2, #24]
 80031a4:	e7d5      	b.n	8003152 <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,  
 80031a6:	68cb      	ldr	r3, [r1, #12]
 80031a8:	684a      	ldr	r2, [r1, #4]
 80031aa:	6809      	ldr	r1, [r1, #0]
 80031ac:	6800      	ldr	r0, [r0, #0]
 80031ae:	f7ff fe1d 	bl	8002dec <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031b2:	6822      	ldr	r2, [r4, #0]
 80031b4:	69d3      	ldr	r3, [r2, #28]
 80031b6:	f023 030c 	bic.w	r3, r3, #12
 80031ba:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031bc:	6822      	ldr	r2, [r4, #0]
 80031be:	69d3      	ldr	r3, [r2, #28]
 80031c0:	68a9      	ldr	r1, [r5, #8]
 80031c2:	430b      	orrs	r3, r1
 80031c4:	61d3      	str	r3, [r2, #28]
 80031c6:	e7c4      	b.n	8003152 <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 80031c8:	2002      	movs	r0, #2
}
 80031ca:	bd38      	pop	{r3, r4, r5, pc}

080031cc <TIM_OC2_SetConfig>:
{
 80031cc:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ce:	6a03      	ldr	r3, [r0, #32]
 80031d0:	f023 0310 	bic.w	r3, r3, #16
 80031d4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80031d6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80031d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80031da:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031dc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e0:	680d      	ldr	r5, [r1, #0]
 80031e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80031e6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031ea:	688d      	ldr	r5, [r1, #8]
 80031ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80031f0:	4d11      	ldr	r5, [pc, #68]	; (8003238 <TIM_OC2_SetConfig+0x6c>)
 80031f2:	42a8      	cmp	r0, r5
 80031f4:	d01d      	beq.n	8003232 <TIM_OC2_SetConfig+0x66>
 80031f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031fa:	42a8      	cmp	r0, r5
 80031fc:	d017      	beq.n	800322e <TIM_OC2_SetConfig+0x62>
 80031fe:	2500      	movs	r5, #0
 8003200:	b175      	cbz	r5, 8003220 <TIM_OC2_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003206:	68cd      	ldr	r5, [r1, #12]
 8003208:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800320c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003210:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003214:	694d      	ldr	r5, [r1, #20]
 8003216:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800321a:	698d      	ldr	r5, [r1, #24]
 800321c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003220:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003222:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003224:	684a      	ldr	r2, [r1, #4]
 8003226:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003228:	6203      	str	r3, [r0, #32]
}
 800322a:	bc30      	pop	{r4, r5}
 800322c:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800322e:	2501      	movs	r5, #1
 8003230:	e7e6      	b.n	8003200 <TIM_OC2_SetConfig+0x34>
 8003232:	2501      	movs	r5, #1
 8003234:	e7e4      	b.n	8003200 <TIM_OC2_SetConfig+0x34>
 8003236:	bf00      	nop
 8003238:	40010000 	.word	0x40010000

0800323c <HAL_TIM_PWM_ConfigChannel>:
{
 800323c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800323e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003242:	2b01      	cmp	r3, #1
 8003244:	d066      	beq.n	8003314 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003246:	460d      	mov	r5, r1
 8003248:	4604      	mov	r4, r0
 800324a:	2301      	movs	r3, #1
 800324c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	2302      	movs	r3, #2
 8003252:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 8003256:	2a0c      	cmp	r2, #12
 8003258:	d81a      	bhi.n	8003290 <HAL_TIM_PWM_ConfigChannel+0x54>
 800325a:	e8df f002 	tbb	[pc, r2]
 800325e:	1907      	.short	0x1907
 8003260:	19201919 	.word	0x19201919
 8003264:	19341919 	.word	0x19341919
 8003268:	1919      	.short	0x1919
 800326a:	47          	.byte	0x47
 800326b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800326c:	6800      	ldr	r0, [r0, #0]
 800326e:	f7ff fd0d 	bl	8002c8c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	6993      	ldr	r3, [r2, #24]
 8003276:	f043 0308 	orr.w	r3, r3, #8
 800327a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800327c:	6822      	ldr	r2, [r4, #0]
 800327e:	6993      	ldr	r3, [r2, #24]
 8003280:	f023 0304 	bic.w	r3, r3, #4
 8003284:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	6993      	ldr	r3, [r2, #24]
 800328a:	6929      	ldr	r1, [r5, #16]
 800328c:	430b      	orrs	r3, r1
 800328e:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003290:	2301      	movs	r3, #1
 8003292:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003296:	2000      	movs	r0, #0
 8003298:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 800329c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800329e:	6800      	ldr	r0, [r0, #0]
 80032a0:	f7ff ff94 	bl	80031cc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032a4:	6822      	ldr	r2, [r4, #0]
 80032a6:	6993      	ldr	r3, [r2, #24]
 80032a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032ac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032ae:	6822      	ldr	r2, [r4, #0]
 80032b0:	6993      	ldr	r3, [r2, #24]
 80032b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032b6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	6993      	ldr	r3, [r2, #24]
 80032bc:	6929      	ldr	r1, [r5, #16]
 80032be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032c2:	6193      	str	r3, [r2, #24]
    break;
 80032c4:	e7e4      	b.n	8003290 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032c6:	6800      	ldr	r0, [r0, #0]
 80032c8:	f7ff fd12 	bl	8002cf0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032cc:	6822      	ldr	r2, [r4, #0]
 80032ce:	69d3      	ldr	r3, [r2, #28]
 80032d0:	f043 0308 	orr.w	r3, r3, #8
 80032d4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032d6:	6822      	ldr	r2, [r4, #0]
 80032d8:	69d3      	ldr	r3, [r2, #28]
 80032da:	f023 0304 	bic.w	r3, r3, #4
 80032de:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80032e0:	6822      	ldr	r2, [r4, #0]
 80032e2:	69d3      	ldr	r3, [r2, #28]
 80032e4:	6929      	ldr	r1, [r5, #16]
 80032e6:	430b      	orrs	r3, r1
 80032e8:	61d3      	str	r3, [r2, #28]
    break;
 80032ea:	e7d1      	b.n	8003290 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ec:	6800      	ldr	r0, [r0, #0]
 80032ee:	f7ff fd35 	bl	8002d5c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	69d3      	ldr	r3, [r2, #28]
 80032f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032fa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	69d3      	ldr	r3, [r2, #28]
 8003300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003304:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	69d3      	ldr	r3, [r2, #28]
 800330a:	6929      	ldr	r1, [r5, #16]
 800330c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003310:	61d3      	str	r3, [r2, #28]
    break;
 8003312:	e7bd      	b.n	8003290 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8003314:	2002      	movs	r0, #2
}
 8003316:	bd38      	pop	{r3, r4, r5, pc}

08003318 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8003318:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800331c:	2b01      	cmp	r3, #1
 800331e:	d022      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 8003320:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003322:	2201      	movs	r2, #1
 8003324:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	2302      	movs	r3, #2
 800332a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800332e:	6804      	ldr	r4, [r0, #0]
 8003330:	6863      	ldr	r3, [r4, #4]
 8003332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003336:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8003338:	6804      	ldr	r4, [r0, #0]
 800333a:	6863      	ldr	r3, [r4, #4]
 800333c:	680d      	ldr	r5, [r1, #0]
 800333e:	432b      	orrs	r3, r5
 8003340:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003342:	6804      	ldr	r4, [r0, #0]
 8003344:	68a3      	ldr	r3, [r4, #8]
 8003346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800334a:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800334c:	6804      	ldr	r4, [r0, #0]
 800334e:	68a3      	ldr	r3, [r4, #8]
 8003350:	6849      	ldr	r1, [r1, #4]
 8003352:	430b      	orrs	r3, r1
 8003354:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003356:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800335a:	2300      	movs	r3, #0
 800335c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8003360:	4618      	mov	r0, r3
} 
 8003362:	bc30      	pop	{r4, r5}
 8003364:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003366:	2002      	movs	r0, #2
 8003368:	4770      	bx	lr

0800336a <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800336a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800336e:	2b01      	cmp	r3, #1
 8003370:	d025      	beq.n	80033be <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8003372:	2301      	movs	r3, #1
 8003374:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003378:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800337a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337e:	688a      	ldr	r2, [r1, #8]
 8003380:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003386:	684a      	ldr	r2, [r1, #4]
 8003388:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800338a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800338e:	680a      	ldr	r2, [r1, #0]
 8003390:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003396:	690a      	ldr	r2, [r1, #16]
 8003398:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800339a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800339e:	694a      	ldr	r2, [r1, #20]
 80033a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033a6:	698a      	ldr	r2, [r1, #24]
 80033a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033ae:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033b0:	6802      	ldr	r2, [r0, #0]
 80033b2:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80033b4:	2300      	movs	r3, #0
 80033b6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80033ba:	4618      	mov	r0, r3
 80033bc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80033be:	2002      	movs	r0, #2
}
 80033c0:	4770      	bx	lr

080033c2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c2:	6802      	ldr	r2, [r0, #0]
 80033c4:	68d3      	ldr	r3, [r2, #12]
 80033c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033ca:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033cc:	6802      	ldr	r2, [r0, #0]
 80033ce:	6953      	ldr	r3, [r2, #20]
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033d6:	2320      	movs	r3, #32
 80033d8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80033dc:	4770      	bx	lr

080033de <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80033de:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b21      	cmp	r3, #33	; 0x21
 80033e6:	d001      	beq.n	80033ec <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2002      	movs	r0, #2
 80033ea:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033ec:	6883      	ldr	r3, [r0, #8]
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f2:	d017      	beq.n	8003424 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033f4:	6802      	ldr	r2, [r0, #0]
 80033f6:	6a03      	ldr	r3, [r0, #32]
 80033f8:	1c59      	adds	r1, r3, #1
 80033fa:	6201      	str	r1, [r0, #32]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 8003400:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29b      	uxth	r3, r3
 8003408:	84c3      	strh	r3, [r0, #38]	; 0x26
 800340a:	b9db      	cbnz	r3, 8003444 <UART_Transmit_IT+0x66>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800340c:	6802      	ldr	r2, [r0, #0]
 800340e:	68d3      	ldr	r3, [r2, #12]
 8003410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003414:	60d3      	str	r3, [r2, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003416:	6802      	ldr	r2, [r0, #0]
 8003418:	68d3      	ldr	r3, [r2, #12]
 800341a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341e:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8003420:	2000      	movs	r0, #0
 8003422:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8003424:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003426:	6802      	ldr	r2, [r0, #0]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342e:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003430:	6903      	ldr	r3, [r0, #16]
 8003432:	b91b      	cbnz	r3, 800343c <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8003434:	6a03      	ldr	r3, [r0, #32]
 8003436:	3302      	adds	r3, #2
 8003438:	6203      	str	r3, [r0, #32]
 800343a:	e7e1      	b.n	8003400 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 800343c:	6a03      	ldr	r3, [r0, #32]
 800343e:	3301      	adds	r3, #1
 8003440:	6203      	str	r3, [r0, #32]
 8003442:	e7dd      	b.n	8003400 <UART_Transmit_IT+0x22>
    return HAL_OK;
 8003444:	2000      	movs	r0, #0
  }
}
 8003446:	4770      	bx	lr

08003448 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800344c:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800344e:	6802      	ldr	r2, [r0, #0]
 8003450:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003452:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003456:	68c1      	ldr	r1, [r0, #12]
 8003458:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800345a:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800345c:	6801      	ldr	r1, [r0, #0]
 800345e:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003460:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003464:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003468:	6882      	ldr	r2, [r0, #8]
 800346a:	6900      	ldr	r0, [r0, #16]
 800346c:	4302      	orrs	r2, r0
 800346e:	6960      	ldr	r0, [r4, #20]
 8003470:	4302      	orrs	r2, r0
 8003472:	69e0      	ldr	r0, [r4, #28]
 8003474:	4302      	orrs	r2, r0
 8003476:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003478:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800347a:	6822      	ldr	r2, [r4, #0]
 800347c:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800347e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003482:	69a1      	ldr	r1, [r4, #24]
 8003484:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003486:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003488:	69e3      	ldr	r3, [r4, #28]
 800348a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800348e:	d062      	beq.n	8003556 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003490:	f8d4 8000 	ldr.w	r8, [r4]
 8003494:	4bbb      	ldr	r3, [pc, #748]	; (8003784 <UART_SetConfig+0x33c>)
 8003496:	4598      	cmp	r8, r3
 8003498:	f000 811b 	beq.w	80036d2 <UART_SetConfig+0x28a>
 800349c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034a0:	4598      	cmp	r8, r3
 80034a2:	f000 8116 	beq.w	80036d2 <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034a6:	f7ff f92f 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 80034aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034b2:	6865      	ldr	r5, [r4, #4]
 80034b4:	00ad      	lsls	r5, r5, #2
 80034b6:	fbb0 f5f5 	udiv	r5, r0, r5
 80034ba:	4fb3      	ldr	r7, [pc, #716]	; (8003788 <UART_SetConfig+0x340>)
 80034bc:	fba7 3505 	umull	r3, r5, r7, r5
 80034c0:	096d      	lsrs	r5, r5, #5
 80034c2:	012e      	lsls	r6, r5, #4
 80034c4:	f7ff f920 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 80034c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034d0:	6865      	ldr	r5, [r4, #4]
 80034d2:	00ad      	lsls	r5, r5, #2
 80034d4:	fbb0 faf5 	udiv	sl, r0, r5
 80034d8:	f7ff f916 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 80034dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034e4:	6865      	ldr	r5, [r4, #4]
 80034e6:	00ad      	lsls	r5, r5, #2
 80034e8:	fbb0 f5f5 	udiv	r5, r0, r5
 80034ec:	fba7 3505 	umull	r3, r5, r7, r5
 80034f0:	096d      	lsrs	r5, r5, #5
 80034f2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80034f6:	fb09 a515 	mls	r5, r9, r5, sl
 80034fa:	012d      	lsls	r5, r5, #4
 80034fc:	3532      	adds	r5, #50	; 0x32
 80034fe:	fba7 3505 	umull	r3, r5, r7, r5
 8003502:	096d      	lsrs	r5, r5, #5
 8003504:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8003508:	4435      	add	r5, r6
 800350a:	f7ff f8fd 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 800350e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003512:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003516:	6866      	ldr	r6, [r4, #4]
 8003518:	00b6      	lsls	r6, r6, #2
 800351a:	fbb0 f6f6 	udiv	r6, r0, r6
 800351e:	f7ff f8f3 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8003522:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003526:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800352a:	6863      	ldr	r3, [r4, #4]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003532:	fba7 3000 	umull	r3, r0, r7, r0
 8003536:	0940      	lsrs	r0, r0, #5
 8003538:	fb09 6910 	mls	r9, r9, r0, r6
 800353c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8003540:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8003544:	fba7 3709 	umull	r3, r7, r7, r9
 8003548:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800354c:	442f      	add	r7, r5
 800354e:	f8c8 7008 	str.w	r7, [r8, #8]
 8003552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003556:	f8d4 8000 	ldr.w	r8, [r4]
 800355a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800355e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8003562:	4598      	cmp	r8, r3
 8003564:	d05c      	beq.n	8003620 <UART_SetConfig+0x1d8>
 8003566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800356a:	4598      	cmp	r8, r3
 800356c:	d058      	beq.n	8003620 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800356e:	f7ff f8cb 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8003572:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003576:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800357a:	6865      	ldr	r5, [r4, #4]
 800357c:	006d      	lsls	r5, r5, #1
 800357e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003582:	4f81      	ldr	r7, [pc, #516]	; (8003788 <UART_SetConfig+0x340>)
 8003584:	fba7 3505 	umull	r3, r5, r7, r5
 8003588:	096d      	lsrs	r5, r5, #5
 800358a:	012e      	lsls	r6, r5, #4
 800358c:	f7ff f8bc 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8003590:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003594:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003598:	6865      	ldr	r5, [r4, #4]
 800359a:	006d      	lsls	r5, r5, #1
 800359c:	fbb0 faf5 	udiv	sl, r0, r5
 80035a0:	f7ff f8b2 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 80035a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035ac:	6865      	ldr	r5, [r4, #4]
 80035ae:	006d      	lsls	r5, r5, #1
 80035b0:	fbb0 f5f5 	udiv	r5, r0, r5
 80035b4:	fba7 3505 	umull	r3, r5, r7, r5
 80035b8:	096d      	lsrs	r5, r5, #5
 80035ba:	f04f 0964 	mov.w	r9, #100	; 0x64
 80035be:	fb09 a515 	mls	r5, r9, r5, sl
 80035c2:	00ed      	lsls	r5, r5, #3
 80035c4:	3532      	adds	r5, #50	; 0x32
 80035c6:	fba7 3505 	umull	r3, r5, r7, r5
 80035ca:	096d      	lsrs	r5, r5, #5
 80035cc:	006d      	lsls	r5, r5, #1
 80035ce:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80035d2:	4435      	add	r5, r6
 80035d4:	f7ff f898 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 80035d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035e0:	6866      	ldr	r6, [r4, #4]
 80035e2:	0076      	lsls	r6, r6, #1
 80035e4:	fbb0 f6f6 	udiv	r6, r0, r6
 80035e8:	f7ff f88e 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 80035ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035f4:	6863      	ldr	r3, [r4, #4]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035fc:	fba7 2303 	umull	r2, r3, r7, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	fb09 6913 	mls	r9, r9, r3, r6
 8003606:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800360a:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800360e:	fba7 3709 	umull	r3, r7, r7, r9
 8003612:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8003616:	442f      	add	r7, r5
 8003618:	f8c8 7008 	str.w	r7, [r8, #8]
 800361c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003620:	f7ff f882 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8003624:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003628:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800362c:	6865      	ldr	r5, [r4, #4]
 800362e:	006d      	lsls	r5, r5, #1
 8003630:	fbb0 f5f5 	udiv	r5, r0, r5
 8003634:	4f54      	ldr	r7, [pc, #336]	; (8003788 <UART_SetConfig+0x340>)
 8003636:	fba7 3505 	umull	r3, r5, r7, r5
 800363a:	096d      	lsrs	r5, r5, #5
 800363c:	012e      	lsls	r6, r5, #4
 800363e:	f7ff f873 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8003642:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003646:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800364a:	6865      	ldr	r5, [r4, #4]
 800364c:	006d      	lsls	r5, r5, #1
 800364e:	fbb0 faf5 	udiv	sl, r0, r5
 8003652:	f7ff f869 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8003656:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800365a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800365e:	6865      	ldr	r5, [r4, #4]
 8003660:	006d      	lsls	r5, r5, #1
 8003662:	fbb0 f5f5 	udiv	r5, r0, r5
 8003666:	fba7 3505 	umull	r3, r5, r7, r5
 800366a:	096d      	lsrs	r5, r5, #5
 800366c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003670:	fb09 a515 	mls	r5, r9, r5, sl
 8003674:	00ed      	lsls	r5, r5, #3
 8003676:	3532      	adds	r5, #50	; 0x32
 8003678:	fba7 3505 	umull	r3, r5, r7, r5
 800367c:	096d      	lsrs	r5, r5, #5
 800367e:	006d      	lsls	r5, r5, #1
 8003680:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8003684:	4435      	add	r5, r6
 8003686:	f7ff f84f 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 800368a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800368e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003692:	6866      	ldr	r6, [r4, #4]
 8003694:	0076      	lsls	r6, r6, #1
 8003696:	fbb0 f6f6 	udiv	r6, r0, r6
 800369a:	f7ff f845 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 800369e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80036a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80036a6:	6863      	ldr	r3, [r4, #4]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ae:	fba7 2303 	umull	r2, r3, r7, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	fb09 6913 	mls	r9, r9, r3, r6
 80036b8:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80036bc:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80036c0:	fba7 3709 	umull	r3, r7, r7, r9
 80036c4:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80036c8:	442f      	add	r7, r5
 80036ca:	f8c8 7008 	str.w	r7, [r8, #8]
 80036ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80036d2:	f7ff f829 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 80036d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80036da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80036de:	6865      	ldr	r5, [r4, #4]
 80036e0:	00ad      	lsls	r5, r5, #2
 80036e2:	fbb0 f5f5 	udiv	r5, r0, r5
 80036e6:	4f28      	ldr	r7, [pc, #160]	; (8003788 <UART_SetConfig+0x340>)
 80036e8:	fba7 3505 	umull	r3, r5, r7, r5
 80036ec:	096d      	lsrs	r5, r5, #5
 80036ee:	012e      	lsls	r6, r5, #4
 80036f0:	f7ff f81a 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 80036f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80036f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80036fc:	6865      	ldr	r5, [r4, #4]
 80036fe:	00ad      	lsls	r5, r5, #2
 8003700:	fbb0 faf5 	udiv	sl, r0, r5
 8003704:	f7ff f810 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8003708:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800370c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003710:	6865      	ldr	r5, [r4, #4]
 8003712:	00ad      	lsls	r5, r5, #2
 8003714:	fbb0 f5f5 	udiv	r5, r0, r5
 8003718:	fba7 3505 	umull	r3, r5, r7, r5
 800371c:	096d      	lsrs	r5, r5, #5
 800371e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003722:	fb09 a515 	mls	r5, r9, r5, sl
 8003726:	012d      	lsls	r5, r5, #4
 8003728:	3532      	adds	r5, #50	; 0x32
 800372a:	fba7 3505 	umull	r3, r5, r7, r5
 800372e:	096d      	lsrs	r5, r5, #5
 8003730:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8003734:	4435      	add	r5, r6
 8003736:	f7fe fff7 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 800373a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800373e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003742:	6866      	ldr	r6, [r4, #4]
 8003744:	00b6      	lsls	r6, r6, #2
 8003746:	fbb0 f6f6 	udiv	r6, r0, r6
 800374a:	f7fe ffed 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 800374e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003752:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003756:	6863      	ldr	r3, [r4, #4]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	fbb0 f3f3 	udiv	r3, r0, r3
 800375e:	fba7 2303 	umull	r2, r3, r7, r3
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	fb09 6913 	mls	r9, r9, r3, r6
 8003768:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800376c:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8003770:	fba7 3709 	umull	r3, r7, r7, r9
 8003774:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8003778:	442f      	add	r7, r5
 800377a:	f8c8 7008 	str.w	r7, [r8, #8]
 800377e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003782:	bf00      	nop
 8003784:	40011000 	.word	0x40011000
 8003788:	51eb851f 	.word	0x51eb851f

0800378c <UART_WaitOnFlagUntilTimeout>:
{
 800378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003790:	4605      	mov	r5, r0
 8003792:	460f      	mov	r7, r1
 8003794:	4616      	mov	r6, r2
 8003796:	4698      	mov	r8, r3
 8003798:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800379a:	682b      	ldr	r3, [r5, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	ea37 0303 	bics.w	r3, r7, r3
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	42b3      	cmp	r3, r6
 80037aa:	d11e      	bne.n	80037ea <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80037ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 80037b0:	d0f3      	beq.n	800379a <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80037b2:	b12c      	cbz	r4, 80037c0 <UART_WaitOnFlagUntilTimeout+0x34>
 80037b4:	f7fd fbe8 	bl	8000f88 <HAL_GetTick>
 80037b8:	eba0 0008 	sub.w	r0, r0, r8
 80037bc:	4284      	cmp	r4, r0
 80037be:	d2ec      	bcs.n	800379a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c0:	682a      	ldr	r2, [r5, #0]
 80037c2:	68d3      	ldr	r3, [r2, #12]
 80037c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037c8:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	682a      	ldr	r2, [r5, #0]
 80037cc:	6953      	ldr	r3, [r2, #20]
 80037ce:	f023 0301 	bic.w	r3, r3, #1
 80037d2:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80037d4:	2320      	movs	r3, #32
 80037d6:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80037da:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80037de:	2300      	movs	r3, #0
 80037e0:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80037e4:	2003      	movs	r0, #3
 80037e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80037ea:	2000      	movs	r0, #0
}
 80037ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080037f0 <HAL_UART_Init>:
  if(huart == NULL)
 80037f0:	b358      	cbz	r0, 800384a <HAL_UART_Init+0x5a>
{
 80037f2:	b510      	push	{r4, lr}
 80037f4:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80037f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80037fa:	b30b      	cbz	r3, 8003840 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80037fc:	2324      	movs	r3, #36	; 0x24
 80037fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003802:	6822      	ldr	r2, [r4, #0]
 8003804:	68d3      	ldr	r3, [r2, #12]
 8003806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800380a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff fe1b 	bl	8003448 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003812:	6822      	ldr	r2, [r4, #0]
 8003814:	6913      	ldr	r3, [r2, #16]
 8003816:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800381a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381c:	6822      	ldr	r2, [r4, #0]
 800381e:	6953      	ldr	r3, [r2, #20]
 8003820:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003824:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003826:	6822      	ldr	r2, [r4, #0]
 8003828:	68d3      	ldr	r3, [r2, #12]
 800382a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800382e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003830:	2000      	movs	r0, #0
 8003832:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003834:	2320      	movs	r3, #32
 8003836:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800383a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800383e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003840:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003844:	f000 fcc0 	bl	80041c8 <HAL_UART_MspInit>
 8003848:	e7d8      	b.n	80037fc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800384a:	2001      	movs	r0, #1
 800384c:	4770      	bx	lr

0800384e <HAL_UART_Transmit>:
{
 800384e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8003856:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b20      	cmp	r3, #32
 800385e:	d004      	beq.n	800386a <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
}
 8003862:	4618      	mov	r0, r3
 8003864:	b002      	add	sp, #8
 8003866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800386a:	4604      	mov	r4, r0
 800386c:	460d      	mov	r5, r1
 800386e:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 8003870:	2900      	cmp	r1, #0
 8003872:	d055      	beq.n	8003920 <HAL_UART_Transmit+0xd2>
 8003874:	2a00      	cmp	r2, #0
 8003876:	d055      	beq.n	8003924 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 8003878:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_UART_Transmit+0x36>
 8003880:	2302      	movs	r3, #2
 8003882:	e7ee      	b.n	8003862 <HAL_UART_Transmit+0x14>
 8003884:	2301      	movs	r3, #1
 8003886:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388a:	2300      	movs	r3, #0
 800388c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800388e:	2321      	movs	r3, #33	; 0x21
 8003890:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003894:	f7fd fb78 	bl	8000f88 <HAL_GetTick>
 8003898:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800389a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800389e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80038a2:	e010      	b.n	80038c6 <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038a4:	9600      	str	r6, [sp, #0]
 80038a6:	463b      	mov	r3, r7
 80038a8:	2200      	movs	r2, #0
 80038aa:	2180      	movs	r1, #128	; 0x80
 80038ac:	4620      	mov	r0, r4
 80038ae:	f7ff ff6d 	bl	800378c <UART_WaitOnFlagUntilTimeout>
 80038b2:	2800      	cmp	r0, #0
 80038b4:	d138      	bne.n	8003928 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80038b6:	6822      	ldr	r2, [r4, #0]
 80038b8:	882b      	ldrh	r3, [r5, #0]
 80038ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038be:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80038c0:	6923      	ldr	r3, [r4, #16]
 80038c2:	b9cb      	cbnz	r3, 80038f8 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80038c4:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 80038c6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	b1bb      	cbz	r3, 80038fc <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 80038cc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038d6:	68a3      	ldr	r3, [r4, #8]
 80038d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038dc:	d0e2      	beq.n	80038a4 <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038de:	9600      	str	r6, [sp, #0]
 80038e0:	463b      	mov	r3, r7
 80038e2:	2200      	movs	r2, #0
 80038e4:	2180      	movs	r1, #128	; 0x80
 80038e6:	4620      	mov	r0, r4
 80038e8:	f7ff ff50 	bl	800378c <UART_WaitOnFlagUntilTimeout>
 80038ec:	b9f0      	cbnz	r0, 800392c <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	782a      	ldrb	r2, [r5, #0]
 80038f2:	605a      	str	r2, [r3, #4]
 80038f4:	3501      	adds	r5, #1
 80038f6:	e7e6      	b.n	80038c6 <HAL_UART_Transmit+0x78>
          pData +=1U;
 80038f8:	3501      	adds	r5, #1
 80038fa:	e7e4      	b.n	80038c6 <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038fc:	9600      	str	r6, [sp, #0]
 80038fe:	463b      	mov	r3, r7
 8003900:	2200      	movs	r2, #0
 8003902:	2140      	movs	r1, #64	; 0x40
 8003904:	4620      	mov	r0, r4
 8003906:	f7ff ff41 	bl	800378c <UART_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	b108      	cbz	r0, 8003912 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e7a7      	b.n	8003862 <HAL_UART_Transmit+0x14>
      huart->gState = HAL_UART_STATE_READY;
 8003912:	2220      	movs	r2, #32
 8003914:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8003918:	2200      	movs	r2, #0
 800391a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 800391e:	e7a0      	b.n	8003862 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e79e      	b.n	8003862 <HAL_UART_Transmit+0x14>
 8003924:	2301      	movs	r3, #1
 8003926:	e79c      	b.n	8003862 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e79a      	b.n	8003862 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e798      	b.n	8003862 <HAL_UART_Transmit+0x14>

08003930 <UART_EndTransmit_IT>:
{
 8003930:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003932:	6801      	ldr	r1, [r0, #0]
 8003934:	68cb      	ldr	r3, [r1, #12]
 8003936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800393a:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800393c:	2320      	movs	r3, #32
 800393e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003942:	f000 ff0d 	bl	8004760 <HAL_UART_TxCpltCallback>
}
 8003946:	2000      	movs	r0, #0
 8003948:	bd08      	pop	{r3, pc}

0800394a <UART_Receive_IT>:
{
 800394a:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800394c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b22      	cmp	r3, #34	; 0x22
 8003954:	d001      	beq.n	800395a <UART_Receive_IT+0x10>
    return HAL_BUSY;
 8003956:	2002      	movs	r0, #2
 8003958:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800395a:	6883      	ldr	r3, [r0, #8]
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003960:	d00f      	beq.n	8003982 <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003962:	6903      	ldr	r3, [r0, #16]
 8003964:	bb0b      	cbnz	r3, 80039aa <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003966:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	6282      	str	r2, [r0, #40]	; 0x28
 800396c:	6802      	ldr	r2, [r0, #0]
 800396e:	6852      	ldr	r2, [r2, #4]
 8003970:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8003972:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29b      	uxth	r3, r3
 800397a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800397c:	b1f3      	cbz	r3, 80039bc <UART_Receive_IT+0x72>
    return HAL_OK;
 800397e:	2000      	movs	r0, #0
}
 8003980:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003982:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003984:	6903      	ldr	r3, [r0, #16]
 8003986:	b943      	cbnz	r3, 800399a <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003988:	6803      	ldr	r3, [r0, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003990:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8003992:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003994:	3302      	adds	r3, #2
 8003996:	6283      	str	r3, [r0, #40]	; 0x28
 8003998:	e7eb      	b.n	8003972 <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800399a:	6803      	ldr	r3, [r0, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80039a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80039a4:	3301      	adds	r3, #1
 80039a6:	6283      	str	r3, [r0, #40]	; 0x28
 80039a8:	e7e3      	b.n	8003972 <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039aa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80039ac:	1c53      	adds	r3, r2, #1
 80039ae:	6283      	str	r3, [r0, #40]	; 0x28
 80039b0:	6803      	ldr	r3, [r0, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b8:	7013      	strb	r3, [r2, #0]
 80039ba:	e7da      	b.n	8003972 <UART_Receive_IT+0x28>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039bc:	6802      	ldr	r2, [r0, #0]
 80039be:	68d3      	ldr	r3, [r2, #12]
 80039c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039c4:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c6:	6802      	ldr	r2, [r0, #0]
 80039c8:	6953      	ldr	r3, [r2, #20]
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80039d0:	2320      	movs	r3, #32
 80039d2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80039d6:	f000 fef9 	bl	80047cc <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80039da:	2000      	movs	r0, #0
 80039dc:	bd08      	pop	{r3, pc}
	...

080039e0 <HAL_UART_IRQHandler>:
{
 80039e0:	b510      	push	{r4, lr}
 80039e2:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039e4:	6802      	ldr	r2, [r0, #0]
 80039e6:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039e8:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039ea:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 80039ec:	f013 000f 	ands.w	r0, r3, #15
 80039f0:	d105      	bne.n	80039fe <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039f2:	f013 0f20 	tst.w	r3, #32
 80039f6:	d002      	beq.n	80039fe <HAL_UART_IRQHandler+0x1e>
 80039f8:	f011 0f20 	tst.w	r1, #32
 80039fc:	d153      	bne.n	8003aa6 <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d067      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xf2>
 8003a02:	f012 0201 	ands.w	r2, r2, #1
 8003a06:	d102      	bne.n	8003a0e <HAL_UART_IRQHandler+0x2e>
 8003a08:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003a0c:	d061      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a0e:	f013 0f01 	tst.w	r3, #1
 8003a12:	d006      	beq.n	8003a22 <HAL_UART_IRQHandler+0x42>
 8003a14:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003a18:	d003      	beq.n	8003a22 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a1a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003a1c:	f040 0001 	orr.w	r0, r0, #1
 8003a20:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a22:	f013 0f04 	tst.w	r3, #4
 8003a26:	d004      	beq.n	8003a32 <HAL_UART_IRQHandler+0x52>
 8003a28:	b11a      	cbz	r2, 8003a32 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003a2c:	f040 0002 	orr.w	r0, r0, #2
 8003a30:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a32:	f013 0f02 	tst.w	r3, #2
 8003a36:	d004      	beq.n	8003a42 <HAL_UART_IRQHandler+0x62>
 8003a38:	b11a      	cbz	r2, 8003a42 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a3a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003a3c:	f040 0004 	orr.w	r0, r0, #4
 8003a40:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a42:	f013 0f08 	tst.w	r3, #8
 8003a46:	d004      	beq.n	8003a52 <HAL_UART_IRQHandler+0x72>
 8003a48:	b11a      	cbz	r2, 8003a52 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003a4c:	f042 0208 	orr.w	r2, r2, #8
 8003a50:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a52:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003a54:	2a00      	cmp	r2, #0
 8003a56:	d048      	beq.n	8003aea <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a58:	f013 0f20 	tst.w	r3, #32
 8003a5c:	d002      	beq.n	8003a64 <HAL_UART_IRQHandler+0x84>
 8003a5e:	f011 0f20 	tst.w	r1, #32
 8003a62:	d124      	bne.n	8003aae <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a6c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003a6e:	f012 0f08 	tst.w	r2, #8
 8003a72:	d100      	bne.n	8003a76 <HAL_UART_IRQHandler+0x96>
 8003a74:	b33b      	cbz	r3, 8003ac6 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8003a76:	4620      	mov	r0, r4
 8003a78:	f7ff fca3 	bl	80033c2 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a84:	d01b      	beq.n	8003abe <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a8c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8003a8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a90:	b18b      	cbz	r3, 8003ab6 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a92:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <HAL_UART_IRQHandler+0x11c>)
 8003a94:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a96:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003a98:	f7fd fbb0 	bl	80011fc <HAL_DMA_Abort_IT>
 8003a9c:	b328      	cbz	r0, 8003aea <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003aa0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003aa2:	4798      	blx	r3
 8003aa4:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f7ff ff4f 	bl	800394a <UART_Receive_IT>
      return;
 8003aac:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f7ff ff4b 	bl	800394a <UART_Receive_IT>
 8003ab4:	e7d6      	b.n	8003a64 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f000 fea6 	bl	8004808 <HAL_UART_ErrorCallback>
 8003abc:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f000 fea2 	bl	8004808 <HAL_UART_ErrorCallback>
 8003ac4:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f000 fe9e 	bl	8004808 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003ad0:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ad2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ad6:	d002      	beq.n	8003ade <HAL_UART_IRQHandler+0xfe>
 8003ad8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003adc:	d106      	bne.n	8003aec <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ade:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ae2:	d002      	beq.n	8003aea <HAL_UART_IRQHandler+0x10a>
 8003ae4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003ae8:	d104      	bne.n	8003af4 <HAL_UART_IRQHandler+0x114>
 8003aea:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8003aec:	4620      	mov	r0, r4
 8003aee:	f7ff fc76 	bl	80033de <UART_Transmit_IT>
    return;
 8003af2:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8003af4:	4620      	mov	r0, r4
 8003af6:	f7ff ff1b 	bl	8003930 <UART_EndTransmit_IT>
    return;
 8003afa:	e7f6      	b.n	8003aea <HAL_UART_IRQHandler+0x10a>
 8003afc:	08003b01 	.word	0x08003b01

08003b00 <UART_DMAAbortOnError>:
{
 8003b00:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b02:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8003b08:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003b0a:	f000 fe7d 	bl	8004808 <HAL_UART_ErrorCallback>
 8003b0e:	bd08      	pop	{r3, pc}

08003b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b12:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b14:	2400      	movs	r4, #0
 8003b16:	9405      	str	r4, [sp, #20]
 8003b18:	9406      	str	r4, [sp, #24]
 8003b1a:	9407      	str	r4, [sp, #28]
 8003b1c:	9408      	str	r4, [sp, #32]
 8003b1e:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b20:	9401      	str	r4, [sp, #4]
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <MX_GPIO_Init+0xb8>)
 8003b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b26:	f042 0204 	orr.w	r2, r2, #4
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2e:	f002 0204 	and.w	r2, r2, #4
 8003b32:	9201      	str	r2, [sp, #4]
 8003b34:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b36:	9402      	str	r4, [sp, #8]
 8003b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b42:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003b46:	9202      	str	r2, [sp, #8]
 8003b48:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4a:	9403      	str	r4, [sp, #12]
 8003b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
 8003b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b56:	f002 0201 	and.w	r2, r2, #1
 8003b5a:	9203      	str	r2, [sp, #12]
 8003b5c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b5e:	9404      	str	r4, [sp, #16]
 8003b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b62:	f042 0202 	orr.w	r2, r2, #2
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	9304      	str	r3, [sp, #16]
 8003b70:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003b72:	4f16      	ldr	r7, [pc, #88]	; (8003bcc <MX_GPIO_Init+0xbc>)
 8003b74:	4622      	mov	r2, r4
 8003b76:	2120      	movs	r1, #32
 8003b78:	4638      	mov	r0, r7
 8003b7a:	f7fd fd2a 	bl	80015d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003b7e:	4d14      	ldr	r5, [pc, #80]	; (8003bd0 <MX_GPIO_Init+0xc0>)
 8003b80:	4622      	mov	r2, r4
 8003b82:	21c0      	movs	r1, #192	; 0xc0
 8003b84:	4628      	mov	r0, r5
 8003b86:	f7fd fd24 	bl	80015d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b8e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b90:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <MX_GPIO_Init+0xc4>)
 8003b92:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003b96:	a905      	add	r1, sp, #20
 8003b98:	480f      	ldr	r0, [pc, #60]	; (8003bd8 <MX_GPIO_Init+0xc8>)
 8003b9a:	f7fd fc31 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba2:	2601      	movs	r6, #1
 8003ba4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003baa:	a905      	add	r1, sp, #20
 8003bac:	4638      	mov	r0, r7
 8003bae:	f7fd fc27 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bb2:	23c0      	movs	r3, #192	; 0xc0
 8003bb4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bba:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bbc:	a905      	add	r1, sp, #20
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f7fd fc1e 	bl	8001400 <HAL_GPIO_Init>

}
 8003bc4:	b00b      	add	sp, #44	; 0x2c
 8003bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	10210000 	.word	0x10210000
 8003bd8:	40020800 	.word	0x40020800

08003bdc <MX_DMA_Init>:
{
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003be0:	2400      	movs	r4, #0
 8003be2:	9401      	str	r4, [sp, #4]
 8003be4:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <MX_DMA_Init+0x60>)
 8003be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	200b      	movs	r0, #11
 8003bfe:	f7fd f9db 	bl	8000fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003c02:	200b      	movs	r0, #11
 8003c04:	f7fd fa0a 	bl	800101c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003c08:	4622      	mov	r2, r4
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	2010      	movs	r0, #16
 8003c0e:	f7fd f9d3 	bl	8000fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003c12:	2010      	movs	r0, #16
 8003c14:	f7fd fa02 	bl	800101c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003c18:	4622      	mov	r2, r4
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	2011      	movs	r0, #17
 8003c1e:	f7fd f9cb 	bl	8000fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003c22:	2011      	movs	r0, #17
 8003c24:	f7fd f9fa 	bl	800101c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003c28:	4622      	mov	r2, r4
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	202f      	movs	r0, #47	; 0x2f
 8003c2e:	f7fd f9c3 	bl	8000fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003c32:	202f      	movs	r0, #47	; 0x2f
 8003c34:	f7fd f9f2 	bl	800101c <HAL_NVIC_EnableIRQ>
}
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd10      	pop	{r4, pc}
 8003c3c:	40023800 	.word	0x40023800

08003c40 <MX_USART2_UART_Init>:
{
 8003c40:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8003c42:	4808      	ldr	r0, [pc, #32]	; (8003c64 <MX_USART2_UART_Init+0x24>)
 8003c44:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <MX_USART2_UART_Init+0x28>)
 8003c46:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003c48:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003c4c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c52:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c54:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c56:	220c      	movs	r2, #12
 8003c58:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c5a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c5c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c5e:	f7ff fdc7 	bl	80037f0 <HAL_UART_Init>
 8003c62:	bd08      	pop	{r3, pc}
 8003c64:	20000978 	.word	0x20000978
 8003c68:	40004400 	.word	0x40004400

08003c6c <MX_TIM1_Init>:
{
 8003c6c:	b530      	push	{r4, r5, lr}
 8003c6e:	b095      	sub	sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c70:	2400      	movs	r4, #0
 8003c72:	9412      	str	r4, [sp, #72]	; 0x48
 8003c74:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c76:	940b      	str	r4, [sp, #44]	; 0x2c
 8003c78:	940c      	str	r4, [sp, #48]	; 0x30
 8003c7a:	940d      	str	r4, [sp, #52]	; 0x34
 8003c7c:	940e      	str	r4, [sp, #56]	; 0x38
 8003c7e:	940f      	str	r4, [sp, #60]	; 0x3c
 8003c80:	9410      	str	r4, [sp, #64]	; 0x40
 8003c82:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c84:	9407      	str	r4, [sp, #28]
 8003c86:	9408      	str	r4, [sp, #32]
 8003c88:	9409      	str	r4, [sp, #36]	; 0x24
 8003c8a:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c8c:	9400      	str	r4, [sp, #0]
 8003c8e:	9401      	str	r4, [sp, #4]
 8003c90:	9402      	str	r4, [sp, #8]
 8003c92:	9403      	str	r4, [sp, #12]
 8003c94:	9404      	str	r4, [sp, #16]
 8003c96:	9405      	str	r4, [sp, #20]
 8003c98:	9406      	str	r4, [sp, #24]
  htim1.Instance = TIM1;
 8003c9a:	4d23      	ldr	r5, [pc, #140]	; (8003d28 <MX_TIM1_Init+0xbc>)
 8003c9c:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <MX_TIM1_Init+0xc0>)
 8003c9e:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8003ca0:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca2:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 8003ca4:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca6:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ca8:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003caa:	4628      	mov	r0, r5
 8003cac:	f7ff f960 	bl	8002f70 <HAL_TIM_PWM_Init>
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f7ff f976 	bl	8002fa2 <HAL_TIM_IC_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cb6:	9412      	str	r4, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cb8:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003cba:	a912      	add	r1, sp, #72	; 0x48
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f7ff fb2b 	bl	8003318 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cc2:	2360      	movs	r3, #96	; 0x60
 8003cc4:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8003cc6:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cc8:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003cca:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ccc:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003cce:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003cd0:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	a90b      	add	r1, sp, #44	; 0x2c
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f7ff fab0 	bl	800323c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cdc:	2204      	movs	r2, #4
 8003cde:	a90b      	add	r1, sp, #44	; 0x2c
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	f7ff faab 	bl	800323c <HAL_TIM_PWM_ConfigChannel>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003ce6:	9407      	str	r4, [sp, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	9308      	str	r3, [sp, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003cec:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8003cee:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	a907      	add	r1, sp, #28
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f7ff fa09 	bl	800310c <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003cfa:	220c      	movs	r2, #12
 8003cfc:	a907      	add	r1, sp, #28
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f7ff fa04 	bl	800310c <HAL_TIM_IC_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d04:	9400      	str	r4, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d06:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d08:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d0a:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d0c:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d12:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d14:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d16:	4669      	mov	r1, sp
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f7ff fb26 	bl	800336a <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f000 fa24 	bl	800416c <HAL_TIM_MspPostInit>
}
 8003d24:	b015      	add	sp, #84	; 0x54
 8003d26:	bd30      	pop	{r4, r5, pc}
 8003d28:	200008dc 	.word	0x200008dc
 8003d2c:	40010000 	.word	0x40010000

08003d30 <MX_TIM5_Init>:
{
 8003d30:	b530      	push	{r4, r5, lr}
 8003d32:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d34:	2224      	movs	r2, #36	; 0x24
 8003d36:	2100      	movs	r1, #0
 8003d38:	a803      	add	r0, sp, #12
 8003d3a:	f000 fdca 	bl	80048d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d3e:	2400      	movs	r4, #0
 8003d40:	9401      	str	r4, [sp, #4]
 8003d42:	9402      	str	r4, [sp, #8]
  htim5.Instance = TIM5;
 8003d44:	4d0b      	ldr	r5, [pc, #44]	; (8003d74 <MX_TIM5_Init+0x44>)
 8003d46:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <MX_TIM5_Init+0x48>)
 8003d48:	602b      	str	r3, [r5, #0]
  htim5.Init.Prescaler = 0;
 8003d4a:	606c      	str	r4, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4c:	60ac      	str	r4, [r5, #8]
  htim5.Init.Period = 0;
 8003d4e:	60ec      	str	r4, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d50:	612c      	str	r4, [r5, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d56:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d58:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003d5a:	a903      	add	r1, sp, #12
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	f7ff f939 	bl	8002fd4 <HAL_TIM_Encoder_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d62:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d64:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003d66:	a901      	add	r1, sp, #4
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f7ff fad5 	bl	8003318 <HAL_TIMEx_MasterConfigSynchronization>
}
 8003d6e:	b00d      	add	sp, #52	; 0x34
 8003d70:	bd30      	pop	{r4, r5, pc}
 8003d72:	bf00      	nop
 8003d74:	20000840 	.word	0x20000840
 8003d78:	40000c00 	.word	0x40000c00

08003d7c <MX_I2C1_Init>:
{
 8003d7c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8003d7e:	4809      	ldr	r0, [pc, #36]	; (8003da4 <MX_I2C1_Init+0x28>)
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <MX_I2C1_Init+0x2c>)
 8003d82:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <MX_I2C1_Init+0x30>)
 8003d86:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 12;
 8003d8c:	220c      	movs	r2, #12
 8003d8e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d94:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d96:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003d98:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d9a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d9c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d9e:	f7fd fd6f 	bl	8001880 <HAL_I2C_Init>
 8003da2:	bd08      	pop	{r3, pc}
 8003da4:	20000798 	.word	0x20000798
 8003da8:	40005400 	.word	0x40005400
 8003dac:	000186a0 	.word	0x000186a0

08003db0 <MX_I2C2_Init>:
{
 8003db0:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8003db2:	480a      	ldr	r0, [pc, #40]	; (8003ddc <MX_I2C2_Init+0x2c>)
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <MX_I2C2_Init+0x30>)
 8003db6:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 10000;
 8003db8:	f242 7310 	movw	r3, #10000	; 0x2710
 8003dbc:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 6;
 8003dc2:	2206      	movs	r2, #6
 8003dc4:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dca:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003dcc:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003dce:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003dd0:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003dd2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003dd4:	f7fd fd54 	bl	8001880 <HAL_I2C_Init>
 8003dd8:	bd08      	pop	{r3, pc}
 8003dda:	bf00      	nop
 8003ddc:	200007ec 	.word	0x200007ec
 8003de0:	40005800 	.word	0x40005800

08003de4 <SystemClock_Config>:
{
 8003de4:	b530      	push	{r4, r5, lr}
 8003de6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003de8:	2234      	movs	r2, #52	; 0x34
 8003dea:	2100      	movs	r1, #0
 8003dec:	a807      	add	r0, sp, #28
 8003dee:	f000 fd70 	bl	80048d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003df2:	2400      	movs	r4, #0
 8003df4:	9402      	str	r4, [sp, #8]
 8003df6:	9403      	str	r4, [sp, #12]
 8003df8:	9404      	str	r4, [sp, #16]
 8003dfa:	9405      	str	r4, [sp, #20]
 8003dfc:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	9400      	str	r4, [sp, #0]
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <SystemClock_Config+0x94>)
 8003e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e14:	9401      	str	r4, [sp, #4]
 8003e16:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <SystemClock_Config+0x98>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e32:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e34:	2502      	movs	r5, #2
 8003e36:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e3c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003e3e:	2304      	movs	r3, #4
 8003e40:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003e42:	23b4      	movs	r3, #180	; 0xb4
 8003e44:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e46:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003e48:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003e4a:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e4c:	a807      	add	r0, sp, #28
 8003e4e:	f7fe fd3b 	bl	80028c8 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003e52:	f7fe fb67 	bl	8002524 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e56:	230f      	movs	r3, #15
 8003e58:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e5a:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e5c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e62:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e68:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e6a:	2105      	movs	r1, #5
 8003e6c:	a802      	add	r0, sp, #8
 8003e6e:	f7fe fb99 	bl	80025a4 <HAL_RCC_ClockConfig>
}
 8003e72:	b015      	add	sp, #84	; 0x54
 8003e74:	bd30      	pop	{r4, r5, pc}
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40007000 	.word	0x40007000

08003e80 <main>:
{
 8003e80:	b508      	push	{r3, lr}
  HAL_Init();
 8003e82:	f7fd f85b 	bl	8000f3c <HAL_Init>
  SystemClock_Config();
 8003e86:	f7ff ffad 	bl	8003de4 <SystemClock_Config>
  MX_GPIO_Init();
 8003e8a:	f7ff fe41 	bl	8003b10 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e8e:	f7ff fea5 	bl	8003bdc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003e92:	f7ff fed5 	bl	8003c40 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8003e96:	f7ff fee9 	bl	8003c6c <MX_TIM1_Init>
  MX_TIM5_Init();
 8003e9a:	f7ff ff49 	bl	8003d30 <MX_TIM5_Init>
  MX_I2C1_Init();
 8003e9e:	f7ff ff6d 	bl	8003d7c <MX_I2C1_Init>
  MX_I2C2_Init();
 8003ea2:	f7ff ff85 	bl	8003db0 <MX_I2C2_Init>
  THL_main();
 8003ea6:	f000 fb05 	bl	80044b4 <THL_main>
 8003eaa:	e7fe      	b.n	8003eaa <main+0x2a>

08003eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eb0:	b500      	push	{lr}
 8003eb2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	9100      	str	r1, [sp, #0]
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <HAL_MspInit+0x3c>)
 8003eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
 8003ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003ec8:	9200      	str	r2, [sp, #0]
 8003eca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ecc:	9101      	str	r1, [sp, #4]
 8003ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ee0:	2007      	movs	r0, #7
 8003ee2:	f7fd f857 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ee6:	b003      	add	sp, #12
 8003ee8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003eec:	40023800 	.word	0x40023800

08003ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ef4:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9305      	str	r3, [sp, #20]
 8003efa:	9306      	str	r3, [sp, #24]
 8003efc:	9307      	str	r3, [sp, #28]
 8003efe:	9308      	str	r3, [sp, #32]
 8003f00:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 8003f02:	6803      	ldr	r3, [r0, #0]
 8003f04:	4a5b      	ldr	r2, [pc, #364]	; (8004074 <HAL_I2C_MspInit+0x184>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d005      	beq.n	8003f16 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8003f0a:	4a5b      	ldr	r2, [pc, #364]	; (8004078 <HAL_I2C_MspInit+0x188>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d06f      	beq.n	8003ff0 <HAL_I2C_MspInit+0x100>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003f10:	b00b      	add	sp, #44	; 0x2c
 8003f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f16:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f18:	2500      	movs	r5, #0
 8003f1a:	9500      	str	r5, [sp, #0]
 8003f1c:	4e57      	ldr	r6, [pc, #348]	; (800407c <HAL_I2C_MspInit+0x18c>)
 8003f1e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f20:	f043 0302 	orr.w	r3, r3, #2
 8003f24:	6333      	str	r3, [r6, #48]	; 0x30
 8003f26:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f36:	2312      	movs	r3, #18
 8003f38:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f3e:	2304      	movs	r3, #4
 8003f40:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f42:	a905      	add	r1, sp, #20
 8003f44:	484e      	ldr	r0, [pc, #312]	; (8004080 <HAL_I2C_MspInit+0x190>)
 8003f46:	f7fd fa5b 	bl	8001400 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f4a:	9501      	str	r5, [sp, #4]
 8003f4c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003f4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f52:	6433      	str	r3, [r6, #64]	; 0x40
 8003f54:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8003f5e:	4849      	ldr	r0, [pc, #292]	; (8004084 <HAL_I2C_MspInit+0x194>)
 8003f60:	4b49      	ldr	r3, [pc, #292]	; (8004088 <HAL_I2C_MspInit+0x198>)
 8003f62:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f68:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f6a:	2340      	movs	r3, #64	; 0x40
 8003f6c:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f6e:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f74:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f76:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f78:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003f7a:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f7c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003f80:	6203      	str	r3, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f82:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003f84:	f7fd f8d2 	bl	800112c <HAL_DMA_Init>
 8003f88:	bb60      	cbnz	r0, 8003fe4 <HAL_I2C_MspInit+0xf4>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003f8a:	4b3e      	ldr	r3, [pc, #248]	; (8004084 <HAL_I2C_MspInit+0x194>)
 8003f8c:	6363      	str	r3, [r4, #52]	; 0x34
 8003f8e:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003f90:	483e      	ldr	r0, [pc, #248]	; (800408c <HAL_I2C_MspInit+0x19c>)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_I2C_MspInit+0x1a0>)
 8003f94:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f9a:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fa0:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fa6:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fa8:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003faa:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003fac:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003fae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003fb2:	6202      	str	r2, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fb4:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003fb6:	f7fd f8b9 	bl	800112c <HAL_DMA_Init>
 8003fba:	b9b0      	cbnz	r0, 8003fea <HAL_I2C_MspInit+0xfa>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003fbc:	4b33      	ldr	r3, [pc, #204]	; (800408c <HAL_I2C_MspInit+0x19c>)
 8003fbe:	63a3      	str	r3, [r4, #56]	; 0x38
 8003fc0:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	201f      	movs	r0, #31
 8003fc8:	f7fc fff6 	bl	8000fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003fcc:	201f      	movs	r0, #31
 8003fce:	f7fd f825 	bl	800101c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	2020      	movs	r0, #32
 8003fd8:	f7fc ffee 	bl	8000fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003fdc:	2020      	movs	r0, #32
 8003fde:	f7fd f81d 	bl	800101c <HAL_NVIC_EnableIRQ>
 8003fe2:	e795      	b.n	8003f10 <HAL_I2C_MspInit+0x20>
      Error_Handler();
 8003fe4:	f7ff ff62 	bl	8003eac <Error_Handler>
 8003fe8:	e7cf      	b.n	8003f8a <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 8003fea:	f7ff ff5f 	bl	8003eac <Error_Handler>
 8003fee:	e7e5      	b.n	8003fbc <HAL_I2C_MspInit+0xcc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff0:	2500      	movs	r5, #0
 8003ff2:	9502      	str	r5, [sp, #8]
 8003ff4:	4c21      	ldr	r4, [pc, #132]	; (800407c <HAL_I2C_MspInit+0x18c>)
 8003ff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ff8:	f043 0302 	orr.w	r3, r3, #2
 8003ffc:	6323      	str	r3, [r4, #48]	; 0x30
 8003ffe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	9302      	str	r3, [sp, #8]
 8004006:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004008:	9503      	str	r5, [sp, #12]
 800400a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800400c:	f043 0304 	orr.w	r3, r3, #4
 8004010:	6323      	str	r3, [r4, #48]	; 0x30
 8004012:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	9303      	str	r3, [sp, #12]
 800401a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800401c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004020:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004022:	f04f 0912 	mov.w	r9, #18
 8004026:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800402a:	f04f 0801 	mov.w	r8, #1
 800402e:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004032:	2703      	movs	r7, #3
 8004034:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004036:	2604      	movs	r6, #4
 8004038:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800403a:	a905      	add	r1, sp, #20
 800403c:	4810      	ldr	r0, [pc, #64]	; (8004080 <HAL_I2C_MspInit+0x190>)
 800403e:	f7fd f9df 	bl	8001400 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004046:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004048:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800404c:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004050:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004052:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004054:	a905      	add	r1, sp, #20
 8004056:	480f      	ldr	r0, [pc, #60]	; (8004094 <HAL_I2C_MspInit+0x1a4>)
 8004058:	f7fd f9d2 	bl	8001400 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800405c:	9504      	str	r5, [sp, #16]
 800405e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004064:	6423      	str	r3, [r4, #64]	; 0x40
 8004066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406c:	9304      	str	r3, [sp, #16]
 800406e:	9b04      	ldr	r3, [sp, #16]
}
 8004070:	e74e      	b.n	8003f10 <HAL_I2C_MspInit+0x20>
 8004072:	bf00      	nop
 8004074:	40005400 	.word	0x40005400
 8004078:	40005800 	.word	0x40005800
 800407c:	40023800 	.word	0x40023800
 8004080:	40020400 	.word	0x40020400
 8004084:	20000738 	.word	0x20000738
 8004088:	400260b8 	.word	0x400260b8
 800408c:	20000918 	.word	0x20000918
 8004090:	40026010 	.word	0x40026010
 8004094:	40020800 	.word	0x40020800

08004098 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004098:	b500      	push	{lr}
 800409a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800409c:	2300      	movs	r3, #0
 800409e:	9303      	str	r3, [sp, #12]
 80040a0:	9304      	str	r3, [sp, #16]
 80040a2:	9305      	str	r3, [sp, #20]
 80040a4:	9306      	str	r3, [sp, #24]
 80040a6:	9307      	str	r3, [sp, #28]
  if(htim_pwm->Instance==TIM1)
 80040a8:	6802      	ldr	r2, [r0, #0]
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <HAL_TIM_PWM_MspInit+0x64>)
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d002      	beq.n	80040b6 <HAL_TIM_PWM_MspInit+0x1e>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80040b0:	b009      	add	sp, #36	; 0x24
 80040b2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040b6:	2100      	movs	r1, #0
 80040b8:	9101      	str	r1, [sp, #4]
 80040ba:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80040be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
 80040c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c8:	f002 0201 	and.w	r2, r2, #1
 80040cc:	9201      	str	r2, [sp, #4]
 80040ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d0:	9102      	str	r1, [sp, #8]
 80040d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	9302      	str	r3, [sp, #8]
 80040e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80040e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80040e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ea:	2302      	movs	r3, #2
 80040ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80040ee:	2301      	movs	r3, #1
 80040f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f2:	a903      	add	r1, sp, #12
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <HAL_TIM_PWM_MspInit+0x68>)
 80040f6:	f7fd f983 	bl	8001400 <HAL_GPIO_Init>
}
 80040fa:	e7d9      	b.n	80040b0 <HAL_TIM_PWM_MspInit+0x18>
 80040fc:	40010000 	.word	0x40010000
 8004100:	40020000 	.word	0x40020000

08004104 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004104:	b500      	push	{lr}
 8004106:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004108:	2300      	movs	r3, #0
 800410a:	9303      	str	r3, [sp, #12]
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	9305      	str	r3, [sp, #20]
 8004110:	9306      	str	r3, [sp, #24]
 8004112:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM5)
 8004114:	6802      	ldr	r2, [r0, #0]
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <HAL_TIM_Encoder_MspInit+0x60>)
 8004118:	429a      	cmp	r2, r3
 800411a:	d002      	beq.n	8004122 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800411c:	b009      	add	sp, #36	; 0x24
 800411e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004122:	2100      	movs	r1, #0
 8004124:	9101      	str	r1, [sp, #4]
 8004126:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 800412a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412c:	f042 0208 	orr.w	r2, r2, #8
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
 8004132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004134:	f002 0208 	and.w	r2, r2, #8
 8004138:	9201      	str	r2, [sp, #4]
 800413a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413c:	9102      	str	r1, [sp, #8]
 800413e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	9302      	str	r3, [sp, #8]
 800414e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004150:	2303      	movs	r3, #3
 8004152:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004154:	2302      	movs	r3, #2
 8004156:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004158:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415a:	a903      	add	r1, sp, #12
 800415c:	4802      	ldr	r0, [pc, #8]	; (8004168 <HAL_TIM_Encoder_MspInit+0x64>)
 800415e:	f7fd f94f 	bl	8001400 <HAL_GPIO_Init>
}
 8004162:	e7db      	b.n	800411c <HAL_TIM_Encoder_MspInit+0x18>
 8004164:	40000c00 	.word	0x40000c00
 8004168:	40020000 	.word	0x40020000

0800416c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800416c:	b500      	push	{lr}
 800416e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004170:	2300      	movs	r3, #0
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	9302      	str	r3, [sp, #8]
 8004176:	9303      	str	r3, [sp, #12]
 8004178:	9304      	str	r3, [sp, #16]
 800417a:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 800417c:	6802      	ldr	r2, [r0, #0]
 800417e:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <HAL_TIM_MspPostInit+0x50>)
 8004180:	429a      	cmp	r2, r3
 8004182:	d002      	beq.n	800418a <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004184:	b007      	add	sp, #28
 8004186:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <HAL_TIM_MspPostInit+0x54>)
 8004190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a8:	2302      	movs	r3, #2
 80041aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041ac:	2301      	movs	r3, #1
 80041ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b0:	a901      	add	r1, sp, #4
 80041b2:	4804      	ldr	r0, [pc, #16]	; (80041c4 <HAL_TIM_MspPostInit+0x58>)
 80041b4:	f7fd f924 	bl	8001400 <HAL_GPIO_Init>
}
 80041b8:	e7e4      	b.n	8004184 <HAL_TIM_MspPostInit+0x18>
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40020000 	.word	0x40020000

080041c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041c8:	b530      	push	{r4, r5, lr}
 80041ca:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041cc:	2300      	movs	r3, #0
 80041ce:	9303      	str	r3, [sp, #12]
 80041d0:	9304      	str	r3, [sp, #16]
 80041d2:	9305      	str	r3, [sp, #20]
 80041d4:	9306      	str	r3, [sp, #24]
 80041d6:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80041d8:	6802      	ldr	r2, [r0, #0]
 80041da:	4b34      	ldr	r3, [pc, #208]	; (80042ac <HAL_UART_MspInit+0xe4>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041e0:	b009      	add	sp, #36	; 0x24
 80041e2:	bd30      	pop	{r4, r5, pc}
 80041e4:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 80041e6:	2500      	movs	r5, #0
 80041e8:	9501      	str	r5, [sp, #4]
 80041ea:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80041ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40
 80041f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80041fc:	9201      	str	r2, [sp, #4]
 80041fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004200:	9502      	str	r5, [sp, #8]
 8004202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	9302      	str	r3, [sp, #8]
 8004212:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004214:	230c      	movs	r3, #12
 8004216:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004218:	2302      	movs	r3, #2
 800421a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800421c:	2301      	movs	r3, #1
 800421e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004220:	2303      	movs	r3, #3
 8004222:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004224:	2307      	movs	r3, #7
 8004226:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004228:	a903      	add	r1, sp, #12
 800422a:	4821      	ldr	r0, [pc, #132]	; (80042b0 <HAL_UART_MspInit+0xe8>)
 800422c:	f7fd f8e8 	bl	8001400 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004230:	4820      	ldr	r0, [pc, #128]	; (80042b4 <HAL_UART_MspInit+0xec>)
 8004232:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <HAL_UART_MspInit+0xf0>)
 8004234:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004236:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800423a:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800423c:	2340      	movs	r3, #64	; 0x40
 800423e:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004240:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004246:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004248:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800424a:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800424c:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800424e:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004250:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004252:	f7fc ff6b 	bl	800112c <HAL_DMA_Init>
 8004256:	bb10      	cbnz	r0, 800429e <HAL_UART_MspInit+0xd6>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004258:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <HAL_UART_MspInit+0xec>)
 800425a:	6323      	str	r3, [r4, #48]	; 0x30
 800425c:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800425e:	4817      	ldr	r0, [pc, #92]	; (80042bc <HAL_UART_MspInit+0xf4>)
 8004260:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <HAL_UART_MspInit+0xf8>)
 8004262:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004264:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004268:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800426a:	2300      	movs	r3, #0
 800426c:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800426e:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004274:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004276:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004278:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800427a:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800427c:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800427e:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004280:	f7fc ff54 	bl	800112c <HAL_DMA_Init>
 8004284:	b970      	cbnz	r0, 80042a4 <HAL_UART_MspInit+0xdc>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <HAL_UART_MspInit+0xf4>)
 8004288:	6363      	str	r3, [r4, #52]	; 0x34
 800428a:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 800428c:	2201      	movs	r2, #1
 800428e:	2100      	movs	r1, #0
 8004290:	2026      	movs	r0, #38	; 0x26
 8004292:	f7fc fe91 	bl	8000fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004296:	2026      	movs	r0, #38	; 0x26
 8004298:	f7fc fec0 	bl	800101c <HAL_NVIC_EnableIRQ>
}
 800429c:	e7a0      	b.n	80041e0 <HAL_UART_MspInit+0x18>
      Error_Handler();
 800429e:	f7ff fe05 	bl	8003eac <Error_Handler>
 80042a2:	e7d9      	b.n	8004258 <HAL_UART_MspInit+0x90>
      Error_Handler();
 80042a4:	f7ff fe02 	bl	8003eac <Error_Handler>
 80042a8:	e7ed      	b.n	8004286 <HAL_UART_MspInit+0xbe>
 80042aa:	bf00      	nop
 80042ac:	40004400 	.word	0x40004400
 80042b0:	40020000 	.word	0x40020000
 80042b4:	2000087c 	.word	0x2000087c
 80042b8:	400260a0 	.word	0x400260a0
 80042bc:	200006d8 	.word	0x200006d8
 80042c0:	40026088 	.word	0x40026088

080042c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042c4:	4770      	bx	lr

080042c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042c6:	e7fe      	b.n	80042c6 <HardFault_Handler>

080042c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042c8:	e7fe      	b.n	80042c8 <MemManage_Handler>

080042ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042ca:	e7fe      	b.n	80042ca <BusFault_Handler>

080042cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042cc:	e7fe      	b.n	80042cc <UsageFault_Handler>

080042ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ce:	4770      	bx	lr

080042d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042d0:	4770      	bx	lr

080042d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042d2:	4770      	bx	lr

080042d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042d6:	f7fc fe4b 	bl	8000f70 <HAL_IncTick>
 80042da:	bd08      	pop	{r3, pc}

080042dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80042dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80042de:	4802      	ldr	r0, [pc, #8]	; (80042e8 <DMA1_Stream0_IRQHandler+0xc>)
 80042e0:	f7fc ffa0 	bl	8001224 <HAL_DMA_IRQHandler>
 80042e4:	bd08      	pop	{r3, pc}
 80042e6:	bf00      	nop
 80042e8:	20000918 	.word	0x20000918

080042ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80042ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80042ee:	4802      	ldr	r0, [pc, #8]	; (80042f8 <DMA1_Stream5_IRQHandler+0xc>)
 80042f0:	f7fc ff98 	bl	8001224 <HAL_DMA_IRQHandler>
 80042f4:	bd08      	pop	{r3, pc}
 80042f6:	bf00      	nop
 80042f8:	200006d8 	.word	0x200006d8

080042fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80042fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80042fe:	4802      	ldr	r0, [pc, #8]	; (8004308 <DMA1_Stream6_IRQHandler+0xc>)
 8004300:	f7fc ff90 	bl	8001224 <HAL_DMA_IRQHandler>
 8004304:	bd08      	pop	{r3, pc}
 8004306:	bf00      	nop
 8004308:	2000087c 	.word	0x2000087c

0800430c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800430c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800430e:	4802      	ldr	r0, [pc, #8]	; (8004318 <I2C1_EV_IRQHandler+0xc>)
 8004310:	f7fd ffba 	bl	8002288 <HAL_I2C_EV_IRQHandler>
 8004314:	bd08      	pop	{r3, pc}
 8004316:	bf00      	nop
 8004318:	20000798 	.word	0x20000798

0800431c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800431c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800431e:	4802      	ldr	r0, [pc, #8]	; (8004328 <I2C1_ER_IRQHandler+0xc>)
 8004320:	f7fe f866 	bl	80023f0 <HAL_I2C_ER_IRQHandler>
 8004324:	bd08      	pop	{r3, pc}
 8004326:	bf00      	nop
 8004328:	20000798 	.word	0x20000798

0800432c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800432c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800432e:	4802      	ldr	r0, [pc, #8]	; (8004338 <USART2_IRQHandler+0xc>)
 8004330:	f7ff fb56 	bl	80039e0 <HAL_UART_IRQHandler>
 8004334:	bd08      	pop	{r3, pc}
 8004336:	bf00      	nop
 8004338:	20000978 	.word	0x20000978

0800433c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800433c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800433e:	4802      	ldr	r0, [pc, #8]	; (8004348 <DMA1_Stream7_IRQHandler+0xc>)
 8004340:	f7fc ff70 	bl	8001224 <HAL_DMA_IRQHandler>
 8004344:	bd08      	pop	{r3, pc}
 8004346:	bf00      	nop
 8004348:	20000738 	.word	0x20000738

0800434c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800434c:	490f      	ldr	r1, [pc, #60]	; (800438c <SystemInit+0x40>)
 800434e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004352:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <SystemInit+0x44>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004364:	2000      	movs	r0, #0
 8004366:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800436e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004372:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004374:	4a07      	ldr	r2, [pc, #28]	; (8004394 <SystemInit+0x48>)
 8004376:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800437e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004380:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004382:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004386:	608b      	str	r3, [r1, #8]
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	e000ed00 	.word	0xe000ed00
 8004390:	40023800 	.word	0x40023800
 8004394:	24003010 	.word	0x24003010

08004398 <IT_CallBack_UsartTC>:
	    //printf_u("\rxxxxx = %f\r\n", 0.123456);
	    delay(100);
	}
}

void IT_CallBack_UsartTC(USART* Device) {
 8004398:	b508      	push	{r3, lr}
	turnOn(Led);
 800439a:	4b02      	ldr	r3, [pc, #8]	; (80043a4 <IT_CallBack_UsartTC+0xc>)
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	f000 f89e 	bl	80044de <turnOn>
 80043a2:	bd08      	pop	{r3, pc}
 80043a4:	20000aa0 	.word	0x20000aa0

080043a8 <setup>:
GPIO buttonMem;
GPIO* button;



void setup(void) {
 80043a8:	b508      	push	{r3, lr}
	system_console = newMainUSART(&huart2);
 80043aa:	480d      	ldr	r0, [pc, #52]	; (80043e0 <setup+0x38>)
 80043ac:	f000 f998 	bl	80046e0 <newMainUSART>
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <setup+0x3c>)
 80043b2:	6018      	str	r0, [r3, #0]
	i2cBus = newI2C(&i2cBusMem ,&hi2c1);
 80043b4:	490c      	ldr	r1, [pc, #48]	; (80043e8 <setup+0x40>)
 80043b6:	480d      	ldr	r0, [pc, #52]	; (80043ec <setup+0x44>)
 80043b8:	f000 f8b8 	bl	800452c <newI2C>
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <setup+0x48>)
 80043be:	6018      	str	r0, [r3, #0]
	led = newGPIO(&ledMem, LD2_GPIO_Port, LD2_Pin);
 80043c0:	2220      	movs	r2, #32
 80043c2:	490c      	ldr	r1, [pc, #48]	; (80043f4 <setup+0x4c>)
 80043c4:	480c      	ldr	r0, [pc, #48]	; (80043f8 <setup+0x50>)
 80043c6:	f000 f87d 	bl	80044c4 <newGPIO>
 80043ca:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <setup+0x54>)
 80043cc:	6018      	str	r0, [r3, #0]
	button = newGPIO(&buttonMem, B1_GPIO_Port, B1_Pin);
 80043ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043d2:	490b      	ldr	r1, [pc, #44]	; (8004400 <setup+0x58>)
 80043d4:	480b      	ldr	r0, [pc, #44]	; (8004404 <setup+0x5c>)
 80043d6:	f000 f875 	bl	80044c4 <newGPIO>
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <setup+0x60>)
 80043dc:	6018      	str	r0, [r3, #0]
 80043de:	bd08      	pop	{r3, pc}
 80043e0:	20000978 	.word	0x20000978
 80043e4:	20000b90 	.word	0x20000b90
 80043e8:	20000798 	.word	0x20000798
 80043ec:	20000ab4 	.word	0x20000ab4
 80043f0:	20000aac 	.word	0x20000aac
 80043f4:	40020000 	.word	0x40020000
 80043f8:	20000aa4 	.word	0x20000aa4
 80043fc:	20000b8c 	.word	0x20000b8c
 8004400:	40020800 	.word	0x40020800
 8004404:	20000b94 	.word	0x20000b94
 8004408:	20000ab0 	.word	0x20000ab0

0800440c <testTwoNucleoBoardComm>:

#define Master_Board
//#define Slave_Board
#define Target_Address 6

void testTwoNucleoBoardComm(void) {
 800440c:	b570      	push	{r4, r5, r6, lr}
	setup();
 800440e:	f7ff ffcb 	bl	80043a8 <setup>
#ifdef Master_Board
	//for(int i = 0; i<5; i++) blink(led, 300);
	gpioWrite(led, High);
 8004412:	2101      	movs	r1, #1
 8004414:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <testTwoNucleoBoardComm+0x7c>)
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	f000 f86f 	bl	80044fa <gpioWrite>
	while(gpioRead(button));
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <testTwoNucleoBoardComm+0x80>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	f000 f853 	bl	80044ca <gpioRead>
 8004424:	2800      	cmp	r0, #0
 8004426:	d1f9      	bne.n	800441c <testTwoNucleoBoardComm+0x10>
	gpioWrite(led, Low);
 8004428:	4c17      	ldr	r4, [pc, #92]	; (8004488 <testTwoNucleoBoardComm+0x7c>)
 800442a:	2100      	movs	r1, #0
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	f000 f864 	bl	80044fa <gpioWrite>
	/*
	strcpy(i2cBus->TxBuffer, "A message from the Master");
	i2cSend(i2cBus, MasterMode(Target_Address));
*/

	gpioWrite(led, Low);
 8004432:	2100      	movs	r1, #0
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	f000 f860 	bl	80044fa <gpioWrite>
	strcpy(i2cBus->TxBuffer, "T message from the ABCDEF");
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <testTwoNucleoBoardComm+0x84>)
 800443c:	681e      	ldr	r6, [r3, #0]
 800443e:	4c15      	ldr	r4, [pc, #84]	; (8004494 <testTwoNucleoBoardComm+0x88>)
 8004440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004442:	6070      	str	r0, [r6, #4]
 8004444:	60b1      	str	r1, [r6, #8]
 8004446:	60f2      	str	r2, [r6, #12]
 8004448:	6133      	str	r3, [r6, #16]
 800444a:	cc03      	ldmia	r4!, {r0, r1}
 800444c:	6170      	str	r0, [r6, #20]
 800444e:	61b1      	str	r1, [r6, #24]
 8004450:	8823      	ldrh	r3, [r4, #0]
 8004452:	83b3      	strh	r3, [r6, #28]
	i2cSend_IT(i2cBus, MasterMode(Target_Address));
 8004454:	210c      	movs	r1, #12
 8004456:	4630      	mov	r0, r6
 8004458:	f000 f894 	bl	8004584 <i2cSend_IT>
	while(i2cBus->TxStatus != Completed);
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <testTwoNucleoBoardComm+0x84>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b03      	cmp	r3, #3
 8004468:	d1f8      	bne.n	800445c <testTwoNucleoBoardComm+0x50>
 800446a:	2400      	movs	r4, #0
 800446c:	e006      	b.n	800447c <testTwoNucleoBoardComm+0x70>

	for(int i = 0; i<5;i++) blink(led, 300);
 800446e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004472:	4b05      	ldr	r3, [pc, #20]	; (8004488 <testTwoNucleoBoardComm+0x7c>)
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	f000 f849 	bl	800450c <blink>
 800447a:	3401      	adds	r4, #1
 800447c:	2c04      	cmp	r4, #4
 800447e:	ddf6      	ble.n	800446e <testTwoNucleoBoardComm+0x62>
	printf_u("\rMessage Sent!!!!!!!!!!!!!!!!!\r\n");
 8004480:	4805      	ldr	r0, [pc, #20]	; (8004498 <testTwoNucleoBoardComm+0x8c>)
 8004482:	f000 f98b 	bl	800479c <printf_u>
 8004486:	bd70      	pop	{r4, r5, r6, pc}
 8004488:	20000b8c 	.word	0x20000b8c
 800448c:	20000ab0 	.word	0x20000ab0
 8004490:	20000aac 	.word	0x20000aac
 8004494:	080076e8 	.word	0x080076e8
 8004498:	08007704 	.word	0x08007704

0800449c <testI2c>:
	}
#endif
}


void testI2c(void) {
 800449c:	b508      	push	{r3, lr}
	testTwoNucleoBoardComm();
 800449e:	f7ff ffb5 	bl	800440c <testTwoNucleoBoardComm>
 80044a2:	bd08      	pop	{r3, pc}

080044a4 <Exception_Handler>:
}

void Exception_Handler(const char* str) {
 80044a4:	b508      	push	{r3, lr}
	printf_u("\r%s\r\n",str);
 80044a6:	4601      	mov	r1, r0
 80044a8:	4801      	ldr	r0, [pc, #4]	; (80044b0 <Exception_Handler+0xc>)
 80044aa:	f000 f977 	bl	800479c <printf_u>
 80044ae:	bd08      	pop	{r3, pc}
 80044b0:	080076e0 	.word	0x080076e0

080044b4 <THL_main>:
#include "THL_main.h"
#include "THL_I2cTester.h"
void THL_main(void) {
 80044b4:	b508      	push	{r3, lr}
	//testUsart();
	testI2c();
 80044b6:	f7ff fff1 	bl	800449c <testI2c>
	delay(1000);
 80044ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044be:	f000 f8d7 	bl	8004670 <delay>
 80044c2:	bd08      	pop	{r3, pc}

080044c4 <newGPIO>:



/*========================SETUP AND DATA STRUCTURE========================*/
GPIO *newGPIO(GPIO* obj, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	obj->GPIO_Pin = GPIO_Pin;
 80044c4:	8082      	strh	r2, [r0, #4]
	obj->GPIOx = GPIOx;
 80044c6:	6001      	str	r1, [r0, #0]
	return obj;
}
 80044c8:	4770      	bx	lr

080044ca <gpioRead>:
/*========================General GPIO Methods================================*/
void gpioWrite(GPIO* obj, uint8_t Bit) {
	if(Bit == High) turnOn(obj);
	else turnOff(obj);
}
uint8_t gpioRead(GPIO* obj) {
 80044ca:	b508      	push	{r3, lr}
	return HAL_GPIO_ReadPin(obj->GPIOx, obj->GPIO_Pin) == GPIO_PIN_SET?High:Low;
 80044cc:	8881      	ldrh	r1, [r0, #4]
 80044ce:	6800      	ldr	r0, [r0, #0]
 80044d0:	f7fd f878 	bl	80015c4 <HAL_GPIO_ReadPin>
}
 80044d4:	2801      	cmp	r0, #1
 80044d6:	bf14      	ite	ne
 80044d8:	2000      	movne	r0, #0
 80044da:	2001      	moveq	r0, #1
 80044dc:	bd08      	pop	{r3, pc}

080044de <turnOn>:
/*=============================================================================*/


/*========================Convenience Purposed Methods========================*/
void turnOn(GPIO* obj) {
 80044de:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(obj->GPIOx, obj->GPIO_Pin, GPIO_PIN_SET);
 80044e0:	2201      	movs	r2, #1
 80044e2:	8881      	ldrh	r1, [r0, #4]
 80044e4:	6800      	ldr	r0, [r0, #0]
 80044e6:	f7fd f874 	bl	80015d2 <HAL_GPIO_WritePin>
 80044ea:	bd08      	pop	{r3, pc}

080044ec <turnOff>:
}

void turnOff(GPIO* obj) {
 80044ec:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(obj->GPIOx, obj->GPIO_Pin, GPIO_PIN_RESET);
 80044ee:	2200      	movs	r2, #0
 80044f0:	8881      	ldrh	r1, [r0, #4]
 80044f2:	6800      	ldr	r0, [r0, #0]
 80044f4:	f7fd f86d 	bl	80015d2 <HAL_GPIO_WritePin>
 80044f8:	bd08      	pop	{r3, pc}

080044fa <gpioWrite>:
void gpioWrite(GPIO* obj, uint8_t Bit) {
 80044fa:	b508      	push	{r3, lr}
	if(Bit == High) turnOn(obj);
 80044fc:	2901      	cmp	r1, #1
 80044fe:	d002      	beq.n	8004506 <gpioWrite+0xc>
	else turnOff(obj);
 8004500:	f7ff fff4 	bl	80044ec <turnOff>
 8004504:	bd08      	pop	{r3, pc}
	if(Bit == High) turnOn(obj);
 8004506:	f7ff ffea 	bl	80044de <turnOn>
 800450a:	bd08      	pop	{r3, pc}

0800450c <blink>:
}
void blink(GPIO* obj, uint32_t blkPeriod) {
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4605      	mov	r5, r0
 8004510:	460c      	mov	r4, r1
	turnOn(obj);
 8004512:	f7ff ffe4 	bl	80044de <turnOn>
	delay(blkPeriod / 2);
 8004516:	0864      	lsrs	r4, r4, #1
 8004518:	4620      	mov	r0, r4
 800451a:	f000 f8a9 	bl	8004670 <delay>
	turnOff(obj);
 800451e:	4628      	mov	r0, r5
 8004520:	f7ff ffe4 	bl	80044ec <turnOff>
	delay(blkPeriod / 2);
 8004524:	4620      	mov	r0, r4
 8004526:	f000 f8a3 	bl	8004670 <delay>
 800452a:	bd38      	pop	{r3, r4, r5, pc}

0800452c <newI2C>:
I2C* ActiveI2Cs[Max_Num_I2Cs];


/* Pseudo-Constructor
 * */
I2C *newI2C(I2C* instance, I2C_HandleTypeDef *hi2c) {
 800452c:	b410      	push	{r4}
	instance->hi2c = hi2c;
 800452e:	6001      	str	r1, [r0, #0]
	instance->TxTimeOut = I2C_Default_TxTimeOut;
 8004530:	f242 7310 	movw	r3, #10000	; 0x2710
 8004534:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	instance->RxTimeOut = I2C_Default_RxTimeOut;
 8004538:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	instance->TxStatus = Ready;
 800453c:	2301      	movs	r3, #1
 800453e:	f880 30d4 	strb.w	r3, [r0, #212]	; 0xd4
	instance->RxStatus = Ready;
 8004542:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	for(int i = 0; i < numActiveI2Cs; i++)
 8004546:	2300      	movs	r3, #0
 8004548:	4a0c      	ldr	r2, [pc, #48]	; (800457c <newI2C+0x50>)
 800454a:	8812      	ldrh	r2, [r2, #0]
 800454c:	4614      	mov	r4, r2
 800454e:	4293      	cmp	r3, r2
 8004550:	da0b      	bge.n	800456a <newI2C+0x3e>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8004552:	4a0b      	ldr	r2, [pc, #44]	; (8004580 <newI2C+0x54>)
 8004554:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	4291      	cmp	r1, r2
 800455c:	d001      	beq.n	8004562 <newI2C+0x36>
	for(int i = 0; i < numActiveI2Cs; i++)
 800455e:	3301      	adds	r3, #1
 8004560:	e7f2      	b.n	8004548 <newI2C+0x1c>
			ActiveI2Cs[i] = instance;
 8004562:	4a07      	ldr	r2, [pc, #28]	; (8004580 <newI2C+0x54>)
 8004564:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			return instance;
 8004568:	e005      	b.n	8004576 <newI2C+0x4a>
		}
	ActiveI2Cs[numActiveI2Cs++] = instance;
 800456a:	3201      	adds	r2, #1
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <newI2C+0x50>)
 800456e:	801a      	strh	r2, [r3, #0]
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <newI2C+0x54>)
 8004572:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	return instance;
}
 8004576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	20000698 	.word	0x20000698
 8004580:	20000b9c 	.word	0x20000b9c

08004584 <i2cSend_IT>:
	return instance->RxBuffer;
}



void i2cSend_IT(I2C* instance, uint16_t Mode) {
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//check if the previous transmission is completed
	if(instance->TxStatus == InProcess) return;
 8004586:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d016      	beq.n	80045be <i2cSend_IT+0x3a>
 8004590:	460c      	mov	r4, r1
 8004592:	4606      	mov	r6, r0
	HAL_StatusTypeDef Status;
	if(Mode != SlaveMode)
 8004594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004598:	4299      	cmp	r1, r3
 800459a:	d011      	beq.n	80045c0 <i2cSend_IT+0x3c>
		//The Mode variable here in MasterMode includes devAddress
		Status = HAL_I2C_Master_Transmit_IT(instance->hi2c, Mode /*Actually devAddress*/,
 800459c:	4605      	mov	r5, r0
 800459e:	f855 7b04 	ldr.w	r7, [r5], #4
			                       (uint8_t*)instance->TxBuffer, strlen(instance->TxBuffer));
 80045a2:	4628      	mov	r0, r5
 80045a4:	f7fb fe34 	bl	8000210 <strlen>
		Status = HAL_I2C_Master_Transmit_IT(instance->hi2c, Mode /*Actually devAddress*/,
 80045a8:	b283      	uxth	r3, r0
 80045aa:	462a      	mov	r2, r5
 80045ac:	4621      	mov	r1, r4
 80045ae:	4638      	mov	r0, r7
 80045b0:	f7fd f9f4 	bl	800199c <HAL_I2C_Master_Transmit_IT>
	else
		Status =  HAL_I2C_Slave_Transmit_IT(instance->hi2c, (uint8_t*)instance->TxBuffer,
										 strlen(instance->TxBuffer));

	if(Status == HAL_ERROR) {
 80045b4:	2801      	cmp	r0, #1
 80045b6:	d00f      	beq.n	80045d8 <i2cSend_IT+0x54>
		instance->TxStatus = Error;
		throwException("THL_I2C.c: i2cSend_IT() | Error");
		return;
	}
	instance->TxStatus = InProcess;
 80045b8:	2302      	movs	r3, #2
 80045ba:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
 80045be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Status =  HAL_I2C_Slave_Transmit_IT(instance->hi2c, (uint8_t*)instance->TxBuffer,
 80045c0:	4604      	mov	r4, r0
 80045c2:	f854 5b04 	ldr.w	r5, [r4], #4
										 strlen(instance->TxBuffer));
 80045c6:	4620      	mov	r0, r4
 80045c8:	f7fb fe22 	bl	8000210 <strlen>
		Status =  HAL_I2C_Slave_Transmit_IT(instance->hi2c, (uint8_t*)instance->TxBuffer,
 80045cc:	b282      	uxth	r2, r0
 80045ce:	4621      	mov	r1, r4
 80045d0:	4628      	mov	r0, r5
 80045d2:	f7fd fa49 	bl	8001a68 <HAL_I2C_Slave_Transmit_IT>
 80045d6:	e7ed      	b.n	80045b4 <i2cSend_IT+0x30>
		instance->TxStatus = Error;
 80045d8:	2305      	movs	r3, #5
 80045da:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
		throwException("THL_I2C.c: i2cSend_IT() | Error");
 80045de:	4802      	ldr	r0, [pc, #8]	; (80045e8 <i2cSend_IT+0x64>)
 80045e0:	f000 f91a 	bl	8004818 <throwException>
		return;
 80045e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045e6:	bf00      	nop
 80045e8:	08007728 	.word	0x08007728

080045ec <IT_CallBack_I2cTC>:
			ActiveI2Cs[i]->TxStatus = Completed;
		}
	}
}

__weak void IT_CallBack_I2cTC(I2C* instance){
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80045f0:	b538      	push	{r3, r4, r5, lr}
 80045f2:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 80045f4:	2400      	movs	r4, #0
 80045f6:	e000      	b.n	80045fa <HAL_I2C_MasterTxCpltCallback+0xa>
 80045f8:	3401      	adds	r4, #1
 80045fa:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <HAL_I2C_MasterTxCpltCallback+0x34>)
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	429c      	cmp	r4, r3
 8004600:	da0e      	bge.n	8004620 <HAL_I2C_MasterTxCpltCallback+0x30>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_I2C_MasterTxCpltCallback+0x38>)
 8004604:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004608:	6803      	ldr	r3, [r0, #0]
 800460a:	42ab      	cmp	r3, r5
 800460c:	d1f4      	bne.n	80045f8 <HAL_I2C_MasterTxCpltCallback+0x8>
			IT_CallBack_I2cTC(ActiveI2Cs[i]);
 800460e:	f7ff ffed 	bl	80045ec <IT_CallBack_I2cTC>
			ActiveI2Cs[i]->TxStatus = Completed;
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <HAL_I2C_MasterTxCpltCallback+0x38>)
 8004614:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004618:	2203      	movs	r2, #3
 800461a:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 800461e:	e7eb      	b.n	80045f8 <HAL_I2C_MasterTxCpltCallback+0x8>
}
 8004620:	bd38      	pop	{r3, r4, r5, pc}
 8004622:	bf00      	nop
 8004624:	20000698 	.word	0x20000698
 8004628:	20000b9c 	.word	0x20000b9c

0800462c <HAL_I2C_SlaveTxCpltCallback>:
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 8004630:	2400      	movs	r4, #0
 8004632:	e000      	b.n	8004636 <HAL_I2C_SlaveTxCpltCallback+0xa>
 8004634:	3401      	adds	r4, #1
 8004636:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <HAL_I2C_SlaveTxCpltCallback+0x34>)
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	429c      	cmp	r4, r3
 800463c:	da0e      	bge.n	800465c <HAL_I2C_SlaveTxCpltCallback+0x30>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 800463e:	4b09      	ldr	r3, [pc, #36]	; (8004664 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8004640:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004644:	6803      	ldr	r3, [r0, #0]
 8004646:	42ab      	cmp	r3, r5
 8004648:	d1f4      	bne.n	8004634 <HAL_I2C_SlaveTxCpltCallback+0x8>
			IT_CallBack_I2cTC(ActiveI2Cs[i]);
 800464a:	f7ff ffcf 	bl	80045ec <IT_CallBack_I2cTC>
			ActiveI2Cs[i]->TxStatus = Completed;
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8004650:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004654:	2203      	movs	r2, #3
 8004656:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 800465a:	e7eb      	b.n	8004634 <HAL_I2C_SlaveTxCpltCallback+0x8>
}
 800465c:	bd38      	pop	{r3, r4, r5, pc}
 800465e:	bf00      	nop
 8004660:	20000698 	.word	0x20000698
 8004664:	20000b9c 	.word	0x20000b9c

08004668 <millis>:
void delay(uint32_t Time) {
		uint32_t T_init = millis();
		while(millis() - T_init < Time);
}*/
#else
__weak uint32_t millis(void) {
 8004668:	b508      	push	{r3, lr}
		return HAL_GetTick();
 800466a:	f7fc fc8d 	bl	8000f88 <HAL_GetTick>
}
 800466e:	bd08      	pop	{r3, pc}

08004670 <delay>:
}
void delay_us(uint32_t Time) {
		uint32_t T_init = micros(); 
		while(micros() - T_init < Time); 
}
void delay(uint32_t Time) {
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4605      	mov	r5, r0
		uint32_t T_init = millis(); 
 8004674:	f7ff fff8 	bl	8004668 <millis>
 8004678:	4604      	mov	r4, r0
		while(millis() - T_init < Time); 
 800467a:	f7ff fff5 	bl	8004668 <millis>
 800467e:	1b00      	subs	r0, r0, r4
 8004680:	42a8      	cmp	r0, r5
 8004682:	d3fa      	bcc.n	800467a <delay+0xa>
}
 8004684:	bd38      	pop	{r3, r4, r5, pc}
	...

08004688 <newUSART>:
  *The actual initiation of the usart circuit takes place by HAL 
  *before THL_Main.c gets called by main.c
  *Treated it as Pseudo-Constructor
  *Note: no memory allocation occurs
  */
USART *newUSART(USART* instance, UART_HandleTypeDef *huart) {
 8004688:	b410      	push	{r4}
	instance->huart = huart;
 800468a:	6001      	str	r1, [r0, #0]
	instance->TxTimeOut = USART_Default_TxTimeOut;
 800468c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004690:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	instance->RxTimeOut = USART_Default_RxTimeOut;
 8004694:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	instance->TxStatus = Ready;
 8004698:	2301      	movs	r3, #1
 800469a:	f880 30d4 	strb.w	r3, [r0, #212]	; 0xd4
	instance->RxStatus = Ready;
 800469e:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	for(int i = 0; i < numActiveUSARTs; i++) 
 80046a2:	2300      	movs	r3, #0
 80046a4:	4a0c      	ldr	r2, [pc, #48]	; (80046d8 <newUSART+0x50>)
 80046a6:	8812      	ldrh	r2, [r2, #0]
 80046a8:	4614      	mov	r4, r2
 80046aa:	4293      	cmp	r3, r2
 80046ac:	da0b      	bge.n	80046c6 <newUSART+0x3e>
		if(ActiveUSARTs[i]->huart == huart) {
 80046ae:	4a0b      	ldr	r2, [pc, #44]	; (80046dc <newUSART+0x54>)
 80046b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	4291      	cmp	r1, r2
 80046b8:	d001      	beq.n	80046be <newUSART+0x36>
	for(int i = 0; i < numActiveUSARTs; i++) 
 80046ba:	3301      	adds	r3, #1
 80046bc:	e7f2      	b.n	80046a4 <newUSART+0x1c>
			ActiveUSARTs[i] = instance;
 80046be:	4a07      	ldr	r2, [pc, #28]	; (80046dc <newUSART+0x54>)
 80046c0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			return instance;
 80046c4:	e005      	b.n	80046d2 <newUSART+0x4a>
		}
	ActiveUSARTs[numActiveUSARTs++] = instance;
 80046c6:	3201      	adds	r2, #1
 80046c8:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <newUSART+0x50>)
 80046ca:	801a      	strh	r2, [r3, #0]
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <newUSART+0x54>)
 80046ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	return instance;
}
 80046d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	2000069a 	.word	0x2000069a
 80046dc:	20000c8c 	.word	0x20000c8c

080046e0 <newMainUSART>:

/**Pseudo-Constructor for Default/Main USART
  *It sets the usart
  */
USART *newMainUSART(UART_HandleTypeDef *huart) { 
 80046e0:	b508      	push	{r3, lr}
	return newUSART(&DefaultUSART, huart);
 80046e2:	4601      	mov	r1, r0
 80046e4:	4801      	ldr	r0, [pc, #4]	; (80046ec <newMainUSART+0xc>)
 80046e6:	f7ff ffcf 	bl	8004688 <newUSART>
}
 80046ea:	bd08      	pop	{r3, pc}
 80046ec:	20000bb4 	.word	0x20000bb4

080046f0 <usartSend>:
/*=========================================================================*/



/*==============================Transmission===============================*/
void usartSend(USART* instance) {
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	4605      	mov	r5, r0
	HAL_StatusTypeDef Status;
	Status = HAL_UART_Transmit(instance->huart, (uint8_t*)instance->TxBuffer, strlen(instance->TxBuffer), instance->TxTimeOut);
 80046f4:	4604      	mov	r4, r0
 80046f6:	f854 6b04 	ldr.w	r6, [r4], #4
 80046fa:	4620      	mov	r0, r4
 80046fc:	f7fb fd88 	bl	8000210 <strlen>
 8004700:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
 8004704:	b282      	uxth	r2, r0
 8004706:	4621      	mov	r1, r4
 8004708:	4630      	mov	r0, r6
 800470a:	f7ff f8a0 	bl	800384e <HAL_UART_Transmit>
	if(Status == HAL_BUSY) instance->TxStatus = InProcess;
 800470e:	2802      	cmp	r0, #2
 8004710:	d008      	beq.n	8004724 <usartSend+0x34>
	else if(Status == HAL_TIMEOUT) {
 8004712:	2803      	cmp	r0, #3
 8004714:	d00a      	beq.n	800472c <usartSend+0x3c>
		__HAL_UNLOCK(instance->huart);
		instance->huart->gState = HAL_UART_STATE_READY;
		
		throwException("THL_Usart.c: usartSend() | TimeOut");
	}
	else if(Status == HAL_ERROR) {
 8004716:	2801      	cmp	r0, #1
 8004718:	d017      	beq.n	800474a <usartSend+0x5a>
		instance->TxStatus = Error;
		throwException("THL_Usart.c: usartSend() | Error");
	}
	else if(Status == HAL_OK) instance->TxStatus = Completed;
 800471a:	b910      	cbnz	r0, 8004722 <usartSend+0x32>
 800471c:	2303      	movs	r3, #3
 800471e:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
 8004722:	bd70      	pop	{r4, r5, r6, pc}
	if(Status == HAL_BUSY) instance->TxStatus = InProcess;
 8004724:	2302      	movs	r3, #2
 8004726:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
 800472a:	bd70      	pop	{r4, r5, r6, pc}
		instance->TxStatus = TimeOut;
 800472c:	2304      	movs	r3, #4
 800472e:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
		__HAL_UNLOCK(instance->huart);
 8004732:	682b      	ldr	r3, [r5, #0]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		instance->huart->gState = HAL_UART_STATE_READY;
 800473a:	682b      	ldr	r3, [r5, #0]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		throwException("THL_Usart.c: usartSend() | TimeOut");
 8004742:	4805      	ldr	r0, [pc, #20]	; (8004758 <usartSend+0x68>)
 8004744:	f000 f868 	bl	8004818 <throwException>
 8004748:	bd70      	pop	{r4, r5, r6, pc}
		instance->TxStatus = Error;
 800474a:	2305      	movs	r3, #5
 800474c:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
		throwException("THL_Usart.c: usartSend() | Error");
 8004750:	4802      	ldr	r0, [pc, #8]	; (800475c <usartSend+0x6c>)
 8004752:	f000 f861 	bl	8004818 <throwException>
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	08007770 	.word	0x08007770
 800475c:	08007794 	.word	0x08007794

08004760 <HAL_UART_TxCpltCallback>:
	}
	instance->TxStatus = InProcess;
} 
/** Interrupt handler call back function
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveUSARTs; i++) {
 8004764:	2400      	movs	r4, #0
 8004766:	e000      	b.n	800476a <HAL_UART_TxCpltCallback+0xa>
 8004768:	3401      	adds	r4, #1
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <HAL_UART_TxCpltCallback+0x34>)
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	429c      	cmp	r4, r3
 8004770:	da0e      	bge.n	8004790 <HAL_UART_TxCpltCallback+0x30>
		if(ActiveUSARTs[i]->huart == huart) {
 8004772:	4b09      	ldr	r3, [pc, #36]	; (8004798 <HAL_UART_TxCpltCallback+0x38>)
 8004774:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004778:	6803      	ldr	r3, [r0, #0]
 800477a:	42ab      	cmp	r3, r5
 800477c:	d1f4      	bne.n	8004768 <HAL_UART_TxCpltCallback+0x8>
			IT_CallBack_UsartTC(ActiveUSARTs[i]);
 800477e:	f7ff fe0b 	bl	8004398 <IT_CallBack_UsartTC>
			ActiveUSARTs[i]->TxStatus = Completed;
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_UART_TxCpltCallback+0x38>)
 8004784:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004788:	2203      	movs	r2, #3
 800478a:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 800478e:	e7eb      	b.n	8004768 <HAL_UART_TxCpltCallback+0x8>
		}
	}
}
 8004790:	bd38      	pop	{r3, r4, r5, pc}
 8004792:	bf00      	nop
 8004794:	2000069a 	.word	0x2000069a
 8004798:	20000c8c 	.word	0x20000c8c

0800479c <printf_u>:

void print(USART* instance, Format_Param) {
	formatStrings(instance->TxBuffer);
	usartSend(instance);
}
void printf_u(Format_Param) {
 800479c:	b40f      	push	{r0, r1, r2, r3}
 800479e:	b510      	push	{r4, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	aa04      	add	r2, sp, #16
 80047a4:	f852 1b04 	ldr.w	r1, [r2], #4
	formatStrings(DefaultUSART.TxBuffer);
 80047a8:	9201      	str	r2, [sp, #4]
 80047aa:	4c06      	ldr	r4, [pc, #24]	; (80047c4 <printf_u+0x28>)
 80047ac:	4620      	mov	r0, r4
 80047ae:	f000 f8b1 	bl	8004914 <vsprintf>
	usartSend(&DefaultUSART);
 80047b2:	1f20      	subs	r0, r4, #4
 80047b4:	f7ff ff9c 	bl	80046f0 <usartSend>
}
 80047b8:	b002      	add	sp, #8
 80047ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047be:	b004      	add	sp, #16
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000bb8 	.word	0x20000bb8

080047c8 <IT_CallBack_UsartRC>:
			ActiveUSARTs[i]->RxStatus = Completed;
		}
	}
}

__weak void IT_CallBack_UsartRC(USART* instance){
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveUSARTs; i++) {
 80047d0:	2400      	movs	r4, #0
 80047d2:	e000      	b.n	80047d6 <HAL_UART_RxCpltCallback+0xa>
 80047d4:	3401      	adds	r4, #1
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <HAL_UART_RxCpltCallback+0x34>)
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	429c      	cmp	r4, r3
 80047dc:	da0e      	bge.n	80047fc <HAL_UART_RxCpltCallback+0x30>
		if(ActiveUSARTs[i]->huart == huart) {
 80047de:	4b09      	ldr	r3, [pc, #36]	; (8004804 <HAL_UART_RxCpltCallback+0x38>)
 80047e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80047e4:	6803      	ldr	r3, [r0, #0]
 80047e6:	42ab      	cmp	r3, r5
 80047e8:	d1f4      	bne.n	80047d4 <HAL_UART_RxCpltCallback+0x8>
			IT_CallBack_UsartRC(ActiveUSARTs[i]);
 80047ea:	f7ff ffed 	bl	80047c8 <IT_CallBack_UsartRC>
			ActiveUSARTs[i]->RxStatus = Completed;
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_UART_RxCpltCallback+0x38>)
 80047f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80047f4:	2203      	movs	r2, #3
 80047f6:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 80047fa:	e7eb      	b.n	80047d4 <HAL_UART_RxCpltCallback+0x8>
}
 80047fc:	bd38      	pop	{r3, r4, r5, pc}
 80047fe:	bf00      	nop
 8004800:	2000069a 	.word	0x2000069a
 8004804:	20000c8c 	.word	0x20000c8c

08004808 <HAL_UART_ErrorCallback>:

/*=========================================================================*/



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004808:	b508      	push	{r3, lr}
	throwException("THL_Usart.c: HAL_UART_ErrorCallback()");
 800480a:	4802      	ldr	r0, [pc, #8]	; (8004814 <HAL_UART_ErrorCallback+0xc>)
 800480c:	f000 f804 	bl	8004818 <throwException>
 8004810:	bd08      	pop	{r3, pc}
 8004812:	bf00      	nop
 8004814:	08007748 	.word	0x08007748

08004818 <throwException>:

/*==========================Exception Handling==============================*/
__weak void Exception_Handler(const char* str) {
	UNUSED(str);
}
void throwException(const char* str) {
 8004818:	b508      	push	{r3, lr}
	Exception_Handler(str);
 800481a:	f7ff fe43 	bl	80044a4 <Exception_Handler>
 800481e:	bd08      	pop	{r3, pc}

08004820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004858 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004824:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004826:	e003      	b.n	8004830 <LoopCopyDataInit>

08004828 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800482a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800482c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800482e:	3104      	adds	r1, #4

08004830 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004830:	480b      	ldr	r0, [pc, #44]	; (8004860 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004834:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004836:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004838:	d3f6      	bcc.n	8004828 <CopyDataInit>
  ldr  r2, =_sbss
 800483a:	4a0b      	ldr	r2, [pc, #44]	; (8004868 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800483c:	e002      	b.n	8004844 <LoopFillZerobss>

0800483e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800483e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004840:	f842 3b04 	str.w	r3, [r2], #4

08004844 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004846:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004848:	d3f9      	bcc.n	800483e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800484a:	f7ff fd7f 	bl	800434c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800484e:	f000 f811 	bl	8004874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004852:	f7ff fb15 	bl	8003e80 <main>
  bx  lr    
 8004856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004858:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800485c:	08007a98 	.word	0x08007a98
  ldr  r0, =_sdata
 8004860:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004864:	2000067c 	.word	0x2000067c
  ldr  r2, =_sbss
 8004868:	2000067c 	.word	0x2000067c
  ldr  r3, = _ebss
 800486c:	20000cec 	.word	0x20000cec

08004870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004870:	e7fe      	b.n	8004870 <ADC_IRQHandler>
	...

08004874 <__libc_init_array>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	4e0d      	ldr	r6, [pc, #52]	; (80048ac <__libc_init_array+0x38>)
 8004878:	4c0d      	ldr	r4, [pc, #52]	; (80048b0 <__libc_init_array+0x3c>)
 800487a:	1ba4      	subs	r4, r4, r6
 800487c:	10a4      	asrs	r4, r4, #2
 800487e:	2500      	movs	r5, #0
 8004880:	42a5      	cmp	r5, r4
 8004882:	d109      	bne.n	8004898 <__libc_init_array+0x24>
 8004884:	4e0b      	ldr	r6, [pc, #44]	; (80048b4 <__libc_init_array+0x40>)
 8004886:	4c0c      	ldr	r4, [pc, #48]	; (80048b8 <__libc_init_array+0x44>)
 8004888:	f002 ff0e 	bl	80076a8 <_init>
 800488c:	1ba4      	subs	r4, r4, r6
 800488e:	10a4      	asrs	r4, r4, #2
 8004890:	2500      	movs	r5, #0
 8004892:	42a5      	cmp	r5, r4
 8004894:	d105      	bne.n	80048a2 <__libc_init_array+0x2e>
 8004896:	bd70      	pop	{r4, r5, r6, pc}
 8004898:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800489c:	4798      	blx	r3
 800489e:	3501      	adds	r5, #1
 80048a0:	e7ee      	b.n	8004880 <__libc_init_array+0xc>
 80048a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048a6:	4798      	blx	r3
 80048a8:	3501      	adds	r5, #1
 80048aa:	e7f2      	b.n	8004892 <__libc_init_array+0x1e>
 80048ac:	08007a90 	.word	0x08007a90
 80048b0:	08007a90 	.word	0x08007a90
 80048b4:	08007a90 	.word	0x08007a90
 80048b8:	08007a94 	.word	0x08007a94

080048bc <memcpy>:
 80048bc:	b510      	push	{r4, lr}
 80048be:	1e43      	subs	r3, r0, #1
 80048c0:	440a      	add	r2, r1
 80048c2:	4291      	cmp	r1, r2
 80048c4:	d100      	bne.n	80048c8 <memcpy+0xc>
 80048c6:	bd10      	pop	{r4, pc}
 80048c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048d0:	e7f7      	b.n	80048c2 <memcpy+0x6>

080048d2 <memset>:
 80048d2:	4402      	add	r2, r0
 80048d4:	4603      	mov	r3, r0
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d100      	bne.n	80048dc <memset+0xa>
 80048da:	4770      	bx	lr
 80048dc:	f803 1b01 	strb.w	r1, [r3], #1
 80048e0:	e7f9      	b.n	80048d6 <memset+0x4>

080048e2 <_vsprintf_r>:
 80048e2:	b510      	push	{r4, lr}
 80048e4:	b09a      	sub	sp, #104	; 0x68
 80048e6:	f44f 7402 	mov.w	r4, #520	; 0x208
 80048ea:	9100      	str	r1, [sp, #0]
 80048ec:	9104      	str	r1, [sp, #16]
 80048ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048f2:	9102      	str	r1, [sp, #8]
 80048f4:	9105      	str	r1, [sp, #20]
 80048f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80048fa:	f8ad 100e 	strh.w	r1, [sp, #14]
 80048fe:	4669      	mov	r1, sp
 8004900:	f8ad 400c 	strh.w	r4, [sp, #12]
 8004904:	f000 f810 	bl	8004928 <_svfprintf_r>
 8004908:	9b00      	ldr	r3, [sp, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	b01a      	add	sp, #104	; 0x68
 8004910:	bd10      	pop	{r4, pc}
	...

08004914 <vsprintf>:
 8004914:	4613      	mov	r3, r2
 8004916:	460a      	mov	r2, r1
 8004918:	4601      	mov	r1, r0
 800491a:	4802      	ldr	r0, [pc, #8]	; (8004924 <vsprintf+0x10>)
 800491c:	6800      	ldr	r0, [r0, #0]
 800491e:	f7ff bfe0 	b.w	80048e2 <_vsprintf_r>
 8004922:	bf00      	nop
 8004924:	2000000c 	.word	0x2000000c

08004928 <_svfprintf_r>:
 8004928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492c:	b0bd      	sub	sp, #244	; 0xf4
 800492e:	468a      	mov	sl, r1
 8004930:	4615      	mov	r5, r2
 8004932:	461f      	mov	r7, r3
 8004934:	4683      	mov	fp, r0
 8004936:	f001 fe25 	bl	8006584 <_localeconv_r>
 800493a:	6803      	ldr	r3, [r0, #0]
 800493c:	930d      	str	r3, [sp, #52]	; 0x34
 800493e:	4618      	mov	r0, r3
 8004940:	f7fb fc66 	bl	8000210 <strlen>
 8004944:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004948:	9008      	str	r0, [sp, #32]
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	d518      	bpl.n	8004980 <_svfprintf_r+0x58>
 800494e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004952:	b9ab      	cbnz	r3, 8004980 <_svfprintf_r+0x58>
 8004954:	2140      	movs	r1, #64	; 0x40
 8004956:	4658      	mov	r0, fp
 8004958:	f001 fe2a 	bl	80065b0 <_malloc_r>
 800495c:	f8ca 0000 	str.w	r0, [sl]
 8004960:	f8ca 0010 	str.w	r0, [sl, #16]
 8004964:	b948      	cbnz	r0, 800497a <_svfprintf_r+0x52>
 8004966:	230c      	movs	r3, #12
 8004968:	f8cb 3000 	str.w	r3, [fp]
 800496c:	f04f 33ff 	mov.w	r3, #4294967295
 8004970:	9309      	str	r3, [sp, #36]	; 0x24
 8004972:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004974:	b03d      	add	sp, #244	; 0xf4
 8004976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800497a:	2340      	movs	r3, #64	; 0x40
 800497c:	f8ca 3014 	str.w	r3, [sl, #20]
 8004980:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8004be8 <_svfprintf_r+0x2c0>
 8004984:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004988:	2300      	movs	r3, #0
 800498a:	ac2c      	add	r4, sp, #176	; 0xb0
 800498c:	941f      	str	r4, [sp, #124]	; 0x7c
 800498e:	9321      	str	r3, [sp, #132]	; 0x84
 8004990:	9320      	str	r3, [sp, #128]	; 0x80
 8004992:	9505      	str	r5, [sp, #20]
 8004994:	9303      	str	r3, [sp, #12]
 8004996:	9311      	str	r3, [sp, #68]	; 0x44
 8004998:	9310      	str	r3, [sp, #64]	; 0x40
 800499a:	9309      	str	r3, [sp, #36]	; 0x24
 800499c:	9d05      	ldr	r5, [sp, #20]
 800499e:	462b      	mov	r3, r5
 80049a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049a4:	b112      	cbz	r2, 80049ac <_svfprintf_r+0x84>
 80049a6:	2a25      	cmp	r2, #37	; 0x25
 80049a8:	f040 8083 	bne.w	8004ab2 <_svfprintf_r+0x18a>
 80049ac:	9b05      	ldr	r3, [sp, #20]
 80049ae:	1aee      	subs	r6, r5, r3
 80049b0:	d00d      	beq.n	80049ce <_svfprintf_r+0xa6>
 80049b2:	e884 0048 	stmia.w	r4, {r3, r6}
 80049b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049b8:	4433      	add	r3, r6
 80049ba:	9321      	str	r3, [sp, #132]	; 0x84
 80049bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049be:	3301      	adds	r3, #1
 80049c0:	2b07      	cmp	r3, #7
 80049c2:	9320      	str	r3, [sp, #128]	; 0x80
 80049c4:	dc77      	bgt.n	8004ab6 <_svfprintf_r+0x18e>
 80049c6:	3408      	adds	r4, #8
 80049c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ca:	4433      	add	r3, r6
 80049cc:	9309      	str	r3, [sp, #36]	; 0x24
 80049ce:	782b      	ldrb	r3, [r5, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8729 	beq.w	8005828 <_svfprintf_r+0xf00>
 80049d6:	2300      	movs	r3, #0
 80049d8:	1c69      	adds	r1, r5, #1
 80049da:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80049de:	461a      	mov	r2, r3
 80049e0:	f04f 39ff 	mov.w	r9, #4294967295
 80049e4:	930a      	str	r3, [sp, #40]	; 0x28
 80049e6:	461d      	mov	r5, r3
 80049e8:	200a      	movs	r0, #10
 80049ea:	1c4e      	adds	r6, r1, #1
 80049ec:	7809      	ldrb	r1, [r1, #0]
 80049ee:	9605      	str	r6, [sp, #20]
 80049f0:	9102      	str	r1, [sp, #8]
 80049f2:	9902      	ldr	r1, [sp, #8]
 80049f4:	3920      	subs	r1, #32
 80049f6:	2958      	cmp	r1, #88	; 0x58
 80049f8:	f200 8418 	bhi.w	800522c <_svfprintf_r+0x904>
 80049fc:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004a00:	041600a6 	.word	0x041600a6
 8004a04:	00ab0416 	.word	0x00ab0416
 8004a08:	04160416 	.word	0x04160416
 8004a0c:	04160416 	.word	0x04160416
 8004a10:	04160416 	.word	0x04160416
 8004a14:	006500ae 	.word	0x006500ae
 8004a18:	00b70416 	.word	0x00b70416
 8004a1c:	041600ba 	.word	0x041600ba
 8004a20:	00da00d7 	.word	0x00da00d7
 8004a24:	00da00da 	.word	0x00da00da
 8004a28:	00da00da 	.word	0x00da00da
 8004a2c:	00da00da 	.word	0x00da00da
 8004a30:	00da00da 	.word	0x00da00da
 8004a34:	04160416 	.word	0x04160416
 8004a38:	04160416 	.word	0x04160416
 8004a3c:	04160416 	.word	0x04160416
 8004a40:	04160416 	.word	0x04160416
 8004a44:	04160416 	.word	0x04160416
 8004a48:	012b0115 	.word	0x012b0115
 8004a4c:	012b0416 	.word	0x012b0416
 8004a50:	04160416 	.word	0x04160416
 8004a54:	04160416 	.word	0x04160416
 8004a58:	041600ed 	.word	0x041600ed
 8004a5c:	03400416 	.word	0x03400416
 8004a60:	04160416 	.word	0x04160416
 8004a64:	04160416 	.word	0x04160416
 8004a68:	03a80416 	.word	0x03a80416
 8004a6c:	04160416 	.word	0x04160416
 8004a70:	04160086 	.word	0x04160086
 8004a74:	04160416 	.word	0x04160416
 8004a78:	04160416 	.word	0x04160416
 8004a7c:	04160416 	.word	0x04160416
 8004a80:	04160416 	.word	0x04160416
 8004a84:	01070416 	.word	0x01070416
 8004a88:	012b006b 	.word	0x012b006b
 8004a8c:	012b012b 	.word	0x012b012b
 8004a90:	006b00f0 	.word	0x006b00f0
 8004a94:	04160416 	.word	0x04160416
 8004a98:	041600fa 	.word	0x041600fa
 8004a9c:	03420322 	.word	0x03420322
 8004aa0:	01010376 	.word	0x01010376
 8004aa4:	03870416 	.word	0x03870416
 8004aa8:	03aa0416 	.word	0x03aa0416
 8004aac:	04160416 	.word	0x04160416
 8004ab0:	03c2      	.short	0x03c2
 8004ab2:	461d      	mov	r5, r3
 8004ab4:	e773      	b.n	800499e <_svfprintf_r+0x76>
 8004ab6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ab8:	4651      	mov	r1, sl
 8004aba:	4658      	mov	r0, fp
 8004abc:	f002 fa84 	bl	8006fc8 <__ssprint_r>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	f040 8692 	bne.w	80057ea <_svfprintf_r+0xec2>
 8004ac6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ac8:	e77e      	b.n	80049c8 <_svfprintf_r+0xa0>
 8004aca:	2301      	movs	r3, #1
 8004acc:	222b      	movs	r2, #43	; 0x2b
 8004ace:	9905      	ldr	r1, [sp, #20]
 8004ad0:	e78b      	b.n	80049ea <_svfprintf_r+0xc2>
 8004ad2:	460f      	mov	r7, r1
 8004ad4:	e7fb      	b.n	8004ace <_svfprintf_r+0x1a6>
 8004ad6:	b10b      	cbz	r3, 8004adc <_svfprintf_r+0x1b4>
 8004ad8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004adc:	06ae      	lsls	r6, r5, #26
 8004ade:	f140 80aa 	bpl.w	8004c36 <_svfprintf_r+0x30e>
 8004ae2:	3707      	adds	r7, #7
 8004ae4:	f027 0707 	bic.w	r7, r7, #7
 8004ae8:	f107 0308 	add.w	r3, r7, #8
 8004aec:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004af0:	9304      	str	r3, [sp, #16]
 8004af2:	2e00      	cmp	r6, #0
 8004af4:	f177 0300 	sbcs.w	r3, r7, #0
 8004af8:	da06      	bge.n	8004b08 <_svfprintf_r+0x1e0>
 8004afa:	4276      	negs	r6, r6
 8004afc:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004b00:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004b04:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e2ca      	b.n	80050a2 <_svfprintf_r+0x77a>
 8004b0c:	b10b      	cbz	r3, 8004b12 <_svfprintf_r+0x1ea>
 8004b0e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004b12:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <_svfprintf_r+0x2c8>)
 8004b14:	9311      	str	r3, [sp, #68]	; 0x44
 8004b16:	06ab      	lsls	r3, r5, #26
 8004b18:	f140 8339 	bpl.w	800518e <_svfprintf_r+0x866>
 8004b1c:	3707      	adds	r7, #7
 8004b1e:	f027 0707 	bic.w	r7, r7, #7
 8004b22:	f107 0308 	add.w	r3, r7, #8
 8004b26:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004b2a:	9304      	str	r3, [sp, #16]
 8004b2c:	07e8      	lsls	r0, r5, #31
 8004b2e:	d50b      	bpl.n	8004b48 <_svfprintf_r+0x220>
 8004b30:	ea56 0307 	orrs.w	r3, r6, r7
 8004b34:	d008      	beq.n	8004b48 <_svfprintf_r+0x220>
 8004b36:	2330      	movs	r3, #48	; 0x30
 8004b38:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004b3c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004b40:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8004b44:	f045 0502 	orr.w	r5, r5, #2
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e2a7      	b.n	800509c <_svfprintf_r+0x774>
 8004b4c:	2a00      	cmp	r2, #0
 8004b4e:	d1be      	bne.n	8004ace <_svfprintf_r+0x1a6>
 8004b50:	2301      	movs	r3, #1
 8004b52:	2220      	movs	r2, #32
 8004b54:	e7bb      	b.n	8004ace <_svfprintf_r+0x1a6>
 8004b56:	f045 0501 	orr.w	r5, r5, #1
 8004b5a:	e7b8      	b.n	8004ace <_svfprintf_r+0x1a6>
 8004b5c:	683e      	ldr	r6, [r7, #0]
 8004b5e:	960a      	str	r6, [sp, #40]	; 0x28
 8004b60:	2e00      	cmp	r6, #0
 8004b62:	f107 0104 	add.w	r1, r7, #4
 8004b66:	dab4      	bge.n	8004ad2 <_svfprintf_r+0x1aa>
 8004b68:	4276      	negs	r6, r6
 8004b6a:	960a      	str	r6, [sp, #40]	; 0x28
 8004b6c:	460f      	mov	r7, r1
 8004b6e:	f045 0504 	orr.w	r5, r5, #4
 8004b72:	e7ac      	b.n	8004ace <_svfprintf_r+0x1a6>
 8004b74:	9905      	ldr	r1, [sp, #20]
 8004b76:	1c4e      	adds	r6, r1, #1
 8004b78:	7809      	ldrb	r1, [r1, #0]
 8004b7a:	9102      	str	r1, [sp, #8]
 8004b7c:	292a      	cmp	r1, #42	; 0x2a
 8004b7e:	d010      	beq.n	8004ba2 <_svfprintf_r+0x27a>
 8004b80:	f04f 0900 	mov.w	r9, #0
 8004b84:	9605      	str	r6, [sp, #20]
 8004b86:	9902      	ldr	r1, [sp, #8]
 8004b88:	3930      	subs	r1, #48	; 0x30
 8004b8a:	2909      	cmp	r1, #9
 8004b8c:	f63f af31 	bhi.w	80049f2 <_svfprintf_r+0xca>
 8004b90:	fb00 1909 	mla	r9, r0, r9, r1
 8004b94:	9905      	ldr	r1, [sp, #20]
 8004b96:	460e      	mov	r6, r1
 8004b98:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004b9c:	9102      	str	r1, [sp, #8]
 8004b9e:	9605      	str	r6, [sp, #20]
 8004ba0:	e7f1      	b.n	8004b86 <_svfprintf_r+0x25e>
 8004ba2:	6839      	ldr	r1, [r7, #0]
 8004ba4:	9605      	str	r6, [sp, #20]
 8004ba6:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8004baa:	3704      	adds	r7, #4
 8004bac:	e78f      	b.n	8004ace <_svfprintf_r+0x1a6>
 8004bae:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004bb2:	e78c      	b.n	8004ace <_svfprintf_r+0x1a6>
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	910a      	str	r1, [sp, #40]	; 0x28
 8004bb8:	9902      	ldr	r1, [sp, #8]
 8004bba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004bbc:	3930      	subs	r1, #48	; 0x30
 8004bbe:	fb00 1106 	mla	r1, r0, r6, r1
 8004bc2:	910a      	str	r1, [sp, #40]	; 0x28
 8004bc4:	9905      	ldr	r1, [sp, #20]
 8004bc6:	460e      	mov	r6, r1
 8004bc8:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004bcc:	9102      	str	r1, [sp, #8]
 8004bce:	9902      	ldr	r1, [sp, #8]
 8004bd0:	9605      	str	r6, [sp, #20]
 8004bd2:	3930      	subs	r1, #48	; 0x30
 8004bd4:	2909      	cmp	r1, #9
 8004bd6:	d9ef      	bls.n	8004bb8 <_svfprintf_r+0x290>
 8004bd8:	e70b      	b.n	80049f2 <_svfprintf_r+0xca>
 8004bda:	f045 0508 	orr.w	r5, r5, #8
 8004bde:	e776      	b.n	8004ace <_svfprintf_r+0x1a6>
 8004be0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004be4:	e773      	b.n	8004ace <_svfprintf_r+0x1a6>
 8004be6:	bf00      	nop
	...
 8004bf0:	080077c8 	.word	0x080077c8
 8004bf4:	9905      	ldr	r1, [sp, #20]
 8004bf6:	7809      	ldrb	r1, [r1, #0]
 8004bf8:	296c      	cmp	r1, #108	; 0x6c
 8004bfa:	d105      	bne.n	8004c08 <_svfprintf_r+0x2e0>
 8004bfc:	9905      	ldr	r1, [sp, #20]
 8004bfe:	3101      	adds	r1, #1
 8004c00:	9105      	str	r1, [sp, #20]
 8004c02:	f045 0520 	orr.w	r5, r5, #32
 8004c06:	e762      	b.n	8004ace <_svfprintf_r+0x1a6>
 8004c08:	f045 0510 	orr.w	r5, r5, #16
 8004c0c:	e75f      	b.n	8004ace <_svfprintf_r+0x1a6>
 8004c0e:	1d3b      	adds	r3, r7, #4
 8004c10:	9304      	str	r3, [sp, #16]
 8004c12:	2600      	movs	r6, #0
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004c1a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004c1e:	f04f 0901 	mov.w	r9, #1
 8004c22:	4637      	mov	r7, r6
 8004c24:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8004c28:	e11b      	b.n	8004e62 <_svfprintf_r+0x53a>
 8004c2a:	b10b      	cbz	r3, 8004c30 <_svfprintf_r+0x308>
 8004c2c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004c30:	f045 0510 	orr.w	r5, r5, #16
 8004c34:	e752      	b.n	8004adc <_svfprintf_r+0x1b4>
 8004c36:	f015 0f10 	tst.w	r5, #16
 8004c3a:	f107 0304 	add.w	r3, r7, #4
 8004c3e:	d003      	beq.n	8004c48 <_svfprintf_r+0x320>
 8004c40:	683e      	ldr	r6, [r7, #0]
 8004c42:	9304      	str	r3, [sp, #16]
 8004c44:	17f7      	asrs	r7, r6, #31
 8004c46:	e754      	b.n	8004af2 <_svfprintf_r+0x1ca>
 8004c48:	683e      	ldr	r6, [r7, #0]
 8004c4a:	9304      	str	r3, [sp, #16]
 8004c4c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c50:	bf18      	it	ne
 8004c52:	b236      	sxthne	r6, r6
 8004c54:	e7f6      	b.n	8004c44 <_svfprintf_r+0x31c>
 8004c56:	b10b      	cbz	r3, 8004c5c <_svfprintf_r+0x334>
 8004c58:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004c5c:	3707      	adds	r7, #7
 8004c5e:	f027 0707 	bic.w	r7, r7, #7
 8004c62:	f107 0308 	add.w	r3, r7, #8
 8004c66:	9304      	str	r3, [sp, #16]
 8004c68:	ed97 7b00 	vldr	d7, [r7]
 8004c6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004c70:	9b06      	ldr	r3, [sp, #24]
 8004c72:	9312      	str	r3, [sp, #72]	; 0x48
 8004c74:	9b07      	ldr	r3, [sp, #28]
 8004c76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c7a:	9313      	str	r3, [sp, #76]	; 0x4c
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c80:	4b4a      	ldr	r3, [pc, #296]	; (8004dac <_svfprintf_r+0x484>)
 8004c82:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004c86:	f7fb ff6d 	bl	8000b64 <__aeabi_dcmpun>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	f040 85d5 	bne.w	800583a <_svfprintf_r+0xf12>
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295
 8004c94:	4b45      	ldr	r3, [pc, #276]	; (8004dac <_svfprintf_r+0x484>)
 8004c96:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004c9a:	f7fb ff45 	bl	8000b28 <__aeabi_dcmple>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	f040 85cb 	bne.w	800583a <_svfprintf_r+0xf12>
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cac:	f7fb ff32 	bl	8000b14 <__aeabi_dcmplt>
 8004cb0:	b110      	cbz	r0, 8004cb8 <_svfprintf_r+0x390>
 8004cb2:	232d      	movs	r3, #45	; 0x2d
 8004cb4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004cb8:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <_svfprintf_r+0x488>)
 8004cba:	4a3e      	ldr	r2, [pc, #248]	; (8004db4 <_svfprintf_r+0x48c>)
 8004cbc:	9902      	ldr	r1, [sp, #8]
 8004cbe:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8004cc2:	2947      	cmp	r1, #71	; 0x47
 8004cc4:	bfcc      	ite	gt
 8004cc6:	4690      	movgt	r8, r2
 8004cc8:	4698      	movle	r8, r3
 8004cca:	f04f 0903 	mov.w	r9, #3
 8004cce:	2600      	movs	r6, #0
 8004cd0:	4637      	mov	r7, r6
 8004cd2:	e0c6      	b.n	8004e62 <_svfprintf_r+0x53a>
 8004cd4:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004cd8:	d022      	beq.n	8004d20 <_svfprintf_r+0x3f8>
 8004cda:	9b02      	ldr	r3, [sp, #8]
 8004cdc:	f023 0320 	bic.w	r3, r3, #32
 8004ce0:	2b47      	cmp	r3, #71	; 0x47
 8004ce2:	d104      	bne.n	8004cee <_svfprintf_r+0x3c6>
 8004ce4:	f1b9 0f00 	cmp.w	r9, #0
 8004ce8:	bf08      	it	eq
 8004cea:	f04f 0901 	moveq.w	r9, #1
 8004cee:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8004cf2:	930c      	str	r3, [sp, #48]	; 0x30
 8004cf4:	9b07      	ldr	r3, [sp, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da15      	bge.n	8004d26 <_svfprintf_r+0x3fe>
 8004cfa:	9b06      	ldr	r3, [sp, #24]
 8004cfc:	930e      	str	r3, [sp, #56]	; 0x38
 8004cfe:	9b07      	ldr	r3, [sp, #28]
 8004d00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d04:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d06:	232d      	movs	r3, #45	; 0x2d
 8004d08:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d0a:	9b02      	ldr	r3, [sp, #8]
 8004d0c:	f023 0720 	bic.w	r7, r3, #32
 8004d10:	2f46      	cmp	r7, #70	; 0x46
 8004d12:	d00e      	beq.n	8004d32 <_svfprintf_r+0x40a>
 8004d14:	2f45      	cmp	r7, #69	; 0x45
 8004d16:	d146      	bne.n	8004da6 <_svfprintf_r+0x47e>
 8004d18:	f109 0601 	add.w	r6, r9, #1
 8004d1c:	2102      	movs	r1, #2
 8004d1e:	e00a      	b.n	8004d36 <_svfprintf_r+0x40e>
 8004d20:	f04f 0906 	mov.w	r9, #6
 8004d24:	e7e3      	b.n	8004cee <_svfprintf_r+0x3c6>
 8004d26:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004d30:	e7ea      	b.n	8004d08 <_svfprintf_r+0x3e0>
 8004d32:	464e      	mov	r6, r9
 8004d34:	2103      	movs	r1, #3
 8004d36:	ab1d      	add	r3, sp, #116	; 0x74
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	ab1a      	add	r3, sp, #104	; 0x68
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	4632      	mov	r2, r6
 8004d40:	ab19      	add	r3, sp, #100	; 0x64
 8004d42:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8004d46:	4658      	mov	r0, fp
 8004d48:	f000 fe4e 	bl	80059e8 <_dtoa_r>
 8004d4c:	2f47      	cmp	r7, #71	; 0x47
 8004d4e:	4680      	mov	r8, r0
 8004d50:	d102      	bne.n	8004d58 <_svfprintf_r+0x430>
 8004d52:	07e8      	lsls	r0, r5, #31
 8004d54:	f140 857e 	bpl.w	8005854 <_svfprintf_r+0xf2c>
 8004d58:	eb08 0306 	add.w	r3, r8, r6
 8004d5c:	2f46      	cmp	r7, #70	; 0x46
 8004d5e:	9303      	str	r3, [sp, #12]
 8004d60:	d111      	bne.n	8004d86 <_svfprintf_r+0x45e>
 8004d62:	f898 3000 	ldrb.w	r3, [r8]
 8004d66:	2b30      	cmp	r3, #48	; 0x30
 8004d68:	d109      	bne.n	8004d7e <_svfprintf_r+0x456>
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004d72:	f7fb fec5 	bl	8000b00 <__aeabi_dcmpeq>
 8004d76:	b910      	cbnz	r0, 8004d7e <_svfprintf_r+0x456>
 8004d78:	f1c6 0601 	rsb	r6, r6, #1
 8004d7c:	9619      	str	r6, [sp, #100]	; 0x64
 8004d7e:	9a03      	ldr	r2, [sp, #12]
 8004d80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d82:	441a      	add	r2, r3
 8004d84:	9203      	str	r2, [sp, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004d8e:	f7fb feb7 	bl	8000b00 <__aeabi_dcmpeq>
 8004d92:	b988      	cbnz	r0, 8004db8 <_svfprintf_r+0x490>
 8004d94:	2230      	movs	r2, #48	; 0x30
 8004d96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d98:	9903      	ldr	r1, [sp, #12]
 8004d9a:	4299      	cmp	r1, r3
 8004d9c:	d90e      	bls.n	8004dbc <_svfprintf_r+0x494>
 8004d9e:	1c59      	adds	r1, r3, #1
 8004da0:	911d      	str	r1, [sp, #116]	; 0x74
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	e7f7      	b.n	8004d96 <_svfprintf_r+0x46e>
 8004da6:	464e      	mov	r6, r9
 8004da8:	e7b8      	b.n	8004d1c <_svfprintf_r+0x3f4>
 8004daa:	bf00      	nop
 8004dac:	7fefffff 	.word	0x7fefffff
 8004db0:	080077b8 	.word	0x080077b8
 8004db4:	080077bc 	.word	0x080077bc
 8004db8:	9b03      	ldr	r3, [sp, #12]
 8004dba:	931d      	str	r3, [sp, #116]	; 0x74
 8004dbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004dbe:	2f47      	cmp	r7, #71	; 0x47
 8004dc0:	eba3 0308 	sub.w	r3, r3, r8
 8004dc4:	9303      	str	r3, [sp, #12]
 8004dc6:	f040 80fa 	bne.w	8004fbe <_svfprintf_r+0x696>
 8004dca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dcc:	1cd9      	adds	r1, r3, #3
 8004dce:	db02      	blt.n	8004dd6 <_svfprintf_r+0x4ae>
 8004dd0:	4599      	cmp	r9, r3
 8004dd2:	f280 8120 	bge.w	8005016 <_svfprintf_r+0x6ee>
 8004dd6:	9b02      	ldr	r3, [sp, #8]
 8004dd8:	3b02      	subs	r3, #2
 8004dda:	9302      	str	r3, [sp, #8]
 8004ddc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004dde:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8004de2:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8004de6:	1e53      	subs	r3, r2, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	9319      	str	r3, [sp, #100]	; 0x64
 8004dec:	bfb6      	itet	lt
 8004dee:	f1c2 0301 	rsblt	r3, r2, #1
 8004df2:	222b      	movge	r2, #43	; 0x2b
 8004df4:	222d      	movlt	r2, #45	; 0x2d
 8004df6:	2b09      	cmp	r3, #9
 8004df8:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8004dfc:	f340 80fb 	ble.w	8004ff6 <_svfprintf_r+0x6ce>
 8004e00:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8004e04:	260a      	movs	r6, #10
 8004e06:	fb93 f0f6 	sdiv	r0, r3, r6
 8004e0a:	fb06 3310 	mls	r3, r6, r0, r3
 8004e0e:	3330      	adds	r3, #48	; 0x30
 8004e10:	2809      	cmp	r0, #9
 8004e12:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e16:	f102 31ff 	add.w	r1, r2, #4294967295
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f300 80e4 	bgt.w	8004fe8 <_svfprintf_r+0x6c0>
 8004e20:	3330      	adds	r3, #48	; 0x30
 8004e22:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004e26:	3a02      	subs	r2, #2
 8004e28:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8004e2c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8004e30:	4282      	cmp	r2, r0
 8004e32:	4619      	mov	r1, r3
 8004e34:	f0c0 80da 	bcc.w	8004fec <_svfprintf_r+0x6c4>
 8004e38:	9a03      	ldr	r2, [sp, #12]
 8004e3a:	ab1b      	add	r3, sp, #108	; 0x6c
 8004e3c:	1acb      	subs	r3, r1, r3
 8004e3e:	2a01      	cmp	r2, #1
 8004e40:	9310      	str	r3, [sp, #64]	; 0x40
 8004e42:	eb03 0902 	add.w	r9, r3, r2
 8004e46:	dc02      	bgt.n	8004e4e <_svfprintf_r+0x526>
 8004e48:	f015 0701 	ands.w	r7, r5, #1
 8004e4c:	d002      	beq.n	8004e54 <_svfprintf_r+0x52c>
 8004e4e:	9b08      	ldr	r3, [sp, #32]
 8004e50:	2700      	movs	r7, #0
 8004e52:	4499      	add	r9, r3
 8004e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e56:	b113      	cbz	r3, 8004e5e <_svfprintf_r+0x536>
 8004e58:	232d      	movs	r3, #45	; 0x2d
 8004e5a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004e5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e60:	2600      	movs	r6, #0
 8004e62:	454e      	cmp	r6, r9
 8004e64:	4633      	mov	r3, r6
 8004e66:	bfb8      	it	lt
 8004e68:	464b      	movlt	r3, r9
 8004e6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e6c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8004e70:	b113      	cbz	r3, 8004e78 <_svfprintf_r+0x550>
 8004e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e74:	3301      	adds	r3, #1
 8004e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e78:	f015 0302 	ands.w	r3, r5, #2
 8004e7c:	9314      	str	r3, [sp, #80]	; 0x50
 8004e7e:	bf1e      	ittt	ne
 8004e80:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8004e82:	3302      	addne	r3, #2
 8004e84:	930b      	strne	r3, [sp, #44]	; 0x2c
 8004e86:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8004e8a:	9315      	str	r3, [sp, #84]	; 0x54
 8004e8c:	d118      	bne.n	8004ec0 <_svfprintf_r+0x598>
 8004e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	930c      	str	r3, [sp, #48]	; 0x30
 8004e98:	dd12      	ble.n	8004ec0 <_svfprintf_r+0x598>
 8004e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	4ba9      	ldr	r3, [pc, #676]	; (8005144 <_svfprintf_r+0x81c>)
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	f300 81d5 	bgt.w	8005250 <_svfprintf_r+0x928>
 8004ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ea8:	6063      	str	r3, [r4, #4]
 8004eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004eac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004eae:	4413      	add	r3, r2
 8004eb0:	9321      	str	r3, [sp, #132]	; 0x84
 8004eb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	2b07      	cmp	r3, #7
 8004eb8:	9320      	str	r3, [sp, #128]	; 0x80
 8004eba:	f300 81e2 	bgt.w	8005282 <_svfprintf_r+0x95a>
 8004ebe:	3408      	adds	r4, #8
 8004ec0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8004ec4:	b173      	cbz	r3, 8004ee4 <_svfprintf_r+0x5bc>
 8004ec6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8004eca:	6023      	str	r3, [r4, #0]
 8004ecc:	2301      	movs	r3, #1
 8004ece:	6063      	str	r3, [r4, #4]
 8004ed0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	9321      	str	r3, [sp, #132]	; 0x84
 8004ed6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ed8:	3301      	adds	r3, #1
 8004eda:	2b07      	cmp	r3, #7
 8004edc:	9320      	str	r3, [sp, #128]	; 0x80
 8004ede:	f300 81da 	bgt.w	8005296 <_svfprintf_r+0x96e>
 8004ee2:	3408      	adds	r4, #8
 8004ee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ee6:	b16b      	cbz	r3, 8004f04 <_svfprintf_r+0x5dc>
 8004ee8:	ab18      	add	r3, sp, #96	; 0x60
 8004eea:	6023      	str	r3, [r4, #0]
 8004eec:	2302      	movs	r3, #2
 8004eee:	6063      	str	r3, [r4, #4]
 8004ef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ef2:	3302      	adds	r3, #2
 8004ef4:	9321      	str	r3, [sp, #132]	; 0x84
 8004ef6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ef8:	3301      	adds	r3, #1
 8004efa:	2b07      	cmp	r3, #7
 8004efc:	9320      	str	r3, [sp, #128]	; 0x80
 8004efe:	f300 81d4 	bgt.w	80052aa <_svfprintf_r+0x982>
 8004f02:	3408      	adds	r4, #8
 8004f04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f06:	2b80      	cmp	r3, #128	; 0x80
 8004f08:	d114      	bne.n	8004f34 <_svfprintf_r+0x60c>
 8004f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dd0f      	ble.n	8004f34 <_svfprintf_r+0x60c>
 8004f14:	4a8c      	ldr	r2, [pc, #560]	; (8005148 <_svfprintf_r+0x820>)
 8004f16:	6022      	str	r2, [r4, #0]
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	f300 81d0 	bgt.w	80052be <_svfprintf_r+0x996>
 8004f1e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f20:	6063      	str	r3, [r4, #4]
 8004f22:	4413      	add	r3, r2
 8004f24:	9321      	str	r3, [sp, #132]	; 0x84
 8004f26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f28:	3301      	adds	r3, #1
 8004f2a:	2b07      	cmp	r3, #7
 8004f2c:	9320      	str	r3, [sp, #128]	; 0x80
 8004f2e:	f300 81df 	bgt.w	80052f0 <_svfprintf_r+0x9c8>
 8004f32:	3408      	adds	r4, #8
 8004f34:	eba6 0609 	sub.w	r6, r6, r9
 8004f38:	2e00      	cmp	r6, #0
 8004f3a:	dd0f      	ble.n	8004f5c <_svfprintf_r+0x634>
 8004f3c:	4b82      	ldr	r3, [pc, #520]	; (8005148 <_svfprintf_r+0x820>)
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	2e10      	cmp	r6, #16
 8004f42:	f300 81df 	bgt.w	8005304 <_svfprintf_r+0x9dc>
 8004f46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f48:	9821      	ldr	r0, [sp, #132]	; 0x84
 8004f4a:	6066      	str	r6, [r4, #4]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	4406      	add	r6, r0
 8004f50:	2b07      	cmp	r3, #7
 8004f52:	9621      	str	r6, [sp, #132]	; 0x84
 8004f54:	9320      	str	r3, [sp, #128]	; 0x80
 8004f56:	f300 81ec 	bgt.w	8005332 <_svfprintf_r+0xa0a>
 8004f5a:	3408      	adds	r4, #8
 8004f5c:	05eb      	lsls	r3, r5, #23
 8004f5e:	f100 81f2 	bmi.w	8005346 <_svfprintf_r+0xa1e>
 8004f62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f64:	e884 0300 	stmia.w	r4, {r8, r9}
 8004f68:	444b      	add	r3, r9
 8004f6a:	9321      	str	r3, [sp, #132]	; 0x84
 8004f6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f6e:	3301      	adds	r3, #1
 8004f70:	2b07      	cmp	r3, #7
 8004f72:	9320      	str	r3, [sp, #128]	; 0x80
 8004f74:	f340 8419 	ble.w	80057aa <_svfprintf_r+0xe82>
 8004f78:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f7a:	4651      	mov	r1, sl
 8004f7c:	4658      	mov	r0, fp
 8004f7e:	f002 f823 	bl	8006fc8 <__ssprint_r>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	f040 8431 	bne.w	80057ea <_svfprintf_r+0xec2>
 8004f88:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f8a:	076b      	lsls	r3, r5, #29
 8004f8c:	f100 8410 	bmi.w	80057b0 <_svfprintf_r+0xe88>
 8004f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f96:	428a      	cmp	r2, r1
 8004f98:	bfac      	ite	ge
 8004f9a:	189b      	addge	r3, r3, r2
 8004f9c:	185b      	addlt	r3, r3, r1
 8004f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fa2:	b13b      	cbz	r3, 8004fb4 <_svfprintf_r+0x68c>
 8004fa4:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fa6:	4651      	mov	r1, sl
 8004fa8:	4658      	mov	r0, fp
 8004faa:	f002 f80d 	bl	8006fc8 <__ssprint_r>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	f040 841b 	bne.w	80057ea <_svfprintf_r+0xec2>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	9320      	str	r3, [sp, #128]	; 0x80
 8004fb8:	9f04      	ldr	r7, [sp, #16]
 8004fba:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fbc:	e4ee      	b.n	800499c <_svfprintf_r+0x74>
 8004fbe:	9b02      	ldr	r3, [sp, #8]
 8004fc0:	2b65      	cmp	r3, #101	; 0x65
 8004fc2:	f77f af0b 	ble.w	8004ddc <_svfprintf_r+0x4b4>
 8004fc6:	9b02      	ldr	r3, [sp, #8]
 8004fc8:	2b66      	cmp	r3, #102	; 0x66
 8004fca:	d124      	bne.n	8005016 <_svfprintf_r+0x6ee>
 8004fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	dd19      	ble.n	8005006 <_svfprintf_r+0x6de>
 8004fd2:	f1b9 0f00 	cmp.w	r9, #0
 8004fd6:	d101      	bne.n	8004fdc <_svfprintf_r+0x6b4>
 8004fd8:	07ea      	lsls	r2, r5, #31
 8004fda:	d502      	bpl.n	8004fe2 <_svfprintf_r+0x6ba>
 8004fdc:	9a08      	ldr	r2, [sp, #32]
 8004fde:	4413      	add	r3, r2
 8004fe0:	444b      	add	r3, r9
 8004fe2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8004fe4:	4699      	mov	r9, r3
 8004fe6:	e735      	b.n	8004e54 <_svfprintf_r+0x52c>
 8004fe8:	460a      	mov	r2, r1
 8004fea:	e70c      	b.n	8004e06 <_svfprintf_r+0x4de>
 8004fec:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff4:	e71c      	b.n	8004e30 <_svfprintf_r+0x508>
 8004ff6:	2230      	movs	r2, #48	; 0x30
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8004ffe:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8005002:	a91c      	add	r1, sp, #112	; 0x70
 8005004:	e718      	b.n	8004e38 <_svfprintf_r+0x510>
 8005006:	f1b9 0f00 	cmp.w	r9, #0
 800500a:	d101      	bne.n	8005010 <_svfprintf_r+0x6e8>
 800500c:	07eb      	lsls	r3, r5, #31
 800500e:	d515      	bpl.n	800503c <_svfprintf_r+0x714>
 8005010:	9b08      	ldr	r3, [sp, #32]
 8005012:	3301      	adds	r3, #1
 8005014:	e7e4      	b.n	8004fe0 <_svfprintf_r+0x6b8>
 8005016:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	429a      	cmp	r2, r3
 800501c:	db06      	blt.n	800502c <_svfprintf_r+0x704>
 800501e:	07ef      	lsls	r7, r5, #31
 8005020:	d50e      	bpl.n	8005040 <_svfprintf_r+0x718>
 8005022:	9b08      	ldr	r3, [sp, #32]
 8005024:	4413      	add	r3, r2
 8005026:	2267      	movs	r2, #103	; 0x67
 8005028:	9202      	str	r2, [sp, #8]
 800502a:	e7da      	b.n	8004fe2 <_svfprintf_r+0x6ba>
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	9908      	ldr	r1, [sp, #32]
 8005030:	2a00      	cmp	r2, #0
 8005032:	440b      	add	r3, r1
 8005034:	dcf7      	bgt.n	8005026 <_svfprintf_r+0x6fe>
 8005036:	f1c2 0201 	rsb	r2, r2, #1
 800503a:	e7f3      	b.n	8005024 <_svfprintf_r+0x6fc>
 800503c:	2301      	movs	r3, #1
 800503e:	e7d0      	b.n	8004fe2 <_svfprintf_r+0x6ba>
 8005040:	4613      	mov	r3, r2
 8005042:	e7f0      	b.n	8005026 <_svfprintf_r+0x6fe>
 8005044:	b10b      	cbz	r3, 800504a <_svfprintf_r+0x722>
 8005046:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800504a:	f015 0f20 	tst.w	r5, #32
 800504e:	f107 0304 	add.w	r3, r7, #4
 8005052:	d008      	beq.n	8005066 <_svfprintf_r+0x73e>
 8005054:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	17ce      	asrs	r6, r1, #31
 800505a:	4608      	mov	r0, r1
 800505c:	4631      	mov	r1, r6
 800505e:	e9c2 0100 	strd	r0, r1, [r2]
 8005062:	461f      	mov	r7, r3
 8005064:	e49a      	b.n	800499c <_svfprintf_r+0x74>
 8005066:	06ee      	lsls	r6, r5, #27
 8005068:	d503      	bpl.n	8005072 <_svfprintf_r+0x74a>
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800506e:	6011      	str	r1, [r2, #0]
 8005070:	e7f7      	b.n	8005062 <_svfprintf_r+0x73a>
 8005072:	0668      	lsls	r0, r5, #25
 8005074:	d5f9      	bpl.n	800506a <_svfprintf_r+0x742>
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800507c:	8011      	strh	r1, [r2, #0]
 800507e:	e7f0      	b.n	8005062 <_svfprintf_r+0x73a>
 8005080:	f045 0510 	orr.w	r5, r5, #16
 8005084:	f015 0320 	ands.w	r3, r5, #32
 8005088:	d022      	beq.n	80050d0 <_svfprintf_r+0x7a8>
 800508a:	3707      	adds	r7, #7
 800508c:	f027 0707 	bic.w	r7, r7, #7
 8005090:	f107 0308 	add.w	r3, r7, #8
 8005094:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005098:	9304      	str	r3, [sp, #16]
 800509a:	2300      	movs	r3, #0
 800509c:	2200      	movs	r2, #0
 800509e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80050a2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80050a6:	f000 83db 	beq.w	8005860 <_svfprintf_r+0xf38>
 80050aa:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80050ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80050b0:	ea56 0207 	orrs.w	r2, r6, r7
 80050b4:	f040 83d9 	bne.w	800586a <_svfprintf_r+0xf42>
 80050b8:	f1b9 0f00 	cmp.w	r9, #0
 80050bc:	f000 80aa 	beq.w	8005214 <_svfprintf_r+0x8ec>
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d076      	beq.n	80051b2 <_svfprintf_r+0x88a>
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	f000 8091 	beq.w	80051ec <_svfprintf_r+0x8c4>
 80050ca:	2600      	movs	r6, #0
 80050cc:	2700      	movs	r7, #0
 80050ce:	e3d2      	b.n	8005876 <_svfprintf_r+0xf4e>
 80050d0:	1d3a      	adds	r2, r7, #4
 80050d2:	f015 0110 	ands.w	r1, r5, #16
 80050d6:	9204      	str	r2, [sp, #16]
 80050d8:	d002      	beq.n	80050e0 <_svfprintf_r+0x7b8>
 80050da:	683e      	ldr	r6, [r7, #0]
 80050dc:	2700      	movs	r7, #0
 80050de:	e7dd      	b.n	800509c <_svfprintf_r+0x774>
 80050e0:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80050e4:	d0f9      	beq.n	80050da <_svfprintf_r+0x7b2>
 80050e6:	883e      	ldrh	r6, [r7, #0]
 80050e8:	2700      	movs	r7, #0
 80050ea:	e7d6      	b.n	800509a <_svfprintf_r+0x772>
 80050ec:	1d3b      	adds	r3, r7, #4
 80050ee:	9304      	str	r3, [sp, #16]
 80050f0:	2330      	movs	r3, #48	; 0x30
 80050f2:	2278      	movs	r2, #120	; 0x78
 80050f4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80050f8:	4b14      	ldr	r3, [pc, #80]	; (800514c <_svfprintf_r+0x824>)
 80050fa:	683e      	ldr	r6, [r7, #0]
 80050fc:	9311      	str	r3, [sp, #68]	; 0x44
 80050fe:	2700      	movs	r7, #0
 8005100:	f045 0502 	orr.w	r5, r5, #2
 8005104:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8005108:	2302      	movs	r3, #2
 800510a:	9202      	str	r2, [sp, #8]
 800510c:	e7c6      	b.n	800509c <_svfprintf_r+0x774>
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	2600      	movs	r6, #0
 8005112:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005116:	9304      	str	r3, [sp, #16]
 8005118:	f8d7 8000 	ldr.w	r8, [r7]
 800511c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005120:	d00a      	beq.n	8005138 <_svfprintf_r+0x810>
 8005122:	464a      	mov	r2, r9
 8005124:	4631      	mov	r1, r6
 8005126:	4640      	mov	r0, r8
 8005128:	f7fb f87a 	bl	8000220 <memchr>
 800512c:	2800      	cmp	r0, #0
 800512e:	f000 808d 	beq.w	800524c <_svfprintf_r+0x924>
 8005132:	eba0 0908 	sub.w	r9, r0, r8
 8005136:	e5cb      	b.n	8004cd0 <_svfprintf_r+0x3a8>
 8005138:	4640      	mov	r0, r8
 800513a:	f7fb f869 	bl	8000210 <strlen>
 800513e:	4681      	mov	r9, r0
 8005140:	e5c6      	b.n	8004cd0 <_svfprintf_r+0x3a8>
 8005142:	bf00      	nop
 8005144:	080077ec 	.word	0x080077ec
 8005148:	080077fc 	.word	0x080077fc
 800514c:	080077d9 	.word	0x080077d9
 8005150:	f045 0510 	orr.w	r5, r5, #16
 8005154:	06a9      	lsls	r1, r5, #26
 8005156:	d509      	bpl.n	800516c <_svfprintf_r+0x844>
 8005158:	3707      	adds	r7, #7
 800515a:	f027 0707 	bic.w	r7, r7, #7
 800515e:	f107 0308 	add.w	r3, r7, #8
 8005162:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005166:	9304      	str	r3, [sp, #16]
 8005168:	2301      	movs	r3, #1
 800516a:	e797      	b.n	800509c <_svfprintf_r+0x774>
 800516c:	1d3b      	adds	r3, r7, #4
 800516e:	f015 0f10 	tst.w	r5, #16
 8005172:	9304      	str	r3, [sp, #16]
 8005174:	d001      	beq.n	800517a <_svfprintf_r+0x852>
 8005176:	683e      	ldr	r6, [r7, #0]
 8005178:	e002      	b.n	8005180 <_svfprintf_r+0x858>
 800517a:	066a      	lsls	r2, r5, #25
 800517c:	d5fb      	bpl.n	8005176 <_svfprintf_r+0x84e>
 800517e:	883e      	ldrh	r6, [r7, #0]
 8005180:	2700      	movs	r7, #0
 8005182:	e7f1      	b.n	8005168 <_svfprintf_r+0x840>
 8005184:	b10b      	cbz	r3, 800518a <_svfprintf_r+0x862>
 8005186:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800518a:	4ba3      	ldr	r3, [pc, #652]	; (8005418 <_svfprintf_r+0xaf0>)
 800518c:	e4c2      	b.n	8004b14 <_svfprintf_r+0x1ec>
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	f015 0f10 	tst.w	r5, #16
 8005194:	9304      	str	r3, [sp, #16]
 8005196:	d001      	beq.n	800519c <_svfprintf_r+0x874>
 8005198:	683e      	ldr	r6, [r7, #0]
 800519a:	e002      	b.n	80051a2 <_svfprintf_r+0x87a>
 800519c:	066e      	lsls	r6, r5, #25
 800519e:	d5fb      	bpl.n	8005198 <_svfprintf_r+0x870>
 80051a0:	883e      	ldrh	r6, [r7, #0]
 80051a2:	2700      	movs	r7, #0
 80051a4:	e4c2      	b.n	8004b2c <_svfprintf_r+0x204>
 80051a6:	4643      	mov	r3, r8
 80051a8:	e366      	b.n	8005878 <_svfprintf_r+0xf50>
 80051aa:	2f00      	cmp	r7, #0
 80051ac:	bf08      	it	eq
 80051ae:	2e0a      	cmpeq	r6, #10
 80051b0:	d205      	bcs.n	80051be <_svfprintf_r+0x896>
 80051b2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80051b6:	3630      	adds	r6, #48	; 0x30
 80051b8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80051bc:	e377      	b.n	80058ae <_svfprintf_r+0xf86>
 80051be:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80051c2:	4630      	mov	r0, r6
 80051c4:	4639      	mov	r1, r7
 80051c6:	220a      	movs	r2, #10
 80051c8:	2300      	movs	r3, #0
 80051ca:	f7fb fd09 	bl	8000be0 <__aeabi_uldivmod>
 80051ce:	3230      	adds	r2, #48	; 0x30
 80051d0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80051d4:	2300      	movs	r3, #0
 80051d6:	4630      	mov	r0, r6
 80051d8:	4639      	mov	r1, r7
 80051da:	220a      	movs	r2, #10
 80051dc:	f7fb fd00 	bl	8000be0 <__aeabi_uldivmod>
 80051e0:	4606      	mov	r6, r0
 80051e2:	460f      	mov	r7, r1
 80051e4:	ea56 0307 	orrs.w	r3, r6, r7
 80051e8:	d1eb      	bne.n	80051c2 <_svfprintf_r+0x89a>
 80051ea:	e360      	b.n	80058ae <_svfprintf_r+0xf86>
 80051ec:	2600      	movs	r6, #0
 80051ee:	2700      	movs	r7, #0
 80051f0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80051f4:	f006 030f 	and.w	r3, r6, #15
 80051f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80051fa:	5cd3      	ldrb	r3, [r2, r3]
 80051fc:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005200:	0933      	lsrs	r3, r6, #4
 8005202:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005206:	093a      	lsrs	r2, r7, #4
 8005208:	461e      	mov	r6, r3
 800520a:	4617      	mov	r7, r2
 800520c:	ea56 0307 	orrs.w	r3, r6, r7
 8005210:	d1f0      	bne.n	80051f4 <_svfprintf_r+0x8cc>
 8005212:	e34c      	b.n	80058ae <_svfprintf_r+0xf86>
 8005214:	b93b      	cbnz	r3, 8005226 <_svfprintf_r+0x8fe>
 8005216:	07ea      	lsls	r2, r5, #31
 8005218:	d505      	bpl.n	8005226 <_svfprintf_r+0x8fe>
 800521a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800521e:	2330      	movs	r3, #48	; 0x30
 8005220:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8005224:	e343      	b.n	80058ae <_svfprintf_r+0xf86>
 8005226:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800522a:	e340      	b.n	80058ae <_svfprintf_r+0xf86>
 800522c:	b10b      	cbz	r3, 8005232 <_svfprintf_r+0x90a>
 800522e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005232:	9b02      	ldr	r3, [sp, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 82f7 	beq.w	8005828 <_svfprintf_r+0xf00>
 800523a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800523e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005242:	2600      	movs	r6, #0
 8005244:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005248:	9704      	str	r7, [sp, #16]
 800524a:	e4e8      	b.n	8004c1e <_svfprintf_r+0x2f6>
 800524c:	4606      	mov	r6, r0
 800524e:	e53f      	b.n	8004cd0 <_svfprintf_r+0x3a8>
 8005250:	2310      	movs	r3, #16
 8005252:	6063      	str	r3, [r4, #4]
 8005254:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005256:	3310      	adds	r3, #16
 8005258:	9321      	str	r3, [sp, #132]	; 0x84
 800525a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800525c:	3301      	adds	r3, #1
 800525e:	2b07      	cmp	r3, #7
 8005260:	9320      	str	r3, [sp, #128]	; 0x80
 8005262:	dc04      	bgt.n	800526e <_svfprintf_r+0x946>
 8005264:	3408      	adds	r4, #8
 8005266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005268:	3b10      	subs	r3, #16
 800526a:	930c      	str	r3, [sp, #48]	; 0x30
 800526c:	e615      	b.n	8004e9a <_svfprintf_r+0x572>
 800526e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005270:	4651      	mov	r1, sl
 8005272:	4658      	mov	r0, fp
 8005274:	f001 fea8 	bl	8006fc8 <__ssprint_r>
 8005278:	2800      	cmp	r0, #0
 800527a:	f040 82b6 	bne.w	80057ea <_svfprintf_r+0xec2>
 800527e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005280:	e7f1      	b.n	8005266 <_svfprintf_r+0x93e>
 8005282:	aa1f      	add	r2, sp, #124	; 0x7c
 8005284:	4651      	mov	r1, sl
 8005286:	4658      	mov	r0, fp
 8005288:	f001 fe9e 	bl	8006fc8 <__ssprint_r>
 800528c:	2800      	cmp	r0, #0
 800528e:	f040 82ac 	bne.w	80057ea <_svfprintf_r+0xec2>
 8005292:	ac2c      	add	r4, sp, #176	; 0xb0
 8005294:	e614      	b.n	8004ec0 <_svfprintf_r+0x598>
 8005296:	aa1f      	add	r2, sp, #124	; 0x7c
 8005298:	4651      	mov	r1, sl
 800529a:	4658      	mov	r0, fp
 800529c:	f001 fe94 	bl	8006fc8 <__ssprint_r>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	f040 82a2 	bne.w	80057ea <_svfprintf_r+0xec2>
 80052a6:	ac2c      	add	r4, sp, #176	; 0xb0
 80052a8:	e61c      	b.n	8004ee4 <_svfprintf_r+0x5bc>
 80052aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80052ac:	4651      	mov	r1, sl
 80052ae:	4658      	mov	r0, fp
 80052b0:	f001 fe8a 	bl	8006fc8 <__ssprint_r>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	f040 8298 	bne.w	80057ea <_svfprintf_r+0xec2>
 80052ba:	ac2c      	add	r4, sp, #176	; 0xb0
 80052bc:	e622      	b.n	8004f04 <_svfprintf_r+0x5dc>
 80052be:	2210      	movs	r2, #16
 80052c0:	6062      	str	r2, [r4, #4]
 80052c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80052c4:	3210      	adds	r2, #16
 80052c6:	9221      	str	r2, [sp, #132]	; 0x84
 80052c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052ca:	3201      	adds	r2, #1
 80052cc:	2a07      	cmp	r2, #7
 80052ce:	9220      	str	r2, [sp, #128]	; 0x80
 80052d0:	dc02      	bgt.n	80052d8 <_svfprintf_r+0x9b0>
 80052d2:	3408      	adds	r4, #8
 80052d4:	3b10      	subs	r3, #16
 80052d6:	e61d      	b.n	8004f14 <_svfprintf_r+0x5ec>
 80052d8:	aa1f      	add	r2, sp, #124	; 0x7c
 80052da:	4651      	mov	r1, sl
 80052dc:	4658      	mov	r0, fp
 80052de:	930c      	str	r3, [sp, #48]	; 0x30
 80052e0:	f001 fe72 	bl	8006fc8 <__ssprint_r>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	f040 8280 	bne.w	80057ea <_svfprintf_r+0xec2>
 80052ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80052ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052ee:	e7f1      	b.n	80052d4 <_svfprintf_r+0x9ac>
 80052f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80052f2:	4651      	mov	r1, sl
 80052f4:	4658      	mov	r0, fp
 80052f6:	f001 fe67 	bl	8006fc8 <__ssprint_r>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	f040 8275 	bne.w	80057ea <_svfprintf_r+0xec2>
 8005300:	ac2c      	add	r4, sp, #176	; 0xb0
 8005302:	e617      	b.n	8004f34 <_svfprintf_r+0x60c>
 8005304:	2310      	movs	r3, #16
 8005306:	6063      	str	r3, [r4, #4]
 8005308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800530a:	3310      	adds	r3, #16
 800530c:	9321      	str	r3, [sp, #132]	; 0x84
 800530e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005310:	3301      	adds	r3, #1
 8005312:	2b07      	cmp	r3, #7
 8005314:	9320      	str	r3, [sp, #128]	; 0x80
 8005316:	dc02      	bgt.n	800531e <_svfprintf_r+0x9f6>
 8005318:	3408      	adds	r4, #8
 800531a:	3e10      	subs	r6, #16
 800531c:	e60e      	b.n	8004f3c <_svfprintf_r+0x614>
 800531e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005320:	4651      	mov	r1, sl
 8005322:	4658      	mov	r0, fp
 8005324:	f001 fe50 	bl	8006fc8 <__ssprint_r>
 8005328:	2800      	cmp	r0, #0
 800532a:	f040 825e 	bne.w	80057ea <_svfprintf_r+0xec2>
 800532e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005330:	e7f3      	b.n	800531a <_svfprintf_r+0x9f2>
 8005332:	aa1f      	add	r2, sp, #124	; 0x7c
 8005334:	4651      	mov	r1, sl
 8005336:	4658      	mov	r0, fp
 8005338:	f001 fe46 	bl	8006fc8 <__ssprint_r>
 800533c:	2800      	cmp	r0, #0
 800533e:	f040 8254 	bne.w	80057ea <_svfprintf_r+0xec2>
 8005342:	ac2c      	add	r4, sp, #176	; 0xb0
 8005344:	e60a      	b.n	8004f5c <_svfprintf_r+0x634>
 8005346:	9b02      	ldr	r3, [sp, #8]
 8005348:	2b65      	cmp	r3, #101	; 0x65
 800534a:	f340 81a9 	ble.w	80056a0 <_svfprintf_r+0xd78>
 800534e:	2200      	movs	r2, #0
 8005350:	2300      	movs	r3, #0
 8005352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005356:	f7fb fbd3 	bl	8000b00 <__aeabi_dcmpeq>
 800535a:	2800      	cmp	r0, #0
 800535c:	d062      	beq.n	8005424 <_svfprintf_r+0xafc>
 800535e:	4b2f      	ldr	r3, [pc, #188]	; (800541c <_svfprintf_r+0xaf4>)
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	2301      	movs	r3, #1
 8005364:	6063      	str	r3, [r4, #4]
 8005366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005368:	3301      	adds	r3, #1
 800536a:	9321      	str	r3, [sp, #132]	; 0x84
 800536c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800536e:	3301      	adds	r3, #1
 8005370:	2b07      	cmp	r3, #7
 8005372:	9320      	str	r3, [sp, #128]	; 0x80
 8005374:	dc25      	bgt.n	80053c2 <_svfprintf_r+0xa9a>
 8005376:	3408      	adds	r4, #8
 8005378:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800537a:	9a03      	ldr	r2, [sp, #12]
 800537c:	4293      	cmp	r3, r2
 800537e:	db02      	blt.n	8005386 <_svfprintf_r+0xa5e>
 8005380:	07ee      	lsls	r6, r5, #31
 8005382:	f57f ae02 	bpl.w	8004f8a <_svfprintf_r+0x662>
 8005386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	9b08      	ldr	r3, [sp, #32]
 800538c:	6063      	str	r3, [r4, #4]
 800538e:	9a08      	ldr	r2, [sp, #32]
 8005390:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005392:	4413      	add	r3, r2
 8005394:	9321      	str	r3, [sp, #132]	; 0x84
 8005396:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005398:	3301      	adds	r3, #1
 800539a:	2b07      	cmp	r3, #7
 800539c:	9320      	str	r3, [sp, #128]	; 0x80
 800539e:	dc1a      	bgt.n	80053d6 <_svfprintf_r+0xaae>
 80053a0:	3408      	adds	r4, #8
 80053a2:	9b03      	ldr	r3, [sp, #12]
 80053a4:	1e5e      	subs	r6, r3, #1
 80053a6:	2e00      	cmp	r6, #0
 80053a8:	f77f adef 	ble.w	8004f8a <_svfprintf_r+0x662>
 80053ac:	4f1c      	ldr	r7, [pc, #112]	; (8005420 <_svfprintf_r+0xaf8>)
 80053ae:	f04f 0810 	mov.w	r8, #16
 80053b2:	2e10      	cmp	r6, #16
 80053b4:	6027      	str	r7, [r4, #0]
 80053b6:	dc18      	bgt.n	80053ea <_svfprintf_r+0xac2>
 80053b8:	6066      	str	r6, [r4, #4]
 80053ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053bc:	441e      	add	r6, r3
 80053be:	9621      	str	r6, [sp, #132]	; 0x84
 80053c0:	e5d4      	b.n	8004f6c <_svfprintf_r+0x644>
 80053c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80053c4:	4651      	mov	r1, sl
 80053c6:	4658      	mov	r0, fp
 80053c8:	f001 fdfe 	bl	8006fc8 <__ssprint_r>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f040 820c 	bne.w	80057ea <_svfprintf_r+0xec2>
 80053d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80053d4:	e7d0      	b.n	8005378 <_svfprintf_r+0xa50>
 80053d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80053d8:	4651      	mov	r1, sl
 80053da:	4658      	mov	r0, fp
 80053dc:	f001 fdf4 	bl	8006fc8 <__ssprint_r>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	f040 8202 	bne.w	80057ea <_svfprintf_r+0xec2>
 80053e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80053e8:	e7db      	b.n	80053a2 <_svfprintf_r+0xa7a>
 80053ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053ec:	f8c4 8004 	str.w	r8, [r4, #4]
 80053f0:	3310      	adds	r3, #16
 80053f2:	9321      	str	r3, [sp, #132]	; 0x84
 80053f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80053f6:	3301      	adds	r3, #1
 80053f8:	2b07      	cmp	r3, #7
 80053fa:	9320      	str	r3, [sp, #128]	; 0x80
 80053fc:	dc02      	bgt.n	8005404 <_svfprintf_r+0xadc>
 80053fe:	3408      	adds	r4, #8
 8005400:	3e10      	subs	r6, #16
 8005402:	e7d6      	b.n	80053b2 <_svfprintf_r+0xa8a>
 8005404:	aa1f      	add	r2, sp, #124	; 0x7c
 8005406:	4651      	mov	r1, sl
 8005408:	4658      	mov	r0, fp
 800540a:	f001 fddd 	bl	8006fc8 <__ssprint_r>
 800540e:	2800      	cmp	r0, #0
 8005410:	f040 81eb 	bne.w	80057ea <_svfprintf_r+0xec2>
 8005414:	ac2c      	add	r4, sp, #176	; 0xb0
 8005416:	e7f3      	b.n	8005400 <_svfprintf_r+0xad8>
 8005418:	080077d9 	.word	0x080077d9
 800541c:	080077ea 	.word	0x080077ea
 8005420:	080077fc 	.word	0x080077fc
 8005424:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005426:	2b00      	cmp	r3, #0
 8005428:	dc7a      	bgt.n	8005520 <_svfprintf_r+0xbf8>
 800542a:	4b9b      	ldr	r3, [pc, #620]	; (8005698 <_svfprintf_r+0xd70>)
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	2301      	movs	r3, #1
 8005430:	6063      	str	r3, [r4, #4]
 8005432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005434:	3301      	adds	r3, #1
 8005436:	9321      	str	r3, [sp, #132]	; 0x84
 8005438:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800543a:	3301      	adds	r3, #1
 800543c:	2b07      	cmp	r3, #7
 800543e:	9320      	str	r3, [sp, #128]	; 0x80
 8005440:	dc44      	bgt.n	80054cc <_svfprintf_r+0xba4>
 8005442:	3408      	adds	r4, #8
 8005444:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005446:	b923      	cbnz	r3, 8005452 <_svfprintf_r+0xb2a>
 8005448:	9b03      	ldr	r3, [sp, #12]
 800544a:	b913      	cbnz	r3, 8005452 <_svfprintf_r+0xb2a>
 800544c:	07e8      	lsls	r0, r5, #31
 800544e:	f57f ad9c 	bpl.w	8004f8a <_svfprintf_r+0x662>
 8005452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	9b08      	ldr	r3, [sp, #32]
 8005458:	6063      	str	r3, [r4, #4]
 800545a:	9a08      	ldr	r2, [sp, #32]
 800545c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800545e:	4413      	add	r3, r2
 8005460:	9321      	str	r3, [sp, #132]	; 0x84
 8005462:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005464:	3301      	adds	r3, #1
 8005466:	2b07      	cmp	r3, #7
 8005468:	9320      	str	r3, [sp, #128]	; 0x80
 800546a:	dc39      	bgt.n	80054e0 <_svfprintf_r+0xbb8>
 800546c:	f104 0308 	add.w	r3, r4, #8
 8005470:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005472:	2e00      	cmp	r6, #0
 8005474:	da19      	bge.n	80054aa <_svfprintf_r+0xb82>
 8005476:	4f89      	ldr	r7, [pc, #548]	; (800569c <_svfprintf_r+0xd74>)
 8005478:	4276      	negs	r6, r6
 800547a:	2410      	movs	r4, #16
 800547c:	2e10      	cmp	r6, #16
 800547e:	601f      	str	r7, [r3, #0]
 8005480:	dc38      	bgt.n	80054f4 <_svfprintf_r+0xbcc>
 8005482:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005484:	605e      	str	r6, [r3, #4]
 8005486:	4416      	add	r6, r2
 8005488:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800548a:	9621      	str	r6, [sp, #132]	; 0x84
 800548c:	3201      	adds	r2, #1
 800548e:	2a07      	cmp	r2, #7
 8005490:	f103 0308 	add.w	r3, r3, #8
 8005494:	9220      	str	r2, [sp, #128]	; 0x80
 8005496:	dd08      	ble.n	80054aa <_svfprintf_r+0xb82>
 8005498:	aa1f      	add	r2, sp, #124	; 0x7c
 800549a:	4651      	mov	r1, sl
 800549c:	4658      	mov	r0, fp
 800549e:	f001 fd93 	bl	8006fc8 <__ssprint_r>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	f040 81a1 	bne.w	80057ea <_svfprintf_r+0xec2>
 80054a8:	ab2c      	add	r3, sp, #176	; 0xb0
 80054aa:	9a03      	ldr	r2, [sp, #12]
 80054ac:	605a      	str	r2, [r3, #4]
 80054ae:	9903      	ldr	r1, [sp, #12]
 80054b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054b2:	f8c3 8000 	str.w	r8, [r3]
 80054b6:	440a      	add	r2, r1
 80054b8:	9221      	str	r2, [sp, #132]	; 0x84
 80054ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054bc:	3201      	adds	r2, #1
 80054be:	2a07      	cmp	r2, #7
 80054c0:	9220      	str	r2, [sp, #128]	; 0x80
 80054c2:	f73f ad59 	bgt.w	8004f78 <_svfprintf_r+0x650>
 80054c6:	f103 0408 	add.w	r4, r3, #8
 80054ca:	e55e      	b.n	8004f8a <_svfprintf_r+0x662>
 80054cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80054ce:	4651      	mov	r1, sl
 80054d0:	4658      	mov	r0, fp
 80054d2:	f001 fd79 	bl	8006fc8 <__ssprint_r>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	f040 8187 	bne.w	80057ea <_svfprintf_r+0xec2>
 80054dc:	ac2c      	add	r4, sp, #176	; 0xb0
 80054de:	e7b1      	b.n	8005444 <_svfprintf_r+0xb1c>
 80054e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80054e2:	4651      	mov	r1, sl
 80054e4:	4658      	mov	r0, fp
 80054e6:	f001 fd6f 	bl	8006fc8 <__ssprint_r>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	f040 817d 	bne.w	80057ea <_svfprintf_r+0xec2>
 80054f0:	ab2c      	add	r3, sp, #176	; 0xb0
 80054f2:	e7bd      	b.n	8005470 <_svfprintf_r+0xb48>
 80054f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054f6:	605c      	str	r4, [r3, #4]
 80054f8:	3210      	adds	r2, #16
 80054fa:	9221      	str	r2, [sp, #132]	; 0x84
 80054fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054fe:	3201      	adds	r2, #1
 8005500:	2a07      	cmp	r2, #7
 8005502:	9220      	str	r2, [sp, #128]	; 0x80
 8005504:	dc02      	bgt.n	800550c <_svfprintf_r+0xbe4>
 8005506:	3308      	adds	r3, #8
 8005508:	3e10      	subs	r6, #16
 800550a:	e7b7      	b.n	800547c <_svfprintf_r+0xb54>
 800550c:	aa1f      	add	r2, sp, #124	; 0x7c
 800550e:	4651      	mov	r1, sl
 8005510:	4658      	mov	r0, fp
 8005512:	f001 fd59 	bl	8006fc8 <__ssprint_r>
 8005516:	2800      	cmp	r0, #0
 8005518:	f040 8167 	bne.w	80057ea <_svfprintf_r+0xec2>
 800551c:	ab2c      	add	r3, sp, #176	; 0xb0
 800551e:	e7f3      	b.n	8005508 <_svfprintf_r+0xbe0>
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	42bb      	cmp	r3, r7
 8005524:	bfa8      	it	ge
 8005526:	463b      	movge	r3, r7
 8005528:	2b00      	cmp	r3, #0
 800552a:	461e      	mov	r6, r3
 800552c:	dd0b      	ble.n	8005546 <_svfprintf_r+0xc1e>
 800552e:	6063      	str	r3, [r4, #4]
 8005530:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005532:	f8c4 8000 	str.w	r8, [r4]
 8005536:	4433      	add	r3, r6
 8005538:	9321      	str	r3, [sp, #132]	; 0x84
 800553a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800553c:	3301      	adds	r3, #1
 800553e:	2b07      	cmp	r3, #7
 8005540:	9320      	str	r3, [sp, #128]	; 0x80
 8005542:	dc5f      	bgt.n	8005604 <_svfprintf_r+0xcdc>
 8005544:	3408      	adds	r4, #8
 8005546:	2e00      	cmp	r6, #0
 8005548:	bfac      	ite	ge
 800554a:	1bbe      	subge	r6, r7, r6
 800554c:	463e      	movlt	r6, r7
 800554e:	2e00      	cmp	r6, #0
 8005550:	dd0f      	ble.n	8005572 <_svfprintf_r+0xc4a>
 8005552:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800569c <_svfprintf_r+0xd74>
 8005556:	f8c4 9000 	str.w	r9, [r4]
 800555a:	2e10      	cmp	r6, #16
 800555c:	dc5c      	bgt.n	8005618 <_svfprintf_r+0xcf0>
 800555e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005560:	6066      	str	r6, [r4, #4]
 8005562:	441e      	add	r6, r3
 8005564:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005566:	9621      	str	r6, [sp, #132]	; 0x84
 8005568:	3301      	adds	r3, #1
 800556a:	2b07      	cmp	r3, #7
 800556c:	9320      	str	r3, [sp, #128]	; 0x80
 800556e:	dc6a      	bgt.n	8005646 <_svfprintf_r+0xd1e>
 8005570:	3408      	adds	r4, #8
 8005572:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005574:	9a03      	ldr	r2, [sp, #12]
 8005576:	4293      	cmp	r3, r2
 8005578:	db01      	blt.n	800557e <_svfprintf_r+0xc56>
 800557a:	07e9      	lsls	r1, r5, #31
 800557c:	d50d      	bpl.n	800559a <_svfprintf_r+0xc72>
 800557e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	9b08      	ldr	r3, [sp, #32]
 8005584:	6063      	str	r3, [r4, #4]
 8005586:	9a08      	ldr	r2, [sp, #32]
 8005588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800558a:	4413      	add	r3, r2
 800558c:	9321      	str	r3, [sp, #132]	; 0x84
 800558e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005590:	3301      	adds	r3, #1
 8005592:	2b07      	cmp	r3, #7
 8005594:	9320      	str	r3, [sp, #128]	; 0x80
 8005596:	dc60      	bgt.n	800565a <_svfprintf_r+0xd32>
 8005598:	3408      	adds	r4, #8
 800559a:	9b03      	ldr	r3, [sp, #12]
 800559c:	9a03      	ldr	r2, [sp, #12]
 800559e:	1bde      	subs	r6, r3, r7
 80055a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	429e      	cmp	r6, r3
 80055a6:	bfa8      	it	ge
 80055a8:	461e      	movge	r6, r3
 80055aa:	2e00      	cmp	r6, #0
 80055ac:	dd0b      	ble.n	80055c6 <_svfprintf_r+0xc9e>
 80055ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055b0:	6066      	str	r6, [r4, #4]
 80055b2:	4433      	add	r3, r6
 80055b4:	9321      	str	r3, [sp, #132]	; 0x84
 80055b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055b8:	3301      	adds	r3, #1
 80055ba:	4447      	add	r7, r8
 80055bc:	2b07      	cmp	r3, #7
 80055be:	6027      	str	r7, [r4, #0]
 80055c0:	9320      	str	r3, [sp, #128]	; 0x80
 80055c2:	dc54      	bgt.n	800566e <_svfprintf_r+0xd46>
 80055c4:	3408      	adds	r4, #8
 80055c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055c8:	9a03      	ldr	r2, [sp, #12]
 80055ca:	2e00      	cmp	r6, #0
 80055cc:	eba2 0303 	sub.w	r3, r2, r3
 80055d0:	bfac      	ite	ge
 80055d2:	1b9e      	subge	r6, r3, r6
 80055d4:	461e      	movlt	r6, r3
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	f77f acd7 	ble.w	8004f8a <_svfprintf_r+0x662>
 80055dc:	4f2f      	ldr	r7, [pc, #188]	; (800569c <_svfprintf_r+0xd74>)
 80055de:	f04f 0810 	mov.w	r8, #16
 80055e2:	2e10      	cmp	r6, #16
 80055e4:	6027      	str	r7, [r4, #0]
 80055e6:	f77f aee7 	ble.w	80053b8 <_svfprintf_r+0xa90>
 80055ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055ec:	f8c4 8004 	str.w	r8, [r4, #4]
 80055f0:	3310      	adds	r3, #16
 80055f2:	9321      	str	r3, [sp, #132]	; 0x84
 80055f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055f6:	3301      	adds	r3, #1
 80055f8:	2b07      	cmp	r3, #7
 80055fa:	9320      	str	r3, [sp, #128]	; 0x80
 80055fc:	dc41      	bgt.n	8005682 <_svfprintf_r+0xd5a>
 80055fe:	3408      	adds	r4, #8
 8005600:	3e10      	subs	r6, #16
 8005602:	e7ee      	b.n	80055e2 <_svfprintf_r+0xcba>
 8005604:	aa1f      	add	r2, sp, #124	; 0x7c
 8005606:	4651      	mov	r1, sl
 8005608:	4658      	mov	r0, fp
 800560a:	f001 fcdd 	bl	8006fc8 <__ssprint_r>
 800560e:	2800      	cmp	r0, #0
 8005610:	f040 80eb 	bne.w	80057ea <_svfprintf_r+0xec2>
 8005614:	ac2c      	add	r4, sp, #176	; 0xb0
 8005616:	e796      	b.n	8005546 <_svfprintf_r+0xc1e>
 8005618:	2310      	movs	r3, #16
 800561a:	6063      	str	r3, [r4, #4]
 800561c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800561e:	3310      	adds	r3, #16
 8005620:	9321      	str	r3, [sp, #132]	; 0x84
 8005622:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005624:	3301      	adds	r3, #1
 8005626:	2b07      	cmp	r3, #7
 8005628:	9320      	str	r3, [sp, #128]	; 0x80
 800562a:	dc02      	bgt.n	8005632 <_svfprintf_r+0xd0a>
 800562c:	3408      	adds	r4, #8
 800562e:	3e10      	subs	r6, #16
 8005630:	e791      	b.n	8005556 <_svfprintf_r+0xc2e>
 8005632:	aa1f      	add	r2, sp, #124	; 0x7c
 8005634:	4651      	mov	r1, sl
 8005636:	4658      	mov	r0, fp
 8005638:	f001 fcc6 	bl	8006fc8 <__ssprint_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	f040 80d4 	bne.w	80057ea <_svfprintf_r+0xec2>
 8005642:	ac2c      	add	r4, sp, #176	; 0xb0
 8005644:	e7f3      	b.n	800562e <_svfprintf_r+0xd06>
 8005646:	aa1f      	add	r2, sp, #124	; 0x7c
 8005648:	4651      	mov	r1, sl
 800564a:	4658      	mov	r0, fp
 800564c:	f001 fcbc 	bl	8006fc8 <__ssprint_r>
 8005650:	2800      	cmp	r0, #0
 8005652:	f040 80ca 	bne.w	80057ea <_svfprintf_r+0xec2>
 8005656:	ac2c      	add	r4, sp, #176	; 0xb0
 8005658:	e78b      	b.n	8005572 <_svfprintf_r+0xc4a>
 800565a:	aa1f      	add	r2, sp, #124	; 0x7c
 800565c:	4651      	mov	r1, sl
 800565e:	4658      	mov	r0, fp
 8005660:	f001 fcb2 	bl	8006fc8 <__ssprint_r>
 8005664:	2800      	cmp	r0, #0
 8005666:	f040 80c0 	bne.w	80057ea <_svfprintf_r+0xec2>
 800566a:	ac2c      	add	r4, sp, #176	; 0xb0
 800566c:	e795      	b.n	800559a <_svfprintf_r+0xc72>
 800566e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005670:	4651      	mov	r1, sl
 8005672:	4658      	mov	r0, fp
 8005674:	f001 fca8 	bl	8006fc8 <__ssprint_r>
 8005678:	2800      	cmp	r0, #0
 800567a:	f040 80b6 	bne.w	80057ea <_svfprintf_r+0xec2>
 800567e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005680:	e7a1      	b.n	80055c6 <_svfprintf_r+0xc9e>
 8005682:	aa1f      	add	r2, sp, #124	; 0x7c
 8005684:	4651      	mov	r1, sl
 8005686:	4658      	mov	r0, fp
 8005688:	f001 fc9e 	bl	8006fc8 <__ssprint_r>
 800568c:	2800      	cmp	r0, #0
 800568e:	f040 80ac 	bne.w	80057ea <_svfprintf_r+0xec2>
 8005692:	ac2c      	add	r4, sp, #176	; 0xb0
 8005694:	e7b4      	b.n	8005600 <_svfprintf_r+0xcd8>
 8005696:	bf00      	nop
 8005698:	080077ea 	.word	0x080077ea
 800569c:	080077fc 	.word	0x080077fc
 80056a0:	9b03      	ldr	r3, [sp, #12]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	dc01      	bgt.n	80056aa <_svfprintf_r+0xd82>
 80056a6:	07ea      	lsls	r2, r5, #31
 80056a8:	d576      	bpl.n	8005798 <_svfprintf_r+0xe70>
 80056aa:	2301      	movs	r3, #1
 80056ac:	6063      	str	r3, [r4, #4]
 80056ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056b0:	f8c4 8000 	str.w	r8, [r4]
 80056b4:	3301      	adds	r3, #1
 80056b6:	9321      	str	r3, [sp, #132]	; 0x84
 80056b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056ba:	3301      	adds	r3, #1
 80056bc:	2b07      	cmp	r3, #7
 80056be:	9320      	str	r3, [sp, #128]	; 0x80
 80056c0:	dc36      	bgt.n	8005730 <_svfprintf_r+0xe08>
 80056c2:	3408      	adds	r4, #8
 80056c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	9b08      	ldr	r3, [sp, #32]
 80056ca:	6063      	str	r3, [r4, #4]
 80056cc:	9a08      	ldr	r2, [sp, #32]
 80056ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056d0:	4413      	add	r3, r2
 80056d2:	9321      	str	r3, [sp, #132]	; 0x84
 80056d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056d6:	3301      	adds	r3, #1
 80056d8:	2b07      	cmp	r3, #7
 80056da:	9320      	str	r3, [sp, #128]	; 0x80
 80056dc:	dc31      	bgt.n	8005742 <_svfprintf_r+0xe1a>
 80056de:	3408      	adds	r4, #8
 80056e0:	2300      	movs	r3, #0
 80056e2:	2200      	movs	r2, #0
 80056e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056e8:	f7fb fa0a 	bl	8000b00 <__aeabi_dcmpeq>
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	1e5e      	subs	r6, r3, #1
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d12f      	bne.n	8005754 <_svfprintf_r+0xe2c>
 80056f4:	f108 0301 	add.w	r3, r8, #1
 80056f8:	e884 0048 	stmia.w	r4, {r3, r6}
 80056fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056fe:	9a03      	ldr	r2, [sp, #12]
 8005700:	3b01      	subs	r3, #1
 8005702:	4413      	add	r3, r2
 8005704:	9321      	str	r3, [sp, #132]	; 0x84
 8005706:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005708:	3301      	adds	r3, #1
 800570a:	2b07      	cmp	r3, #7
 800570c:	9320      	str	r3, [sp, #128]	; 0x80
 800570e:	dd4a      	ble.n	80057a6 <_svfprintf_r+0xe7e>
 8005710:	aa1f      	add	r2, sp, #124	; 0x7c
 8005712:	4651      	mov	r1, sl
 8005714:	4658      	mov	r0, fp
 8005716:	f001 fc57 	bl	8006fc8 <__ssprint_r>
 800571a:	2800      	cmp	r0, #0
 800571c:	d165      	bne.n	80057ea <_svfprintf_r+0xec2>
 800571e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005720:	ab1b      	add	r3, sp, #108	; 0x6c
 8005722:	6023      	str	r3, [r4, #0]
 8005724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005726:	6063      	str	r3, [r4, #4]
 8005728:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800572a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800572c:	4413      	add	r3, r2
 800572e:	e41c      	b.n	8004f6a <_svfprintf_r+0x642>
 8005730:	aa1f      	add	r2, sp, #124	; 0x7c
 8005732:	4651      	mov	r1, sl
 8005734:	4658      	mov	r0, fp
 8005736:	f001 fc47 	bl	8006fc8 <__ssprint_r>
 800573a:	2800      	cmp	r0, #0
 800573c:	d155      	bne.n	80057ea <_svfprintf_r+0xec2>
 800573e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005740:	e7c0      	b.n	80056c4 <_svfprintf_r+0xd9c>
 8005742:	aa1f      	add	r2, sp, #124	; 0x7c
 8005744:	4651      	mov	r1, sl
 8005746:	4658      	mov	r0, fp
 8005748:	f001 fc3e 	bl	8006fc8 <__ssprint_r>
 800574c:	2800      	cmp	r0, #0
 800574e:	d14c      	bne.n	80057ea <_svfprintf_r+0xec2>
 8005750:	ac2c      	add	r4, sp, #176	; 0xb0
 8005752:	e7c5      	b.n	80056e0 <_svfprintf_r+0xdb8>
 8005754:	2e00      	cmp	r6, #0
 8005756:	dde3      	ble.n	8005720 <_svfprintf_r+0xdf8>
 8005758:	4f59      	ldr	r7, [pc, #356]	; (80058c0 <_svfprintf_r+0xf98>)
 800575a:	f04f 0810 	mov.w	r8, #16
 800575e:	2e10      	cmp	r6, #16
 8005760:	6027      	str	r7, [r4, #0]
 8005762:	dc04      	bgt.n	800576e <_svfprintf_r+0xe46>
 8005764:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005766:	6066      	str	r6, [r4, #4]
 8005768:	441e      	add	r6, r3
 800576a:	9621      	str	r6, [sp, #132]	; 0x84
 800576c:	e7cb      	b.n	8005706 <_svfprintf_r+0xdde>
 800576e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005770:	f8c4 8004 	str.w	r8, [r4, #4]
 8005774:	3310      	adds	r3, #16
 8005776:	9321      	str	r3, [sp, #132]	; 0x84
 8005778:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800577a:	3301      	adds	r3, #1
 800577c:	2b07      	cmp	r3, #7
 800577e:	9320      	str	r3, [sp, #128]	; 0x80
 8005780:	dc02      	bgt.n	8005788 <_svfprintf_r+0xe60>
 8005782:	3408      	adds	r4, #8
 8005784:	3e10      	subs	r6, #16
 8005786:	e7ea      	b.n	800575e <_svfprintf_r+0xe36>
 8005788:	aa1f      	add	r2, sp, #124	; 0x7c
 800578a:	4651      	mov	r1, sl
 800578c:	4658      	mov	r0, fp
 800578e:	f001 fc1b 	bl	8006fc8 <__ssprint_r>
 8005792:	bb50      	cbnz	r0, 80057ea <_svfprintf_r+0xec2>
 8005794:	ac2c      	add	r4, sp, #176	; 0xb0
 8005796:	e7f5      	b.n	8005784 <_svfprintf_r+0xe5c>
 8005798:	2301      	movs	r3, #1
 800579a:	6063      	str	r3, [r4, #4]
 800579c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800579e:	f8c4 8000 	str.w	r8, [r4]
 80057a2:	3301      	adds	r3, #1
 80057a4:	e7ae      	b.n	8005704 <_svfprintf_r+0xddc>
 80057a6:	3408      	adds	r4, #8
 80057a8:	e7ba      	b.n	8005720 <_svfprintf_r+0xdf8>
 80057aa:	3408      	adds	r4, #8
 80057ac:	f7ff bbed 	b.w	8004f8a <_svfprintf_r+0x662>
 80057b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057b4:	1a9d      	subs	r5, r3, r2
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	f77f abea 	ble.w	8004f90 <_svfprintf_r+0x668>
 80057bc:	2610      	movs	r6, #16
 80057be:	4b41      	ldr	r3, [pc, #260]	; (80058c4 <_svfprintf_r+0xf9c>)
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	2d10      	cmp	r5, #16
 80057c4:	dc1b      	bgt.n	80057fe <_svfprintf_r+0xed6>
 80057c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057c8:	6065      	str	r5, [r4, #4]
 80057ca:	441d      	add	r5, r3
 80057cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80057ce:	9521      	str	r5, [sp, #132]	; 0x84
 80057d0:	3301      	adds	r3, #1
 80057d2:	2b07      	cmp	r3, #7
 80057d4:	9320      	str	r3, [sp, #128]	; 0x80
 80057d6:	f77f abdb 	ble.w	8004f90 <_svfprintf_r+0x668>
 80057da:	aa1f      	add	r2, sp, #124	; 0x7c
 80057dc:	4651      	mov	r1, sl
 80057de:	4658      	mov	r0, fp
 80057e0:	f001 fbf2 	bl	8006fc8 <__ssprint_r>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	f43f abd3 	beq.w	8004f90 <_svfprintf_r+0x668>
 80057ea:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80057ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80057f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f4:	bf18      	it	ne
 80057f6:	f04f 33ff 	movne.w	r3, #4294967295
 80057fa:	f7ff b8b9 	b.w	8004970 <_svfprintf_r+0x48>
 80057fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005800:	6066      	str	r6, [r4, #4]
 8005802:	3310      	adds	r3, #16
 8005804:	9321      	str	r3, [sp, #132]	; 0x84
 8005806:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005808:	3301      	adds	r3, #1
 800580a:	2b07      	cmp	r3, #7
 800580c:	9320      	str	r3, [sp, #128]	; 0x80
 800580e:	dc02      	bgt.n	8005816 <_svfprintf_r+0xeee>
 8005810:	3408      	adds	r4, #8
 8005812:	3d10      	subs	r5, #16
 8005814:	e7d3      	b.n	80057be <_svfprintf_r+0xe96>
 8005816:	aa1f      	add	r2, sp, #124	; 0x7c
 8005818:	4651      	mov	r1, sl
 800581a:	4658      	mov	r0, fp
 800581c:	f001 fbd4 	bl	8006fc8 <__ssprint_r>
 8005820:	2800      	cmp	r0, #0
 8005822:	d1e2      	bne.n	80057ea <_svfprintf_r+0xec2>
 8005824:	ac2c      	add	r4, sp, #176	; 0xb0
 8005826:	e7f4      	b.n	8005812 <_svfprintf_r+0xeea>
 8005828:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0dd      	beq.n	80057ea <_svfprintf_r+0xec2>
 800582e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005830:	4651      	mov	r1, sl
 8005832:	4658      	mov	r0, fp
 8005834:	f001 fbc8 	bl	8006fc8 <__ssprint_r>
 8005838:	e7d7      	b.n	80057ea <_svfprintf_r+0xec2>
 800583a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800583e:	4610      	mov	r0, r2
 8005840:	4619      	mov	r1, r3
 8005842:	f7fb f98f 	bl	8000b64 <__aeabi_dcmpun>
 8005846:	2800      	cmp	r0, #0
 8005848:	f43f aa44 	beq.w	8004cd4 <_svfprintf_r+0x3ac>
 800584c:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <_svfprintf_r+0xfa0>)
 800584e:	4a1f      	ldr	r2, [pc, #124]	; (80058cc <_svfprintf_r+0xfa4>)
 8005850:	f7ff ba34 	b.w	8004cbc <_svfprintf_r+0x394>
 8005854:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005856:	eba3 0308 	sub.w	r3, r3, r8
 800585a:	9303      	str	r3, [sp, #12]
 800585c:	f7ff bab5 	b.w	8004dca <_svfprintf_r+0x4a2>
 8005860:	ea56 0207 	orrs.w	r2, r6, r7
 8005864:	950b      	str	r5, [sp, #44]	; 0x2c
 8005866:	f43f ac2b 	beq.w	80050c0 <_svfprintf_r+0x798>
 800586a:	2b01      	cmp	r3, #1
 800586c:	f43f ac9d 	beq.w	80051aa <_svfprintf_r+0x882>
 8005870:	2b02      	cmp	r3, #2
 8005872:	f43f acbd 	beq.w	80051f0 <_svfprintf_r+0x8c8>
 8005876:	ab2c      	add	r3, sp, #176	; 0xb0
 8005878:	08f1      	lsrs	r1, r6, #3
 800587a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800587e:	08f8      	lsrs	r0, r7, #3
 8005880:	f006 0207 	and.w	r2, r6, #7
 8005884:	4607      	mov	r7, r0
 8005886:	460e      	mov	r6, r1
 8005888:	3230      	adds	r2, #48	; 0x30
 800588a:	ea56 0107 	orrs.w	r1, r6, r7
 800588e:	f103 38ff 	add.w	r8, r3, #4294967295
 8005892:	f803 2c01 	strb.w	r2, [r3, #-1]
 8005896:	f47f ac86 	bne.w	80051a6 <_svfprintf_r+0x87e>
 800589a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800589c:	07c9      	lsls	r1, r1, #31
 800589e:	d506      	bpl.n	80058ae <_svfprintf_r+0xf86>
 80058a0:	2a30      	cmp	r2, #48	; 0x30
 80058a2:	d004      	beq.n	80058ae <_svfprintf_r+0xf86>
 80058a4:	2230      	movs	r2, #48	; 0x30
 80058a6:	f808 2c01 	strb.w	r2, [r8, #-1]
 80058aa:	f1a3 0802 	sub.w	r8, r3, #2
 80058ae:	464e      	mov	r6, r9
 80058b0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80058b4:	eba9 0908 	sub.w	r9, r9, r8
 80058b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80058ba:	2700      	movs	r7, #0
 80058bc:	f7ff bad1 	b.w	8004e62 <_svfprintf_r+0x53a>
 80058c0:	080077fc 	.word	0x080077fc
 80058c4:	080077ec 	.word	0x080077ec
 80058c8:	080077c0 	.word	0x080077c0
 80058cc:	080077c4 	.word	0x080077c4

080058d0 <quorem>:
 80058d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	6903      	ldr	r3, [r0, #16]
 80058d6:	690c      	ldr	r4, [r1, #16]
 80058d8:	429c      	cmp	r4, r3
 80058da:	4680      	mov	r8, r0
 80058dc:	f300 8082 	bgt.w	80059e4 <quorem+0x114>
 80058e0:	3c01      	subs	r4, #1
 80058e2:	f101 0714 	add.w	r7, r1, #20
 80058e6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80058ea:	f100 0614 	add.w	r6, r0, #20
 80058ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80058f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80058f6:	eb06 030e 	add.w	r3, r6, lr
 80058fa:	3501      	adds	r5, #1
 80058fc:	eb07 090e 	add.w	r9, r7, lr
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	fbb0 f5f5 	udiv	r5, r0, r5
 8005906:	b395      	cbz	r5, 800596e <quorem+0x9e>
 8005908:	f04f 0a00 	mov.w	sl, #0
 800590c:	4638      	mov	r0, r7
 800590e:	46b4      	mov	ip, r6
 8005910:	46d3      	mov	fp, sl
 8005912:	f850 2b04 	ldr.w	r2, [r0], #4
 8005916:	b293      	uxth	r3, r2
 8005918:	fb05 a303 	mla	r3, r5, r3, sl
 800591c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005920:	b29b      	uxth	r3, r3
 8005922:	ebab 0303 	sub.w	r3, fp, r3
 8005926:	0c12      	lsrs	r2, r2, #16
 8005928:	f8bc b000 	ldrh.w	fp, [ip]
 800592c:	fb05 a202 	mla	r2, r5, r2, sl
 8005930:	fa13 f38b 	uxtah	r3, r3, fp
 8005934:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005938:	fa1f fb82 	uxth.w	fp, r2
 800593c:	f8dc 2000 	ldr.w	r2, [ip]
 8005940:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005944:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005948:	b29b      	uxth	r3, r3
 800594a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800594e:	4581      	cmp	r9, r0
 8005950:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005954:	f84c 3b04 	str.w	r3, [ip], #4
 8005958:	d2db      	bcs.n	8005912 <quorem+0x42>
 800595a:	f856 300e 	ldr.w	r3, [r6, lr]
 800595e:	b933      	cbnz	r3, 800596e <quorem+0x9e>
 8005960:	9b01      	ldr	r3, [sp, #4]
 8005962:	3b04      	subs	r3, #4
 8005964:	429e      	cmp	r6, r3
 8005966:	461a      	mov	r2, r3
 8005968:	d330      	bcc.n	80059cc <quorem+0xfc>
 800596a:	f8c8 4010 	str.w	r4, [r8, #16]
 800596e:	4640      	mov	r0, r8
 8005970:	f001 fa53 	bl	8006e1a <__mcmp>
 8005974:	2800      	cmp	r0, #0
 8005976:	db25      	blt.n	80059c4 <quorem+0xf4>
 8005978:	3501      	adds	r5, #1
 800597a:	4630      	mov	r0, r6
 800597c:	f04f 0e00 	mov.w	lr, #0
 8005980:	f857 2b04 	ldr.w	r2, [r7], #4
 8005984:	f8d0 c000 	ldr.w	ip, [r0]
 8005988:	b293      	uxth	r3, r2
 800598a:	ebae 0303 	sub.w	r3, lr, r3
 800598e:	0c12      	lsrs	r2, r2, #16
 8005990:	fa13 f38c 	uxtah	r3, r3, ip
 8005994:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005998:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800599c:	b29b      	uxth	r3, r3
 800599e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059a2:	45b9      	cmp	r9, r7
 80059a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80059a8:	f840 3b04 	str.w	r3, [r0], #4
 80059ac:	d2e8      	bcs.n	8005980 <quorem+0xb0>
 80059ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80059b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80059b6:	b92a      	cbnz	r2, 80059c4 <quorem+0xf4>
 80059b8:	3b04      	subs	r3, #4
 80059ba:	429e      	cmp	r6, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	d30b      	bcc.n	80059d8 <quorem+0x108>
 80059c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80059c4:	4628      	mov	r0, r5
 80059c6:	b003      	add	sp, #12
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	3b04      	subs	r3, #4
 80059d0:	2a00      	cmp	r2, #0
 80059d2:	d1ca      	bne.n	800596a <quorem+0x9a>
 80059d4:	3c01      	subs	r4, #1
 80059d6:	e7c5      	b.n	8005964 <quorem+0x94>
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	3b04      	subs	r3, #4
 80059dc:	2a00      	cmp	r2, #0
 80059de:	d1ef      	bne.n	80059c0 <quorem+0xf0>
 80059e0:	3c01      	subs	r4, #1
 80059e2:	e7ea      	b.n	80059ba <quorem+0xea>
 80059e4:	2000      	movs	r0, #0
 80059e6:	e7ee      	b.n	80059c6 <quorem+0xf6>

080059e8 <_dtoa_r>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	ec57 6b10 	vmov	r6, r7, d0
 80059f0:	b097      	sub	sp, #92	; 0x5c
 80059f2:	e9cd 6700 	strd	r6, r7, [sp]
 80059f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059f8:	9107      	str	r1, [sp, #28]
 80059fa:	4604      	mov	r4, r0
 80059fc:	920a      	str	r2, [sp, #40]	; 0x28
 80059fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a00:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005a02:	b93e      	cbnz	r6, 8005a14 <_dtoa_r+0x2c>
 8005a04:	2010      	movs	r0, #16
 8005a06:	f000 fdcb 	bl	80065a0 <malloc>
 8005a0a:	6260      	str	r0, [r4, #36]	; 0x24
 8005a0c:	6046      	str	r6, [r0, #4]
 8005a0e:	6086      	str	r6, [r0, #8]
 8005a10:	6006      	str	r6, [r0, #0]
 8005a12:	60c6      	str	r6, [r0, #12]
 8005a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a16:	6819      	ldr	r1, [r3, #0]
 8005a18:	b151      	cbz	r1, 8005a30 <_dtoa_r+0x48>
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	604a      	str	r2, [r1, #4]
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4093      	lsls	r3, r2
 8005a22:	608b      	str	r3, [r1, #8]
 8005a24:	4620      	mov	r0, r4
 8005a26:	f001 f823 	bl	8006a70 <_Bfree>
 8005a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	9b01      	ldr	r3, [sp, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bfbf      	itttt	lt
 8005a36:	2301      	movlt	r3, #1
 8005a38:	602b      	strlt	r3, [r5, #0]
 8005a3a:	9b01      	ldrlt	r3, [sp, #4]
 8005a3c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a40:	bfb2      	itee	lt
 8005a42:	9301      	strlt	r3, [sp, #4]
 8005a44:	2300      	movge	r3, #0
 8005a46:	602b      	strge	r3, [r5, #0]
 8005a48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005a4c:	4ba8      	ldr	r3, [pc, #672]	; (8005cf0 <_dtoa_r+0x308>)
 8005a4e:	ea33 0308 	bics.w	r3, r3, r8
 8005a52:	d11b      	bne.n	8005a8c <_dtoa_r+0xa4>
 8005a54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a56:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	9b00      	ldr	r3, [sp, #0]
 8005a5e:	b923      	cbnz	r3, 8005a6a <_dtoa_r+0x82>
 8005a60:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005a64:	2800      	cmp	r0, #0
 8005a66:	f000 8578 	beq.w	800655a <_dtoa_r+0xb72>
 8005a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a6c:	b953      	cbnz	r3, 8005a84 <_dtoa_r+0x9c>
 8005a6e:	4ba1      	ldr	r3, [pc, #644]	; (8005cf4 <_dtoa_r+0x30c>)
 8005a70:	e021      	b.n	8005ab6 <_dtoa_r+0xce>
 8005a72:	4ba1      	ldr	r3, [pc, #644]	; (8005cf8 <_dtoa_r+0x310>)
 8005a74:	9302      	str	r3, [sp, #8]
 8005a76:	3308      	adds	r3, #8
 8005a78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	9802      	ldr	r0, [sp, #8]
 8005a7e:	b017      	add	sp, #92	; 0x5c
 8005a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a84:	4b9b      	ldr	r3, [pc, #620]	; (8005cf4 <_dtoa_r+0x30c>)
 8005a86:	9302      	str	r3, [sp, #8]
 8005a88:	3303      	adds	r3, #3
 8005a8a:	e7f5      	b.n	8005a78 <_dtoa_r+0x90>
 8005a8c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005a90:	2200      	movs	r2, #0
 8005a92:	2300      	movs	r3, #0
 8005a94:	4630      	mov	r0, r6
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7fb f832 	bl	8000b00 <__aeabi_dcmpeq>
 8005a9c:	4681      	mov	r9, r0
 8005a9e:	b160      	cbz	r0, 8005aba <_dtoa_r+0xd2>
 8005aa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8553 	beq.w	8006554 <_dtoa_r+0xb6c>
 8005aae:	4b93      	ldr	r3, [pc, #588]	; (8005cfc <_dtoa_r+0x314>)
 8005ab0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	9302      	str	r3, [sp, #8]
 8005ab8:	e7e0      	b.n	8005a7c <_dtoa_r+0x94>
 8005aba:	aa14      	add	r2, sp, #80	; 0x50
 8005abc:	a915      	add	r1, sp, #84	; 0x54
 8005abe:	ec47 6b10 	vmov	d0, r6, r7
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f001 fa21 	bl	8006f0a <__d2b>
 8005ac8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005acc:	4682      	mov	sl, r0
 8005ace:	2d00      	cmp	r5, #0
 8005ad0:	d07e      	beq.n	8005bd0 <_dtoa_r+0x1e8>
 8005ad2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ad6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005ada:	4630      	mov	r0, r6
 8005adc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005ae0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ae4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8005ae8:	2200      	movs	r2, #0
 8005aea:	4b85      	ldr	r3, [pc, #532]	; (8005d00 <_dtoa_r+0x318>)
 8005aec:	f7fa fbec 	bl	80002c8 <__aeabi_dsub>
 8005af0:	a379      	add	r3, pc, #484	; (adr r3, 8005cd8 <_dtoa_r+0x2f0>)
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f7fa fd9b 	bl	8000630 <__aeabi_dmul>
 8005afa:	a379      	add	r3, pc, #484	; (adr r3, 8005ce0 <_dtoa_r+0x2f8>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f7fa fbe4 	bl	80002cc <__adddf3>
 8005b04:	4606      	mov	r6, r0
 8005b06:	4628      	mov	r0, r5
 8005b08:	460f      	mov	r7, r1
 8005b0a:	f7fa fd2b 	bl	8000564 <__aeabi_i2d>
 8005b0e:	a376      	add	r3, pc, #472	; (adr r3, 8005ce8 <_dtoa_r+0x300>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa fd8c 	bl	8000630 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	4639      	mov	r1, r7
 8005b20:	f7fa fbd4 	bl	80002cc <__adddf3>
 8005b24:	4606      	mov	r6, r0
 8005b26:	460f      	mov	r7, r1
 8005b28:	f7fb f832 	bl	8000b90 <__aeabi_d2iz>
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	4683      	mov	fp, r0
 8005b30:	2300      	movs	r3, #0
 8005b32:	4630      	mov	r0, r6
 8005b34:	4639      	mov	r1, r7
 8005b36:	f7fa ffed 	bl	8000b14 <__aeabi_dcmplt>
 8005b3a:	b158      	cbz	r0, 8005b54 <_dtoa_r+0x16c>
 8005b3c:	4658      	mov	r0, fp
 8005b3e:	f7fa fd11 	bl	8000564 <__aeabi_i2d>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4630      	mov	r0, r6
 8005b48:	4639      	mov	r1, r7
 8005b4a:	f7fa ffd9 	bl	8000b00 <__aeabi_dcmpeq>
 8005b4e:	b908      	cbnz	r0, 8005b54 <_dtoa_r+0x16c>
 8005b50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b54:	f1bb 0f16 	cmp.w	fp, #22
 8005b58:	d859      	bhi.n	8005c0e <_dtoa_r+0x226>
 8005b5a:	496a      	ldr	r1, [pc, #424]	; (8005d04 <_dtoa_r+0x31c>)
 8005b5c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005b60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b68:	f7fa fff2 	bl	8000b50 <__aeabi_dcmpgt>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d050      	beq.n	8005c12 <_dtoa_r+0x22a>
 8005b70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b74:	2300      	movs	r3, #0
 8005b76:	930e      	str	r3, [sp, #56]	; 0x38
 8005b78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b7a:	1b5d      	subs	r5, r3, r5
 8005b7c:	1e6b      	subs	r3, r5, #1
 8005b7e:	9306      	str	r3, [sp, #24]
 8005b80:	bf45      	ittet	mi
 8005b82:	f1c5 0301 	rsbmi	r3, r5, #1
 8005b86:	9305      	strmi	r3, [sp, #20]
 8005b88:	2300      	movpl	r3, #0
 8005b8a:	2300      	movmi	r3, #0
 8005b8c:	bf4c      	ite	mi
 8005b8e:	9306      	strmi	r3, [sp, #24]
 8005b90:	9305      	strpl	r3, [sp, #20]
 8005b92:	f1bb 0f00 	cmp.w	fp, #0
 8005b96:	db3e      	blt.n	8005c16 <_dtoa_r+0x22e>
 8005b98:	9b06      	ldr	r3, [sp, #24]
 8005b9a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005b9e:	445b      	add	r3, fp
 8005ba0:	9306      	str	r3, [sp, #24]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9308      	str	r3, [sp, #32]
 8005ba6:	9b07      	ldr	r3, [sp, #28]
 8005ba8:	2b09      	cmp	r3, #9
 8005baa:	f200 80af 	bhi.w	8005d0c <_dtoa_r+0x324>
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	bfc4      	itt	gt
 8005bb2:	3b04      	subgt	r3, #4
 8005bb4:	9307      	strgt	r3, [sp, #28]
 8005bb6:	9b07      	ldr	r3, [sp, #28]
 8005bb8:	f1a3 0302 	sub.w	r3, r3, #2
 8005bbc:	bfcc      	ite	gt
 8005bbe:	2600      	movgt	r6, #0
 8005bc0:	2601      	movle	r6, #1
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	f200 80ae 	bhi.w	8005d24 <_dtoa_r+0x33c>
 8005bc8:	e8df f003 	tbb	[pc, r3]
 8005bcc:	772f8482 	.word	0x772f8482
 8005bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bd2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005bd4:	441d      	add	r5, r3
 8005bd6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	dd11      	ble.n	8005c02 <_dtoa_r+0x21a>
 8005bde:	9a00      	ldr	r2, [sp, #0]
 8005be0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005be4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005be8:	fa22 f000 	lsr.w	r0, r2, r0
 8005bec:	fa08 f303 	lsl.w	r3, r8, r3
 8005bf0:	4318      	orrs	r0, r3
 8005bf2:	f7fa fca7 	bl	8000544 <__aeabi_ui2d>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005bfc:	3d01      	subs	r5, #1
 8005bfe:	9312      	str	r3, [sp, #72]	; 0x48
 8005c00:	e772      	b.n	8005ae8 <_dtoa_r+0x100>
 8005c02:	f1c3 0020 	rsb	r0, r3, #32
 8005c06:	9b00      	ldr	r3, [sp, #0]
 8005c08:	fa03 f000 	lsl.w	r0, r3, r0
 8005c0c:	e7f1      	b.n	8005bf2 <_dtoa_r+0x20a>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e7b1      	b.n	8005b76 <_dtoa_r+0x18e>
 8005c12:	900e      	str	r0, [sp, #56]	; 0x38
 8005c14:	e7b0      	b.n	8005b78 <_dtoa_r+0x190>
 8005c16:	9b05      	ldr	r3, [sp, #20]
 8005c18:	eba3 030b 	sub.w	r3, r3, fp
 8005c1c:	9305      	str	r3, [sp, #20]
 8005c1e:	f1cb 0300 	rsb	r3, fp, #0
 8005c22:	9308      	str	r3, [sp, #32]
 8005c24:	2300      	movs	r3, #0
 8005c26:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c28:	e7bd      	b.n	8005ba6 <_dtoa_r+0x1be>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dd7a      	ble.n	8005d2a <_dtoa_r+0x342>
 8005c34:	9304      	str	r3, [sp, #16]
 8005c36:	9303      	str	r3, [sp, #12]
 8005c38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	606a      	str	r2, [r5, #4]
 8005c3e:	2104      	movs	r1, #4
 8005c40:	f101 0214 	add.w	r2, r1, #20
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d975      	bls.n	8005d34 <_dtoa_r+0x34c>
 8005c48:	6869      	ldr	r1, [r5, #4]
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 fedc 	bl	8006a08 <_Balloc>
 8005c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c52:	6028      	str	r0, [r5, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	9302      	str	r3, [sp, #8]
 8005c58:	9b03      	ldr	r3, [sp, #12]
 8005c5a:	2b0e      	cmp	r3, #14
 8005c5c:	f200 80e5 	bhi.w	8005e2a <_dtoa_r+0x442>
 8005c60:	2e00      	cmp	r6, #0
 8005c62:	f000 80e2 	beq.w	8005e2a <_dtoa_r+0x442>
 8005c66:	ed9d 7b00 	vldr	d7, [sp]
 8005c6a:	f1bb 0f00 	cmp.w	fp, #0
 8005c6e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005c72:	dd74      	ble.n	8005d5e <_dtoa_r+0x376>
 8005c74:	4a23      	ldr	r2, [pc, #140]	; (8005d04 <_dtoa_r+0x31c>)
 8005c76:	f00b 030f 	and.w	r3, fp, #15
 8005c7a:	ea4f 162b 	mov.w	r6, fp, asr #4
 8005c7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c82:	06f0      	lsls	r0, r6, #27
 8005c84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c88:	d559      	bpl.n	8005d3e <_dtoa_r+0x356>
 8005c8a:	4b1f      	ldr	r3, [pc, #124]	; (8005d08 <_dtoa_r+0x320>)
 8005c8c:	ec51 0b17 	vmov	r0, r1, d7
 8005c90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c94:	f7fa fdf6 	bl	8000884 <__aeabi_ddiv>
 8005c98:	e9cd 0100 	strd	r0, r1, [sp]
 8005c9c:	f006 060f 	and.w	r6, r6, #15
 8005ca0:	2503      	movs	r5, #3
 8005ca2:	4f19      	ldr	r7, [pc, #100]	; (8005d08 <_dtoa_r+0x320>)
 8005ca4:	2e00      	cmp	r6, #0
 8005ca6:	d14c      	bne.n	8005d42 <_dtoa_r+0x35a>
 8005ca8:	4642      	mov	r2, r8
 8005caa:	464b      	mov	r3, r9
 8005cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cb0:	f7fa fde8 	bl	8000884 <__aeabi_ddiv>
 8005cb4:	e9cd 0100 	strd	r0, r1, [sp]
 8005cb8:	e06a      	b.n	8005d90 <_dtoa_r+0x3a8>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc0:	445b      	add	r3, fp
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	9303      	str	r3, [sp, #12]
 8005cca:	bfb8      	it	lt
 8005ccc:	2301      	movlt	r3, #1
 8005cce:	e7b3      	b.n	8005c38 <_dtoa_r+0x250>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e7ab      	b.n	8005c2c <_dtoa_r+0x244>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e7f1      	b.n	8005cbc <_dtoa_r+0x2d4>
 8005cd8:	636f4361 	.word	0x636f4361
 8005cdc:	3fd287a7 	.word	0x3fd287a7
 8005ce0:	8b60c8b3 	.word	0x8b60c8b3
 8005ce4:	3fc68a28 	.word	0x3fc68a28
 8005ce8:	509f79fb 	.word	0x509f79fb
 8005cec:	3fd34413 	.word	0x3fd34413
 8005cf0:	7ff00000 	.word	0x7ff00000
 8005cf4:	08007815 	.word	0x08007815
 8005cf8:	0800780c 	.word	0x0800780c
 8005cfc:	080077eb 	.word	0x080077eb
 8005d00:	3ff80000 	.word	0x3ff80000
 8005d04:	08007850 	.word	0x08007850
 8005d08:	08007828 	.word	0x08007828
 8005d0c:	2601      	movs	r6, #1
 8005d0e:	2300      	movs	r3, #0
 8005d10:	9307      	str	r3, [sp, #28]
 8005d12:	9609      	str	r6, [sp, #36]	; 0x24
 8005d14:	f04f 33ff 	mov.w	r3, #4294967295
 8005d18:	9304      	str	r3, [sp, #16]
 8005d1a:	9303      	str	r3, [sp, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2312      	movs	r3, #18
 8005d20:	920a      	str	r2, [sp, #40]	; 0x28
 8005d22:	e789      	b.n	8005c38 <_dtoa_r+0x250>
 8005d24:	2301      	movs	r3, #1
 8005d26:	9309      	str	r3, [sp, #36]	; 0x24
 8005d28:	e7f4      	b.n	8005d14 <_dtoa_r+0x32c>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	9304      	str	r3, [sp, #16]
 8005d2e:	9303      	str	r3, [sp, #12]
 8005d30:	461a      	mov	r2, r3
 8005d32:	e7f5      	b.n	8005d20 <_dtoa_r+0x338>
 8005d34:	686a      	ldr	r2, [r5, #4]
 8005d36:	3201      	adds	r2, #1
 8005d38:	606a      	str	r2, [r5, #4]
 8005d3a:	0049      	lsls	r1, r1, #1
 8005d3c:	e780      	b.n	8005c40 <_dtoa_r+0x258>
 8005d3e:	2502      	movs	r5, #2
 8005d40:	e7af      	b.n	8005ca2 <_dtoa_r+0x2ba>
 8005d42:	07f1      	lsls	r1, r6, #31
 8005d44:	d508      	bpl.n	8005d58 <_dtoa_r+0x370>
 8005d46:	4640      	mov	r0, r8
 8005d48:	4649      	mov	r1, r9
 8005d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d4e:	f7fa fc6f 	bl	8000630 <__aeabi_dmul>
 8005d52:	3501      	adds	r5, #1
 8005d54:	4680      	mov	r8, r0
 8005d56:	4689      	mov	r9, r1
 8005d58:	1076      	asrs	r6, r6, #1
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	e7a2      	b.n	8005ca4 <_dtoa_r+0x2bc>
 8005d5e:	f000 809d 	beq.w	8005e9c <_dtoa_r+0x4b4>
 8005d62:	f1cb 0600 	rsb	r6, fp, #0
 8005d66:	4b9f      	ldr	r3, [pc, #636]	; (8005fe4 <_dtoa_r+0x5fc>)
 8005d68:	4f9f      	ldr	r7, [pc, #636]	; (8005fe8 <_dtoa_r+0x600>)
 8005d6a:	f006 020f 	and.w	r2, r6, #15
 8005d6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d7a:	f7fa fc59 	bl	8000630 <__aeabi_dmul>
 8005d7e:	e9cd 0100 	strd	r0, r1, [sp]
 8005d82:	1136      	asrs	r6, r6, #4
 8005d84:	2300      	movs	r3, #0
 8005d86:	2502      	movs	r5, #2
 8005d88:	2e00      	cmp	r6, #0
 8005d8a:	d17c      	bne.n	8005e86 <_dtoa_r+0x49e>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d191      	bne.n	8005cb4 <_dtoa_r+0x2cc>
 8005d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 8084 	beq.w	8005ea0 <_dtoa_r+0x4b8>
 8005d98:	e9dd 8900 	ldrd	r8, r9, [sp]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4b93      	ldr	r3, [pc, #588]	; (8005fec <_dtoa_r+0x604>)
 8005da0:	4640      	mov	r0, r8
 8005da2:	4649      	mov	r1, r9
 8005da4:	f7fa feb6 	bl	8000b14 <__aeabi_dcmplt>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d079      	beq.n	8005ea0 <_dtoa_r+0x4b8>
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d076      	beq.n	8005ea0 <_dtoa_r+0x4b8>
 8005db2:	9b04      	ldr	r3, [sp, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	dd34      	ble.n	8005e22 <_dtoa_r+0x43a>
 8005db8:	2200      	movs	r2, #0
 8005dba:	4b8d      	ldr	r3, [pc, #564]	; (8005ff0 <_dtoa_r+0x608>)
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	f7fa fc36 	bl	8000630 <__aeabi_dmul>
 8005dc4:	e9cd 0100 	strd	r0, r1, [sp]
 8005dc8:	9e04      	ldr	r6, [sp, #16]
 8005dca:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005dce:	3501      	adds	r5, #1
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f7fa fbc7 	bl	8000564 <__aeabi_i2d>
 8005dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dda:	f7fa fc29 	bl	8000630 <__aeabi_dmul>
 8005dde:	2200      	movs	r2, #0
 8005de0:	4b84      	ldr	r3, [pc, #528]	; (8005ff4 <_dtoa_r+0x60c>)
 8005de2:	f7fa fa73 	bl	80002cc <__adddf3>
 8005de6:	4680      	mov	r8, r0
 8005de8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8005dec:	2e00      	cmp	r6, #0
 8005dee:	d15a      	bne.n	8005ea6 <_dtoa_r+0x4be>
 8005df0:	2200      	movs	r2, #0
 8005df2:	4b81      	ldr	r3, [pc, #516]	; (8005ff8 <_dtoa_r+0x610>)
 8005df4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005df8:	f7fa fa66 	bl	80002c8 <__aeabi_dsub>
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	464b      	mov	r3, r9
 8005e00:	e9cd 0100 	strd	r0, r1, [sp]
 8005e04:	f7fa fea4 	bl	8000b50 <__aeabi_dcmpgt>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	f040 829b 	bne.w	8006344 <_dtoa_r+0x95c>
 8005e0e:	4642      	mov	r2, r8
 8005e10:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e18:	f7fa fe7c 	bl	8000b14 <__aeabi_dcmplt>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	f040 828f 	bne.w	8006340 <_dtoa_r+0x958>
 8005e22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e26:	e9cd 2300 	strd	r2, r3, [sp]
 8005e2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f2c0 8150 	blt.w	80060d2 <_dtoa_r+0x6ea>
 8005e32:	f1bb 0f0e 	cmp.w	fp, #14
 8005e36:	f300 814c 	bgt.w	80060d2 <_dtoa_r+0x6ea>
 8005e3a:	4b6a      	ldr	r3, [pc, #424]	; (8005fe4 <_dtoa_r+0x5fc>)
 8005e3c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f280 80da 	bge.w	8006000 <_dtoa_r+0x618>
 8005e4c:	9b03      	ldr	r3, [sp, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f300 80d6 	bgt.w	8006000 <_dtoa_r+0x618>
 8005e54:	f040 8273 	bne.w	800633e <_dtoa_r+0x956>
 8005e58:	2200      	movs	r2, #0
 8005e5a:	4b67      	ldr	r3, [pc, #412]	; (8005ff8 <_dtoa_r+0x610>)
 8005e5c:	4640      	mov	r0, r8
 8005e5e:	4649      	mov	r1, r9
 8005e60:	f7fa fbe6 	bl	8000630 <__aeabi_dmul>
 8005e64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e68:	f7fa fe68 	bl	8000b3c <__aeabi_dcmpge>
 8005e6c:	9e03      	ldr	r6, [sp, #12]
 8005e6e:	4637      	mov	r7, r6
 8005e70:	2800      	cmp	r0, #0
 8005e72:	f040 824a 	bne.w	800630a <_dtoa_r+0x922>
 8005e76:	9b02      	ldr	r3, [sp, #8]
 8005e78:	9a02      	ldr	r2, [sp, #8]
 8005e7a:	1c5d      	adds	r5, r3, #1
 8005e7c:	2331      	movs	r3, #49	; 0x31
 8005e7e:	7013      	strb	r3, [r2, #0]
 8005e80:	f10b 0b01 	add.w	fp, fp, #1
 8005e84:	e245      	b.n	8006312 <_dtoa_r+0x92a>
 8005e86:	07f2      	lsls	r2, r6, #31
 8005e88:	d505      	bpl.n	8005e96 <_dtoa_r+0x4ae>
 8005e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e8e:	f7fa fbcf 	bl	8000630 <__aeabi_dmul>
 8005e92:	3501      	adds	r5, #1
 8005e94:	2301      	movs	r3, #1
 8005e96:	1076      	asrs	r6, r6, #1
 8005e98:	3708      	adds	r7, #8
 8005e9a:	e775      	b.n	8005d88 <_dtoa_r+0x3a0>
 8005e9c:	2502      	movs	r5, #2
 8005e9e:	e777      	b.n	8005d90 <_dtoa_r+0x3a8>
 8005ea0:	465f      	mov	r7, fp
 8005ea2:	9e03      	ldr	r6, [sp, #12]
 8005ea4:	e794      	b.n	8005dd0 <_dtoa_r+0x3e8>
 8005ea6:	9a02      	ldr	r2, [sp, #8]
 8005ea8:	4b4e      	ldr	r3, [pc, #312]	; (8005fe4 <_dtoa_r+0x5fc>)
 8005eaa:	4432      	add	r2, r6
 8005eac:	9213      	str	r2, [sp, #76]	; 0x4c
 8005eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eb0:	1e71      	subs	r1, r6, #1
 8005eb2:	2a00      	cmp	r2, #0
 8005eb4:	d048      	beq.n	8005f48 <_dtoa_r+0x560>
 8005eb6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	494e      	ldr	r1, [pc, #312]	; (8005ffc <_dtoa_r+0x614>)
 8005ec2:	f7fa fcdf 	bl	8000884 <__aeabi_ddiv>
 8005ec6:	4642      	mov	r2, r8
 8005ec8:	464b      	mov	r3, r9
 8005eca:	f7fa f9fd 	bl	80002c8 <__aeabi_dsub>
 8005ece:	9d02      	ldr	r5, [sp, #8]
 8005ed0:	4680      	mov	r8, r0
 8005ed2:	4689      	mov	r9, r1
 8005ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ed8:	f7fa fe5a 	bl	8000b90 <__aeabi_d2iz>
 8005edc:	4606      	mov	r6, r0
 8005ede:	f7fa fb41 	bl	8000564 <__aeabi_i2d>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005eea:	f7fa f9ed 	bl	80002c8 <__aeabi_dsub>
 8005eee:	3630      	adds	r6, #48	; 0x30
 8005ef0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ef4:	4642      	mov	r2, r8
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	e9cd 0100 	strd	r0, r1, [sp]
 8005efc:	f7fa fe0a 	bl	8000b14 <__aeabi_dcmplt>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d165      	bne.n	8005fd0 <_dtoa_r+0x5e8>
 8005f04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f08:	2000      	movs	r0, #0
 8005f0a:	4938      	ldr	r1, [pc, #224]	; (8005fec <_dtoa_r+0x604>)
 8005f0c:	f7fa f9dc 	bl	80002c8 <__aeabi_dsub>
 8005f10:	4642      	mov	r2, r8
 8005f12:	464b      	mov	r3, r9
 8005f14:	f7fa fdfe 	bl	8000b14 <__aeabi_dcmplt>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	f040 80ba 	bne.w	8006092 <_dtoa_r+0x6aa>
 8005f1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f20:	429d      	cmp	r5, r3
 8005f22:	f43f af7e 	beq.w	8005e22 <_dtoa_r+0x43a>
 8005f26:	2200      	movs	r2, #0
 8005f28:	4b31      	ldr	r3, [pc, #196]	; (8005ff0 <_dtoa_r+0x608>)
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	f7fa fb7f 	bl	8000630 <__aeabi_dmul>
 8005f32:	2200      	movs	r2, #0
 8005f34:	4680      	mov	r8, r0
 8005f36:	4689      	mov	r9, r1
 8005f38:	4b2d      	ldr	r3, [pc, #180]	; (8005ff0 <_dtoa_r+0x608>)
 8005f3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f3e:	f7fa fb77 	bl	8000630 <__aeabi_dmul>
 8005f42:	e9cd 0100 	strd	r0, r1, [sp]
 8005f46:	e7c5      	b.n	8005ed4 <_dtoa_r+0x4ec>
 8005f48:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f54:	f7fa fb6c 	bl	8000630 <__aeabi_dmul>
 8005f58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f5c:	9d02      	ldr	r5, [sp, #8]
 8005f5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f62:	f7fa fe15 	bl	8000b90 <__aeabi_d2iz>
 8005f66:	4606      	mov	r6, r0
 8005f68:	f7fa fafc 	bl	8000564 <__aeabi_i2d>
 8005f6c:	3630      	adds	r6, #48	; 0x30
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f76:	f7fa f9a7 	bl	80002c8 <__aeabi_dsub>
 8005f7a:	f805 6b01 	strb.w	r6, [r5], #1
 8005f7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	4680      	mov	r8, r0
 8005f84:	4689      	mov	r9, r1
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	d125      	bne.n	8005fd8 <_dtoa_r+0x5f0>
 8005f8c:	4b1b      	ldr	r3, [pc, #108]	; (8005ffc <_dtoa_r+0x614>)
 8005f8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f92:	f7fa f99b 	bl	80002cc <__adddf3>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	f7fa fdd7 	bl	8000b50 <__aeabi_dcmpgt>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d175      	bne.n	8006092 <_dtoa_r+0x6aa>
 8005fa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005faa:	2000      	movs	r0, #0
 8005fac:	4913      	ldr	r1, [pc, #76]	; (8005ffc <_dtoa_r+0x614>)
 8005fae:	f7fa f98b 	bl	80002c8 <__aeabi_dsub>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	4649      	mov	r1, r9
 8005fba:	f7fa fdab 	bl	8000b14 <__aeabi_dcmplt>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f43f af2f 	beq.w	8005e22 <_dtoa_r+0x43a>
 8005fc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fc8:	2b30      	cmp	r3, #48	; 0x30
 8005fca:	f105 32ff 	add.w	r2, r5, #4294967295
 8005fce:	d001      	beq.n	8005fd4 <_dtoa_r+0x5ec>
 8005fd0:	46bb      	mov	fp, r7
 8005fd2:	e04d      	b.n	8006070 <_dtoa_r+0x688>
 8005fd4:	4615      	mov	r5, r2
 8005fd6:	e7f5      	b.n	8005fc4 <_dtoa_r+0x5dc>
 8005fd8:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <_dtoa_r+0x608>)
 8005fda:	f7fa fb29 	bl	8000630 <__aeabi_dmul>
 8005fde:	e9cd 0100 	strd	r0, r1, [sp]
 8005fe2:	e7bc      	b.n	8005f5e <_dtoa_r+0x576>
 8005fe4:	08007850 	.word	0x08007850
 8005fe8:	08007828 	.word	0x08007828
 8005fec:	3ff00000 	.word	0x3ff00000
 8005ff0:	40240000 	.word	0x40240000
 8005ff4:	401c0000 	.word	0x401c0000
 8005ff8:	40140000 	.word	0x40140000
 8005ffc:	3fe00000 	.word	0x3fe00000
 8006000:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006004:	9d02      	ldr	r5, [sp, #8]
 8006006:	4642      	mov	r2, r8
 8006008:	464b      	mov	r3, r9
 800600a:	4630      	mov	r0, r6
 800600c:	4639      	mov	r1, r7
 800600e:	f7fa fc39 	bl	8000884 <__aeabi_ddiv>
 8006012:	f7fa fdbd 	bl	8000b90 <__aeabi_d2iz>
 8006016:	9000      	str	r0, [sp, #0]
 8006018:	f7fa faa4 	bl	8000564 <__aeabi_i2d>
 800601c:	4642      	mov	r2, r8
 800601e:	464b      	mov	r3, r9
 8006020:	f7fa fb06 	bl	8000630 <__aeabi_dmul>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4630      	mov	r0, r6
 800602a:	4639      	mov	r1, r7
 800602c:	f7fa f94c 	bl	80002c8 <__aeabi_dsub>
 8006030:	9e00      	ldr	r6, [sp, #0]
 8006032:	9f03      	ldr	r7, [sp, #12]
 8006034:	3630      	adds	r6, #48	; 0x30
 8006036:	f805 6b01 	strb.w	r6, [r5], #1
 800603a:	9e02      	ldr	r6, [sp, #8]
 800603c:	1bae      	subs	r6, r5, r6
 800603e:	42b7      	cmp	r7, r6
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	d138      	bne.n	80060b8 <_dtoa_r+0x6d0>
 8006046:	f7fa f941 	bl	80002cc <__adddf3>
 800604a:	4606      	mov	r6, r0
 800604c:	460f      	mov	r7, r1
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4640      	mov	r0, r8
 8006054:	4649      	mov	r1, r9
 8006056:	f7fa fd5d 	bl	8000b14 <__aeabi_dcmplt>
 800605a:	b9c8      	cbnz	r0, 8006090 <_dtoa_r+0x6a8>
 800605c:	4632      	mov	r2, r6
 800605e:	463b      	mov	r3, r7
 8006060:	4640      	mov	r0, r8
 8006062:	4649      	mov	r1, r9
 8006064:	f7fa fd4c 	bl	8000b00 <__aeabi_dcmpeq>
 8006068:	b110      	cbz	r0, 8006070 <_dtoa_r+0x688>
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	07db      	lsls	r3, r3, #31
 800606e:	d40f      	bmi.n	8006090 <_dtoa_r+0x6a8>
 8006070:	4651      	mov	r1, sl
 8006072:	4620      	mov	r0, r4
 8006074:	f000 fcfc 	bl	8006a70 <_Bfree>
 8006078:	2300      	movs	r3, #0
 800607a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800607c:	702b      	strb	r3, [r5, #0]
 800607e:	f10b 0301 	add.w	r3, fp, #1
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006086:	2b00      	cmp	r3, #0
 8006088:	f43f acf8 	beq.w	8005a7c <_dtoa_r+0x94>
 800608c:	601d      	str	r5, [r3, #0]
 800608e:	e4f5      	b.n	8005a7c <_dtoa_r+0x94>
 8006090:	465f      	mov	r7, fp
 8006092:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006096:	2a39      	cmp	r2, #57	; 0x39
 8006098:	f105 33ff 	add.w	r3, r5, #4294967295
 800609c:	d106      	bne.n	80060ac <_dtoa_r+0x6c4>
 800609e:	9a02      	ldr	r2, [sp, #8]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d107      	bne.n	80060b4 <_dtoa_r+0x6cc>
 80060a4:	2330      	movs	r3, #48	; 0x30
 80060a6:	7013      	strb	r3, [r2, #0]
 80060a8:	3701      	adds	r7, #1
 80060aa:	4613      	mov	r3, r2
 80060ac:	781a      	ldrb	r2, [r3, #0]
 80060ae:	3201      	adds	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e78d      	b.n	8005fd0 <_dtoa_r+0x5e8>
 80060b4:	461d      	mov	r5, r3
 80060b6:	e7ec      	b.n	8006092 <_dtoa_r+0x6aa>
 80060b8:	2200      	movs	r2, #0
 80060ba:	4ba4      	ldr	r3, [pc, #656]	; (800634c <_dtoa_r+0x964>)
 80060bc:	f7fa fab8 	bl	8000630 <__aeabi_dmul>
 80060c0:	2200      	movs	r2, #0
 80060c2:	2300      	movs	r3, #0
 80060c4:	4606      	mov	r6, r0
 80060c6:	460f      	mov	r7, r1
 80060c8:	f7fa fd1a 	bl	8000b00 <__aeabi_dcmpeq>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d09a      	beq.n	8006006 <_dtoa_r+0x61e>
 80060d0:	e7ce      	b.n	8006070 <_dtoa_r+0x688>
 80060d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060d4:	2a00      	cmp	r2, #0
 80060d6:	f000 80cd 	beq.w	8006274 <_dtoa_r+0x88c>
 80060da:	9a07      	ldr	r2, [sp, #28]
 80060dc:	2a01      	cmp	r2, #1
 80060de:	f300 80af 	bgt.w	8006240 <_dtoa_r+0x858>
 80060e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060e4:	2a00      	cmp	r2, #0
 80060e6:	f000 80a7 	beq.w	8006238 <_dtoa_r+0x850>
 80060ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060ee:	9e08      	ldr	r6, [sp, #32]
 80060f0:	9d05      	ldr	r5, [sp, #20]
 80060f2:	9a05      	ldr	r2, [sp, #20]
 80060f4:	441a      	add	r2, r3
 80060f6:	9205      	str	r2, [sp, #20]
 80060f8:	9a06      	ldr	r2, [sp, #24]
 80060fa:	2101      	movs	r1, #1
 80060fc:	441a      	add	r2, r3
 80060fe:	4620      	mov	r0, r4
 8006100:	9206      	str	r2, [sp, #24]
 8006102:	f000 fd55 	bl	8006bb0 <__i2b>
 8006106:	4607      	mov	r7, r0
 8006108:	2d00      	cmp	r5, #0
 800610a:	dd0c      	ble.n	8006126 <_dtoa_r+0x73e>
 800610c:	9b06      	ldr	r3, [sp, #24]
 800610e:	2b00      	cmp	r3, #0
 8006110:	dd09      	ble.n	8006126 <_dtoa_r+0x73e>
 8006112:	42ab      	cmp	r3, r5
 8006114:	9a05      	ldr	r2, [sp, #20]
 8006116:	bfa8      	it	ge
 8006118:	462b      	movge	r3, r5
 800611a:	1ad2      	subs	r2, r2, r3
 800611c:	9205      	str	r2, [sp, #20]
 800611e:	9a06      	ldr	r2, [sp, #24]
 8006120:	1aed      	subs	r5, r5, r3
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	9306      	str	r3, [sp, #24]
 8006126:	9b08      	ldr	r3, [sp, #32]
 8006128:	b1f3      	cbz	r3, 8006168 <_dtoa_r+0x780>
 800612a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80a5 	beq.w	800627c <_dtoa_r+0x894>
 8006132:	2e00      	cmp	r6, #0
 8006134:	dd10      	ble.n	8006158 <_dtoa_r+0x770>
 8006136:	4639      	mov	r1, r7
 8006138:	4632      	mov	r2, r6
 800613a:	4620      	mov	r0, r4
 800613c:	f000 fdce 	bl	8006cdc <__pow5mult>
 8006140:	4652      	mov	r2, sl
 8006142:	4601      	mov	r1, r0
 8006144:	4607      	mov	r7, r0
 8006146:	4620      	mov	r0, r4
 8006148:	f000 fd3b 	bl	8006bc2 <__multiply>
 800614c:	4651      	mov	r1, sl
 800614e:	4680      	mov	r8, r0
 8006150:	4620      	mov	r0, r4
 8006152:	f000 fc8d 	bl	8006a70 <_Bfree>
 8006156:	46c2      	mov	sl, r8
 8006158:	9b08      	ldr	r3, [sp, #32]
 800615a:	1b9a      	subs	r2, r3, r6
 800615c:	d004      	beq.n	8006168 <_dtoa_r+0x780>
 800615e:	4651      	mov	r1, sl
 8006160:	4620      	mov	r0, r4
 8006162:	f000 fdbb 	bl	8006cdc <__pow5mult>
 8006166:	4682      	mov	sl, r0
 8006168:	2101      	movs	r1, #1
 800616a:	4620      	mov	r0, r4
 800616c:	f000 fd20 	bl	8006bb0 <__i2b>
 8006170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006172:	2b00      	cmp	r3, #0
 8006174:	4606      	mov	r6, r0
 8006176:	f340 8083 	ble.w	8006280 <_dtoa_r+0x898>
 800617a:	461a      	mov	r2, r3
 800617c:	4601      	mov	r1, r0
 800617e:	4620      	mov	r0, r4
 8006180:	f000 fdac 	bl	8006cdc <__pow5mult>
 8006184:	9b07      	ldr	r3, [sp, #28]
 8006186:	2b01      	cmp	r3, #1
 8006188:	4606      	mov	r6, r0
 800618a:	dd7c      	ble.n	8006286 <_dtoa_r+0x89e>
 800618c:	f04f 0800 	mov.w	r8, #0
 8006190:	6933      	ldr	r3, [r6, #16]
 8006192:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006196:	6918      	ldr	r0, [r3, #16]
 8006198:	f000 fcbc 	bl	8006b14 <__hi0bits>
 800619c:	f1c0 0020 	rsb	r0, r0, #32
 80061a0:	9b06      	ldr	r3, [sp, #24]
 80061a2:	4418      	add	r0, r3
 80061a4:	f010 001f 	ands.w	r0, r0, #31
 80061a8:	f000 8096 	beq.w	80062d8 <_dtoa_r+0x8f0>
 80061ac:	f1c0 0320 	rsb	r3, r0, #32
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	f340 8087 	ble.w	80062c4 <_dtoa_r+0x8dc>
 80061b6:	9b05      	ldr	r3, [sp, #20]
 80061b8:	f1c0 001c 	rsb	r0, r0, #28
 80061bc:	4403      	add	r3, r0
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	9b06      	ldr	r3, [sp, #24]
 80061c2:	4405      	add	r5, r0
 80061c4:	4403      	add	r3, r0
 80061c6:	9306      	str	r3, [sp, #24]
 80061c8:	9b05      	ldr	r3, [sp, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	dd05      	ble.n	80061da <_dtoa_r+0x7f2>
 80061ce:	4651      	mov	r1, sl
 80061d0:	461a      	mov	r2, r3
 80061d2:	4620      	mov	r0, r4
 80061d4:	f000 fdd0 	bl	8006d78 <__lshift>
 80061d8:	4682      	mov	sl, r0
 80061da:	9b06      	ldr	r3, [sp, #24]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dd05      	ble.n	80061ec <_dtoa_r+0x804>
 80061e0:	4631      	mov	r1, r6
 80061e2:	461a      	mov	r2, r3
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 fdc7 	bl	8006d78 <__lshift>
 80061ea:	4606      	mov	r6, r0
 80061ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d074      	beq.n	80062dc <_dtoa_r+0x8f4>
 80061f2:	4631      	mov	r1, r6
 80061f4:	4650      	mov	r0, sl
 80061f6:	f000 fe10 	bl	8006e1a <__mcmp>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	da6e      	bge.n	80062dc <_dtoa_r+0x8f4>
 80061fe:	2300      	movs	r3, #0
 8006200:	4651      	mov	r1, sl
 8006202:	220a      	movs	r2, #10
 8006204:	4620      	mov	r0, r4
 8006206:	f000 fc4a 	bl	8006a9e <__multadd>
 800620a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006210:	4682      	mov	sl, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 81a8 	beq.w	8006568 <_dtoa_r+0xb80>
 8006218:	2300      	movs	r3, #0
 800621a:	4639      	mov	r1, r7
 800621c:	220a      	movs	r2, #10
 800621e:	4620      	mov	r0, r4
 8006220:	f000 fc3d 	bl	8006a9e <__multadd>
 8006224:	9b04      	ldr	r3, [sp, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	4607      	mov	r7, r0
 800622a:	f300 80c8 	bgt.w	80063be <_dtoa_r+0x9d6>
 800622e:	9b07      	ldr	r3, [sp, #28]
 8006230:	2b02      	cmp	r3, #2
 8006232:	f340 80c4 	ble.w	80063be <_dtoa_r+0x9d6>
 8006236:	e059      	b.n	80062ec <_dtoa_r+0x904>
 8006238:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800623a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800623e:	e756      	b.n	80060ee <_dtoa_r+0x706>
 8006240:	9b03      	ldr	r3, [sp, #12]
 8006242:	1e5e      	subs	r6, r3, #1
 8006244:	9b08      	ldr	r3, [sp, #32]
 8006246:	42b3      	cmp	r3, r6
 8006248:	bfbf      	itttt	lt
 800624a:	9b08      	ldrlt	r3, [sp, #32]
 800624c:	9608      	strlt	r6, [sp, #32]
 800624e:	1af2      	sublt	r2, r6, r3
 8006250:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006252:	bfb6      	itet	lt
 8006254:	189b      	addlt	r3, r3, r2
 8006256:	1b9e      	subge	r6, r3, r6
 8006258:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800625a:	9b03      	ldr	r3, [sp, #12]
 800625c:	bfb8      	it	lt
 800625e:	2600      	movlt	r6, #0
 8006260:	2b00      	cmp	r3, #0
 8006262:	bfb9      	ittee	lt
 8006264:	9b05      	ldrlt	r3, [sp, #20]
 8006266:	9a03      	ldrlt	r2, [sp, #12]
 8006268:	9d05      	ldrge	r5, [sp, #20]
 800626a:	9b03      	ldrge	r3, [sp, #12]
 800626c:	bfbc      	itt	lt
 800626e:	1a9d      	sublt	r5, r3, r2
 8006270:	2300      	movlt	r3, #0
 8006272:	e73e      	b.n	80060f2 <_dtoa_r+0x70a>
 8006274:	9e08      	ldr	r6, [sp, #32]
 8006276:	9d05      	ldr	r5, [sp, #20]
 8006278:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800627a:	e745      	b.n	8006108 <_dtoa_r+0x720>
 800627c:	9a08      	ldr	r2, [sp, #32]
 800627e:	e76e      	b.n	800615e <_dtoa_r+0x776>
 8006280:	9b07      	ldr	r3, [sp, #28]
 8006282:	2b01      	cmp	r3, #1
 8006284:	dc19      	bgt.n	80062ba <_dtoa_r+0x8d2>
 8006286:	9b00      	ldr	r3, [sp, #0]
 8006288:	b9bb      	cbnz	r3, 80062ba <_dtoa_r+0x8d2>
 800628a:	9b01      	ldr	r3, [sp, #4]
 800628c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006290:	b99b      	cbnz	r3, 80062ba <_dtoa_r+0x8d2>
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006298:	0d1b      	lsrs	r3, r3, #20
 800629a:	051b      	lsls	r3, r3, #20
 800629c:	b183      	cbz	r3, 80062c0 <_dtoa_r+0x8d8>
 800629e:	9b05      	ldr	r3, [sp, #20]
 80062a0:	3301      	adds	r3, #1
 80062a2:	9305      	str	r3, [sp, #20]
 80062a4:	9b06      	ldr	r3, [sp, #24]
 80062a6:	3301      	adds	r3, #1
 80062a8:	9306      	str	r3, [sp, #24]
 80062aa:	f04f 0801 	mov.w	r8, #1
 80062ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f47f af6d 	bne.w	8006190 <_dtoa_r+0x7a8>
 80062b6:	2001      	movs	r0, #1
 80062b8:	e772      	b.n	80061a0 <_dtoa_r+0x7b8>
 80062ba:	f04f 0800 	mov.w	r8, #0
 80062be:	e7f6      	b.n	80062ae <_dtoa_r+0x8c6>
 80062c0:	4698      	mov	r8, r3
 80062c2:	e7f4      	b.n	80062ae <_dtoa_r+0x8c6>
 80062c4:	d080      	beq.n	80061c8 <_dtoa_r+0x7e0>
 80062c6:	9a05      	ldr	r2, [sp, #20]
 80062c8:	331c      	adds	r3, #28
 80062ca:	441a      	add	r2, r3
 80062cc:	9205      	str	r2, [sp, #20]
 80062ce:	9a06      	ldr	r2, [sp, #24]
 80062d0:	441a      	add	r2, r3
 80062d2:	441d      	add	r5, r3
 80062d4:	4613      	mov	r3, r2
 80062d6:	e776      	b.n	80061c6 <_dtoa_r+0x7de>
 80062d8:	4603      	mov	r3, r0
 80062da:	e7f4      	b.n	80062c6 <_dtoa_r+0x8de>
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	dc36      	bgt.n	8006350 <_dtoa_r+0x968>
 80062e2:	9b07      	ldr	r3, [sp, #28]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	dd33      	ble.n	8006350 <_dtoa_r+0x968>
 80062e8:	9b03      	ldr	r3, [sp, #12]
 80062ea:	9304      	str	r3, [sp, #16]
 80062ec:	9b04      	ldr	r3, [sp, #16]
 80062ee:	b963      	cbnz	r3, 800630a <_dtoa_r+0x922>
 80062f0:	4631      	mov	r1, r6
 80062f2:	2205      	movs	r2, #5
 80062f4:	4620      	mov	r0, r4
 80062f6:	f000 fbd2 	bl	8006a9e <__multadd>
 80062fa:	4601      	mov	r1, r0
 80062fc:	4606      	mov	r6, r0
 80062fe:	4650      	mov	r0, sl
 8006300:	f000 fd8b 	bl	8006e1a <__mcmp>
 8006304:	2800      	cmp	r0, #0
 8006306:	f73f adb6 	bgt.w	8005e76 <_dtoa_r+0x48e>
 800630a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800630c:	9d02      	ldr	r5, [sp, #8]
 800630e:	ea6f 0b03 	mvn.w	fp, r3
 8006312:	2300      	movs	r3, #0
 8006314:	9303      	str	r3, [sp, #12]
 8006316:	4631      	mov	r1, r6
 8006318:	4620      	mov	r0, r4
 800631a:	f000 fba9 	bl	8006a70 <_Bfree>
 800631e:	2f00      	cmp	r7, #0
 8006320:	f43f aea6 	beq.w	8006070 <_dtoa_r+0x688>
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	b12b      	cbz	r3, 8006334 <_dtoa_r+0x94c>
 8006328:	42bb      	cmp	r3, r7
 800632a:	d003      	beq.n	8006334 <_dtoa_r+0x94c>
 800632c:	4619      	mov	r1, r3
 800632e:	4620      	mov	r0, r4
 8006330:	f000 fb9e 	bl	8006a70 <_Bfree>
 8006334:	4639      	mov	r1, r7
 8006336:	4620      	mov	r0, r4
 8006338:	f000 fb9a 	bl	8006a70 <_Bfree>
 800633c:	e698      	b.n	8006070 <_dtoa_r+0x688>
 800633e:	2600      	movs	r6, #0
 8006340:	4637      	mov	r7, r6
 8006342:	e7e2      	b.n	800630a <_dtoa_r+0x922>
 8006344:	46bb      	mov	fp, r7
 8006346:	4637      	mov	r7, r6
 8006348:	e595      	b.n	8005e76 <_dtoa_r+0x48e>
 800634a:	bf00      	nop
 800634c:	40240000 	.word	0x40240000
 8006350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006352:	bb93      	cbnz	r3, 80063ba <_dtoa_r+0x9d2>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	9304      	str	r3, [sp, #16]
 8006358:	9d02      	ldr	r5, [sp, #8]
 800635a:	4631      	mov	r1, r6
 800635c:	4650      	mov	r0, sl
 800635e:	f7ff fab7 	bl	80058d0 <quorem>
 8006362:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006366:	f805 9b01 	strb.w	r9, [r5], #1
 800636a:	9b02      	ldr	r3, [sp, #8]
 800636c:	9a04      	ldr	r2, [sp, #16]
 800636e:	1aeb      	subs	r3, r5, r3
 8006370:	429a      	cmp	r2, r3
 8006372:	f300 80dc 	bgt.w	800652e <_dtoa_r+0xb46>
 8006376:	9b02      	ldr	r3, [sp, #8]
 8006378:	2a01      	cmp	r2, #1
 800637a:	bfac      	ite	ge
 800637c:	189b      	addge	r3, r3, r2
 800637e:	3301      	addlt	r3, #1
 8006380:	4698      	mov	r8, r3
 8006382:	2300      	movs	r3, #0
 8006384:	9303      	str	r3, [sp, #12]
 8006386:	4651      	mov	r1, sl
 8006388:	2201      	movs	r2, #1
 800638a:	4620      	mov	r0, r4
 800638c:	f000 fcf4 	bl	8006d78 <__lshift>
 8006390:	4631      	mov	r1, r6
 8006392:	4682      	mov	sl, r0
 8006394:	f000 fd41 	bl	8006e1a <__mcmp>
 8006398:	2800      	cmp	r0, #0
 800639a:	f300 808d 	bgt.w	80064b8 <_dtoa_r+0xad0>
 800639e:	d103      	bne.n	80063a8 <_dtoa_r+0x9c0>
 80063a0:	f019 0f01 	tst.w	r9, #1
 80063a4:	f040 8088 	bne.w	80064b8 <_dtoa_r+0xad0>
 80063a8:	4645      	mov	r5, r8
 80063aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063ae:	2b30      	cmp	r3, #48	; 0x30
 80063b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80063b4:	d1af      	bne.n	8006316 <_dtoa_r+0x92e>
 80063b6:	4615      	mov	r5, r2
 80063b8:	e7f7      	b.n	80063aa <_dtoa_r+0x9c2>
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	9304      	str	r3, [sp, #16]
 80063be:	2d00      	cmp	r5, #0
 80063c0:	dd05      	ble.n	80063ce <_dtoa_r+0x9e6>
 80063c2:	4639      	mov	r1, r7
 80063c4:	462a      	mov	r2, r5
 80063c6:	4620      	mov	r0, r4
 80063c8:	f000 fcd6 	bl	8006d78 <__lshift>
 80063cc:	4607      	mov	r7, r0
 80063ce:	f1b8 0f00 	cmp.w	r8, #0
 80063d2:	d04c      	beq.n	800646e <_dtoa_r+0xa86>
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4620      	mov	r0, r4
 80063d8:	f000 fb16 	bl	8006a08 <_Balloc>
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	3202      	adds	r2, #2
 80063e0:	4605      	mov	r5, r0
 80063e2:	0092      	lsls	r2, r2, #2
 80063e4:	f107 010c 	add.w	r1, r7, #12
 80063e8:	300c      	adds	r0, #12
 80063ea:	f7fe fa67 	bl	80048bc <memcpy>
 80063ee:	2201      	movs	r2, #1
 80063f0:	4629      	mov	r1, r5
 80063f2:	4620      	mov	r0, r4
 80063f4:	f000 fcc0 	bl	8006d78 <__lshift>
 80063f8:	9b00      	ldr	r3, [sp, #0]
 80063fa:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80063fe:	9703      	str	r7, [sp, #12]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	4607      	mov	r7, r0
 8006406:	9305      	str	r3, [sp, #20]
 8006408:	4631      	mov	r1, r6
 800640a:	4650      	mov	r0, sl
 800640c:	f7ff fa60 	bl	80058d0 <quorem>
 8006410:	9903      	ldr	r1, [sp, #12]
 8006412:	4605      	mov	r5, r0
 8006414:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006418:	4650      	mov	r0, sl
 800641a:	f000 fcfe 	bl	8006e1a <__mcmp>
 800641e:	463a      	mov	r2, r7
 8006420:	9000      	str	r0, [sp, #0]
 8006422:	4631      	mov	r1, r6
 8006424:	4620      	mov	r0, r4
 8006426:	f000 fd12 	bl	8006e4e <__mdiff>
 800642a:	68c3      	ldr	r3, [r0, #12]
 800642c:	4602      	mov	r2, r0
 800642e:	bb03      	cbnz	r3, 8006472 <_dtoa_r+0xa8a>
 8006430:	4601      	mov	r1, r0
 8006432:	9006      	str	r0, [sp, #24]
 8006434:	4650      	mov	r0, sl
 8006436:	f000 fcf0 	bl	8006e1a <__mcmp>
 800643a:	9a06      	ldr	r2, [sp, #24]
 800643c:	4603      	mov	r3, r0
 800643e:	4611      	mov	r1, r2
 8006440:	4620      	mov	r0, r4
 8006442:	9306      	str	r3, [sp, #24]
 8006444:	f000 fb14 	bl	8006a70 <_Bfree>
 8006448:	9b06      	ldr	r3, [sp, #24]
 800644a:	b9a3      	cbnz	r3, 8006476 <_dtoa_r+0xa8e>
 800644c:	9a07      	ldr	r2, [sp, #28]
 800644e:	b992      	cbnz	r2, 8006476 <_dtoa_r+0xa8e>
 8006450:	9a05      	ldr	r2, [sp, #20]
 8006452:	b982      	cbnz	r2, 8006476 <_dtoa_r+0xa8e>
 8006454:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006458:	d029      	beq.n	80064ae <_dtoa_r+0xac6>
 800645a:	9b00      	ldr	r3, [sp, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd01      	ble.n	8006464 <_dtoa_r+0xa7c>
 8006460:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006464:	f108 0501 	add.w	r5, r8, #1
 8006468:	f888 9000 	strb.w	r9, [r8]
 800646c:	e753      	b.n	8006316 <_dtoa_r+0x92e>
 800646e:	4638      	mov	r0, r7
 8006470:	e7c2      	b.n	80063f8 <_dtoa_r+0xa10>
 8006472:	2301      	movs	r3, #1
 8006474:	e7e3      	b.n	800643e <_dtoa_r+0xa56>
 8006476:	9a00      	ldr	r2, [sp, #0]
 8006478:	2a00      	cmp	r2, #0
 800647a:	db04      	blt.n	8006486 <_dtoa_r+0xa9e>
 800647c:	d125      	bne.n	80064ca <_dtoa_r+0xae2>
 800647e:	9a07      	ldr	r2, [sp, #28]
 8006480:	bb1a      	cbnz	r2, 80064ca <_dtoa_r+0xae2>
 8006482:	9a05      	ldr	r2, [sp, #20]
 8006484:	bb0a      	cbnz	r2, 80064ca <_dtoa_r+0xae2>
 8006486:	2b00      	cmp	r3, #0
 8006488:	ddec      	ble.n	8006464 <_dtoa_r+0xa7c>
 800648a:	4651      	mov	r1, sl
 800648c:	2201      	movs	r2, #1
 800648e:	4620      	mov	r0, r4
 8006490:	f000 fc72 	bl	8006d78 <__lshift>
 8006494:	4631      	mov	r1, r6
 8006496:	4682      	mov	sl, r0
 8006498:	f000 fcbf 	bl	8006e1a <__mcmp>
 800649c:	2800      	cmp	r0, #0
 800649e:	dc03      	bgt.n	80064a8 <_dtoa_r+0xac0>
 80064a0:	d1e0      	bne.n	8006464 <_dtoa_r+0xa7c>
 80064a2:	f019 0f01 	tst.w	r9, #1
 80064a6:	d0dd      	beq.n	8006464 <_dtoa_r+0xa7c>
 80064a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064ac:	d1d8      	bne.n	8006460 <_dtoa_r+0xa78>
 80064ae:	2339      	movs	r3, #57	; 0x39
 80064b0:	f888 3000 	strb.w	r3, [r8]
 80064b4:	f108 0801 	add.w	r8, r8, #1
 80064b8:	4645      	mov	r5, r8
 80064ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064be:	2b39      	cmp	r3, #57	; 0x39
 80064c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80064c4:	d03b      	beq.n	800653e <_dtoa_r+0xb56>
 80064c6:	3301      	adds	r3, #1
 80064c8:	e040      	b.n	800654c <_dtoa_r+0xb64>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f108 0501 	add.w	r5, r8, #1
 80064d0:	dd05      	ble.n	80064de <_dtoa_r+0xaf6>
 80064d2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064d6:	d0ea      	beq.n	80064ae <_dtoa_r+0xac6>
 80064d8:	f109 0901 	add.w	r9, r9, #1
 80064dc:	e7c4      	b.n	8006468 <_dtoa_r+0xa80>
 80064de:	9b02      	ldr	r3, [sp, #8]
 80064e0:	9a04      	ldr	r2, [sp, #16]
 80064e2:	f805 9c01 	strb.w	r9, [r5, #-1]
 80064e6:	1aeb      	subs	r3, r5, r3
 80064e8:	4293      	cmp	r3, r2
 80064ea:	46a8      	mov	r8, r5
 80064ec:	f43f af4b 	beq.w	8006386 <_dtoa_r+0x99e>
 80064f0:	4651      	mov	r1, sl
 80064f2:	2300      	movs	r3, #0
 80064f4:	220a      	movs	r2, #10
 80064f6:	4620      	mov	r0, r4
 80064f8:	f000 fad1 	bl	8006a9e <__multadd>
 80064fc:	9b03      	ldr	r3, [sp, #12]
 80064fe:	9903      	ldr	r1, [sp, #12]
 8006500:	42bb      	cmp	r3, r7
 8006502:	4682      	mov	sl, r0
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	f04f 020a 	mov.w	r2, #10
 800650c:	4620      	mov	r0, r4
 800650e:	d104      	bne.n	800651a <_dtoa_r+0xb32>
 8006510:	f000 fac5 	bl	8006a9e <__multadd>
 8006514:	9003      	str	r0, [sp, #12]
 8006516:	4607      	mov	r7, r0
 8006518:	e776      	b.n	8006408 <_dtoa_r+0xa20>
 800651a:	f000 fac0 	bl	8006a9e <__multadd>
 800651e:	2300      	movs	r3, #0
 8006520:	9003      	str	r0, [sp, #12]
 8006522:	220a      	movs	r2, #10
 8006524:	4639      	mov	r1, r7
 8006526:	4620      	mov	r0, r4
 8006528:	f000 fab9 	bl	8006a9e <__multadd>
 800652c:	e7f3      	b.n	8006516 <_dtoa_r+0xb2e>
 800652e:	4651      	mov	r1, sl
 8006530:	2300      	movs	r3, #0
 8006532:	220a      	movs	r2, #10
 8006534:	4620      	mov	r0, r4
 8006536:	f000 fab2 	bl	8006a9e <__multadd>
 800653a:	4682      	mov	sl, r0
 800653c:	e70d      	b.n	800635a <_dtoa_r+0x972>
 800653e:	9b02      	ldr	r3, [sp, #8]
 8006540:	4293      	cmp	r3, r2
 8006542:	d105      	bne.n	8006550 <_dtoa_r+0xb68>
 8006544:	9a02      	ldr	r2, [sp, #8]
 8006546:	f10b 0b01 	add.w	fp, fp, #1
 800654a:	2331      	movs	r3, #49	; 0x31
 800654c:	7013      	strb	r3, [r2, #0]
 800654e:	e6e2      	b.n	8006316 <_dtoa_r+0x92e>
 8006550:	4615      	mov	r5, r2
 8006552:	e7b2      	b.n	80064ba <_dtoa_r+0xad2>
 8006554:	4b09      	ldr	r3, [pc, #36]	; (800657c <_dtoa_r+0xb94>)
 8006556:	f7ff baae 	b.w	8005ab6 <_dtoa_r+0xce>
 800655a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800655c:	2b00      	cmp	r3, #0
 800655e:	f47f aa88 	bne.w	8005a72 <_dtoa_r+0x8a>
 8006562:	4b07      	ldr	r3, [pc, #28]	; (8006580 <_dtoa_r+0xb98>)
 8006564:	f7ff baa7 	b.w	8005ab6 <_dtoa_r+0xce>
 8006568:	9b04      	ldr	r3, [sp, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f73f aef4 	bgt.w	8006358 <_dtoa_r+0x970>
 8006570:	9b07      	ldr	r3, [sp, #28]
 8006572:	2b02      	cmp	r3, #2
 8006574:	f77f aef0 	ble.w	8006358 <_dtoa_r+0x970>
 8006578:	e6b8      	b.n	80062ec <_dtoa_r+0x904>
 800657a:	bf00      	nop
 800657c:	080077ea 	.word	0x080077ea
 8006580:	0800780c 	.word	0x0800780c

08006584 <_localeconv_r>:
 8006584:	4b04      	ldr	r3, [pc, #16]	; (8006598 <_localeconv_r+0x14>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6a18      	ldr	r0, [r3, #32]
 800658a:	4b04      	ldr	r3, [pc, #16]	; (800659c <_localeconv_r+0x18>)
 800658c:	2800      	cmp	r0, #0
 800658e:	bf08      	it	eq
 8006590:	4618      	moveq	r0, r3
 8006592:	30f0      	adds	r0, #240	; 0xf0
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	2000000c 	.word	0x2000000c
 800659c:	20000100 	.word	0x20000100

080065a0 <malloc>:
 80065a0:	4b02      	ldr	r3, [pc, #8]	; (80065ac <malloc+0xc>)
 80065a2:	4601      	mov	r1, r0
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	f000 b803 	b.w	80065b0 <_malloc_r>
 80065aa:	bf00      	nop
 80065ac:	2000000c 	.word	0x2000000c

080065b0 <_malloc_r>:
 80065b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b4:	f101 040b 	add.w	r4, r1, #11
 80065b8:	2c16      	cmp	r4, #22
 80065ba:	4681      	mov	r9, r0
 80065bc:	d907      	bls.n	80065ce <_malloc_r+0x1e>
 80065be:	f034 0407 	bics.w	r4, r4, #7
 80065c2:	d505      	bpl.n	80065d0 <_malloc_r+0x20>
 80065c4:	230c      	movs	r3, #12
 80065c6:	f8c9 3000 	str.w	r3, [r9]
 80065ca:	2600      	movs	r6, #0
 80065cc:	e131      	b.n	8006832 <_malloc_r+0x282>
 80065ce:	2410      	movs	r4, #16
 80065d0:	428c      	cmp	r4, r1
 80065d2:	d3f7      	bcc.n	80065c4 <_malloc_r+0x14>
 80065d4:	4648      	mov	r0, r9
 80065d6:	f000 fa0b 	bl	80069f0 <__malloc_lock>
 80065da:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80065de:	4d9c      	ldr	r5, [pc, #624]	; (8006850 <_malloc_r+0x2a0>)
 80065e0:	d236      	bcs.n	8006650 <_malloc_r+0xa0>
 80065e2:	f104 0208 	add.w	r2, r4, #8
 80065e6:	442a      	add	r2, r5
 80065e8:	f1a2 0108 	sub.w	r1, r2, #8
 80065ec:	6856      	ldr	r6, [r2, #4]
 80065ee:	428e      	cmp	r6, r1
 80065f0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80065f4:	d102      	bne.n	80065fc <_malloc_r+0x4c>
 80065f6:	68d6      	ldr	r6, [r2, #12]
 80065f8:	42b2      	cmp	r2, r6
 80065fa:	d010      	beq.n	800661e <_malloc_r+0x6e>
 80065fc:	6873      	ldr	r3, [r6, #4]
 80065fe:	68f2      	ldr	r2, [r6, #12]
 8006600:	68b1      	ldr	r1, [r6, #8]
 8006602:	f023 0303 	bic.w	r3, r3, #3
 8006606:	60ca      	str	r2, [r1, #12]
 8006608:	4433      	add	r3, r6
 800660a:	6091      	str	r1, [r2, #8]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	f042 0201 	orr.w	r2, r2, #1
 8006612:	605a      	str	r2, [r3, #4]
 8006614:	4648      	mov	r0, r9
 8006616:	f000 f9f1 	bl	80069fc <__malloc_unlock>
 800661a:	3608      	adds	r6, #8
 800661c:	e109      	b.n	8006832 <_malloc_r+0x282>
 800661e:	3302      	adds	r3, #2
 8006620:	4a8c      	ldr	r2, [pc, #560]	; (8006854 <_malloc_r+0x2a4>)
 8006622:	692e      	ldr	r6, [r5, #16]
 8006624:	4296      	cmp	r6, r2
 8006626:	4611      	mov	r1, r2
 8006628:	d06d      	beq.n	8006706 <_malloc_r+0x156>
 800662a:	6870      	ldr	r0, [r6, #4]
 800662c:	f020 0003 	bic.w	r0, r0, #3
 8006630:	1b07      	subs	r7, r0, r4
 8006632:	2f0f      	cmp	r7, #15
 8006634:	dd47      	ble.n	80066c6 <_malloc_r+0x116>
 8006636:	1933      	adds	r3, r6, r4
 8006638:	f044 0401 	orr.w	r4, r4, #1
 800663c:	6074      	str	r4, [r6, #4]
 800663e:	616b      	str	r3, [r5, #20]
 8006640:	612b      	str	r3, [r5, #16]
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	609a      	str	r2, [r3, #8]
 8006646:	f047 0201 	orr.w	r2, r7, #1
 800664a:	605a      	str	r2, [r3, #4]
 800664c:	5037      	str	r7, [r6, r0]
 800664e:	e7e1      	b.n	8006614 <_malloc_r+0x64>
 8006650:	0a63      	lsrs	r3, r4, #9
 8006652:	d02a      	beq.n	80066aa <_malloc_r+0xfa>
 8006654:	2b04      	cmp	r3, #4
 8006656:	d812      	bhi.n	800667e <_malloc_r+0xce>
 8006658:	09a3      	lsrs	r3, r4, #6
 800665a:	3338      	adds	r3, #56	; 0x38
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006662:	f1a2 0008 	sub.w	r0, r2, #8
 8006666:	6856      	ldr	r6, [r2, #4]
 8006668:	4286      	cmp	r6, r0
 800666a:	d006      	beq.n	800667a <_malloc_r+0xca>
 800666c:	6872      	ldr	r2, [r6, #4]
 800666e:	f022 0203 	bic.w	r2, r2, #3
 8006672:	1b11      	subs	r1, r2, r4
 8006674:	290f      	cmp	r1, #15
 8006676:	dd1c      	ble.n	80066b2 <_malloc_r+0x102>
 8006678:	3b01      	subs	r3, #1
 800667a:	3301      	adds	r3, #1
 800667c:	e7d0      	b.n	8006620 <_malloc_r+0x70>
 800667e:	2b14      	cmp	r3, #20
 8006680:	d801      	bhi.n	8006686 <_malloc_r+0xd6>
 8006682:	335b      	adds	r3, #91	; 0x5b
 8006684:	e7ea      	b.n	800665c <_malloc_r+0xac>
 8006686:	2b54      	cmp	r3, #84	; 0x54
 8006688:	d802      	bhi.n	8006690 <_malloc_r+0xe0>
 800668a:	0b23      	lsrs	r3, r4, #12
 800668c:	336e      	adds	r3, #110	; 0x6e
 800668e:	e7e5      	b.n	800665c <_malloc_r+0xac>
 8006690:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006694:	d802      	bhi.n	800669c <_malloc_r+0xec>
 8006696:	0be3      	lsrs	r3, r4, #15
 8006698:	3377      	adds	r3, #119	; 0x77
 800669a:	e7df      	b.n	800665c <_malloc_r+0xac>
 800669c:	f240 5254 	movw	r2, #1364	; 0x554
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d804      	bhi.n	80066ae <_malloc_r+0xfe>
 80066a4:	0ca3      	lsrs	r3, r4, #18
 80066a6:	337c      	adds	r3, #124	; 0x7c
 80066a8:	e7d8      	b.n	800665c <_malloc_r+0xac>
 80066aa:	233f      	movs	r3, #63	; 0x3f
 80066ac:	e7d6      	b.n	800665c <_malloc_r+0xac>
 80066ae:	237e      	movs	r3, #126	; 0x7e
 80066b0:	e7d4      	b.n	800665c <_malloc_r+0xac>
 80066b2:	2900      	cmp	r1, #0
 80066b4:	68f1      	ldr	r1, [r6, #12]
 80066b6:	db04      	blt.n	80066c2 <_malloc_r+0x112>
 80066b8:	68b3      	ldr	r3, [r6, #8]
 80066ba:	60d9      	str	r1, [r3, #12]
 80066bc:	608b      	str	r3, [r1, #8]
 80066be:	18b3      	adds	r3, r6, r2
 80066c0:	e7a4      	b.n	800660c <_malloc_r+0x5c>
 80066c2:	460e      	mov	r6, r1
 80066c4:	e7d0      	b.n	8006668 <_malloc_r+0xb8>
 80066c6:	2f00      	cmp	r7, #0
 80066c8:	616a      	str	r2, [r5, #20]
 80066ca:	612a      	str	r2, [r5, #16]
 80066cc:	db05      	blt.n	80066da <_malloc_r+0x12a>
 80066ce:	4430      	add	r0, r6
 80066d0:	6843      	ldr	r3, [r0, #4]
 80066d2:	f043 0301 	orr.w	r3, r3, #1
 80066d6:	6043      	str	r3, [r0, #4]
 80066d8:	e79c      	b.n	8006614 <_malloc_r+0x64>
 80066da:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80066de:	d244      	bcs.n	800676a <_malloc_r+0x1ba>
 80066e0:	08c0      	lsrs	r0, r0, #3
 80066e2:	1087      	asrs	r7, r0, #2
 80066e4:	2201      	movs	r2, #1
 80066e6:	fa02 f707 	lsl.w	r7, r2, r7
 80066ea:	686a      	ldr	r2, [r5, #4]
 80066ec:	3001      	adds	r0, #1
 80066ee:	433a      	orrs	r2, r7
 80066f0:	606a      	str	r2, [r5, #4]
 80066f2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80066f6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80066fa:	60b7      	str	r7, [r6, #8]
 80066fc:	3a08      	subs	r2, #8
 80066fe:	60f2      	str	r2, [r6, #12]
 8006700:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8006704:	60fe      	str	r6, [r7, #12]
 8006706:	2001      	movs	r0, #1
 8006708:	109a      	asrs	r2, r3, #2
 800670a:	fa00 f202 	lsl.w	r2, r0, r2
 800670e:	6868      	ldr	r0, [r5, #4]
 8006710:	4282      	cmp	r2, r0
 8006712:	f200 80a1 	bhi.w	8006858 <_malloc_r+0x2a8>
 8006716:	4202      	tst	r2, r0
 8006718:	d106      	bne.n	8006728 <_malloc_r+0x178>
 800671a:	f023 0303 	bic.w	r3, r3, #3
 800671e:	0052      	lsls	r2, r2, #1
 8006720:	4202      	tst	r2, r0
 8006722:	f103 0304 	add.w	r3, r3, #4
 8006726:	d0fa      	beq.n	800671e <_malloc_r+0x16e>
 8006728:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800672c:	46e0      	mov	r8, ip
 800672e:	469e      	mov	lr, r3
 8006730:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8006734:	4546      	cmp	r6, r8
 8006736:	d153      	bne.n	80067e0 <_malloc_r+0x230>
 8006738:	f10e 0e01 	add.w	lr, lr, #1
 800673c:	f01e 0f03 	tst.w	lr, #3
 8006740:	f108 0808 	add.w	r8, r8, #8
 8006744:	d1f4      	bne.n	8006730 <_malloc_r+0x180>
 8006746:	0798      	lsls	r0, r3, #30
 8006748:	d179      	bne.n	800683e <_malloc_r+0x28e>
 800674a:	686b      	ldr	r3, [r5, #4]
 800674c:	ea23 0302 	bic.w	r3, r3, r2
 8006750:	606b      	str	r3, [r5, #4]
 8006752:	6868      	ldr	r0, [r5, #4]
 8006754:	0052      	lsls	r2, r2, #1
 8006756:	4282      	cmp	r2, r0
 8006758:	d87e      	bhi.n	8006858 <_malloc_r+0x2a8>
 800675a:	2a00      	cmp	r2, #0
 800675c:	d07c      	beq.n	8006858 <_malloc_r+0x2a8>
 800675e:	4673      	mov	r3, lr
 8006760:	4202      	tst	r2, r0
 8006762:	d1e1      	bne.n	8006728 <_malloc_r+0x178>
 8006764:	3304      	adds	r3, #4
 8006766:	0052      	lsls	r2, r2, #1
 8006768:	e7fa      	b.n	8006760 <_malloc_r+0x1b0>
 800676a:	0a42      	lsrs	r2, r0, #9
 800676c:	2a04      	cmp	r2, #4
 800676e:	d815      	bhi.n	800679c <_malloc_r+0x1ec>
 8006770:	0982      	lsrs	r2, r0, #6
 8006772:	3238      	adds	r2, #56	; 0x38
 8006774:	1c57      	adds	r7, r2, #1
 8006776:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800677a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800677e:	45be      	cmp	lr, r7
 8006780:	d126      	bne.n	80067d0 <_malloc_r+0x220>
 8006782:	2001      	movs	r0, #1
 8006784:	1092      	asrs	r2, r2, #2
 8006786:	fa00 f202 	lsl.w	r2, r0, r2
 800678a:	6868      	ldr	r0, [r5, #4]
 800678c:	4310      	orrs	r0, r2
 800678e:	6068      	str	r0, [r5, #4]
 8006790:	f8c6 e00c 	str.w	lr, [r6, #12]
 8006794:	60b7      	str	r7, [r6, #8]
 8006796:	f8ce 6008 	str.w	r6, [lr, #8]
 800679a:	e7b3      	b.n	8006704 <_malloc_r+0x154>
 800679c:	2a14      	cmp	r2, #20
 800679e:	d801      	bhi.n	80067a4 <_malloc_r+0x1f4>
 80067a0:	325b      	adds	r2, #91	; 0x5b
 80067a2:	e7e7      	b.n	8006774 <_malloc_r+0x1c4>
 80067a4:	2a54      	cmp	r2, #84	; 0x54
 80067a6:	d802      	bhi.n	80067ae <_malloc_r+0x1fe>
 80067a8:	0b02      	lsrs	r2, r0, #12
 80067aa:	326e      	adds	r2, #110	; 0x6e
 80067ac:	e7e2      	b.n	8006774 <_malloc_r+0x1c4>
 80067ae:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80067b2:	d802      	bhi.n	80067ba <_malloc_r+0x20a>
 80067b4:	0bc2      	lsrs	r2, r0, #15
 80067b6:	3277      	adds	r2, #119	; 0x77
 80067b8:	e7dc      	b.n	8006774 <_malloc_r+0x1c4>
 80067ba:	f240 5754 	movw	r7, #1364	; 0x554
 80067be:	42ba      	cmp	r2, r7
 80067c0:	bf9a      	itte	ls
 80067c2:	0c82      	lsrls	r2, r0, #18
 80067c4:	327c      	addls	r2, #124	; 0x7c
 80067c6:	227e      	movhi	r2, #126	; 0x7e
 80067c8:	e7d4      	b.n	8006774 <_malloc_r+0x1c4>
 80067ca:	68bf      	ldr	r7, [r7, #8]
 80067cc:	45be      	cmp	lr, r7
 80067ce:	d004      	beq.n	80067da <_malloc_r+0x22a>
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	f022 0203 	bic.w	r2, r2, #3
 80067d6:	4290      	cmp	r0, r2
 80067d8:	d3f7      	bcc.n	80067ca <_malloc_r+0x21a>
 80067da:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80067de:	e7d7      	b.n	8006790 <_malloc_r+0x1e0>
 80067e0:	6870      	ldr	r0, [r6, #4]
 80067e2:	68f7      	ldr	r7, [r6, #12]
 80067e4:	f020 0003 	bic.w	r0, r0, #3
 80067e8:	eba0 0a04 	sub.w	sl, r0, r4
 80067ec:	f1ba 0f0f 	cmp.w	sl, #15
 80067f0:	dd10      	ble.n	8006814 <_malloc_r+0x264>
 80067f2:	68b2      	ldr	r2, [r6, #8]
 80067f4:	1933      	adds	r3, r6, r4
 80067f6:	f044 0401 	orr.w	r4, r4, #1
 80067fa:	6074      	str	r4, [r6, #4]
 80067fc:	60d7      	str	r7, [r2, #12]
 80067fe:	60ba      	str	r2, [r7, #8]
 8006800:	f04a 0201 	orr.w	r2, sl, #1
 8006804:	616b      	str	r3, [r5, #20]
 8006806:	612b      	str	r3, [r5, #16]
 8006808:	60d9      	str	r1, [r3, #12]
 800680a:	6099      	str	r1, [r3, #8]
 800680c:	605a      	str	r2, [r3, #4]
 800680e:	f846 a000 	str.w	sl, [r6, r0]
 8006812:	e6ff      	b.n	8006614 <_malloc_r+0x64>
 8006814:	f1ba 0f00 	cmp.w	sl, #0
 8006818:	db0f      	blt.n	800683a <_malloc_r+0x28a>
 800681a:	4430      	add	r0, r6
 800681c:	6843      	ldr	r3, [r0, #4]
 800681e:	f043 0301 	orr.w	r3, r3, #1
 8006822:	6043      	str	r3, [r0, #4]
 8006824:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8006828:	4648      	mov	r0, r9
 800682a:	60df      	str	r7, [r3, #12]
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	f000 f8e5 	bl	80069fc <__malloc_unlock>
 8006832:	4630      	mov	r0, r6
 8006834:	b003      	add	sp, #12
 8006836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683a:	463e      	mov	r6, r7
 800683c:	e77a      	b.n	8006734 <_malloc_r+0x184>
 800683e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8006842:	4584      	cmp	ip, r0
 8006844:	f103 33ff 	add.w	r3, r3, #4294967295
 8006848:	f43f af7d 	beq.w	8006746 <_malloc_r+0x196>
 800684c:	e781      	b.n	8006752 <_malloc_r+0x1a2>
 800684e:	bf00      	nop
 8006850:	2000026c 	.word	0x2000026c
 8006854:	20000274 	.word	0x20000274
 8006858:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800685c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006860:	f026 0603 	bic.w	r6, r6, #3
 8006864:	42b4      	cmp	r4, r6
 8006866:	d803      	bhi.n	8006870 <_malloc_r+0x2c0>
 8006868:	1b33      	subs	r3, r6, r4
 800686a:	2b0f      	cmp	r3, #15
 800686c:	f300 8096 	bgt.w	800699c <_malloc_r+0x3ec>
 8006870:	4a4f      	ldr	r2, [pc, #316]	; (80069b0 <_malloc_r+0x400>)
 8006872:	6817      	ldr	r7, [r2, #0]
 8006874:	4a4f      	ldr	r2, [pc, #316]	; (80069b4 <_malloc_r+0x404>)
 8006876:	6811      	ldr	r1, [r2, #0]
 8006878:	3710      	adds	r7, #16
 800687a:	3101      	adds	r1, #1
 800687c:	eb0b 0306 	add.w	r3, fp, r6
 8006880:	4427      	add	r7, r4
 8006882:	d005      	beq.n	8006890 <_malloc_r+0x2e0>
 8006884:	494c      	ldr	r1, [pc, #304]	; (80069b8 <_malloc_r+0x408>)
 8006886:	3901      	subs	r1, #1
 8006888:	440f      	add	r7, r1
 800688a:	3101      	adds	r1, #1
 800688c:	4249      	negs	r1, r1
 800688e:	400f      	ands	r7, r1
 8006890:	4639      	mov	r1, r7
 8006892:	4648      	mov	r0, r9
 8006894:	9201      	str	r2, [sp, #4]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	f000 fb86 	bl	8006fa8 <_sbrk_r>
 800689c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80068a0:	4680      	mov	r8, r0
 80068a2:	d056      	beq.n	8006952 <_malloc_r+0x3a2>
 80068a4:	9b00      	ldr	r3, [sp, #0]
 80068a6:	9a01      	ldr	r2, [sp, #4]
 80068a8:	4283      	cmp	r3, r0
 80068aa:	d901      	bls.n	80068b0 <_malloc_r+0x300>
 80068ac:	45ab      	cmp	fp, r5
 80068ae:	d150      	bne.n	8006952 <_malloc_r+0x3a2>
 80068b0:	4842      	ldr	r0, [pc, #264]	; (80069bc <_malloc_r+0x40c>)
 80068b2:	6801      	ldr	r1, [r0, #0]
 80068b4:	4543      	cmp	r3, r8
 80068b6:	eb07 0e01 	add.w	lr, r7, r1
 80068ba:	f8c0 e000 	str.w	lr, [r0]
 80068be:	4940      	ldr	r1, [pc, #256]	; (80069c0 <_malloc_r+0x410>)
 80068c0:	4682      	mov	sl, r0
 80068c2:	d113      	bne.n	80068ec <_malloc_r+0x33c>
 80068c4:	420b      	tst	r3, r1
 80068c6:	d111      	bne.n	80068ec <_malloc_r+0x33c>
 80068c8:	68ab      	ldr	r3, [r5, #8]
 80068ca:	443e      	add	r6, r7
 80068cc:	f046 0601 	orr.w	r6, r6, #1
 80068d0:	605e      	str	r6, [r3, #4]
 80068d2:	4a3c      	ldr	r2, [pc, #240]	; (80069c4 <_malloc_r+0x414>)
 80068d4:	f8da 3000 	ldr.w	r3, [sl]
 80068d8:	6811      	ldr	r1, [r2, #0]
 80068da:	428b      	cmp	r3, r1
 80068dc:	bf88      	it	hi
 80068de:	6013      	strhi	r3, [r2, #0]
 80068e0:	4a39      	ldr	r2, [pc, #228]	; (80069c8 <_malloc_r+0x418>)
 80068e2:	6811      	ldr	r1, [r2, #0]
 80068e4:	428b      	cmp	r3, r1
 80068e6:	bf88      	it	hi
 80068e8:	6013      	strhi	r3, [r2, #0]
 80068ea:	e032      	b.n	8006952 <_malloc_r+0x3a2>
 80068ec:	6810      	ldr	r0, [r2, #0]
 80068ee:	3001      	adds	r0, #1
 80068f0:	bf1b      	ittet	ne
 80068f2:	eba8 0303 	subne.w	r3, r8, r3
 80068f6:	4473      	addne	r3, lr
 80068f8:	f8c2 8000 	streq.w	r8, [r2]
 80068fc:	f8ca 3000 	strne.w	r3, [sl]
 8006900:	f018 0007 	ands.w	r0, r8, #7
 8006904:	bf1c      	itt	ne
 8006906:	f1c0 0008 	rsbne	r0, r0, #8
 800690a:	4480      	addne	r8, r0
 800690c:	4b2a      	ldr	r3, [pc, #168]	; (80069b8 <_malloc_r+0x408>)
 800690e:	4447      	add	r7, r8
 8006910:	4418      	add	r0, r3
 8006912:	400f      	ands	r7, r1
 8006914:	1bc7      	subs	r7, r0, r7
 8006916:	4639      	mov	r1, r7
 8006918:	4648      	mov	r0, r9
 800691a:	f000 fb45 	bl	8006fa8 <_sbrk_r>
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	bf08      	it	eq
 8006922:	4640      	moveq	r0, r8
 8006924:	f8da 3000 	ldr.w	r3, [sl]
 8006928:	f8c5 8008 	str.w	r8, [r5, #8]
 800692c:	bf08      	it	eq
 800692e:	2700      	moveq	r7, #0
 8006930:	eba0 0008 	sub.w	r0, r0, r8
 8006934:	443b      	add	r3, r7
 8006936:	4407      	add	r7, r0
 8006938:	f047 0701 	orr.w	r7, r7, #1
 800693c:	45ab      	cmp	fp, r5
 800693e:	f8ca 3000 	str.w	r3, [sl]
 8006942:	f8c8 7004 	str.w	r7, [r8, #4]
 8006946:	d0c4      	beq.n	80068d2 <_malloc_r+0x322>
 8006948:	2e0f      	cmp	r6, #15
 800694a:	d810      	bhi.n	800696e <_malloc_r+0x3be>
 800694c:	2301      	movs	r3, #1
 800694e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006952:	68ab      	ldr	r3, [r5, #8]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	f022 0203 	bic.w	r2, r2, #3
 800695a:	4294      	cmp	r4, r2
 800695c:	eba2 0304 	sub.w	r3, r2, r4
 8006960:	d801      	bhi.n	8006966 <_malloc_r+0x3b6>
 8006962:	2b0f      	cmp	r3, #15
 8006964:	dc1a      	bgt.n	800699c <_malloc_r+0x3ec>
 8006966:	4648      	mov	r0, r9
 8006968:	f000 f848 	bl	80069fc <__malloc_unlock>
 800696c:	e62d      	b.n	80065ca <_malloc_r+0x1a>
 800696e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006972:	3e0c      	subs	r6, #12
 8006974:	f026 0607 	bic.w	r6, r6, #7
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	4333      	orrs	r3, r6
 800697e:	f8cb 3004 	str.w	r3, [fp, #4]
 8006982:	eb0b 0306 	add.w	r3, fp, r6
 8006986:	2205      	movs	r2, #5
 8006988:	2e0f      	cmp	r6, #15
 800698a:	605a      	str	r2, [r3, #4]
 800698c:	609a      	str	r2, [r3, #8]
 800698e:	d9a0      	bls.n	80068d2 <_malloc_r+0x322>
 8006990:	f10b 0108 	add.w	r1, fp, #8
 8006994:	4648      	mov	r0, r9
 8006996:	f000 fc21 	bl	80071dc <_free_r>
 800699a:	e79a      	b.n	80068d2 <_malloc_r+0x322>
 800699c:	68ae      	ldr	r6, [r5, #8]
 800699e:	f044 0201 	orr.w	r2, r4, #1
 80069a2:	4434      	add	r4, r6
 80069a4:	f043 0301 	orr.w	r3, r3, #1
 80069a8:	6072      	str	r2, [r6, #4]
 80069aa:	60ac      	str	r4, [r5, #8]
 80069ac:	6063      	str	r3, [r4, #4]
 80069ae:	e631      	b.n	8006614 <_malloc_r+0x64>
 80069b0:	200006cc 	.word	0x200006cc
 80069b4:	20000674 	.word	0x20000674
 80069b8:	00000080 	.word	0x00000080
 80069bc:	2000069c 	.word	0x2000069c
 80069c0:	0000007f 	.word	0x0000007f
 80069c4:	200006c4 	.word	0x200006c4
 80069c8:	200006c8 	.word	0x200006c8

080069cc <__ascii_mbtowc>:
 80069cc:	b082      	sub	sp, #8
 80069ce:	b901      	cbnz	r1, 80069d2 <__ascii_mbtowc+0x6>
 80069d0:	a901      	add	r1, sp, #4
 80069d2:	b142      	cbz	r2, 80069e6 <__ascii_mbtowc+0x1a>
 80069d4:	b14b      	cbz	r3, 80069ea <__ascii_mbtowc+0x1e>
 80069d6:	7813      	ldrb	r3, [r2, #0]
 80069d8:	600b      	str	r3, [r1, #0]
 80069da:	7812      	ldrb	r2, [r2, #0]
 80069dc:	1c10      	adds	r0, r2, #0
 80069de:	bf18      	it	ne
 80069e0:	2001      	movne	r0, #1
 80069e2:	b002      	add	sp, #8
 80069e4:	4770      	bx	lr
 80069e6:	4610      	mov	r0, r2
 80069e8:	e7fb      	b.n	80069e2 <__ascii_mbtowc+0x16>
 80069ea:	f06f 0001 	mvn.w	r0, #1
 80069ee:	e7f8      	b.n	80069e2 <__ascii_mbtowc+0x16>

080069f0 <__malloc_lock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__malloc_lock+0x8>)
 80069f2:	f000 bcaf 	b.w	8007354 <__retarget_lock_acquire_recursive>
 80069f6:	bf00      	nop
 80069f8:	20000ce4 	.word	0x20000ce4

080069fc <__malloc_unlock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__malloc_unlock+0x8>)
 80069fe:	f000 bcaa 	b.w	8007356 <__retarget_lock_release_recursive>
 8006a02:	bf00      	nop
 8006a04:	20000ce4 	.word	0x20000ce4

08006a08 <_Balloc>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	460e      	mov	r6, r1
 8006a10:	b93d      	cbnz	r5, 8006a22 <_Balloc+0x1a>
 8006a12:	2010      	movs	r0, #16
 8006a14:	f7ff fdc4 	bl	80065a0 <malloc>
 8006a18:	6260      	str	r0, [r4, #36]	; 0x24
 8006a1a:	6045      	str	r5, [r0, #4]
 8006a1c:	6085      	str	r5, [r0, #8]
 8006a1e:	6005      	str	r5, [r0, #0]
 8006a20:	60c5      	str	r5, [r0, #12]
 8006a22:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006a24:	68eb      	ldr	r3, [r5, #12]
 8006a26:	b183      	cbz	r3, 8006a4a <_Balloc+0x42>
 8006a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006a30:	b9b8      	cbnz	r0, 8006a62 <_Balloc+0x5a>
 8006a32:	2101      	movs	r1, #1
 8006a34:	fa01 f506 	lsl.w	r5, r1, r6
 8006a38:	1d6a      	adds	r2, r5, #5
 8006a3a:	0092      	lsls	r2, r2, #2
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 fb4a 	bl	80070d6 <_calloc_r>
 8006a42:	b160      	cbz	r0, 8006a5e <_Balloc+0x56>
 8006a44:	6046      	str	r6, [r0, #4]
 8006a46:	6085      	str	r5, [r0, #8]
 8006a48:	e00e      	b.n	8006a68 <_Balloc+0x60>
 8006a4a:	2221      	movs	r2, #33	; 0x21
 8006a4c:	2104      	movs	r1, #4
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 fb41 	bl	80070d6 <_calloc_r>
 8006a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a56:	60e8      	str	r0, [r5, #12]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e4      	bne.n	8006a28 <_Balloc+0x20>
 8006a5e:	2000      	movs	r0, #0
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
 8006a62:	6802      	ldr	r2, [r0, #0]
 8006a64:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	6103      	str	r3, [r0, #16]
 8006a6c:	60c3      	str	r3, [r0, #12]
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}

08006a70 <_Bfree>:
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006a74:	4606      	mov	r6, r0
 8006a76:	460d      	mov	r5, r1
 8006a78:	b93c      	cbnz	r4, 8006a8a <_Bfree+0x1a>
 8006a7a:	2010      	movs	r0, #16
 8006a7c:	f7ff fd90 	bl	80065a0 <malloc>
 8006a80:	6270      	str	r0, [r6, #36]	; 0x24
 8006a82:	6044      	str	r4, [r0, #4]
 8006a84:	6084      	str	r4, [r0, #8]
 8006a86:	6004      	str	r4, [r0, #0]
 8006a88:	60c4      	str	r4, [r0, #12]
 8006a8a:	b13d      	cbz	r5, 8006a9c <_Bfree+0x2c>
 8006a8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006a8e:	686a      	ldr	r2, [r5, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a96:	6029      	str	r1, [r5, #0]
 8006a98:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006a9c:	bd70      	pop	{r4, r5, r6, pc}

08006a9e <__multadd>:
 8006a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa2:	690d      	ldr	r5, [r1, #16]
 8006aa4:	461f      	mov	r7, r3
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	f101 0e14 	add.w	lr, r1, #20
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f8de 0000 	ldr.w	r0, [lr]
 8006ab4:	b281      	uxth	r1, r0
 8006ab6:	fb02 7101 	mla	r1, r2, r1, r7
 8006aba:	0c0f      	lsrs	r7, r1, #16
 8006abc:	0c00      	lsrs	r0, r0, #16
 8006abe:	fb02 7000 	mla	r0, r2, r0, r7
 8006ac2:	b289      	uxth	r1, r1
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006aca:	429d      	cmp	r5, r3
 8006acc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006ad0:	f84e 1b04 	str.w	r1, [lr], #4
 8006ad4:	dcec      	bgt.n	8006ab0 <__multadd+0x12>
 8006ad6:	b1d7      	cbz	r7, 8006b0e <__multadd+0x70>
 8006ad8:	68a3      	ldr	r3, [r4, #8]
 8006ada:	429d      	cmp	r5, r3
 8006adc:	db12      	blt.n	8006b04 <__multadd+0x66>
 8006ade:	6861      	ldr	r1, [r4, #4]
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	3101      	adds	r1, #1
 8006ae4:	f7ff ff90 	bl	8006a08 <_Balloc>
 8006ae8:	6922      	ldr	r2, [r4, #16]
 8006aea:	3202      	adds	r2, #2
 8006aec:	f104 010c 	add.w	r1, r4, #12
 8006af0:	4680      	mov	r8, r0
 8006af2:	0092      	lsls	r2, r2, #2
 8006af4:	300c      	adds	r0, #12
 8006af6:	f7fd fee1 	bl	80048bc <memcpy>
 8006afa:	4621      	mov	r1, r4
 8006afc:	4630      	mov	r0, r6
 8006afe:	f7ff ffb7 	bl	8006a70 <_Bfree>
 8006b02:	4644      	mov	r4, r8
 8006b04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b08:	3501      	adds	r5, #1
 8006b0a:	615f      	str	r7, [r3, #20]
 8006b0c:	6125      	str	r5, [r4, #16]
 8006b0e:	4620      	mov	r0, r4
 8006b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b14 <__hi0bits>:
 8006b14:	0c02      	lsrs	r2, r0, #16
 8006b16:	0412      	lsls	r2, r2, #16
 8006b18:	4603      	mov	r3, r0
 8006b1a:	b9b2      	cbnz	r2, 8006b4a <__hi0bits+0x36>
 8006b1c:	0403      	lsls	r3, r0, #16
 8006b1e:	2010      	movs	r0, #16
 8006b20:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b24:	bf04      	itt	eq
 8006b26:	021b      	lsleq	r3, r3, #8
 8006b28:	3008      	addeq	r0, #8
 8006b2a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b2e:	bf04      	itt	eq
 8006b30:	011b      	lsleq	r3, r3, #4
 8006b32:	3004      	addeq	r0, #4
 8006b34:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b38:	bf04      	itt	eq
 8006b3a:	009b      	lsleq	r3, r3, #2
 8006b3c:	3002      	addeq	r0, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	db06      	blt.n	8006b50 <__hi0bits+0x3c>
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	d503      	bpl.n	8006b4e <__hi0bits+0x3a>
 8006b46:	3001      	adds	r0, #1
 8006b48:	4770      	bx	lr
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	e7e8      	b.n	8006b20 <__hi0bits+0xc>
 8006b4e:	2020      	movs	r0, #32
 8006b50:	4770      	bx	lr

08006b52 <__lo0bits>:
 8006b52:	6803      	ldr	r3, [r0, #0]
 8006b54:	f013 0207 	ands.w	r2, r3, #7
 8006b58:	4601      	mov	r1, r0
 8006b5a:	d00b      	beq.n	8006b74 <__lo0bits+0x22>
 8006b5c:	07da      	lsls	r2, r3, #31
 8006b5e:	d423      	bmi.n	8006ba8 <__lo0bits+0x56>
 8006b60:	0798      	lsls	r0, r3, #30
 8006b62:	bf49      	itett	mi
 8006b64:	085b      	lsrmi	r3, r3, #1
 8006b66:	089b      	lsrpl	r3, r3, #2
 8006b68:	2001      	movmi	r0, #1
 8006b6a:	600b      	strmi	r3, [r1, #0]
 8006b6c:	bf5c      	itt	pl
 8006b6e:	600b      	strpl	r3, [r1, #0]
 8006b70:	2002      	movpl	r0, #2
 8006b72:	4770      	bx	lr
 8006b74:	b298      	uxth	r0, r3
 8006b76:	b9a8      	cbnz	r0, 8006ba4 <__lo0bits+0x52>
 8006b78:	0c1b      	lsrs	r3, r3, #16
 8006b7a:	2010      	movs	r0, #16
 8006b7c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006b80:	bf04      	itt	eq
 8006b82:	0a1b      	lsreq	r3, r3, #8
 8006b84:	3008      	addeq	r0, #8
 8006b86:	071a      	lsls	r2, r3, #28
 8006b88:	bf04      	itt	eq
 8006b8a:	091b      	lsreq	r3, r3, #4
 8006b8c:	3004      	addeq	r0, #4
 8006b8e:	079a      	lsls	r2, r3, #30
 8006b90:	bf04      	itt	eq
 8006b92:	089b      	lsreq	r3, r3, #2
 8006b94:	3002      	addeq	r0, #2
 8006b96:	07da      	lsls	r2, r3, #31
 8006b98:	d402      	bmi.n	8006ba0 <__lo0bits+0x4e>
 8006b9a:	085b      	lsrs	r3, r3, #1
 8006b9c:	d006      	beq.n	8006bac <__lo0bits+0x5a>
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	600b      	str	r3, [r1, #0]
 8006ba2:	4770      	bx	lr
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	e7e9      	b.n	8006b7c <__lo0bits+0x2a>
 8006ba8:	2000      	movs	r0, #0
 8006baa:	4770      	bx	lr
 8006bac:	2020      	movs	r0, #32
 8006bae:	4770      	bx	lr

08006bb0 <__i2b>:
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	f7ff ff27 	bl	8006a08 <_Balloc>
 8006bba:	2201      	movs	r2, #1
 8006bbc:	6144      	str	r4, [r0, #20]
 8006bbe:	6102      	str	r2, [r0, #16]
 8006bc0:	bd10      	pop	{r4, pc}

08006bc2 <__multiply>:
 8006bc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc6:	4614      	mov	r4, r2
 8006bc8:	690a      	ldr	r2, [r1, #16]
 8006bca:	6923      	ldr	r3, [r4, #16]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	bfb8      	it	lt
 8006bd0:	460b      	movlt	r3, r1
 8006bd2:	4689      	mov	r9, r1
 8006bd4:	bfbc      	itt	lt
 8006bd6:	46a1      	movlt	r9, r4
 8006bd8:	461c      	movlt	r4, r3
 8006bda:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006bde:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006be2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006be6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006bea:	eb07 060a 	add.w	r6, r7, sl
 8006bee:	429e      	cmp	r6, r3
 8006bf0:	bfc8      	it	gt
 8006bf2:	3101      	addgt	r1, #1
 8006bf4:	f7ff ff08 	bl	8006a08 <_Balloc>
 8006bf8:	f100 0514 	add.w	r5, r0, #20
 8006bfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c00:	462b      	mov	r3, r5
 8006c02:	2200      	movs	r2, #0
 8006c04:	4543      	cmp	r3, r8
 8006c06:	d316      	bcc.n	8006c36 <__multiply+0x74>
 8006c08:	f104 0214 	add.w	r2, r4, #20
 8006c0c:	f109 0114 	add.w	r1, r9, #20
 8006c10:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006c14:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	9c01      	ldr	r4, [sp, #4]
 8006c1c:	4294      	cmp	r4, r2
 8006c1e:	4613      	mov	r3, r2
 8006c20:	d80c      	bhi.n	8006c3c <__multiply+0x7a>
 8006c22:	2e00      	cmp	r6, #0
 8006c24:	dd03      	ble.n	8006c2e <__multiply+0x6c>
 8006c26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d054      	beq.n	8006cd8 <__multiply+0x116>
 8006c2e:	6106      	str	r6, [r0, #16]
 8006c30:	b003      	add	sp, #12
 8006c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c36:	f843 2b04 	str.w	r2, [r3], #4
 8006c3a:	e7e3      	b.n	8006c04 <__multiply+0x42>
 8006c3c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c40:	3204      	adds	r2, #4
 8006c42:	f1ba 0f00 	cmp.w	sl, #0
 8006c46:	d020      	beq.n	8006c8a <__multiply+0xc8>
 8006c48:	46ae      	mov	lr, r5
 8006c4a:	4689      	mov	r9, r1
 8006c4c:	f04f 0c00 	mov.w	ip, #0
 8006c50:	f859 4b04 	ldr.w	r4, [r9], #4
 8006c54:	f8be b000 	ldrh.w	fp, [lr]
 8006c58:	b2a3      	uxth	r3, r4
 8006c5a:	fb0a b303 	mla	r3, sl, r3, fp
 8006c5e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006c62:	f8de 4000 	ldr.w	r4, [lr]
 8006c66:	4463      	add	r3, ip
 8006c68:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006c6c:	fb0a c40b 	mla	r4, sl, fp, ip
 8006c70:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006c7a:	454f      	cmp	r7, r9
 8006c7c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006c80:	f84e 3b04 	str.w	r3, [lr], #4
 8006c84:	d8e4      	bhi.n	8006c50 <__multiply+0x8e>
 8006c86:	f8ce c000 	str.w	ip, [lr]
 8006c8a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006c8e:	f1b9 0f00 	cmp.w	r9, #0
 8006c92:	d01f      	beq.n	8006cd4 <__multiply+0x112>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	46ae      	mov	lr, r5
 8006c98:	468c      	mov	ip, r1
 8006c9a:	f04f 0a00 	mov.w	sl, #0
 8006c9e:	f8bc 4000 	ldrh.w	r4, [ip]
 8006ca2:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006ca6:	fb09 b404 	mla	r4, r9, r4, fp
 8006caa:	44a2      	add	sl, r4
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006cb2:	f84e 3b04 	str.w	r3, [lr], #4
 8006cb6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cba:	f8be 4000 	ldrh.w	r4, [lr]
 8006cbe:	0c1b      	lsrs	r3, r3, #16
 8006cc0:	fb09 4303 	mla	r3, r9, r3, r4
 8006cc4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006cc8:	4567      	cmp	r7, ip
 8006cca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cce:	d8e6      	bhi.n	8006c9e <__multiply+0xdc>
 8006cd0:	f8ce 3000 	str.w	r3, [lr]
 8006cd4:	3504      	adds	r5, #4
 8006cd6:	e7a0      	b.n	8006c1a <__multiply+0x58>
 8006cd8:	3e01      	subs	r6, #1
 8006cda:	e7a2      	b.n	8006c22 <__multiply+0x60>

08006cdc <__pow5mult>:
 8006cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce0:	4615      	mov	r5, r2
 8006ce2:	f012 0203 	ands.w	r2, r2, #3
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	d007      	beq.n	8006cfc <__pow5mult+0x20>
 8006cec:	3a01      	subs	r2, #1
 8006cee:	4c21      	ldr	r4, [pc, #132]	; (8006d74 <__pow5mult+0x98>)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cf6:	f7ff fed2 	bl	8006a9e <__multadd>
 8006cfa:	4607      	mov	r7, r0
 8006cfc:	10ad      	asrs	r5, r5, #2
 8006cfe:	d035      	beq.n	8006d6c <__pow5mult+0x90>
 8006d00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d02:	b93c      	cbnz	r4, 8006d14 <__pow5mult+0x38>
 8006d04:	2010      	movs	r0, #16
 8006d06:	f7ff fc4b 	bl	80065a0 <malloc>
 8006d0a:	6270      	str	r0, [r6, #36]	; 0x24
 8006d0c:	6044      	str	r4, [r0, #4]
 8006d0e:	6084      	str	r4, [r0, #8]
 8006d10:	6004      	str	r4, [r0, #0]
 8006d12:	60c4      	str	r4, [r0, #12]
 8006d14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d1c:	b94c      	cbnz	r4, 8006d32 <__pow5mult+0x56>
 8006d1e:	f240 2171 	movw	r1, #625	; 0x271
 8006d22:	4630      	mov	r0, r6
 8006d24:	f7ff ff44 	bl	8006bb0 <__i2b>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d2e:	4604      	mov	r4, r0
 8006d30:	6003      	str	r3, [r0, #0]
 8006d32:	f04f 0800 	mov.w	r8, #0
 8006d36:	07eb      	lsls	r3, r5, #31
 8006d38:	d50a      	bpl.n	8006d50 <__pow5mult+0x74>
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f7ff ff3f 	bl	8006bc2 <__multiply>
 8006d44:	4639      	mov	r1, r7
 8006d46:	4681      	mov	r9, r0
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f7ff fe91 	bl	8006a70 <_Bfree>
 8006d4e:	464f      	mov	r7, r9
 8006d50:	106d      	asrs	r5, r5, #1
 8006d52:	d00b      	beq.n	8006d6c <__pow5mult+0x90>
 8006d54:	6820      	ldr	r0, [r4, #0]
 8006d56:	b938      	cbnz	r0, 8006d68 <__pow5mult+0x8c>
 8006d58:	4622      	mov	r2, r4
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f7ff ff30 	bl	8006bc2 <__multiply>
 8006d62:	6020      	str	r0, [r4, #0]
 8006d64:	f8c0 8000 	str.w	r8, [r0]
 8006d68:	4604      	mov	r4, r0
 8006d6a:	e7e4      	b.n	8006d36 <__pow5mult+0x5a>
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d72:	bf00      	nop
 8006d74:	08007918 	.word	0x08007918

08006d78 <__lshift>:
 8006d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	6849      	ldr	r1, [r1, #4]
 8006d86:	eb0a 0903 	add.w	r9, sl, r3
 8006d8a:	68a3      	ldr	r3, [r4, #8]
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	4616      	mov	r6, r2
 8006d90:	f109 0501 	add.w	r5, r9, #1
 8006d94:	42ab      	cmp	r3, r5
 8006d96:	db31      	blt.n	8006dfc <__lshift+0x84>
 8006d98:	4638      	mov	r0, r7
 8006d9a:	f7ff fe35 	bl	8006a08 <_Balloc>
 8006d9e:	2200      	movs	r2, #0
 8006da0:	4680      	mov	r8, r0
 8006da2:	f100 0314 	add.w	r3, r0, #20
 8006da6:	4611      	mov	r1, r2
 8006da8:	4552      	cmp	r2, sl
 8006daa:	db2a      	blt.n	8006e02 <__lshift+0x8a>
 8006dac:	6920      	ldr	r0, [r4, #16]
 8006dae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006db2:	f104 0114 	add.w	r1, r4, #20
 8006db6:	f016 021f 	ands.w	r2, r6, #31
 8006dba:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006dbe:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006dc2:	d022      	beq.n	8006e0a <__lshift+0x92>
 8006dc4:	f1c2 0c20 	rsb	ip, r2, #32
 8006dc8:	2000      	movs	r0, #0
 8006dca:	680e      	ldr	r6, [r1, #0]
 8006dcc:	4096      	lsls	r6, r2
 8006dce:	4330      	orrs	r0, r6
 8006dd0:	f843 0b04 	str.w	r0, [r3], #4
 8006dd4:	f851 0b04 	ldr.w	r0, [r1], #4
 8006dd8:	458e      	cmp	lr, r1
 8006dda:	fa20 f00c 	lsr.w	r0, r0, ip
 8006dde:	d8f4      	bhi.n	8006dca <__lshift+0x52>
 8006de0:	6018      	str	r0, [r3, #0]
 8006de2:	b108      	cbz	r0, 8006de8 <__lshift+0x70>
 8006de4:	f109 0502 	add.w	r5, r9, #2
 8006de8:	3d01      	subs	r5, #1
 8006dea:	4638      	mov	r0, r7
 8006dec:	f8c8 5010 	str.w	r5, [r8, #16]
 8006df0:	4621      	mov	r1, r4
 8006df2:	f7ff fe3d 	bl	8006a70 <_Bfree>
 8006df6:	4640      	mov	r0, r8
 8006df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfc:	3101      	adds	r1, #1
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	e7c8      	b.n	8006d94 <__lshift+0x1c>
 8006e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006e06:	3201      	adds	r2, #1
 8006e08:	e7ce      	b.n	8006da8 <__lshift+0x30>
 8006e0a:	3b04      	subs	r3, #4
 8006e0c:	f851 2b04 	ldr.w	r2, [r1], #4
 8006e10:	f843 2f04 	str.w	r2, [r3, #4]!
 8006e14:	458e      	cmp	lr, r1
 8006e16:	d8f9      	bhi.n	8006e0c <__lshift+0x94>
 8006e18:	e7e6      	b.n	8006de8 <__lshift+0x70>

08006e1a <__mcmp>:
 8006e1a:	6903      	ldr	r3, [r0, #16]
 8006e1c:	690a      	ldr	r2, [r1, #16]
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	b530      	push	{r4, r5, lr}
 8006e22:	d10c      	bne.n	8006e3e <__mcmp+0x24>
 8006e24:	0092      	lsls	r2, r2, #2
 8006e26:	3014      	adds	r0, #20
 8006e28:	3114      	adds	r1, #20
 8006e2a:	1884      	adds	r4, r0, r2
 8006e2c:	4411      	add	r1, r2
 8006e2e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e32:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e36:	4295      	cmp	r5, r2
 8006e38:	d003      	beq.n	8006e42 <__mcmp+0x28>
 8006e3a:	d305      	bcc.n	8006e48 <__mcmp+0x2e>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	4618      	mov	r0, r3
 8006e40:	bd30      	pop	{r4, r5, pc}
 8006e42:	42a0      	cmp	r0, r4
 8006e44:	d3f3      	bcc.n	8006e2e <__mcmp+0x14>
 8006e46:	e7fa      	b.n	8006e3e <__mcmp+0x24>
 8006e48:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4c:	e7f7      	b.n	8006e3e <__mcmp+0x24>

08006e4e <__mdiff>:
 8006e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e52:	460d      	mov	r5, r1
 8006e54:	4607      	mov	r7, r0
 8006e56:	4611      	mov	r1, r2
 8006e58:	4628      	mov	r0, r5
 8006e5a:	4614      	mov	r4, r2
 8006e5c:	f7ff ffdd 	bl	8006e1a <__mcmp>
 8006e60:	1e06      	subs	r6, r0, #0
 8006e62:	d108      	bne.n	8006e76 <__mdiff+0x28>
 8006e64:	4631      	mov	r1, r6
 8006e66:	4638      	mov	r0, r7
 8006e68:	f7ff fdce 	bl	8006a08 <_Balloc>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	6103      	str	r3, [r0, #16]
 8006e70:	6146      	str	r6, [r0, #20]
 8006e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e76:	bfa4      	itt	ge
 8006e78:	4623      	movge	r3, r4
 8006e7a:	462c      	movge	r4, r5
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	6861      	ldr	r1, [r4, #4]
 8006e80:	bfa6      	itte	ge
 8006e82:	461d      	movge	r5, r3
 8006e84:	2600      	movge	r6, #0
 8006e86:	2601      	movlt	r6, #1
 8006e88:	f7ff fdbe 	bl	8006a08 <_Balloc>
 8006e8c:	692b      	ldr	r3, [r5, #16]
 8006e8e:	60c6      	str	r6, [r0, #12]
 8006e90:	6926      	ldr	r6, [r4, #16]
 8006e92:	f105 0914 	add.w	r9, r5, #20
 8006e96:	f104 0214 	add.w	r2, r4, #20
 8006e9a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006e9e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006ea2:	f100 0514 	add.w	r5, r0, #20
 8006ea6:	f04f 0c00 	mov.w	ip, #0
 8006eaa:	f852 ab04 	ldr.w	sl, [r2], #4
 8006eae:	f859 4b04 	ldr.w	r4, [r9], #4
 8006eb2:	fa1c f18a 	uxtah	r1, ip, sl
 8006eb6:	b2a3      	uxth	r3, r4
 8006eb8:	1ac9      	subs	r1, r1, r3
 8006eba:	0c23      	lsrs	r3, r4, #16
 8006ebc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006ec0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006ec4:	b289      	uxth	r1, r1
 8006ec6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006eca:	45c8      	cmp	r8, r9
 8006ecc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006ed0:	4696      	mov	lr, r2
 8006ed2:	f845 3b04 	str.w	r3, [r5], #4
 8006ed6:	d8e8      	bhi.n	8006eaa <__mdiff+0x5c>
 8006ed8:	45be      	cmp	lr, r7
 8006eda:	d305      	bcc.n	8006ee8 <__mdiff+0x9a>
 8006edc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006ee0:	b18b      	cbz	r3, 8006f06 <__mdiff+0xb8>
 8006ee2:	6106      	str	r6, [r0, #16]
 8006ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee8:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006eec:	fa1c f381 	uxtah	r3, ip, r1
 8006ef0:	141a      	asrs	r2, r3, #16
 8006ef2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006efc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f00:	f845 3b04 	str.w	r3, [r5], #4
 8006f04:	e7e8      	b.n	8006ed8 <__mdiff+0x8a>
 8006f06:	3e01      	subs	r6, #1
 8006f08:	e7e8      	b.n	8006edc <__mdiff+0x8e>

08006f0a <__d2b>:
 8006f0a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f0e:	460e      	mov	r6, r1
 8006f10:	2101      	movs	r1, #1
 8006f12:	ec59 8b10 	vmov	r8, r9, d0
 8006f16:	4615      	mov	r5, r2
 8006f18:	f7ff fd76 	bl	8006a08 <_Balloc>
 8006f1c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006f20:	4607      	mov	r7, r0
 8006f22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f26:	bb34      	cbnz	r4, 8006f76 <__d2b+0x6c>
 8006f28:	9301      	str	r3, [sp, #4]
 8006f2a:	f1b8 0f00 	cmp.w	r8, #0
 8006f2e:	d027      	beq.n	8006f80 <__d2b+0x76>
 8006f30:	a802      	add	r0, sp, #8
 8006f32:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006f36:	f7ff fe0c 	bl	8006b52 <__lo0bits>
 8006f3a:	9900      	ldr	r1, [sp, #0]
 8006f3c:	b1f0      	cbz	r0, 8006f7c <__d2b+0x72>
 8006f3e:	9a01      	ldr	r2, [sp, #4]
 8006f40:	f1c0 0320 	rsb	r3, r0, #32
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	40c2      	lsrs	r2, r0
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	9201      	str	r2, [sp, #4]
 8006f50:	9b01      	ldr	r3, [sp, #4]
 8006f52:	61bb      	str	r3, [r7, #24]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	bf14      	ite	ne
 8006f58:	2102      	movne	r1, #2
 8006f5a:	2101      	moveq	r1, #1
 8006f5c:	6139      	str	r1, [r7, #16]
 8006f5e:	b1c4      	cbz	r4, 8006f92 <__d2b+0x88>
 8006f60:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006f64:	4404      	add	r4, r0
 8006f66:	6034      	str	r4, [r6, #0]
 8006f68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f6c:	6028      	str	r0, [r5, #0]
 8006f6e:	4638      	mov	r0, r7
 8006f70:	b003      	add	sp, #12
 8006f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f7a:	e7d5      	b.n	8006f28 <__d2b+0x1e>
 8006f7c:	6179      	str	r1, [r7, #20]
 8006f7e:	e7e7      	b.n	8006f50 <__d2b+0x46>
 8006f80:	a801      	add	r0, sp, #4
 8006f82:	f7ff fde6 	bl	8006b52 <__lo0bits>
 8006f86:	9b01      	ldr	r3, [sp, #4]
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	6139      	str	r1, [r7, #16]
 8006f8e:	3020      	adds	r0, #32
 8006f90:	e7e5      	b.n	8006f5e <__d2b+0x54>
 8006f92:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006f96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f9a:	6030      	str	r0, [r6, #0]
 8006f9c:	6918      	ldr	r0, [r3, #16]
 8006f9e:	f7ff fdb9 	bl	8006b14 <__hi0bits>
 8006fa2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006fa6:	e7e1      	b.n	8006f6c <__d2b+0x62>

08006fa8 <_sbrk_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4c06      	ldr	r4, [pc, #24]	; (8006fc4 <_sbrk_r+0x1c>)
 8006fac:	2300      	movs	r3, #0
 8006fae:	4605      	mov	r5, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	f000 fb6a 	bl	800768c <_sbrk>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_sbrk_r+0x1a>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_sbrk_r+0x1a>
 8006fc0:	602b      	str	r3, [r5, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	20000cdc 	.word	0x20000cdc

08006fc8 <__ssprint_r>:
 8006fc8:	6893      	ldr	r3, [r2, #8]
 8006fca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fce:	4681      	mov	r9, r0
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	4617      	mov	r7, r2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d060      	beq.n	800709a <__ssprint_r+0xd2>
 8006fd8:	f04f 0b00 	mov.w	fp, #0
 8006fdc:	f8d2 a000 	ldr.w	sl, [r2]
 8006fe0:	465e      	mov	r6, fp
 8006fe2:	b356      	cbz	r6, 800703a <__ssprint_r+0x72>
 8006fe4:	68a3      	ldr	r3, [r4, #8]
 8006fe6:	429e      	cmp	r6, r3
 8006fe8:	d344      	bcc.n	8007074 <__ssprint_r+0xac>
 8006fea:	89a2      	ldrh	r2, [r4, #12]
 8006fec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ff0:	d03e      	beq.n	8007070 <__ssprint_r+0xa8>
 8006ff2:	6825      	ldr	r5, [r4, #0]
 8006ff4:	6921      	ldr	r1, [r4, #16]
 8006ff6:	eba5 0801 	sub.w	r8, r5, r1
 8006ffa:	6965      	ldr	r5, [r4, #20]
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007002:	fb95 f5f3 	sdiv	r5, r5, r3
 8007006:	f108 0301 	add.w	r3, r8, #1
 800700a:	4433      	add	r3, r6
 800700c:	429d      	cmp	r5, r3
 800700e:	bf38      	it	cc
 8007010:	461d      	movcc	r5, r3
 8007012:	0553      	lsls	r3, r2, #21
 8007014:	d546      	bpl.n	80070a4 <__ssprint_r+0xdc>
 8007016:	4629      	mov	r1, r5
 8007018:	4648      	mov	r0, r9
 800701a:	f7ff fac9 	bl	80065b0 <_malloc_r>
 800701e:	b998      	cbnz	r0, 8007048 <__ssprint_r+0x80>
 8007020:	230c      	movs	r3, #12
 8007022:	f8c9 3000 	str.w	r3, [r9]
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	2300      	movs	r3, #0
 8007030:	60bb      	str	r3, [r7, #8]
 8007032:	607b      	str	r3, [r7, #4]
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	e031      	b.n	800709e <__ssprint_r+0xd6>
 800703a:	f8da b000 	ldr.w	fp, [sl]
 800703e:	f8da 6004 	ldr.w	r6, [sl, #4]
 8007042:	f10a 0a08 	add.w	sl, sl, #8
 8007046:	e7cc      	b.n	8006fe2 <__ssprint_r+0x1a>
 8007048:	4642      	mov	r2, r8
 800704a:	6921      	ldr	r1, [r4, #16]
 800704c:	9001      	str	r0, [sp, #4]
 800704e:	f7fd fc35 	bl	80048bc <memcpy>
 8007052:	89a2      	ldrh	r2, [r4, #12]
 8007054:	9b01      	ldr	r3, [sp, #4]
 8007056:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800705a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800705e:	81a2      	strh	r2, [r4, #12]
 8007060:	6123      	str	r3, [r4, #16]
 8007062:	6165      	str	r5, [r4, #20]
 8007064:	4443      	add	r3, r8
 8007066:	eba5 0508 	sub.w	r5, r5, r8
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	60a5      	str	r5, [r4, #8]
 800706e:	4633      	mov	r3, r6
 8007070:	429e      	cmp	r6, r3
 8007072:	d200      	bcs.n	8007076 <__ssprint_r+0xae>
 8007074:	4633      	mov	r3, r6
 8007076:	461a      	mov	r2, r3
 8007078:	4659      	mov	r1, fp
 800707a:	6820      	ldr	r0, [r4, #0]
 800707c:	9301      	str	r3, [sp, #4]
 800707e:	f000 f96b 	bl	8007358 <memmove>
 8007082:	68a2      	ldr	r2, [r4, #8]
 8007084:	9b01      	ldr	r3, [sp, #4]
 8007086:	1ad2      	subs	r2, r2, r3
 8007088:	60a2      	str	r2, [r4, #8]
 800708a:	6822      	ldr	r2, [r4, #0]
 800708c:	4413      	add	r3, r2
 800708e:	6023      	str	r3, [r4, #0]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	1b9e      	subs	r6, r3, r6
 8007094:	60be      	str	r6, [r7, #8]
 8007096:	2e00      	cmp	r6, #0
 8007098:	d1cf      	bne.n	800703a <__ssprint_r+0x72>
 800709a:	2000      	movs	r0, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	b003      	add	sp, #12
 80070a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a4:	462a      	mov	r2, r5
 80070a6:	4648      	mov	r0, r9
 80070a8:	f000 f970 	bl	800738c <_realloc_r>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d1d6      	bne.n	8007060 <__ssprint_r+0x98>
 80070b2:	6921      	ldr	r1, [r4, #16]
 80070b4:	4648      	mov	r0, r9
 80070b6:	f000 f891 	bl	80071dc <_free_r>
 80070ba:	e7b1      	b.n	8007020 <__ssprint_r+0x58>

080070bc <__ascii_wctomb>:
 80070bc:	b149      	cbz	r1, 80070d2 <__ascii_wctomb+0x16>
 80070be:	2aff      	cmp	r2, #255	; 0xff
 80070c0:	bf85      	ittet	hi
 80070c2:	238a      	movhi	r3, #138	; 0x8a
 80070c4:	6003      	strhi	r3, [r0, #0]
 80070c6:	700a      	strbls	r2, [r1, #0]
 80070c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80070cc:	bf98      	it	ls
 80070ce:	2001      	movls	r0, #1
 80070d0:	4770      	bx	lr
 80070d2:	4608      	mov	r0, r1
 80070d4:	4770      	bx	lr

080070d6 <_calloc_r>:
 80070d6:	b510      	push	{r4, lr}
 80070d8:	4351      	muls	r1, r2
 80070da:	f7ff fa69 	bl	80065b0 <_malloc_r>
 80070de:	4604      	mov	r4, r0
 80070e0:	b198      	cbz	r0, 800710a <_calloc_r+0x34>
 80070e2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80070e6:	f022 0203 	bic.w	r2, r2, #3
 80070ea:	3a04      	subs	r2, #4
 80070ec:	2a24      	cmp	r2, #36	; 0x24
 80070ee:	d81b      	bhi.n	8007128 <_calloc_r+0x52>
 80070f0:	2a13      	cmp	r2, #19
 80070f2:	d917      	bls.n	8007124 <_calloc_r+0x4e>
 80070f4:	2100      	movs	r1, #0
 80070f6:	2a1b      	cmp	r2, #27
 80070f8:	6001      	str	r1, [r0, #0]
 80070fa:	6041      	str	r1, [r0, #4]
 80070fc:	d807      	bhi.n	800710e <_calloc_r+0x38>
 80070fe:	f100 0308 	add.w	r3, r0, #8
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	605a      	str	r2, [r3, #4]
 8007108:	609a      	str	r2, [r3, #8]
 800710a:	4620      	mov	r0, r4
 800710c:	bd10      	pop	{r4, pc}
 800710e:	2a24      	cmp	r2, #36	; 0x24
 8007110:	6081      	str	r1, [r0, #8]
 8007112:	60c1      	str	r1, [r0, #12]
 8007114:	bf11      	iteee	ne
 8007116:	f100 0310 	addne.w	r3, r0, #16
 800711a:	6101      	streq	r1, [r0, #16]
 800711c:	f100 0318 	addeq.w	r3, r0, #24
 8007120:	6141      	streq	r1, [r0, #20]
 8007122:	e7ee      	b.n	8007102 <_calloc_r+0x2c>
 8007124:	4603      	mov	r3, r0
 8007126:	e7ec      	b.n	8007102 <_calloc_r+0x2c>
 8007128:	2100      	movs	r1, #0
 800712a:	f7fd fbd2 	bl	80048d2 <memset>
 800712e:	e7ec      	b.n	800710a <_calloc_r+0x34>

08007130 <_malloc_trim_r>:
 8007130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007134:	4f25      	ldr	r7, [pc, #148]	; (80071cc <_malloc_trim_r+0x9c>)
 8007136:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80071d8 <_malloc_trim_r+0xa8>
 800713a:	4689      	mov	r9, r1
 800713c:	4606      	mov	r6, r0
 800713e:	f7ff fc57 	bl	80069f0 <__malloc_lock>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	685d      	ldr	r5, [r3, #4]
 8007146:	f1a8 0411 	sub.w	r4, r8, #17
 800714a:	f025 0503 	bic.w	r5, r5, #3
 800714e:	eba4 0409 	sub.w	r4, r4, r9
 8007152:	442c      	add	r4, r5
 8007154:	fbb4 f4f8 	udiv	r4, r4, r8
 8007158:	3c01      	subs	r4, #1
 800715a:	fb08 f404 	mul.w	r4, r8, r4
 800715e:	4544      	cmp	r4, r8
 8007160:	da05      	bge.n	800716e <_malloc_trim_r+0x3e>
 8007162:	4630      	mov	r0, r6
 8007164:	f7ff fc4a 	bl	80069fc <__malloc_unlock>
 8007168:	2000      	movs	r0, #0
 800716a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800716e:	2100      	movs	r1, #0
 8007170:	4630      	mov	r0, r6
 8007172:	f7ff ff19 	bl	8006fa8 <_sbrk_r>
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	442b      	add	r3, r5
 800717a:	4298      	cmp	r0, r3
 800717c:	d1f1      	bne.n	8007162 <_malloc_trim_r+0x32>
 800717e:	4261      	negs	r1, r4
 8007180:	4630      	mov	r0, r6
 8007182:	f7ff ff11 	bl	8006fa8 <_sbrk_r>
 8007186:	3001      	adds	r0, #1
 8007188:	d110      	bne.n	80071ac <_malloc_trim_r+0x7c>
 800718a:	2100      	movs	r1, #0
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff ff0b 	bl	8006fa8 <_sbrk_r>
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	1a83      	subs	r3, r0, r2
 8007196:	2b0f      	cmp	r3, #15
 8007198:	dde3      	ble.n	8007162 <_malloc_trim_r+0x32>
 800719a:	490d      	ldr	r1, [pc, #52]	; (80071d0 <_malloc_trim_r+0xa0>)
 800719c:	6809      	ldr	r1, [r1, #0]
 800719e:	1a40      	subs	r0, r0, r1
 80071a0:	490c      	ldr	r1, [pc, #48]	; (80071d4 <_malloc_trim_r+0xa4>)
 80071a2:	f043 0301 	orr.w	r3, r3, #1
 80071a6:	6008      	str	r0, [r1, #0]
 80071a8:	6053      	str	r3, [r2, #4]
 80071aa:	e7da      	b.n	8007162 <_malloc_trim_r+0x32>
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <_malloc_trim_r+0xa4>)
 80071b0:	1b2d      	subs	r5, r5, r4
 80071b2:	f045 0501 	orr.w	r5, r5, #1
 80071b6:	605d      	str	r5, [r3, #4]
 80071b8:	6813      	ldr	r3, [r2, #0]
 80071ba:	4630      	mov	r0, r6
 80071bc:	1b1c      	subs	r4, r3, r4
 80071be:	6014      	str	r4, [r2, #0]
 80071c0:	f7ff fc1c 	bl	80069fc <__malloc_unlock>
 80071c4:	2001      	movs	r0, #1
 80071c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ca:	bf00      	nop
 80071cc:	2000026c 	.word	0x2000026c
 80071d0:	20000674 	.word	0x20000674
 80071d4:	2000069c 	.word	0x2000069c
 80071d8:	00000080 	.word	0x00000080

080071dc <_free_r>:
 80071dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e0:	4604      	mov	r4, r0
 80071e2:	4688      	mov	r8, r1
 80071e4:	2900      	cmp	r1, #0
 80071e6:	f000 80ab 	beq.w	8007340 <_free_r+0x164>
 80071ea:	f7ff fc01 	bl	80069f0 <__malloc_lock>
 80071ee:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80071f2:	4d54      	ldr	r5, [pc, #336]	; (8007344 <_free_r+0x168>)
 80071f4:	f022 0001 	bic.w	r0, r2, #1
 80071f8:	f1a8 0308 	sub.w	r3, r8, #8
 80071fc:	181f      	adds	r7, r3, r0
 80071fe:	68a9      	ldr	r1, [r5, #8]
 8007200:	687e      	ldr	r6, [r7, #4]
 8007202:	428f      	cmp	r7, r1
 8007204:	f026 0603 	bic.w	r6, r6, #3
 8007208:	f002 0201 	and.w	r2, r2, #1
 800720c:	d11b      	bne.n	8007246 <_free_r+0x6a>
 800720e:	4430      	add	r0, r6
 8007210:	b93a      	cbnz	r2, 8007222 <_free_r+0x46>
 8007212:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	4410      	add	r0, r2
 800721a:	6899      	ldr	r1, [r3, #8]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	60ca      	str	r2, [r1, #12]
 8007220:	6091      	str	r1, [r2, #8]
 8007222:	f040 0201 	orr.w	r2, r0, #1
 8007226:	605a      	str	r2, [r3, #4]
 8007228:	60ab      	str	r3, [r5, #8]
 800722a:	4b47      	ldr	r3, [pc, #284]	; (8007348 <_free_r+0x16c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4298      	cmp	r0, r3
 8007230:	d304      	bcc.n	800723c <_free_r+0x60>
 8007232:	4b46      	ldr	r3, [pc, #280]	; (800734c <_free_r+0x170>)
 8007234:	4620      	mov	r0, r4
 8007236:	6819      	ldr	r1, [r3, #0]
 8007238:	f7ff ff7a 	bl	8007130 <_malloc_trim_r>
 800723c:	4620      	mov	r0, r4
 800723e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007242:	f7ff bbdb 	b.w	80069fc <__malloc_unlock>
 8007246:	607e      	str	r6, [r7, #4]
 8007248:	2a00      	cmp	r2, #0
 800724a:	d139      	bne.n	80072c0 <_free_r+0xe4>
 800724c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8007250:	1a5b      	subs	r3, r3, r1
 8007252:	4408      	add	r0, r1
 8007254:	6899      	ldr	r1, [r3, #8]
 8007256:	f105 0e08 	add.w	lr, r5, #8
 800725a:	4571      	cmp	r1, lr
 800725c:	d032      	beq.n	80072c4 <_free_r+0xe8>
 800725e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8007262:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007266:	f8ce 1008 	str.w	r1, [lr, #8]
 800726a:	19b9      	adds	r1, r7, r6
 800726c:	6849      	ldr	r1, [r1, #4]
 800726e:	07c9      	lsls	r1, r1, #31
 8007270:	d40a      	bmi.n	8007288 <_free_r+0xac>
 8007272:	4430      	add	r0, r6
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	bb3a      	cbnz	r2, 80072c8 <_free_r+0xec>
 8007278:	4e35      	ldr	r6, [pc, #212]	; (8007350 <_free_r+0x174>)
 800727a:	42b1      	cmp	r1, r6
 800727c:	d124      	bne.n	80072c8 <_free_r+0xec>
 800727e:	616b      	str	r3, [r5, #20]
 8007280:	612b      	str	r3, [r5, #16]
 8007282:	2201      	movs	r2, #1
 8007284:	60d9      	str	r1, [r3, #12]
 8007286:	6099      	str	r1, [r3, #8]
 8007288:	f040 0101 	orr.w	r1, r0, #1
 800728c:	6059      	str	r1, [r3, #4]
 800728e:	5018      	str	r0, [r3, r0]
 8007290:	2a00      	cmp	r2, #0
 8007292:	d1d3      	bne.n	800723c <_free_r+0x60>
 8007294:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007298:	d21a      	bcs.n	80072d0 <_free_r+0xf4>
 800729a:	08c0      	lsrs	r0, r0, #3
 800729c:	1081      	asrs	r1, r0, #2
 800729e:	2201      	movs	r2, #1
 80072a0:	408a      	lsls	r2, r1
 80072a2:	6869      	ldr	r1, [r5, #4]
 80072a4:	3001      	adds	r0, #1
 80072a6:	430a      	orrs	r2, r1
 80072a8:	606a      	str	r2, [r5, #4]
 80072aa:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80072ae:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80072b2:	6099      	str	r1, [r3, #8]
 80072b4:	3a08      	subs	r2, #8
 80072b6:	60da      	str	r2, [r3, #12]
 80072b8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80072bc:	60cb      	str	r3, [r1, #12]
 80072be:	e7bd      	b.n	800723c <_free_r+0x60>
 80072c0:	2200      	movs	r2, #0
 80072c2:	e7d2      	b.n	800726a <_free_r+0x8e>
 80072c4:	2201      	movs	r2, #1
 80072c6:	e7d0      	b.n	800726a <_free_r+0x8e>
 80072c8:	68fe      	ldr	r6, [r7, #12]
 80072ca:	60ce      	str	r6, [r1, #12]
 80072cc:	60b1      	str	r1, [r6, #8]
 80072ce:	e7db      	b.n	8007288 <_free_r+0xac>
 80072d0:	0a42      	lsrs	r2, r0, #9
 80072d2:	2a04      	cmp	r2, #4
 80072d4:	d813      	bhi.n	80072fe <_free_r+0x122>
 80072d6:	0982      	lsrs	r2, r0, #6
 80072d8:	3238      	adds	r2, #56	; 0x38
 80072da:	1c51      	adds	r1, r2, #1
 80072dc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80072e0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80072e4:	428e      	cmp	r6, r1
 80072e6:	d124      	bne.n	8007332 <_free_r+0x156>
 80072e8:	2001      	movs	r0, #1
 80072ea:	1092      	asrs	r2, r2, #2
 80072ec:	fa00 f202 	lsl.w	r2, r0, r2
 80072f0:	6868      	ldr	r0, [r5, #4]
 80072f2:	4302      	orrs	r2, r0
 80072f4:	606a      	str	r2, [r5, #4]
 80072f6:	60de      	str	r6, [r3, #12]
 80072f8:	6099      	str	r1, [r3, #8]
 80072fa:	60b3      	str	r3, [r6, #8]
 80072fc:	e7de      	b.n	80072bc <_free_r+0xe0>
 80072fe:	2a14      	cmp	r2, #20
 8007300:	d801      	bhi.n	8007306 <_free_r+0x12a>
 8007302:	325b      	adds	r2, #91	; 0x5b
 8007304:	e7e9      	b.n	80072da <_free_r+0xfe>
 8007306:	2a54      	cmp	r2, #84	; 0x54
 8007308:	d802      	bhi.n	8007310 <_free_r+0x134>
 800730a:	0b02      	lsrs	r2, r0, #12
 800730c:	326e      	adds	r2, #110	; 0x6e
 800730e:	e7e4      	b.n	80072da <_free_r+0xfe>
 8007310:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007314:	d802      	bhi.n	800731c <_free_r+0x140>
 8007316:	0bc2      	lsrs	r2, r0, #15
 8007318:	3277      	adds	r2, #119	; 0x77
 800731a:	e7de      	b.n	80072da <_free_r+0xfe>
 800731c:	f240 5154 	movw	r1, #1364	; 0x554
 8007320:	428a      	cmp	r2, r1
 8007322:	bf9a      	itte	ls
 8007324:	0c82      	lsrls	r2, r0, #18
 8007326:	327c      	addls	r2, #124	; 0x7c
 8007328:	227e      	movhi	r2, #126	; 0x7e
 800732a:	e7d6      	b.n	80072da <_free_r+0xfe>
 800732c:	6889      	ldr	r1, [r1, #8]
 800732e:	428e      	cmp	r6, r1
 8007330:	d004      	beq.n	800733c <_free_r+0x160>
 8007332:	684a      	ldr	r2, [r1, #4]
 8007334:	f022 0203 	bic.w	r2, r2, #3
 8007338:	4290      	cmp	r0, r2
 800733a:	d3f7      	bcc.n	800732c <_free_r+0x150>
 800733c:	68ce      	ldr	r6, [r1, #12]
 800733e:	e7da      	b.n	80072f6 <_free_r+0x11a>
 8007340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007344:	2000026c 	.word	0x2000026c
 8007348:	20000678 	.word	0x20000678
 800734c:	200006cc 	.word	0x200006cc
 8007350:	20000274 	.word	0x20000274

08007354 <__retarget_lock_acquire_recursive>:
 8007354:	4770      	bx	lr

08007356 <__retarget_lock_release_recursive>:
 8007356:	4770      	bx	lr

08007358 <memmove>:
 8007358:	4288      	cmp	r0, r1
 800735a:	b510      	push	{r4, lr}
 800735c:	eb01 0302 	add.w	r3, r1, r2
 8007360:	d803      	bhi.n	800736a <memmove+0x12>
 8007362:	1e42      	subs	r2, r0, #1
 8007364:	4299      	cmp	r1, r3
 8007366:	d10c      	bne.n	8007382 <memmove+0x2a>
 8007368:	bd10      	pop	{r4, pc}
 800736a:	4298      	cmp	r0, r3
 800736c:	d2f9      	bcs.n	8007362 <memmove+0xa>
 800736e:	1881      	adds	r1, r0, r2
 8007370:	1ad2      	subs	r2, r2, r3
 8007372:	42d3      	cmn	r3, r2
 8007374:	d100      	bne.n	8007378 <memmove+0x20>
 8007376:	bd10      	pop	{r4, pc}
 8007378:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800737c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007380:	e7f7      	b.n	8007372 <memmove+0x1a>
 8007382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007386:	f802 4f01 	strb.w	r4, [r2, #1]!
 800738a:	e7eb      	b.n	8007364 <memmove+0xc>

0800738c <_realloc_r>:
 800738c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007390:	4682      	mov	sl, r0
 8007392:	460c      	mov	r4, r1
 8007394:	b929      	cbnz	r1, 80073a2 <_realloc_r+0x16>
 8007396:	4611      	mov	r1, r2
 8007398:	b003      	add	sp, #12
 800739a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739e:	f7ff b907 	b.w	80065b0 <_malloc_r>
 80073a2:	9201      	str	r2, [sp, #4]
 80073a4:	f7ff fb24 	bl	80069f0 <__malloc_lock>
 80073a8:	9a01      	ldr	r2, [sp, #4]
 80073aa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80073ae:	f102 080b 	add.w	r8, r2, #11
 80073b2:	f1b8 0f16 	cmp.w	r8, #22
 80073b6:	f1a4 0908 	sub.w	r9, r4, #8
 80073ba:	f025 0603 	bic.w	r6, r5, #3
 80073be:	d90a      	bls.n	80073d6 <_realloc_r+0x4a>
 80073c0:	f038 0807 	bics.w	r8, r8, #7
 80073c4:	d509      	bpl.n	80073da <_realloc_r+0x4e>
 80073c6:	230c      	movs	r3, #12
 80073c8:	f8ca 3000 	str.w	r3, [sl]
 80073cc:	2700      	movs	r7, #0
 80073ce:	4638      	mov	r0, r7
 80073d0:	b003      	add	sp, #12
 80073d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d6:	f04f 0810 	mov.w	r8, #16
 80073da:	4590      	cmp	r8, r2
 80073dc:	d3f3      	bcc.n	80073c6 <_realloc_r+0x3a>
 80073de:	45b0      	cmp	r8, r6
 80073e0:	f340 8145 	ble.w	800766e <_realloc_r+0x2e2>
 80073e4:	4ba8      	ldr	r3, [pc, #672]	; (8007688 <_realloc_r+0x2fc>)
 80073e6:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80073ea:	eb09 0106 	add.w	r1, r9, r6
 80073ee:	4571      	cmp	r1, lr
 80073f0:	469b      	mov	fp, r3
 80073f2:	684b      	ldr	r3, [r1, #4]
 80073f4:	d005      	beq.n	8007402 <_realloc_r+0x76>
 80073f6:	f023 0001 	bic.w	r0, r3, #1
 80073fa:	4408      	add	r0, r1
 80073fc:	6840      	ldr	r0, [r0, #4]
 80073fe:	07c7      	lsls	r7, r0, #31
 8007400:	d447      	bmi.n	8007492 <_realloc_r+0x106>
 8007402:	f023 0303 	bic.w	r3, r3, #3
 8007406:	4571      	cmp	r1, lr
 8007408:	eb06 0703 	add.w	r7, r6, r3
 800740c:	d119      	bne.n	8007442 <_realloc_r+0xb6>
 800740e:	f108 0010 	add.w	r0, r8, #16
 8007412:	4287      	cmp	r7, r0
 8007414:	db3f      	blt.n	8007496 <_realloc_r+0x10a>
 8007416:	eb09 0308 	add.w	r3, r9, r8
 800741a:	eba7 0708 	sub.w	r7, r7, r8
 800741e:	f047 0701 	orr.w	r7, r7, #1
 8007422:	f8cb 3008 	str.w	r3, [fp, #8]
 8007426:	605f      	str	r7, [r3, #4]
 8007428:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	ea43 0308 	orr.w	r3, r3, r8
 8007434:	f844 3c04 	str.w	r3, [r4, #-4]
 8007438:	4650      	mov	r0, sl
 800743a:	f7ff fadf 	bl	80069fc <__malloc_unlock>
 800743e:	4627      	mov	r7, r4
 8007440:	e7c5      	b.n	80073ce <_realloc_r+0x42>
 8007442:	45b8      	cmp	r8, r7
 8007444:	dc27      	bgt.n	8007496 <_realloc_r+0x10a>
 8007446:	68cb      	ldr	r3, [r1, #12]
 8007448:	688a      	ldr	r2, [r1, #8]
 800744a:	60d3      	str	r3, [r2, #12]
 800744c:	609a      	str	r2, [r3, #8]
 800744e:	eba7 0008 	sub.w	r0, r7, r8
 8007452:	280f      	cmp	r0, #15
 8007454:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007458:	eb09 0207 	add.w	r2, r9, r7
 800745c:	f240 8109 	bls.w	8007672 <_realloc_r+0x2e6>
 8007460:	eb09 0108 	add.w	r1, r9, r8
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	ea43 0308 	orr.w	r3, r3, r8
 800746c:	f040 0001 	orr.w	r0, r0, #1
 8007470:	f8c9 3004 	str.w	r3, [r9, #4]
 8007474:	6048      	str	r0, [r1, #4]
 8007476:	6853      	ldr	r3, [r2, #4]
 8007478:	f043 0301 	orr.w	r3, r3, #1
 800747c:	6053      	str	r3, [r2, #4]
 800747e:	3108      	adds	r1, #8
 8007480:	4650      	mov	r0, sl
 8007482:	f7ff feab 	bl	80071dc <_free_r>
 8007486:	4650      	mov	r0, sl
 8007488:	f7ff fab8 	bl	80069fc <__malloc_unlock>
 800748c:	f109 0708 	add.w	r7, r9, #8
 8007490:	e79d      	b.n	80073ce <_realloc_r+0x42>
 8007492:	2300      	movs	r3, #0
 8007494:	4619      	mov	r1, r3
 8007496:	07e8      	lsls	r0, r5, #31
 8007498:	f100 8084 	bmi.w	80075a4 <_realloc_r+0x218>
 800749c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80074a0:	eba9 0505 	sub.w	r5, r9, r5
 80074a4:	6868      	ldr	r0, [r5, #4]
 80074a6:	f020 0003 	bic.w	r0, r0, #3
 80074aa:	4430      	add	r0, r6
 80074ac:	2900      	cmp	r1, #0
 80074ae:	d076      	beq.n	800759e <_realloc_r+0x212>
 80074b0:	4571      	cmp	r1, lr
 80074b2:	d150      	bne.n	8007556 <_realloc_r+0x1ca>
 80074b4:	4403      	add	r3, r0
 80074b6:	f108 0110 	add.w	r1, r8, #16
 80074ba:	428b      	cmp	r3, r1
 80074bc:	db6f      	blt.n	800759e <_realloc_r+0x212>
 80074be:	462f      	mov	r7, r5
 80074c0:	68ea      	ldr	r2, [r5, #12]
 80074c2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80074c6:	60ca      	str	r2, [r1, #12]
 80074c8:	6091      	str	r1, [r2, #8]
 80074ca:	1f32      	subs	r2, r6, #4
 80074cc:	2a24      	cmp	r2, #36	; 0x24
 80074ce:	d83b      	bhi.n	8007548 <_realloc_r+0x1bc>
 80074d0:	2a13      	cmp	r2, #19
 80074d2:	d936      	bls.n	8007542 <_realloc_r+0x1b6>
 80074d4:	6821      	ldr	r1, [r4, #0]
 80074d6:	60a9      	str	r1, [r5, #8]
 80074d8:	6861      	ldr	r1, [r4, #4]
 80074da:	60e9      	str	r1, [r5, #12]
 80074dc:	2a1b      	cmp	r2, #27
 80074de:	d81c      	bhi.n	800751a <_realloc_r+0x18e>
 80074e0:	f105 0210 	add.w	r2, r5, #16
 80074e4:	f104 0108 	add.w	r1, r4, #8
 80074e8:	6808      	ldr	r0, [r1, #0]
 80074ea:	6010      	str	r0, [r2, #0]
 80074ec:	6848      	ldr	r0, [r1, #4]
 80074ee:	6050      	str	r0, [r2, #4]
 80074f0:	6889      	ldr	r1, [r1, #8]
 80074f2:	6091      	str	r1, [r2, #8]
 80074f4:	eb05 0208 	add.w	r2, r5, r8
 80074f8:	eba3 0308 	sub.w	r3, r3, r8
 80074fc:	f043 0301 	orr.w	r3, r3, #1
 8007500:	f8cb 2008 	str.w	r2, [fp, #8]
 8007504:	6053      	str	r3, [r2, #4]
 8007506:	686b      	ldr	r3, [r5, #4]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	ea43 0308 	orr.w	r3, r3, r8
 8007510:	606b      	str	r3, [r5, #4]
 8007512:	4650      	mov	r0, sl
 8007514:	f7ff fa72 	bl	80069fc <__malloc_unlock>
 8007518:	e759      	b.n	80073ce <_realloc_r+0x42>
 800751a:	68a1      	ldr	r1, [r4, #8]
 800751c:	6129      	str	r1, [r5, #16]
 800751e:	68e1      	ldr	r1, [r4, #12]
 8007520:	6169      	str	r1, [r5, #20]
 8007522:	2a24      	cmp	r2, #36	; 0x24
 8007524:	bf01      	itttt	eq
 8007526:	6922      	ldreq	r2, [r4, #16]
 8007528:	61aa      	streq	r2, [r5, #24]
 800752a:	6960      	ldreq	r0, [r4, #20]
 800752c:	61e8      	streq	r0, [r5, #28]
 800752e:	bf19      	ittee	ne
 8007530:	f105 0218 	addne.w	r2, r5, #24
 8007534:	f104 0110 	addne.w	r1, r4, #16
 8007538:	f105 0220 	addeq.w	r2, r5, #32
 800753c:	f104 0118 	addeq.w	r1, r4, #24
 8007540:	e7d2      	b.n	80074e8 <_realloc_r+0x15c>
 8007542:	463a      	mov	r2, r7
 8007544:	4621      	mov	r1, r4
 8007546:	e7cf      	b.n	80074e8 <_realloc_r+0x15c>
 8007548:	4621      	mov	r1, r4
 800754a:	4638      	mov	r0, r7
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	f7ff ff03 	bl	8007358 <memmove>
 8007552:	9b01      	ldr	r3, [sp, #4]
 8007554:	e7ce      	b.n	80074f4 <_realloc_r+0x168>
 8007556:	18c7      	adds	r7, r0, r3
 8007558:	45b8      	cmp	r8, r7
 800755a:	dc20      	bgt.n	800759e <_realloc_r+0x212>
 800755c:	68cb      	ldr	r3, [r1, #12]
 800755e:	688a      	ldr	r2, [r1, #8]
 8007560:	60d3      	str	r3, [r2, #12]
 8007562:	609a      	str	r2, [r3, #8]
 8007564:	4628      	mov	r0, r5
 8007566:	68eb      	ldr	r3, [r5, #12]
 8007568:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800756c:	60d3      	str	r3, [r2, #12]
 800756e:	609a      	str	r2, [r3, #8]
 8007570:	1f32      	subs	r2, r6, #4
 8007572:	2a24      	cmp	r2, #36	; 0x24
 8007574:	d842      	bhi.n	80075fc <_realloc_r+0x270>
 8007576:	2a13      	cmp	r2, #19
 8007578:	d93e      	bls.n	80075f8 <_realloc_r+0x26c>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	60ab      	str	r3, [r5, #8]
 800757e:	6863      	ldr	r3, [r4, #4]
 8007580:	60eb      	str	r3, [r5, #12]
 8007582:	2a1b      	cmp	r2, #27
 8007584:	d824      	bhi.n	80075d0 <_realloc_r+0x244>
 8007586:	f105 0010 	add.w	r0, r5, #16
 800758a:	f104 0308 	add.w	r3, r4, #8
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	6002      	str	r2, [r0, #0]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	6042      	str	r2, [r0, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	6083      	str	r3, [r0, #8]
 800759a:	46a9      	mov	r9, r5
 800759c:	e757      	b.n	800744e <_realloc_r+0xc2>
 800759e:	4580      	cmp	r8, r0
 80075a0:	4607      	mov	r7, r0
 80075a2:	dddf      	ble.n	8007564 <_realloc_r+0x1d8>
 80075a4:	4611      	mov	r1, r2
 80075a6:	4650      	mov	r0, sl
 80075a8:	f7ff f802 	bl	80065b0 <_malloc_r>
 80075ac:	4607      	mov	r7, r0
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d0af      	beq.n	8007512 <_realloc_r+0x186>
 80075b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80075b6:	f023 0301 	bic.w	r3, r3, #1
 80075ba:	f1a0 0208 	sub.w	r2, r0, #8
 80075be:	444b      	add	r3, r9
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d11f      	bne.n	8007604 <_realloc_r+0x278>
 80075c4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80075c8:	f027 0703 	bic.w	r7, r7, #3
 80075cc:	4437      	add	r7, r6
 80075ce:	e73e      	b.n	800744e <_realloc_r+0xc2>
 80075d0:	68a3      	ldr	r3, [r4, #8]
 80075d2:	612b      	str	r3, [r5, #16]
 80075d4:	68e3      	ldr	r3, [r4, #12]
 80075d6:	616b      	str	r3, [r5, #20]
 80075d8:	2a24      	cmp	r2, #36	; 0x24
 80075da:	bf01      	itttt	eq
 80075dc:	6923      	ldreq	r3, [r4, #16]
 80075de:	61ab      	streq	r3, [r5, #24]
 80075e0:	6962      	ldreq	r2, [r4, #20]
 80075e2:	61ea      	streq	r2, [r5, #28]
 80075e4:	bf19      	ittee	ne
 80075e6:	f105 0018 	addne.w	r0, r5, #24
 80075ea:	f104 0310 	addne.w	r3, r4, #16
 80075ee:	f105 0020 	addeq.w	r0, r5, #32
 80075f2:	f104 0318 	addeq.w	r3, r4, #24
 80075f6:	e7ca      	b.n	800758e <_realloc_r+0x202>
 80075f8:	4623      	mov	r3, r4
 80075fa:	e7c8      	b.n	800758e <_realloc_r+0x202>
 80075fc:	4621      	mov	r1, r4
 80075fe:	f7ff feab 	bl	8007358 <memmove>
 8007602:	e7ca      	b.n	800759a <_realloc_r+0x20e>
 8007604:	1f32      	subs	r2, r6, #4
 8007606:	2a24      	cmp	r2, #36	; 0x24
 8007608:	d82d      	bhi.n	8007666 <_realloc_r+0x2da>
 800760a:	2a13      	cmp	r2, #19
 800760c:	d928      	bls.n	8007660 <_realloc_r+0x2d4>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	6003      	str	r3, [r0, #0]
 8007612:	6863      	ldr	r3, [r4, #4]
 8007614:	6043      	str	r3, [r0, #4]
 8007616:	2a1b      	cmp	r2, #27
 8007618:	d80e      	bhi.n	8007638 <_realloc_r+0x2ac>
 800761a:	f100 0308 	add.w	r3, r0, #8
 800761e:	f104 0208 	add.w	r2, r4, #8
 8007622:	6811      	ldr	r1, [r2, #0]
 8007624:	6019      	str	r1, [r3, #0]
 8007626:	6851      	ldr	r1, [r2, #4]
 8007628:	6059      	str	r1, [r3, #4]
 800762a:	6892      	ldr	r2, [r2, #8]
 800762c:	609a      	str	r2, [r3, #8]
 800762e:	4621      	mov	r1, r4
 8007630:	4650      	mov	r0, sl
 8007632:	f7ff fdd3 	bl	80071dc <_free_r>
 8007636:	e76c      	b.n	8007512 <_realloc_r+0x186>
 8007638:	68a3      	ldr	r3, [r4, #8]
 800763a:	6083      	str	r3, [r0, #8]
 800763c:	68e3      	ldr	r3, [r4, #12]
 800763e:	60c3      	str	r3, [r0, #12]
 8007640:	2a24      	cmp	r2, #36	; 0x24
 8007642:	bf01      	itttt	eq
 8007644:	6923      	ldreq	r3, [r4, #16]
 8007646:	6103      	streq	r3, [r0, #16]
 8007648:	6961      	ldreq	r1, [r4, #20]
 800764a:	6141      	streq	r1, [r0, #20]
 800764c:	bf19      	ittee	ne
 800764e:	f100 0310 	addne.w	r3, r0, #16
 8007652:	f104 0210 	addne.w	r2, r4, #16
 8007656:	f100 0318 	addeq.w	r3, r0, #24
 800765a:	f104 0218 	addeq.w	r2, r4, #24
 800765e:	e7e0      	b.n	8007622 <_realloc_r+0x296>
 8007660:	4603      	mov	r3, r0
 8007662:	4622      	mov	r2, r4
 8007664:	e7dd      	b.n	8007622 <_realloc_r+0x296>
 8007666:	4621      	mov	r1, r4
 8007668:	f7ff fe76 	bl	8007358 <memmove>
 800766c:	e7df      	b.n	800762e <_realloc_r+0x2a2>
 800766e:	4637      	mov	r7, r6
 8007670:	e6ed      	b.n	800744e <_realloc_r+0xc2>
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	431f      	orrs	r7, r3
 8007678:	f8c9 7004 	str.w	r7, [r9, #4]
 800767c:	6853      	ldr	r3, [r2, #4]
 800767e:	f043 0301 	orr.w	r3, r3, #1
 8007682:	6053      	str	r3, [r2, #4]
 8007684:	e6ff      	b.n	8007486 <_realloc_r+0xfa>
 8007686:	bf00      	nop
 8007688:	2000026c 	.word	0x2000026c

0800768c <_sbrk>:
 800768c:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <_sbrk+0x14>)
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	4602      	mov	r2, r0
 8007692:	b909      	cbnz	r1, 8007698 <_sbrk+0xc>
 8007694:	4903      	ldr	r1, [pc, #12]	; (80076a4 <_sbrk+0x18>)
 8007696:	6019      	str	r1, [r3, #0]
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	4402      	add	r2, r0
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	4770      	bx	lr
 80076a0:	200006d0 	.word	0x200006d0
 80076a4:	20000cec 	.word	0x20000cec

080076a8 <_init>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	bf00      	nop
 80076ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ae:	bc08      	pop	{r3}
 80076b0:	469e      	mov	lr, r3
 80076b2:	4770      	bx	lr

080076b4 <_fini>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	bf00      	nop
 80076b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ba:	bc08      	pop	{r3}
 80076bc:	469e      	mov	lr, r3
 80076be:	4770      	bx	lr
