
THL_Project_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008160  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08008330  08008330  00018330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008770  08008770  00018770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800877c  0800877c  0001877c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000067c  20000000  08008780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000998  20000680  08008dfc  00020680  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20001018  08008dfc  00021018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029d8d  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004602  00000000  00000000  0004a439  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f777  00000000  00000000  0004ea3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001610  00000000  00000000  0005e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001518  00000000  00000000  0005f7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b312  00000000  00000000  00060ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005f39  00000000  00000000  0006bff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00071f2b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a54  00000000  00000000  00071fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000df  00000000  00000000  000769fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000680 	.word	0x20000680
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008318 	.word	0x08008318

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000684 	.word	0x20000684
 800020c:	08008318 	.word	0x08008318

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2uiz>:
 8000be0:	004a      	lsls	r2, r1, #1
 8000be2:	d211      	bcs.n	8000c08 <__aeabi_d2uiz+0x28>
 8000be4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be8:	d211      	bcs.n	8000c0e <__aeabi_d2uiz+0x2e>
 8000bea:	d50d      	bpl.n	8000c08 <__aeabi_d2uiz+0x28>
 8000bec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf4:	d40e      	bmi.n	8000c14 <__aeabi_d2uiz+0x34>
 8000bf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c02:	fa23 f002 	lsr.w	r0, r3, r2
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d102      	bne.n	8000c1a <__aeabi_d2uiz+0x3a>
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	4770      	bx	lr
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b97a 	b.w	8000f2c <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	468c      	mov	ip, r1
 8000c56:	460d      	mov	r5, r1
 8000c58:	4604      	mov	r4, r0
 8000c5a:	9e08      	ldr	r6, [sp, #32]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d151      	bne.n	8000d04 <__udivmoddi4+0xb4>
 8000c60:	428a      	cmp	r2, r1
 8000c62:	4617      	mov	r7, r2
 8000c64:	d96d      	bls.n	8000d42 <__udivmoddi4+0xf2>
 8000c66:	fab2 fe82 	clz	lr, r2
 8000c6a:	f1be 0f00 	cmp.w	lr, #0
 8000c6e:	d00b      	beq.n	8000c88 <__udivmoddi4+0x38>
 8000c70:	f1ce 0c20 	rsb	ip, lr, #32
 8000c74:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c78:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c7c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c80:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c84:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c88:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c8c:	0c25      	lsrs	r5, r4, #16
 8000c8e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c92:	fa1f f987 	uxth.w	r9, r7
 8000c96:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c9a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c9e:	fb08 f309 	mul.w	r3, r8, r9
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x6c>
 8000ca6:	19ed      	adds	r5, r5, r7
 8000ca8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000cac:	f080 8123 	bcs.w	8000ef6 <__udivmoddi4+0x2a6>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	f240 8120 	bls.w	8000ef6 <__udivmoddi4+0x2a6>
 8000cb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cba:	443d      	add	r5, r7
 8000cbc:	1aed      	subs	r5, r5, r3
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cc4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ccc:	fb00 f909 	mul.w	r9, r0, r9
 8000cd0:	45a1      	cmp	r9, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x98>
 8000cd4:	19e4      	adds	r4, r4, r7
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	f080 810a 	bcs.w	8000ef2 <__udivmoddi4+0x2a2>
 8000cde:	45a1      	cmp	r9, r4
 8000ce0:	f240 8107 	bls.w	8000ef2 <__udivmoddi4+0x2a2>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	443c      	add	r4, r7
 8000ce8:	eba4 0409 	sub.w	r4, r4, r9
 8000cec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d061      	beq.n	8000dba <__udivmoddi4+0x16a>
 8000cf6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	6034      	str	r4, [r6, #0]
 8000cfe:	6073      	str	r3, [r6, #4]
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	428b      	cmp	r3, r1
 8000d06:	d907      	bls.n	8000d18 <__udivmoddi4+0xc8>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d054      	beq.n	8000db6 <__udivmoddi4+0x166>
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d12:	4608      	mov	r0, r1
 8000d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d18:	fab3 f183 	clz	r1, r3
 8000d1c:	2900      	cmp	r1, #0
 8000d1e:	f040 808e 	bne.w	8000e3e <__udivmoddi4+0x1ee>
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xdc>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80fa 	bhi.w	8000f20 <__udivmoddi4+0x2d0>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	46ac      	mov	ip, r5
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d03f      	beq.n	8000dba <__udivmoddi4+0x16a>
 8000d3a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b912      	cbnz	r2, 8000d4a <__udivmoddi4+0xfa>
 8000d44:	2701      	movs	r7, #1
 8000d46:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d4a:	fab7 fe87 	clz	lr, r7
 8000d4e:	f1be 0f00 	cmp.w	lr, #0
 8000d52:	d134      	bne.n	8000dbe <__udivmoddi4+0x16e>
 8000d54:	1beb      	subs	r3, r5, r7
 8000d56:	0c3a      	lsrs	r2, r7, #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d62:	0c25      	lsrs	r5, r4, #16
 8000d64:	fb02 3318 	mls	r3, r2, r8, r3
 8000d68:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d6c:	fb0c f308 	mul.w	r3, ip, r8
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x134>
 8000d74:	19ed      	adds	r5, r5, r7
 8000d76:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x132>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	f200 80d1 	bhi.w	8000f24 <__udivmoddi4+0x2d4>
 8000d82:	4680      	mov	r8, r0
 8000d84:	1aed      	subs	r5, r5, r3
 8000d86:	b2a3      	uxth	r3, r4
 8000d88:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d8c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d90:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d94:	fb0c fc00 	mul.w	ip, ip, r0
 8000d98:	45a4      	cmp	ip, r4
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x15c>
 8000d9c:	19e4      	adds	r4, r4, r7
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x15a>
 8000da4:	45a4      	cmp	ip, r4
 8000da6:	f200 80b8 	bhi.w	8000f1a <__udivmoddi4+0x2ca>
 8000daa:	4618      	mov	r0, r3
 8000dac:	eba4 040c 	sub.w	r4, r4, ip
 8000db0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db4:	e79d      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1ce 0420 	rsb	r4, lr, #32
 8000dc2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000dc6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dca:	fa20 f804 	lsr.w	r8, r0, r4
 8000dce:	0c3a      	lsrs	r2, r7, #16
 8000dd0:	fa25 f404 	lsr.w	r4, r5, r4
 8000dd4:	ea48 0803 	orr.w	r8, r8, r3
 8000dd8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000ddc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000de0:	fb02 4411 	mls	r4, r2, r1, r4
 8000de4:	fa1f fc87 	uxth.w	ip, r7
 8000de8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dec:	fb01 f30c 	mul.w	r3, r1, ip
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000df6:	d909      	bls.n	8000e0c <__udivmoddi4+0x1bc>
 8000df8:	19ed      	adds	r5, r5, r7
 8000dfa:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dfe:	f080 808a 	bcs.w	8000f16 <__udivmoddi4+0x2c6>
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	f240 8087 	bls.w	8000f16 <__udivmoddi4+0x2c6>
 8000e08:	3902      	subs	r1, #2
 8000e0a:	443d      	add	r5, r7
 8000e0c:	1aeb      	subs	r3, r5, r3
 8000e0e:	fa1f f588 	uxth.w	r5, r8
 8000e12:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e16:	fb02 3310 	mls	r3, r2, r0, r3
 8000e1a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e1e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x1e6>
 8000e26:	19ed      	adds	r5, r5, r7
 8000e28:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2c:	d26f      	bcs.n	8000f0e <__udivmoddi4+0x2be>
 8000e2e:	42ab      	cmp	r3, r5
 8000e30:	d96d      	bls.n	8000f0e <__udivmoddi4+0x2be>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443d      	add	r5, r7
 8000e36:	1aeb      	subs	r3, r5, r3
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	e78f      	b.n	8000d5e <__udivmoddi4+0x10e>
 8000e3e:	f1c1 0720 	rsb	r7, r1, #32
 8000e42:	fa22 f807 	lsr.w	r8, r2, r7
 8000e46:	408b      	lsls	r3, r1
 8000e48:	fa05 f401 	lsl.w	r4, r5, r1
 8000e4c:	ea48 0303 	orr.w	r3, r8, r3
 8000e50:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e54:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e5e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e62:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e66:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e6a:	fa1f f883 	uxth.w	r8, r3
 8000e6e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e72:	fb09 f408 	mul.w	r4, r9, r8
 8000e76:	42ac      	cmp	r4, r5
 8000e78:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x244>
 8000e82:	18ed      	adds	r5, r5, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	d243      	bcs.n	8000f12 <__udivmoddi4+0x2c2>
 8000e8a:	42ac      	cmp	r4, r5
 8000e8c:	d941      	bls.n	8000f12 <__udivmoddi4+0x2c2>
 8000e8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e92:	441d      	add	r5, r3
 8000e94:	1b2d      	subs	r5, r5, r4
 8000e96:	fa1f fe8e 	uxth.w	lr, lr
 8000e9a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e9e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ea2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ea6:	fb00 f808 	mul.w	r8, r0, r8
 8000eaa:	45a0      	cmp	r8, r4
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x26e>
 8000eae:	18e4      	adds	r4, r4, r3
 8000eb0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000eb4:	d229      	bcs.n	8000f0a <__udivmoddi4+0x2ba>
 8000eb6:	45a0      	cmp	r8, r4
 8000eb8:	d927      	bls.n	8000f0a <__udivmoddi4+0x2ba>
 8000eba:	3802      	subs	r0, #2
 8000ebc:	441c      	add	r4, r3
 8000ebe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec2:	eba4 0408 	sub.w	r4, r4, r8
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	454c      	cmp	r4, r9
 8000ecc:	46c6      	mov	lr, r8
 8000ece:	464d      	mov	r5, r9
 8000ed0:	d315      	bcc.n	8000efe <__udivmoddi4+0x2ae>
 8000ed2:	d012      	beq.n	8000efa <__udivmoddi4+0x2aa>
 8000ed4:	b156      	cbz	r6, 8000eec <__udivmoddi4+0x29c>
 8000ed6:	ebba 030e 	subs.w	r3, sl, lr
 8000eda:	eb64 0405 	sbc.w	r4, r4, r5
 8000ede:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee2:	40cb      	lsrs	r3, r1
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	40cc      	lsrs	r4, r1
 8000ee8:	6037      	str	r7, [r6, #0]
 8000eea:	6074      	str	r4, [r6, #4]
 8000eec:	2100      	movs	r1, #0
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	e6f8      	b.n	8000ce8 <__udivmoddi4+0x98>
 8000ef6:	4690      	mov	r8, r2
 8000ef8:	e6e0      	b.n	8000cbc <__udivmoddi4+0x6c>
 8000efa:	45c2      	cmp	sl, r8
 8000efc:	d2ea      	bcs.n	8000ed4 <__udivmoddi4+0x284>
 8000efe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f02:	eb69 0503 	sbc.w	r5, r9, r3
 8000f06:	3801      	subs	r0, #1
 8000f08:	e7e4      	b.n	8000ed4 <__udivmoddi4+0x284>
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	e7d7      	b.n	8000ebe <__udivmoddi4+0x26e>
 8000f0e:	4640      	mov	r0, r8
 8000f10:	e791      	b.n	8000e36 <__udivmoddi4+0x1e6>
 8000f12:	4681      	mov	r9, r0
 8000f14:	e7be      	b.n	8000e94 <__udivmoddi4+0x244>
 8000f16:	4601      	mov	r1, r0
 8000f18:	e778      	b.n	8000e0c <__udivmoddi4+0x1bc>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	443c      	add	r4, r7
 8000f1e:	e745      	b.n	8000dac <__udivmoddi4+0x15c>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e708      	b.n	8000d36 <__udivmoddi4+0xe6>
 8000f24:	f1a8 0802 	sub.w	r8, r8, #2
 8000f28:	443d      	add	r5, r7
 8000f2a:	e72b      	b.n	8000d84 <__udivmoddi4+0x134>

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b510      	push	{r4, lr}
 8000f32:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_InitTick+0x40>)
 8000f36:	7818      	ldrb	r0, [r3, #0]
 8000f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f40:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <HAL_InitTick+0x44>)
 8000f42:	6810      	ldr	r0, [r2, #0]
 8000f44:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f48:	f000 fa20 	bl	800138c <HAL_SYSTICK_Config>
 8000f4c:	b968      	cbnz	r0, 8000f6a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	2c0f      	cmp	r4, #15
 8000f50:	d901      	bls.n	8000f56 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f52:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000f54:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f56:	2200      	movs	r2, #0
 8000f58:	4621      	mov	r1, r4
 8000f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5e:	f000 f9d7 	bl	8001310 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_InitTick+0x48>)
 8000f64:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000f66:	2000      	movs	r0, #0
 8000f68:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_Init>:
{
 8000f7c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_Init+0x30>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f8e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f96:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 f9a7 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff ffc6 	bl	8000f30 <HAL_InitTick>
  HAL_MspInit();
 8000fa4:	f003 fa18 	bl	80043d8 <HAL_MspInit>
}
 8000fa8:	2000      	movs	r0, #0
 8000faa:	bd08      	pop	{r3, pc}
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <HAL_IncTick+0x10>)
 8000fb2:	6811      	ldr	r1, [r2, #0]
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_IncTick+0x14>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	440b      	add	r3, r1
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200006f0 	.word	0x200006f0
 8000fc4:	20000000 	.word	0x20000000

08000fc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fc8:	4b01      	ldr	r3, [pc, #4]	; (8000fd0 <HAL_GetTick+0x8>)
 8000fca:	6818      	ldr	r0, [r3, #0]
}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200006f0 	.word	0x200006f0

08000fd4 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000fd4:	4b49      	ldr	r3, [pc, #292]	; (80010fc <ADC_Init+0x128>)
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000fdc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	6841      	ldr	r1, [r0, #4]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fe6:	6802      	ldr	r2, [r0, #0]
 8000fe8:	6853      	ldr	r3, [r2, #4]
 8000fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fee:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ff0:	6802      	ldr	r2, [r0, #0]
 8000ff2:	6853      	ldr	r3, [r2, #4]
 8000ff4:	6901      	ldr	r1, [r0, #16]
 8000ff6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000ffa:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ffc:	6802      	ldr	r2, [r0, #0]
 8000ffe:	6853      	ldr	r3, [r2, #4]
 8001000:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001004:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001006:	6802      	ldr	r2, [r0, #0]
 8001008:	6853      	ldr	r3, [r2, #4]
 800100a:	6881      	ldr	r1, [r0, #8]
 800100c:	430b      	orrs	r3, r1
 800100e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001010:	6802      	ldr	r2, [r0, #0]
 8001012:	6893      	ldr	r3, [r2, #8]
 8001014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001018:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800101a:	6802      	ldr	r2, [r0, #0]
 800101c:	6893      	ldr	r3, [r2, #8]
 800101e:	68c1      	ldr	r1, [r0, #12]
 8001020:	430b      	orrs	r3, r1
 8001022:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001024:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001026:	4b36      	ldr	r3, [pc, #216]	; (8001100 <ADC_Init+0x12c>)
 8001028:	429a      	cmp	r2, r3
 800102a:	d049      	beq.n	80010c0 <ADC_Init+0xec>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800102c:	6802      	ldr	r2, [r0, #0]
 800102e:	6893      	ldr	r3, [r2, #8]
 8001030:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001034:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001036:	6802      	ldr	r2, [r0, #0]
 8001038:	6893      	ldr	r3, [r2, #8]
 800103a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800103c:	430b      	orrs	r3, r1
 800103e:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001040:	6802      	ldr	r2, [r0, #0]
 8001042:	6893      	ldr	r3, [r2, #8]
 8001044:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001048:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800104a:	6802      	ldr	r2, [r0, #0]
 800104c:	6893      	ldr	r3, [r2, #8]
 800104e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001050:	430b      	orrs	r3, r1
 8001052:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001054:	6802      	ldr	r2, [r0, #0]
 8001056:	6893      	ldr	r3, [r2, #8]
 8001058:	f023 0302 	bic.w	r3, r3, #2
 800105c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800105e:	6802      	ldr	r2, [r0, #0]
 8001060:	6893      	ldr	r3, [r2, #8]
 8001062:	6981      	ldr	r1, [r0, #24]
 8001064:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001068:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800106a:	6a03      	ldr	r3, [r0, #32]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d132      	bne.n	80010d6 <ADC_Init+0x102>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001070:	6802      	ldr	r2, [r0, #0]
 8001072:	6853      	ldr	r3, [r2, #4]
 8001074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001078:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800107a:	6802      	ldr	r2, [r0, #0]
 800107c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800107e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001082:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001084:	6801      	ldr	r1, [r0, #0]
 8001086:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001088:	69c2      	ldr	r2, [r0, #28]
 800108a:	3a01      	subs	r2, #1
 800108c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001090:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001092:	6802      	ldr	r2, [r0, #0]
 8001094:	6893      	ldr	r3, [r2, #8]
 8001096:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800109a:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800109c:	6802      	ldr	r2, [r0, #0]
 800109e:	6893      	ldr	r3, [r2, #8]
 80010a0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80010a2:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80010a6:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010a8:	6802      	ldr	r2, [r0, #0]
 80010aa:	6893      	ldr	r3, [r2, #8]
 80010ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010b0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010b2:	6802      	ldr	r2, [r0, #0]
 80010b4:	6893      	ldr	r3, [r2, #8]
 80010b6:	6941      	ldr	r1, [r0, #20]
 80010b8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80010bc:	6093      	str	r3, [r2, #8]
 80010be:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010c0:	6802      	ldr	r2, [r0, #0]
 80010c2:	6893      	ldr	r3, [r2, #8]
 80010c4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80010c8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010ca:	6802      	ldr	r2, [r0, #0]
 80010cc:	6893      	ldr	r3, [r2, #8]
 80010ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80010d2:	6093      	str	r3, [r2, #8]
 80010d4:	e7be      	b.n	8001054 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010d6:	6802      	ldr	r2, [r0, #0]
 80010d8:	6853      	ldr	r3, [r2, #4]
 80010da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010de:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010e0:	6802      	ldr	r2, [r0, #0]
 80010e2:	6853      	ldr	r3, [r2, #4]
 80010e4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010e8:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010ea:	6801      	ldr	r1, [r0, #0]
 80010ec:	684b      	ldr	r3, [r1, #4]
 80010ee:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80010f0:	3a01      	subs	r2, #1
 80010f2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80010f6:	604b      	str	r3, [r1, #4]
 80010f8:	e7bf      	b.n	800107a <ADC_Init+0xa6>
 80010fa:	bf00      	nop
 80010fc:	40012300 	.word	0x40012300
 8001100:	0f000001 	.word	0x0f000001

08001104 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001104:	b330      	cbz	r0, 8001154 <HAL_ADC_Init+0x50>
{
 8001106:	b510      	push	{r4, lr}
 8001108:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800110a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800110c:	b143      	cbz	r3, 8001120 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800110e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001110:	f013 0f10 	tst.w	r3, #16
 8001114:	d00a      	beq.n	800112c <HAL_ADC_Init+0x28>
    tmp_hal_status = HAL_ERROR;
 8001116:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001118:	2300      	movs	r3, #0
 800111a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800111e:	bd10      	pop	{r4, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001120:	6443      	str	r3, [r0, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001122:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001126:	f003 f973 	bl	8004410 <HAL_ADC_MspInit>
 800112a:	e7f0      	b.n	800110e <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800112c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800112e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001132:	f023 0302 	bic.w	r3, r3, #2
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff ff49 	bl	8000fd4 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001142:	2000      	movs	r0, #0
 8001144:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001148:	f023 0303 	bic.w	r3, r3, #3
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6423      	str	r3, [r4, #64]	; 0x40
 8001152:	e7e1      	b.n	8001118 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001154:	2001      	movs	r0, #1
 8001156:	4770      	bx	lr

08001158 <HAL_ADC_ConfigChannel>:
{
 8001158:	b430      	push	{r4, r5}
 800115a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001160:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001164:	2b01      	cmp	r3, #1
 8001166:	f000 80b5 	beq.w	80012d4 <HAL_ADC_ConfigChannel+0x17c>
 800116a:	2301      	movs	r3, #1
 800116c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001170:	680b      	ldr	r3, [r1, #0]
 8001172:	2b09      	cmp	r3, #9
 8001174:	d93e      	bls.n	80011f4 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001176:	6805      	ldr	r5, [r0, #0]
 8001178:	68ea      	ldr	r2, [r5, #12]
 800117a:	b29b      	uxth	r3, r3
 800117c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001180:	3b1e      	subs	r3, #30
 8001182:	2407      	movs	r4, #7
 8001184:	fa04 f303 	lsl.w	r3, r4, r3
 8001188:	ea22 0303 	bic.w	r3, r2, r3
 800118c:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800118e:	6805      	ldr	r5, [r0, #0]
 8001190:	68ea      	ldr	r2, [r5, #12]
 8001192:	688c      	ldr	r4, [r1, #8]
 8001194:	880b      	ldrh	r3, [r1, #0]
 8001196:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800119a:	3b1e      	subs	r3, #30
 800119c:	fa04 f303 	lsl.w	r3, r4, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 80011a4:	684b      	ldr	r3, [r1, #4]
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d83a      	bhi.n	8001220 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011aa:	6805      	ldr	r5, [r0, #0]
 80011ac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80011ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011b2:	3b05      	subs	r3, #5
 80011b4:	241f      	movs	r4, #31
 80011b6:	fa04 f303 	lsl.w	r3, r4, r3
 80011ba:	ea22 0303 	bic.w	r3, r2, r3
 80011be:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011c0:	6805      	ldr	r5, [r0, #0]
 80011c2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80011c4:	684b      	ldr	r3, [r1, #4]
 80011c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011ca:	3b05      	subs	r3, #5
 80011cc:	880c      	ldrh	r4, [r1, #0]
 80011ce:	fa04 f303 	lsl.w	r3, r4, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011d6:	6802      	ldr	r2, [r0, #0]
 80011d8:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <HAL_ADC_ConfigChannel+0x180>)
 80011da:	429a      	cmp	r2, r3
 80011dc:	d050      	beq.n	8001280 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011de:	6802      	ldr	r2, [r0, #0]
 80011e0:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_ADC_ConfigChannel+0x180>)
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d055      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 80011e6:	2300      	movs	r3, #0
 80011e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80011ec:	4618      	mov	r0, r3
}
 80011ee:	b002      	add	sp, #8
 80011f0:	bc30      	pop	{r4, r5}
 80011f2:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011f4:	6805      	ldr	r5, [r0, #0]
 80011f6:	692a      	ldr	r2, [r5, #16]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011fe:	2407      	movs	r4, #7
 8001200:	fa04 f303 	lsl.w	r3, r4, r3
 8001204:	ea22 0303 	bic.w	r3, r2, r3
 8001208:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800120a:	6805      	ldr	r5, [r0, #0]
 800120c:	692a      	ldr	r2, [r5, #16]
 800120e:	688c      	ldr	r4, [r1, #8]
 8001210:	880b      	ldrh	r3, [r1, #0]
 8001212:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001216:	fa04 f303 	lsl.w	r3, r4, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	612b      	str	r3, [r5, #16]
 800121e:	e7c1      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8001220:	2b0c      	cmp	r3, #12
 8001222:	d816      	bhi.n	8001252 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001224:	6805      	ldr	r5, [r0, #0]
 8001226:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001228:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800122c:	3b23      	subs	r3, #35	; 0x23
 800122e:	241f      	movs	r4, #31
 8001230:	fa04 f303 	lsl.w	r3, r4, r3
 8001234:	ea22 0303 	bic.w	r3, r2, r3
 8001238:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800123a:	6805      	ldr	r5, [r0, #0]
 800123c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800123e:	684b      	ldr	r3, [r1, #4]
 8001240:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001244:	3b23      	subs	r3, #35	; 0x23
 8001246:	880c      	ldrh	r4, [r1, #0]
 8001248:	fa04 f303 	lsl.w	r3, r4, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	632b      	str	r3, [r5, #48]	; 0x30
 8001250:	e7c1      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001252:	6805      	ldr	r5, [r0, #0]
 8001254:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001256:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800125a:	3b41      	subs	r3, #65	; 0x41
 800125c:	241f      	movs	r4, #31
 800125e:	fa04 f303 	lsl.w	r3, r4, r3
 8001262:	ea22 0303 	bic.w	r3, r2, r3
 8001266:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001268:	6805      	ldr	r5, [r0, #0]
 800126a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800126c:	684b      	ldr	r3, [r1, #4]
 800126e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001272:	3b41      	subs	r3, #65	; 0x41
 8001274:	880c      	ldrh	r4, [r1, #0]
 8001276:	fa04 f303 	lsl.w	r3, r4, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800127e:	e7aa      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001280:	680b      	ldr	r3, [r1, #0]
 8001282:	2b12      	cmp	r3, #18
 8001284:	d1ab      	bne.n	80011de <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <HAL_ADC_ConfigChannel+0x184>)
 8001288:	6853      	ldr	r3, [r2, #4]
 800128a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800128e:	6053      	str	r3, [r2, #4]
 8001290:	e7a5      	b.n	80011de <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001292:	680b      	ldr	r3, [r1, #0]
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <HAL_ADC_ConfigChannel+0x188>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d001      	beq.n	800129e <HAL_ADC_ConfigChannel+0x146>
 800129a:	2b11      	cmp	r3, #17
 800129c:	d1a3      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <HAL_ADC_ConfigChannel+0x184>)
 80012a0:	6853      	ldr	r3, [r2, #4]
 80012a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012a6:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012a8:	680a      	ldr	r2, [r1, #0]
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_ADC_ConfigChannel+0x188>)
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d19a      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_ADC_ConfigChannel+0x18c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <HAL_ADC_ConfigChannel+0x190>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012c0:	005a      	lsls	r2, r3, #1
 80012c2:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 80012c4:	e002      	b.n	80012cc <HAL_ADC_ConfigChannel+0x174>
        counter--;
 80012c6:	9b01      	ldr	r3, [sp, #4]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80012cc:	9b01      	ldr	r3, [sp, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f9      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x16e>
 80012d2:	e788      	b.n	80011e6 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 80012d4:	2002      	movs	r0, #2
 80012d6:	e78a      	b.n	80011ee <HAL_ADC_ConfigChannel+0x96>
 80012d8:	40012000 	.word	0x40012000
 80012dc:	40012300 	.word	0x40012300
 80012e0:	10000012 	.word	0x10000012
 80012e4:	20000008 	.word	0x20000008
 80012e8:	431bde83 	.word	0x431bde83

080012ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012f4:	041b      	lsls	r3, r3, #16
 80012f6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80012f8:	0200      	lsls	r0, r0, #8
 80012fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fe:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001300:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001304:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001308:	60d0      	str	r0, [r2, #12]
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001310:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_NVIC_SetPriority+0x5c>)
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131a:	f1c3 0407 	rsb	r4, r3, #7
 800131e:	2c04      	cmp	r4, #4
 8001320:	bf28      	it	cs
 8001322:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001324:	1d1d      	adds	r5, r3, #4
 8001326:	2d06      	cmp	r5, #6
 8001328:	d917      	bls.n	800135a <HAL_NVIC_SetPriority+0x4a>
 800132a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	2501      	movs	r5, #1
 800132e:	fa05 f404 	lsl.w	r4, r5, r4
 8001332:	3c01      	subs	r4, #1
 8001334:	4021      	ands	r1, r4
 8001336:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	fa05 f303 	lsl.w	r3, r5, r3
 800133c:	3b01      	subs	r3, #1
 800133e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001342:	2800      	cmp	r0, #0
 8001344:	db0b      	blt.n	800135e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	0109      	lsls	r1, r1, #4
 8001348:	b2c9      	uxtb	r1, r1
 800134a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800134e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001352:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001356:	bc30      	pop	{r4, r5}
 8001358:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	2300      	movs	r3, #0
 800135c:	e7e6      	b.n	800132c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	f000 000f 	and.w	r0, r0, #15
 8001362:	0109      	lsls	r1, r1, #4
 8001364:	b2c9      	uxtb	r1, r1
 8001366:	4b02      	ldr	r3, [pc, #8]	; (8001370 <HAL_NVIC_SetPriority+0x60>)
 8001368:	5419      	strb	r1, [r3, r0]
 800136a:	e7f4      	b.n	8001356 <HAL_NVIC_SetPriority+0x46>
 800136c:	e000ed00 	.word	0xe000ed00
 8001370:	e000ed14 	.word	0xe000ed14

08001374 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001374:	0942      	lsrs	r2, r0, #5
 8001376:	f000 001f 	and.w	r0, r0, #31
 800137a:	2301      	movs	r3, #1
 800137c:	fa03 f000 	lsl.w	r0, r3, r0
 8001380:	4b01      	ldr	r3, [pc, #4]	; (8001388 <HAL_NVIC_EnableIRQ+0x14>)
 8001382:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100

0800138c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	3801      	subs	r0, #1
 800138e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001392:	d20a      	bcs.n	80013aa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_SYSTICK_Config+0x24>)
 8001396:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	21f0      	movs	r1, #240	; 0xf0
 800139a:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_SYSTICK_Config+0x28>)
 800139c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	2000      	movs	r0, #0
 80013a2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013b8:	6802      	ldr	r2, [r0, #0]
 80013ba:	b2d3      	uxtb	r3, r2
 80013bc:	3b10      	subs	r3, #16
 80013be:	490b      	ldr	r1, [pc, #44]	; (80013ec <DMA_CalcBaseAndBitshift+0x34>)
 80013c0:	fba1 1303 	umull	r1, r3, r1, r3
 80013c4:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013c6:	490a      	ldr	r1, [pc, #40]	; (80013f0 <DMA_CalcBaseAndBitshift+0x38>)
 80013c8:	5cc9      	ldrb	r1, [r1, r3]
 80013ca:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d806      	bhi.n	80013de <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013d0:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80013d4:	f022 0203 	bic.w	r2, r2, #3
 80013d8:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80013da:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80013dc:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013de:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80013e2:	f022 0203 	bic.w	r2, r2, #3
 80013e6:	3204      	adds	r2, #4
 80013e8:	6582      	str	r2, [r0, #88]	; 0x58
 80013ea:	e7f6      	b.n	80013da <DMA_CalcBaseAndBitshift+0x22>
 80013ec:	aaaaaaab 	.word	0xaaaaaaab
 80013f0:	08008330 	.word	0x08008330

080013f4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013f6:	6982      	ldr	r2, [r0, #24]
 80013f8:	b992      	cbnz	r2, 8001420 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d00a      	beq.n	8001414 <DMA_CheckFifoParam+0x20>
 80013fe:	b11b      	cbz	r3, 8001408 <DMA_CheckFifoParam+0x14>
 8001400:	2b02      	cmp	r3, #2
 8001402:	d001      	beq.n	8001408 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001404:	2000      	movs	r0, #0
 8001406:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001408:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800140a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800140e:	d12c      	bne.n	800146a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001410:	2000      	movs	r0, #0
 8001412:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001414:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001416:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800141a:	d028      	beq.n	800146e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800141c:	2000      	movs	r0, #0
 800141e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001420:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001424:	d005      	beq.n	8001432 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001426:	2b02      	cmp	r3, #2
 8001428:	d929      	bls.n	800147e <DMA_CheckFifoParam+0x8a>
 800142a:	2b03      	cmp	r3, #3
 800142c:	d015      	beq.n	800145a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800142e:	2000      	movs	r0, #0
 8001430:	4770      	bx	lr
    switch (tmp)
 8001432:	2b03      	cmp	r3, #3
 8001434:	d803      	bhi.n	800143e <DMA_CheckFifoParam+0x4a>
 8001436:	e8df f003 	tbb	[pc, r3]
 800143a:	041c      	.short	0x041c
 800143c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800143e:	2000      	movs	r0, #0
 8001440:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001442:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001444:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001448:	d115      	bne.n	8001476 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800144a:	2000      	movs	r0, #0
 800144c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800144e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001450:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001454:	d011      	beq.n	800147a <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8001456:	2000      	movs	r0, #0
 8001458:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800145a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800145c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001460:	d001      	beq.n	8001466 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8001462:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001464:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8001466:	2000      	movs	r0, #0
 8001468:	4770      	bx	lr
        status = HAL_ERROR;
 800146a:	2001      	movs	r0, #1
 800146c:	4770      	bx	lr
        status = HAL_ERROR;
 800146e:	2001      	movs	r0, #1
 8001470:	4770      	bx	lr
      status = HAL_ERROR;
 8001472:	2001      	movs	r0, #1
 8001474:	4770      	bx	lr
        status = HAL_ERROR;
 8001476:	2001      	movs	r0, #1
 8001478:	4770      	bx	lr
        status = HAL_ERROR;
 800147a:	2001      	movs	r0, #1
 800147c:	4770      	bx	lr
      status = HAL_ERROR;
 800147e:	2001      	movs	r0, #1
 8001480:	4770      	bx	lr
	...

08001484 <HAL_DMA_Init>:
{
 8001484:	b570      	push	{r4, r5, r6, lr}
 8001486:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff fd9e 	bl	8000fc8 <HAL_GetTick>
  if(hdma == NULL)
 800148c:	2c00      	cmp	r4, #0
 800148e:	d05d      	beq.n	800154c <HAL_DMA_Init+0xc8>
 8001490:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8001492:	2300      	movs	r3, #0
 8001494:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001498:	2302      	movs	r3, #2
 800149a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800149e:	6822      	ldr	r2, [r4, #0]
 80014a0:	6813      	ldr	r3, [r2, #0]
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	f012 0f01 	tst.w	r2, #1
 80014b0:	d00a      	beq.n	80014c8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014b2:	f7ff fd89 	bl	8000fc8 <HAL_GetTick>
 80014b6:	1b40      	subs	r0, r0, r5
 80014b8:	2805      	cmp	r0, #5
 80014ba:	d9f5      	bls.n	80014a8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014bc:	2320      	movs	r3, #32
 80014be:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014c0:	2003      	movs	r0, #3
 80014c2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80014c6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80014c8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014ca:	4921      	ldr	r1, [pc, #132]	; (8001550 <HAL_DMA_Init+0xcc>)
 80014cc:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ce:	6862      	ldr	r2, [r4, #4]
 80014d0:	68a0      	ldr	r0, [r4, #8]
 80014d2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d4:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d8:	6920      	ldr	r0, [r4, #16]
 80014da:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014dc:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014de:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e0:	69a0      	ldr	r0, [r4, #24]
 80014e2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e4:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e8:	6a20      	ldr	r0, [r4, #32]
 80014ea:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ec:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80014f0:	2904      	cmp	r1, #4
 80014f2:	d016      	beq.n	8001522 <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 80014f4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80014f6:	6826      	ldr	r6, [r4, #0]
 80014f8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014fa:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80014fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001500:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001502:	2b04      	cmp	r3, #4
 8001504:	d012      	beq.n	800152c <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 8001506:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff ff55 	bl	80013b8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800150e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001510:	233f      	movs	r3, #63	; 0x3f
 8001512:	4093      	lsls	r3, r2
 8001514:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001516:	2000      	movs	r0, #0
 8001518:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800151a:	2301      	movs	r3, #1
 800151c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001520:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001522:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001524:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001526:	4301      	orrs	r1, r0
 8001528:	430a      	orrs	r2, r1
 800152a:	e7e3      	b.n	80014f4 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 800152c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800152e:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001530:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0e7      	beq.n	8001506 <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff ff5c 	bl	80013f4 <DMA_CheckFifoParam>
 800153c:	2800      	cmp	r0, #0
 800153e:	d0e2      	beq.n	8001506 <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001540:	2340      	movs	r3, #64	; 0x40
 8001542:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001544:	2001      	movs	r0, #1
 8001546:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800154a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800154c:	2001      	movs	r0, #1
}
 800154e:	bd70      	pop	{r4, r5, r6, pc}
 8001550:	f010803f 	.word	0xf010803f

08001554 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001554:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d003      	beq.n	8001566 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001562:	2001      	movs	r0, #1
 8001564:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001566:	2305      	movs	r3, #5
 8001568:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800156c:	6802      	ldr	r2, [r0, #0]
 800156e:	6813      	ldr	r3, [r2, #0]
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001576:	2000      	movs	r0, #0
}
 8001578:	4770      	bx	lr
	...

0800157c <HAL_DMA_IRQHandler>:
{
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	b083      	sub	sp, #12
 8001580:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001586:	4b72      	ldr	r3, [pc, #456]	; (8001750 <HAL_DMA_IRQHandler+0x1d4>)
 8001588:	681d      	ldr	r5, [r3, #0]
 800158a:	4b72      	ldr	r3, [pc, #456]	; (8001754 <HAL_DMA_IRQHandler+0x1d8>)
 800158c:	fba3 3505 	umull	r3, r5, r3, r5
 8001590:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001592:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001594:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001596:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001598:	2308      	movs	r3, #8
 800159a:	4093      	lsls	r3, r2
 800159c:	421e      	tst	r6, r3
 800159e:	d010      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015a0:	6803      	ldr	r3, [r0, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	f012 0f04 	tst.w	r2, #4
 80015a8:	d00b      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	f022 0204 	bic.w	r2, r2, #4
 80015b0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015b2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80015b4:	2308      	movs	r3, #8
 80015b6:	4093      	lsls	r3, r2
 80015b8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80015c4:	2301      	movs	r3, #1
 80015c6:	4093      	lsls	r3, r2
 80015c8:	421e      	tst	r6, r3
 80015ca:	d009      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015cc:	6822      	ldr	r2, [r4, #0]
 80015ce:	6952      	ldr	r2, [r2, #20]
 80015d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80015d4:	d004      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015d6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80015e2:	2304      	movs	r3, #4
 80015e4:	4093      	lsls	r3, r2
 80015e6:	421e      	tst	r6, r3
 80015e8:	d009      	beq.n	80015fe <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015ea:	6822      	ldr	r2, [r4, #0]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	f012 0f02 	tst.w	r2, #2
 80015f2:	d004      	beq.n	80015fe <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015f4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001600:	2310      	movs	r3, #16
 8001602:	4093      	lsls	r3, r2
 8001604:	421e      	tst	r6, r3
 8001606:	d024      	beq.n	8001652 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001608:	6822      	ldr	r2, [r4, #0]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	f012 0f08 	tst.w	r2, #8
 8001610:	d01f      	beq.n	8001652 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001612:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800161c:	d00d      	beq.n	800163a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001624:	d104      	bne.n	8001630 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001628:	b19b      	cbz	r3, 8001652 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800162a:	4620      	mov	r0, r4
 800162c:	4798      	blx	r3
 800162e:	e010      	b.n	8001652 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001630:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001632:	b173      	cbz	r3, 8001652 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001634:	4620      	mov	r0, r4
 8001636:	4798      	blx	r3
 8001638:	e00b      	b.n	8001652 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001640:	d103      	bne.n	800164a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	f022 0208 	bic.w	r2, r2, #8
 8001648:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800164a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800164c:	b10b      	cbz	r3, 8001652 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800164e:	4620      	mov	r0, r4
 8001650:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001652:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001654:	2320      	movs	r3, #32
 8001656:	4093      	lsls	r3, r2
 8001658:	421e      	tst	r6, r3
 800165a:	d055      	beq.n	8001708 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800165c:	6822      	ldr	r2, [r4, #0]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	f012 0f10 	tst.w	r2, #16
 8001664:	d050      	beq.n	8001708 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001666:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001668:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b05      	cmp	r3, #5
 8001670:	d00e      	beq.n	8001690 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800167a:	d033      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001682:	d12a      	bne.n	80016da <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001684:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001686:	2b00      	cmp	r3, #0
 8001688:	d03e      	beq.n	8001708 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800168a:	4620      	mov	r0, r4
 800168c:	4798      	blx	r3
 800168e:	e03b      	b.n	8001708 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001690:	6822      	ldr	r2, [r4, #0]
 8001692:	6813      	ldr	r3, [r2, #0]
 8001694:	f023 0316 	bic.w	r3, r3, #22
 8001698:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	6953      	ldr	r3, [r2, #20]
 800169e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016a2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016a6:	b1a3      	cbz	r3, 80016d2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a8:	6822      	ldr	r2, [r4, #0]
 80016aa:	6813      	ldr	r3, [r2, #0]
 80016ac:	f023 0308 	bic.w	r3, r3, #8
 80016b0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016b4:	233f      	movs	r3, #63	; 0x3f
 80016b6:	4093      	lsls	r3, r2
 80016b8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80016ba:	2300      	movs	r3, #0
 80016bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80016c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d03f      	beq.n	800174c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80016cc:	4620      	mov	r0, r4
 80016ce:	4798      	blx	r3
 80016d0:	e03c      	b.n	800174c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e7      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x12c>
 80016d8:	e7eb      	b.n	80016b2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80016da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016dc:	b1a3      	cbz	r3, 8001708 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80016de:	4620      	mov	r0, r4
 80016e0:	4798      	blx	r3
 80016e2:	e011      	b.n	8001708 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80016ea:	d109      	bne.n	8001700 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	f022 0210 	bic.w	r2, r2, #16
 80016f2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80016f4:	2300      	movs	r3, #0
 80016f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001700:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001702:	b10b      	cbz	r3, 8001708 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001704:	4620      	mov	r0, r4
 8001706:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001708:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800170a:	b1fb      	cbz	r3, 800174c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800170c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800170e:	f013 0f01 	tst.w	r3, #1
 8001712:	d017      	beq.n	8001744 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001714:	2305      	movs	r3, #5
 8001716:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800171a:	6822      	ldr	r2, [r4, #0]
 800171c:	6813      	ldr	r3, [r2, #0]
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	3301      	adds	r3, #1
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	429d      	cmp	r5, r3
 800172c:	d304      	bcc.n	8001738 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f013 0f01 	tst.w	r3, #1
 8001736:	d1f5      	bne.n	8001724 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001738:	2300      	movs	r3, #0
 800173a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800173e:	2301      	movs	r3, #1
 8001740:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001744:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001746:	b10b      	cbz	r3, 800174c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001748:	4620      	mov	r0, r4
 800174a:	4798      	blx	r3
}
 800174c:	b003      	add	sp, #12
 800174e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001750:	20000008 	.word	0x20000008
 8001754:	1b4e81b5 	.word	0x1b4e81b5

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175c:	2400      	movs	r4, #0
 800175e:	e098      	b.n	8001892 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001760:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8001764:	f10e 0e08 	add.w	lr, lr, #8
 8001768:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176c:	f004 0607 	and.w	r6, r4, #7
 8001770:	00b6      	lsls	r6, r6, #2
 8001772:	270f      	movs	r7, #15
 8001774:	40b7      	lsls	r7, r6
 8001776:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800177a:	690f      	ldr	r7, [r1, #16]
 800177c:	fa07 f606 	lsl.w	r6, r7, r6
 8001780:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8001782:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8001786:	e094      	b.n	80018b2 <HAL_GPIO_Init+0x15a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001788:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800178a:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178c:	68cf      	ldr	r7, [r1, #12]
 800178e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001792:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001794:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001796:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001798:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800179c:	684e      	ldr	r6, [r1, #4]
 800179e:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80017a2:	40a6      	lsls	r6, r4
 80017a4:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80017a6:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017a8:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017aa:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ac:	688b      	ldr	r3, [r1, #8]
 80017ae:	fa03 f30e 	lsl.w	r3, r3, lr
 80017b2:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80017b4:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b6:	684b      	ldr	r3, [r1, #4]
 80017b8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80017bc:	d068      	beq.n	8001890 <HAL_GPIO_Init+0x138>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	4b51      	ldr	r3, [pc, #324]	; (8001908 <HAL_GPIO_Init+0x1b0>)
 80017c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	9b01      	ldr	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d6:	08a3      	lsrs	r3, r4, #2
 80017d8:	1c9e      	adds	r6, r3, #2
 80017da:	4a4c      	ldr	r2, [pc, #304]	; (800190c <HAL_GPIO_Init+0x1b4>)
 80017dc:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e0:	f004 0603 	and.w	r6, r4, #3
 80017e4:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80017e8:	260f      	movs	r6, #15
 80017ea:	fa06 f60e 	lsl.w	r6, r6, lr
 80017ee:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017f2:	4f47      	ldr	r7, [pc, #284]	; (8001910 <HAL_GPIO_Init+0x1b8>)
 80017f4:	42b8      	cmp	r0, r7
 80017f6:	d079      	beq.n	80018ec <HAL_GPIO_Init+0x194>
 80017f8:	4e46      	ldr	r6, [pc, #280]	; (8001914 <HAL_GPIO_Init+0x1bc>)
 80017fa:	42b0      	cmp	r0, r6
 80017fc:	d078      	beq.n	80018f0 <HAL_GPIO_Init+0x198>
 80017fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001802:	42b0      	cmp	r0, r6
 8001804:	d076      	beq.n	80018f4 <HAL_GPIO_Init+0x19c>
 8001806:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800180a:	42b0      	cmp	r0, r6
 800180c:	d074      	beq.n	80018f8 <HAL_GPIO_Init+0x1a0>
 800180e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001812:	42b0      	cmp	r0, r6
 8001814:	d072      	beq.n	80018fc <HAL_GPIO_Init+0x1a4>
 8001816:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800181a:	42b0      	cmp	r0, r6
 800181c:	d070      	beq.n	8001900 <HAL_GPIO_Init+0x1a8>
 800181e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001822:	42b0      	cmp	r0, r6
 8001824:	d060      	beq.n	80018e8 <HAL_GPIO_Init+0x190>
 8001826:	2607      	movs	r6, #7
 8001828:	fa06 f60e 	lsl.w	r6, r6, lr
 800182c:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800182e:	3302      	adds	r3, #2
 8001830:	4e36      	ldr	r6, [pc, #216]	; (800190c <HAL_GPIO_Init+0x1b4>)
 8001832:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_GPIO_Init+0x1c0>)
 8001838:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 800183a:	43eb      	mvns	r3, r5
 800183c:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001840:	684f      	ldr	r7, [r1, #4]
 8001842:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001846:	d001      	beq.n	800184c <HAL_GPIO_Init+0xf4>
        {
          temp |= iocurrent;
 8001848:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 800184c:	4a32      	ldr	r2, [pc, #200]	; (8001918 <HAL_GPIO_Init+0x1c0>)
 800184e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001850:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001852:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001856:	684f      	ldr	r7, [r1, #4]
 8001858:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800185c:	d001      	beq.n	8001862 <HAL_GPIO_Init+0x10a>
        {
          temp |= iocurrent;
 800185e:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8001862:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <HAL_GPIO_Init+0x1c0>)
 8001864:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001866:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001868:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800186c:	684f      	ldr	r7, [r1, #4]
 800186e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001872:	d001      	beq.n	8001878 <HAL_GPIO_Init+0x120>
        {
          temp |= iocurrent;
 8001874:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8001878:	4a27      	ldr	r2, [pc, #156]	; (8001918 <HAL_GPIO_Init+0x1c0>)
 800187a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800187c:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800187e:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001880:	684e      	ldr	r6, [r1, #4]
 8001882:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001886:	d001      	beq.n	800188c <HAL_GPIO_Init+0x134>
        {
          temp |= iocurrent;
 8001888:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 800188c:	4a22      	ldr	r2, [pc, #136]	; (8001918 <HAL_GPIO_Init+0x1c0>)
 800188e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001890:	3401      	adds	r4, #1
 8001892:	2c0f      	cmp	r4, #15
 8001894:	d836      	bhi.n	8001904 <HAL_GPIO_Init+0x1ac>
    ioposition = 0x01U << position;
 8001896:	2301      	movs	r3, #1
 8001898:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	680a      	ldr	r2, [r1, #0]
 800189c:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 80018a0:	42ab      	cmp	r3, r5
 80018a2:	d1f5      	bne.n	8001890 <HAL_GPIO_Init+0x138>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a4:	684a      	ldr	r2, [r1, #4]
 80018a6:	2a02      	cmp	r2, #2
 80018a8:	f43f af5a 	beq.w	8001760 <HAL_GPIO_Init+0x8>
 80018ac:	2a12      	cmp	r2, #18
 80018ae:	f43f af57 	beq.w	8001760 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80018b2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b4:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f20e 	lsl.w	r2, r2, lr
 80018be:	43d2      	mvns	r2, r2
 80018c0:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c2:	684f      	ldr	r7, [r1, #4]
 80018c4:	f007 0703 	and.w	r7, r7, #3
 80018c8:	fa07 f70e 	lsl.w	r7, r7, lr
 80018cc:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80018ce:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018d0:	684e      	ldr	r6, [r1, #4]
 80018d2:	1e77      	subs	r7, r6, #1
 80018d4:	2f01      	cmp	r7, #1
 80018d6:	f67f af57 	bls.w	8001788 <HAL_GPIO_Init+0x30>
 80018da:	2e11      	cmp	r6, #17
 80018dc:	f43f af54 	beq.w	8001788 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e0:	2e12      	cmp	r6, #18
 80018e2:	f47f af61 	bne.w	80017a8 <HAL_GPIO_Init+0x50>
 80018e6:	e74f      	b.n	8001788 <HAL_GPIO_Init+0x30>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e8:	2606      	movs	r6, #6
 80018ea:	e79d      	b.n	8001828 <HAL_GPIO_Init+0xd0>
 80018ec:	2600      	movs	r6, #0
 80018ee:	e79b      	b.n	8001828 <HAL_GPIO_Init+0xd0>
 80018f0:	2601      	movs	r6, #1
 80018f2:	e799      	b.n	8001828 <HAL_GPIO_Init+0xd0>
 80018f4:	2602      	movs	r6, #2
 80018f6:	e797      	b.n	8001828 <HAL_GPIO_Init+0xd0>
 80018f8:	2603      	movs	r6, #3
 80018fa:	e795      	b.n	8001828 <HAL_GPIO_Init+0xd0>
 80018fc:	2604      	movs	r6, #4
 80018fe:	e793      	b.n	8001828 <HAL_GPIO_Init+0xd0>
 8001900:	2605      	movs	r6, #5
 8001902:	e791      	b.n	8001828 <HAL_GPIO_Init+0xd0>
      }
    }
  }
}
 8001904:	b003      	add	sp, #12
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40013800 	.word	0x40013800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800191c:	b912      	cbnz	r2, 8001924 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800191e:	0409      	lsls	r1, r1, #16
 8001920:	6181      	str	r1, [r0, #24]
 8001922:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001924:	6181      	str	r1, [r0, #24]
 8001926:	4770      	bx	lr

08001928 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001928:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b40      	cmp	r3, #64	; 0x40
 8001930:	d013      	beq.n	800195a <I2C_Master_SB+0x32>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001932:	6903      	ldr	r3, [r0, #16]
 8001934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001938:	d01e      	beq.n	8001978 <I2C_Master_SB+0x50>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 800193a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800193c:	2b00      	cmp	r3, #0
 800193e:	d02d      	beq.n	800199c <I2C_Master_SB+0x74>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
      }
      else if(hi2c->EventCount == 1U)
 8001940:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001942:	2b01      	cmp	r3, #1
 8001944:	d133      	bne.n	80019ae <I2C_Master_SB+0x86>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001946:	6802      	ldr	r2, [r0, #0]
 8001948:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800194a:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800194e:	f003 0306 	and.w	r3, r3, #6
 8001952:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8001956:	6113      	str	r3, [r2, #16]
 8001958:	e029      	b.n	80019ae <I2C_Master_SB+0x86>
    if(hi2c->EventCount == 0U)
 800195a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800195c:	b92b      	cbnz	r3, 800196a <I2C_Master_SB+0x42>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800195e:	6802      	ldr	r2, [r0, #0]
 8001960:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001962:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001966:	6113      	str	r3, [r2, #16]
 8001968:	e021      	b.n	80019ae <I2C_Master_SB+0x86>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800196a:	6802      	ldr	r2, [r0, #0]
 800196c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	6113      	str	r3, [r2, #16]
 8001976:	e01a      	b.n	80019ae <I2C_Master_SB+0x86>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001978:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b21      	cmp	r3, #33	; 0x21
 8001980:	d006      	beq.n	8001990 <I2C_Master_SB+0x68>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001982:	6802      	ldr	r2, [r0, #0]
 8001984:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	6113      	str	r3, [r2, #16]
 800198e:	e00e      	b.n	80019ae <I2C_Master_SB+0x86>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001990:	6802      	ldr	r2, [r0, #0]
 8001992:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001994:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001998:	6113      	str	r3, [r2, #16]
 800199a:	e008      	b.n	80019ae <I2C_Master_SB+0x86>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800199c:	6802      	ldr	r2, [r0, #0]
 800199e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80019a0:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80019a4:	f003 0306 	and.w	r3, r3, #6
 80019a8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80019ac:	6113      	str	r3, [r2, #16]
      }
    }
  }

  return HAL_OK;
}
 80019ae:	2000      	movs	r0, #0
 80019b0:	4770      	bx	lr

080019b2 <I2C_Master_ADD10>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80019b2:	6802      	ldr	r2, [r0, #0]
 80019b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
}
 80019ba:	2000      	movs	r0, #0
 80019bc:	4770      	bx	lr

080019be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80019be:	b410      	push	{r4}
 80019c0:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 80019c2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80019c6:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 80019ca:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80019cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b22      	cmp	r3, #34	; 0x22
 80019d4:	d00c      	beq.n	80019f0 <I2C_Master_ADDR+0x32>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d6:	2300      	movs	r3, #0
 80019d8:	9309      	str	r3, [sp, #36]	; 0x24
 80019da:	6803      	ldr	r3, [r0, #0]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	9209      	str	r2, [sp, #36]	; 0x24
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	9309      	str	r3, [sp, #36]	; 0x24
 80019e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  return HAL_OK;
}
 80019e6:	2000      	movs	r0, #0
 80019e8:	b00b      	add	sp, #44	; 0x2c
 80019ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019ee:	4770      	bx	lr
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80019f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80019f2:	b90b      	cbnz	r3, 80019f8 <I2C_Master_ADDR+0x3a>
 80019f4:	2a40      	cmp	r2, #64	; 0x40
 80019f6:	d017      	beq.n	8001a28 <I2C_Master_ADDR+0x6a>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80019f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80019fa:	b91b      	cbnz	r3, 8001a04 <I2C_Master_ADDR+0x46>
 80019fc:	6903      	ldr	r3, [r0, #16]
 80019fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a02:	d019      	beq.n	8001a38 <I2C_Master_ADDR+0x7a>
      if(hi2c->XferCount == 0U)
 8001a04:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d125      	bne.n	8001a58 <I2C_Master_ADDR+0x9a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	6803      	ldr	r3, [r0, #0]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	9202      	str	r2, [sp, #8]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	9202      	str	r2, [sp, #8]
 8001a18:	9a02      	ldr	r2, [sp, #8]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a20:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	6503      	str	r3, [r0, #80]	; 0x50
 8001a26:	e7de      	b.n	80019e6 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	6803      	ldr	r3, [r0, #0]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	9b00      	ldr	r3, [sp, #0]
 8001a36:	e7d6      	b.n	80019e6 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	6803      	ldr	r3, [r0, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	9201      	str	r2, [sp, #4]
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	9201      	str	r2, [sp, #4]
 8001a46:	9a01      	ldr	r2, [sp, #4]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a4e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001a50:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001a52:	3301      	adds	r3, #1
 8001a54:	6503      	str	r3, [r0, #80]	; 0x50
 8001a56:	e7c6      	b.n	80019e6 <I2C_Master_ADDR+0x28>
      else if(hi2c->XferCount == 1U)   
 8001a58:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d01a      	beq.n	8001a96 <I2C_Master_ADDR+0xd8>
      else if(hi2c->XferCount == 2U)
 8001a60:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d06b      	beq.n	8001b40 <I2C_Master_ADDR+0x182>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001a68:	6802      	ldr	r2, [r0, #0]
 8001a6a:	6813      	ldr	r3, [r2, #0]
 8001a6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a70:	6013      	str	r3, [r2, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001a72:	6803      	ldr	r3, [r0, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001a7a:	d003      	beq.n	8001a84 <I2C_Master_ADDR+0xc6>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a82:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a84:	2300      	movs	r3, #0
 8001a86:	9308      	str	r3, [sp, #32]
 8001a88:	6803      	ldr	r3, [r0, #0]
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	9208      	str	r2, [sp, #32]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	9308      	str	r3, [sp, #32]
 8001a92:	9b08      	ldr	r3, [sp, #32]
 8001a94:	e7c5      	b.n	8001a22 <I2C_Master_ADDR+0x64>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001a96:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001a9a:	d016      	beq.n	8001aca <I2C_Master_ADDR+0x10c>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001a9c:	2904      	cmp	r1, #4
 8001a9e:	d03d      	beq.n	8001b1c <I2C_Master_ADDR+0x15e>
 8001aa0:	2908      	cmp	r1, #8
 8001aa2:	d03b      	beq.n	8001b1c <I2C_Master_ADDR+0x15e>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8001aa4:	2c12      	cmp	r4, #18
 8001aa6:	d039      	beq.n	8001b1c <I2C_Master_ADDR+0x15e>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001aa8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d030      	beq.n	8001b10 <I2C_Master_ADDR+0x152>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001aae:	6802      	ldr	r2, [r0, #0]
 8001ab0:	6813      	ldr	r3, [r2, #0]
 8001ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ab6:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9305      	str	r3, [sp, #20]
 8001abc:	6803      	ldr	r3, [r0, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	9205      	str	r2, [sp, #20]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	9305      	str	r3, [sp, #20]
 8001ac6:	9b05      	ldr	r3, [sp, #20]
 8001ac8:	e7ab      	b.n	8001a22 <I2C_Master_ADDR+0x64>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001aca:	6802      	ldr	r2, [r0, #0]
 8001acc:	6813      	ldr	r3, [r2, #0]
 8001ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ad2:	6013      	str	r3, [r2, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001ad4:	6803      	ldr	r3, [r0, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001adc:	d00c      	beq.n	8001af8 <I2C_Master_ADDR+0x13a>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ae4:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	9303      	str	r3, [sp, #12]
 8001aea:	6803      	ldr	r3, [r0, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	9203      	str	r2, [sp, #12]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	9303      	str	r3, [sp, #12]
 8001af4:	9b03      	ldr	r3, [sp, #12]
 8001af6:	e794      	b.n	8001a22 <I2C_Master_ADDR+0x64>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af8:	2200      	movs	r2, #0
 8001afa:	9204      	str	r2, [sp, #16]
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	9204      	str	r2, [sp, #16]
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	9204      	str	r2, [sp, #16]
 8001b04:	9a04      	ldr	r2, [sp, #16]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e788      	b.n	8001a22 <I2C_Master_ADDR+0x64>
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b10:	6802      	ldr	r2, [r0, #0]
 8001b12:	6813      	ldr	r3, [r2, #0]
 8001b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e7cd      	b.n	8001ab8 <I2C_Master_ADDR+0xfa>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b1c:	6802      	ldr	r2, [r0, #0]
 8001b1e:	6813      	ldr	r3, [r2, #0]
 8001b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b24:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b26:	2300      	movs	r3, #0
 8001b28:	9306      	str	r3, [sp, #24]
 8001b2a:	6803      	ldr	r3, [r0, #0]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	9206      	str	r2, [sp, #24]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	9206      	str	r2, [sp, #24]
 8001b34:	9a06      	ldr	r2, [sp, #24]
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e770      	b.n	8001a22 <I2C_Master_ADDR+0x64>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001b40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d01b      	beq.n	8001b7e <I2C_Master_ADDR+0x1c0>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b46:	6802      	ldr	r2, [r0, #0]
 8001b48:	6813      	ldr	r3, [r2, #0]
 8001b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b4e:	6013      	str	r3, [r2, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001b50:	6802      	ldr	r2, [r0, #0]
 8001b52:	6813      	ldr	r3, [r2, #0]
 8001b54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b58:	6013      	str	r3, [r2, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001b5a:	6803      	ldr	r3, [r0, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001b62:	d003      	beq.n	8001b6c <I2C_Master_ADDR+0x1ae>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b6a:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9307      	str	r3, [sp, #28]
 8001b70:	6803      	ldr	r3, [r0, #0]
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	9207      	str	r2, [sp, #28]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	9307      	str	r3, [sp, #28]
 8001b7a:	9b07      	ldr	r3, [sp, #28]
 8001b7c:	e751      	b.n	8001a22 <I2C_Master_ADDR+0x64>
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b7e:	6802      	ldr	r2, [r0, #0]
 8001b80:	6813      	ldr	r3, [r2, #0]
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	e7e7      	b.n	8001b5a <I2C_Master_ADDR+0x19c>

08001b8a <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 8001b8a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b153      	cbz	r3, 8001ba6 <I2C_SlaveTransmit_BTF+0x1c>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b90:	6802      	ldr	r2, [r0, #0]
 8001b92:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b94:	1c59      	adds	r1, r3, #1
 8001b96:	6241      	str	r1, [r0, #36]	; 0x24
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8001b9c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  return HAL_OK;
}
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	4770      	bx	lr

08001baa <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 8001baa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	b153      	cbz	r3, 8001bc6 <I2C_SlaveReceive_BTF+0x1c>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	6242      	str	r2, [r0, #36]	; 0x24
 8001bb6:	6802      	ldr	r2, [r0, #0]
 8001bb8:	6912      	ldr	r2, [r2, #16]
 8001bba:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001bbc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  return HAL_OK;
}
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_I2C_Init>:
  if(hi2c == NULL)
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	f000 8082 	beq.w	8001cd6 <HAL_I2C_Init+0x10a>
{
 8001bd2:	b538      	push	{r3, r4, r5, lr}
 8001bd4:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001bd6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d041      	beq.n	8001c62 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bde:	2324      	movs	r3, #36	; 0x24
 8001be0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001be4:	6822      	ldr	r2, [r4, #0]
 8001be6:	6813      	ldr	r3, [r2, #0]
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bee:	f000 fe5d 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
  freqrange = I2C_FREQRANGE(pclk1);
 8001bf2:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <HAL_I2C_Init+0x110>)
 8001bf4:	fba3 2300 	umull	r2, r3, r3, r0
 8001bf8:	0c9b      	lsrs	r3, r3, #18
  hi2c->Instance->CR2 = freqrange;
 8001bfa:	6822      	ldr	r2, [r4, #0]
 8001bfc:	6053      	str	r3, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001bfe:	6821      	ldr	r1, [r4, #0]
 8001c00:	6865      	ldr	r5, [r4, #4]
 8001c02:	4a37      	ldr	r2, [pc, #220]	; (8001ce0 <HAL_I2C_Init+0x114>)
 8001c04:	4295      	cmp	r5, r2
 8001c06:	d831      	bhi.n	8001c6c <HAL_I2C_Init+0xa0>
 8001c08:	3301      	adds	r3, #1
 8001c0a:	620b      	str	r3, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c0c:	6821      	ldr	r1, [r4, #0]
 8001c0e:	6863      	ldr	r3, [r4, #4]
 8001c10:	4a33      	ldr	r2, [pc, #204]	; (8001ce0 <HAL_I2C_Init+0x114>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d834      	bhi.n	8001c80 <HAL_I2C_Init+0xb4>
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c1c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d800      	bhi.n	8001c26 <HAL_I2C_Init+0x5a>
 8001c24:	2004      	movs	r0, #4
 8001c26:	61c8      	str	r0, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c28:	6822      	ldr	r2, [r4, #0]
 8001c2a:	69e3      	ldr	r3, [r4, #28]
 8001c2c:	6a21      	ldr	r1, [r4, #32]
 8001c2e:	430b      	orrs	r3, r1
 8001c30:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001c32:	6822      	ldr	r2, [r4, #0]
 8001c34:	6923      	ldr	r3, [r4, #16]
 8001c36:	68e1      	ldr	r1, [r4, #12]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001c3c:	6822      	ldr	r2, [r4, #0]
 8001c3e:	6963      	ldr	r3, [r4, #20]
 8001c40:	69a1      	ldr	r1, [r4, #24]
 8001c42:	430b      	orrs	r3, r1
 8001c44:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001c46:	6822      	ldr	r2, [r4, #0]
 8001c48:	6813      	ldr	r3, [r2, #0]
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c50:	2000      	movs	r0, #0
 8001c52:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c54:	2320      	movs	r3, #32
 8001c56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c5a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001c60:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001c62:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c66:	f002 fc3d 	bl	80044e4 <HAL_I2C_MspInit>
 8001c6a:	e7b8      	b.n	8001bde <HAL_I2C_Init+0x12>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c6c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	4a1b      	ldr	r2, [pc, #108]	; (8001ce4 <HAL_I2C_Init+0x118>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	099b      	lsrs	r3, r3, #6
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	e7c4      	b.n	8001c0a <HAL_I2C_Init+0x3e>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c80:	68a5      	ldr	r5, [r4, #8]
 8001c82:	b98d      	cbnz	r5, 8001ca8 <HAL_I2C_Init+0xdc>
 8001c84:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001c88:	fbb0 f2f2 	udiv	r2, r0, r2
 8001c8c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001c90:	fab2 f282 	clz	r2, r2
 8001c94:	0952      	lsrs	r2, r2, #5
 8001c96:	b9e2      	cbnz	r2, 8001cd2 <HAL_I2C_Init+0x106>
 8001c98:	b995      	cbnz	r5, 8001cc0 <HAL_I2C_Init+0xf4>
 8001c9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001c9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ca2:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001ca6:	e7be      	b.n	8001c26 <HAL_I2C_Init+0x5a>
 8001ca8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001cac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001cb0:	fbb0 f2f2 	udiv	r2, r0, r2
 8001cb4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001cb8:	fab2 f282 	clz	r2, r2
 8001cbc:	0952      	lsrs	r2, r2, #5
 8001cbe:	e7ea      	b.n	8001c96 <HAL_I2C_Init+0xca>
 8001cc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cc8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ccc:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001cd0:	e7a9      	b.n	8001c26 <HAL_I2C_Init+0x5a>
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	e7a7      	b.n	8001c26 <HAL_I2C_Init+0x5a>
    return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	431bde83 	.word	0x431bde83
 8001ce0:	000186a0 	.word	0x000186a0
 8001ce4:	10624dd3 	.word	0x10624dd3

08001ce8 <I2C_SlaveTransmit_TXE>:
  uint32_t CurrentState = hi2c->State;
 8001ce8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cec:	b2da      	uxtb	r2, r3
  if(hi2c->XferCount != 0U)
 8001cee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	b1fb      	cbz	r3, 8001d34 <I2C_SlaveTransmit_TXE+0x4c>
{
 8001cf4:	b510      	push	{r4, lr}
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cf6:	6801      	ldr	r1, [r0, #0]
 8001cf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cfa:	1c5c      	adds	r4, r3, #1
 8001cfc:	6244      	str	r4, [r0, #36]	; 0x24
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	610b      	str	r3, [r1, #16]
    hi2c->XferCount--;
 8001d02:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d0c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	b90b      	cbnz	r3, 8001d16 <I2C_SlaveTransmit_TXE+0x2e>
 8001d12:	2a29      	cmp	r2, #41	; 0x29
 8001d14:	d001      	beq.n	8001d1a <I2C_SlaveTransmit_TXE+0x32>
}
 8001d16:	2000      	movs	r0, #0
 8001d18:	bd10      	pop	{r4, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d1a:	6802      	ldr	r2, [r0, #0]
 8001d1c:	6853      	ldr	r3, [r2, #4]
 8001d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d22:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d24:	2321      	movs	r3, #33	; 0x21
 8001d26:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d28:	2328      	movs	r3, #40	; 0x28
 8001d2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d2e:	f003 f843 	bl	8004db8 <HAL_I2C_SlaveTxCpltCallback>
 8001d32:	e7f0      	b.n	8001d16 <I2C_SlaveTransmit_TXE+0x2e>
}
 8001d34:	2000      	movs	r0, #0
 8001d36:	4770      	bx	lr

08001d38 <I2C_SlaveReceive_RXNE>:
{
 8001d38:	b508      	push	{r3, lr}
  uint32_t CurrentState = hi2c->State;
 8001d3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d3e:	b2da      	uxtb	r2, r3
  if(hi2c->XferCount != 0U)
 8001d40:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	b17b      	cbz	r3, 8001d66 <I2C_SlaveReceive_RXNE+0x2e>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d46:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d48:	1c59      	adds	r1, r3, #1
 8001d4a:	6241      	str	r1, [r0, #36]	; 0x24
 8001d4c:	6801      	ldr	r1, [r0, #0]
 8001d4e:	6909      	ldr	r1, [r1, #16]
 8001d50:	7019      	strb	r1, [r3, #0]
    hi2c->XferCount--;
 8001d52:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d5c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	b90b      	cbnz	r3, 8001d66 <I2C_SlaveReceive_RXNE+0x2e>
 8001d62:	2a2a      	cmp	r2, #42	; 0x2a
 8001d64:	d001      	beq.n	8001d6a <I2C_SlaveReceive_RXNE+0x32>
}
 8001d66:	2000      	movs	r0, #0
 8001d68:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d6a:	6802      	ldr	r2, [r0, #0]
 8001d6c:	6853      	ldr	r3, [r2, #4]
 8001d6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d72:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d74:	2322      	movs	r3, #34	; 0x22
 8001d76:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d78:	2328      	movs	r3, #40	; 0x28
 8001d7a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d7e:	f003 f851 	bl	8004e24 <HAL_I2C_SlaveRxCpltCallback>
 8001d82:	e7f0      	b.n	8001d66 <I2C_SlaveReceive_RXNE+0x2e>

08001d84 <HAL_I2C_AddrCallback>:
{
 8001d84:	4770      	bx	lr

08001d86 <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001d86:	b508      	push	{r3, lr}
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
  uint16_t SlaveAddrCode = 0U;

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001d88:	6803      	ldr	r3, [r0, #0]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	f012 0f04 	tst.w	r2, #4
 8001d90:	d009      	beq.n	8001da6 <I2C_Slave_ADDR+0x20>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001d92:	2100      	movs	r1, #0
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d9a:	d006      	beq.n	8001daa <I2C_Slave_ADDR+0x24>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8001d9c:	8b02      	ldrh	r2, [r0, #24]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001d9e:	f7ff fff1 	bl	8001d84 <HAL_I2C_AddrCallback>

  return HAL_OK;
}
 8001da2:	2000      	movs	r0, #0
 8001da4:	bd08      	pop	{r3, pc}
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8001da6:	2101      	movs	r1, #1
 8001da8:	e7f4      	b.n	8001d94 <I2C_Slave_ADDR+0xe>
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8001daa:	8982      	ldrh	r2, [r0, #12]
 8001dac:	e7f7      	b.n	8001d9e <I2C_Slave_ADDR+0x18>

08001dae <HAL_I2C_ListenCpltCallback>:
{
 8001dae:	4770      	bx	lr

08001db0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8001db0:	b508      	push	{r3, lr}
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8001db2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001db6:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001db8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001dba:	2a04      	cmp	r2, #4
 8001dbc:	d009      	beq.n	8001dd2 <I2C_Slave_AF+0x22>
 8001dbe:	2a08      	cmp	r2, #8
 8001dc0:	d007      	beq.n	8001dd2 <I2C_Slave_AF+0x22>
    hi2c->Mode = HAL_I2C_MODE_NONE;
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001dc2:	2b21      	cmp	r3, #33	; 0x21
 8001dc4:	d021      	beq.n	8001e0a <I2C_Slave_AF+0x5a>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc6:	6803      	ldr	r3, [r0, #0]
 8001dc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dcc:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
}
 8001dce:	2000      	movs	r0, #0
 8001dd0:	bd08      	pop	{r3, pc}
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001dd2:	2b28      	cmp	r3, #40	; 0x28
 8001dd4:	d1f5      	bne.n	8001dc2 <I2C_Slave_AF+0x12>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <I2C_Slave_AF+0x90>)
 8001dd8:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dda:	6802      	ldr	r2, [r0, #0]
 8001ddc:	6853      	ldr	r3, [r2, #4]
 8001dde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001de2:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de4:	6803      	ldr	r3, [r0, #0]
 8001de6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dea:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001dec:	6802      	ldr	r2, [r0, #0]
 8001dee:	6813      	ldr	r3, [r2, #0]
 8001df0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001df4:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e00:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e04:	f7ff ffd3 	bl	8001dae <HAL_I2C_ListenCpltCallback>
 8001e08:	e7e1      	b.n	8001dce <I2C_Slave_AF+0x1e>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <I2C_Slave_AF+0x90>)
 8001e0c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e0e:	2321      	movs	r3, #33	; 0x21
 8001e10:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	2320      	movs	r3, #32
 8001e14:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e1e:	6802      	ldr	r2, [r0, #0]
 8001e20:	6853      	ldr	r3, [r2, #4]
 8001e22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e26:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e28:	6803      	ldr	r3, [r0, #0]
 8001e2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e2e:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e30:	6802      	ldr	r2, [r0, #0]
 8001e32:	6813      	ldr	r3, [r2, #0]
 8001e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e38:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e3a:	f002 ffbd 	bl	8004db8 <HAL_I2C_SlaveTxCpltCallback>
 8001e3e:	e7c6      	b.n	8001dce <I2C_Slave_AF+0x1e>
 8001e40:	ffff0000 	.word	0xffff0000

08001e44 <HAL_I2C_MemTxCpltCallback>:
{
 8001e44:	4770      	bx	lr

08001e46 <I2C_MasterTransmit_TXE>:
{
 8001e46:	b510      	push	{r4, lr}
  uint32_t CurrentState       = hi2c->State;
 8001e48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
  uint32_t CurrentMode        = hi2c->Mode;
 8001e4e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001e52:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e54:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e56:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8001e58:	b909      	cbnz	r1, 8001e5e <I2C_MasterTransmit_TXE+0x18>
 8001e5a:	2b21      	cmp	r3, #33	; 0x21
 8001e5c:	d005      	beq.n	8001e6a <I2C_MasterTransmit_TXE+0x24>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001e5e:	2b21      	cmp	r3, #33	; 0x21
 8001e60:	d03c      	beq.n	8001edc <I2C_MasterTransmit_TXE+0x96>
 8001e62:	2a40      	cmp	r2, #64	; 0x40
 8001e64:	d038      	beq.n	8001ed8 <I2C_MasterTransmit_TXE+0x92>
}
 8001e66:	2000      	movs	r0, #0
 8001e68:	bd10      	pop	{r4, pc}
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e6a:	2c04      	cmp	r4, #4
 8001e6c:	d004      	beq.n	8001e78 <I2C_MasterTransmit_TXE+0x32>
 8001e6e:	2c08      	cmp	r4, #8
 8001e70:	d002      	beq.n	8001e78 <I2C_MasterTransmit_TXE+0x32>
 8001e72:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8001e76:	d119      	bne.n	8001eac <I2C_MasterTransmit_TXE+0x66>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e78:	6802      	ldr	r2, [r0, #0]
 8001e7a:	6853      	ldr	r3, [r2, #4]
 8001e7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e80:	6053      	str	r3, [r2, #4]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e82:	6802      	ldr	r2, [r0, #0]
 8001e84:	6813      	ldr	r3, [r2, #0]
 8001e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8a:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e90:	2320      	movs	r3, #32
 8001e92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e96:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b40      	cmp	r3, #64	; 0x40
 8001e9e:	d015      	beq.n	8001ecc <I2C_MasterTransmit_TXE+0x86>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ea6:	f002 ff6d 	bl	8004d84 <HAL_I2C_MasterTxCpltCallback>
 8001eaa:	e7dc      	b.n	8001e66 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eac:	6802      	ldr	r2, [r0, #0]
 8001eae:	6853      	ldr	r3, [r2, #4]
 8001eb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001eb4:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001eb6:	2311      	movs	r3, #17
 8001eb8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ec6:	f002 ff5d 	bl	8004d84 <HAL_I2C_MasterTxCpltCallback>
 8001eca:	e7cc      	b.n	8001e66 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001ed2:	f7ff ffb7 	bl	8001e44 <HAL_I2C_MemTxCpltCallback>
 8001ed6:	e7c6      	b.n	8001e66 <I2C_MasterTransmit_TXE+0x20>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001ed8:	2b22      	cmp	r3, #34	; 0x22
 8001eda:	d1c4      	bne.n	8001e66 <I2C_MasterTransmit_TXE+0x20>
    if(hi2c->XferCount == 0U)
 8001edc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	b183      	cbz	r3, 8001f04 <I2C_MasterTransmit_TXE+0xbe>
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ee2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b40      	cmp	r3, #64	; 0x40
 8001eea:	d011      	beq.n	8001f10 <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001eec:	6802      	ldr	r2, [r0, #0]
 8001eee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ef0:	1c59      	adds	r1, r3, #1
 8001ef2:	6241      	str	r1, [r0, #36]	; 0x24
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001ef8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001f02:	e7b0      	b.n	8001e66 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f04:	6802      	ldr	r2, [r0, #0]
 8001f06:	6853      	ldr	r3, [r2, #4]
 8001f08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f0c:	6053      	str	r3, [r2, #4]
 8001f0e:	e7aa      	b.n	8001e66 <I2C_MasterTransmit_TXE+0x20>
        if(hi2c->EventCount == 0)
 8001f10:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f12:	b99b      	cbnz	r3, 8001f3c <I2C_MasterTransmit_TXE+0xf6>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f14:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d008      	beq.n	8001f2c <I2C_MasterTransmit_TXE+0xe6>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001f1a:	6802      	ldr	r2, [r0, #0]
 8001f1c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001f1e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001f22:	6113      	str	r3, [r2, #16]
            hi2c->EventCount++;
 8001f24:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f26:	3301      	adds	r3, #1
 8001f28:	6503      	str	r3, [r0, #80]	; 0x50
 8001f2a:	e79c      	b.n	8001e66 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f2c:	6802      	ldr	r2, [r0, #0]
 8001f2e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	6113      	str	r3, [r2, #16]
            hi2c->EventCount += 2;
 8001f34:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f36:	3302      	adds	r3, #2
 8001f38:	6503      	str	r3, [r0, #80]	; 0x50
 8001f3a:	e794      	b.n	8001e66 <I2C_MasterTransmit_TXE+0x20>
        else if(hi2c->EventCount == 1)
 8001f3c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d018      	beq.n	8001f74 <I2C_MasterTransmit_TXE+0x12e>
        else if(hi2c->EventCount == 2)
 8001f42:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d18e      	bne.n	8001e66 <I2C_MasterTransmit_TXE+0x20>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b22      	cmp	r3, #34	; 0x22
 8001f50:	d018      	beq.n	8001f84 <I2C_MasterTransmit_TXE+0x13e>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b21      	cmp	r3, #33	; 0x21
 8001f5a:	d184      	bne.n	8001e66 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001f5c:	6802      	ldr	r2, [r0, #0]
 8001f5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f60:	1c59      	adds	r1, r3, #1
 8001f62:	6241      	str	r1, [r0, #36]	; 0x24
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	6113      	str	r3, [r2, #16]
            hi2c->XferCount--;
 8001f68:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001f72:	e778      	b.n	8001e66 <I2C_MasterTransmit_TXE+0x20>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f74:	6802      	ldr	r2, [r0, #0]
 8001f76:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	6113      	str	r3, [r2, #16]
          hi2c->EventCount++;
 8001f7c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f7e:	3301      	adds	r3, #1
 8001f80:	6503      	str	r3, [r0, #80]	; 0x50
 8001f82:	e770      	b.n	8001e66 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f84:	6802      	ldr	r2, [r0, #0]
 8001f86:	6813      	ldr	r3, [r2, #0]
 8001f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e76a      	b.n	8001e66 <I2C_MasterTransmit_TXE+0x20>

08001f90 <I2C_MasterTransmit_BTF>:
{
 8001f90:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f92:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b21      	cmp	r3, #33	; 0x21
 8001f9c:	d001      	beq.n	8001fa2 <I2C_MasterTransmit_BTF+0x12>
}
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	bd08      	pop	{r3, pc}
    if(hi2c->XferCount != 0U)
 8001fa2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	bb03      	cbnz	r3, 8001fea <I2C_MasterTransmit_BTF+0x5a>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001fa8:	2a04      	cmp	r2, #4
 8001faa:	d004      	beq.n	8001fb6 <I2C_MasterTransmit_BTF+0x26>
 8001fac:	2a08      	cmp	r2, #8
 8001fae:	d002      	beq.n	8001fb6 <I2C_MasterTransmit_BTF+0x26>
 8001fb0:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001fb4:	d125      	bne.n	8002002 <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fb6:	6802      	ldr	r2, [r0, #0]
 8001fb8:	6853      	ldr	r3, [r2, #4]
 8001fba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fbe:	6053      	str	r3, [r2, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fc0:	6802      	ldr	r2, [r0, #0]
 8001fc2:	6813      	ldr	r3, [r2, #0]
 8001fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc8:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fd4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b40      	cmp	r3, #64	; 0x40
 8001fdc:	d021      	beq.n	8002022 <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fe4:	f002 fece 	bl	8004d84 <HAL_I2C_MasterTxCpltCallback>
 8001fe8:	e7d9      	b.n	8001f9e <I2C_MasterTransmit_BTF+0xe>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001fea:	6802      	ldr	r2, [r0, #0]
 8001fec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fee:	1c59      	adds	r1, r3, #1
 8001ff0:	6241      	str	r1, [r0, #36]	; 0x24
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001ff6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	8543      	strh	r3, [r0, #42]	; 0x2a
 8002000:	e7cd      	b.n	8001f9e <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002002:	6802      	ldr	r2, [r0, #0]
 8002004:	6853      	ldr	r3, [r2, #4]
 8002006:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800200a:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800200c:	2311      	movs	r3, #17
 800200e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	2300      	movs	r3, #0
 8002012:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002016:	2320      	movs	r3, #32
 8002018:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800201c:	f002 feb2 	bl	8004d84 <HAL_I2C_MasterTxCpltCallback>
 8002020:	e7bd      	b.n	8001f9e <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002022:	2300      	movs	r3, #0
 8002024:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002028:	f7ff ff0c 	bl	8001e44 <HAL_I2C_MemTxCpltCallback>
 800202c:	e7b7      	b.n	8001f9e <I2C_MasterTransmit_BTF+0xe>

0800202e <HAL_I2C_MemRxCpltCallback>:
{
 800202e:	4770      	bx	lr

08002030 <I2C_MasterReceive_RXNE>:
{
 8002030:	b508      	push	{r3, lr}
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002032:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b22      	cmp	r3, #34	; 0x22
 800203a:	d001      	beq.n	8002040 <I2C_MasterReceive_RXNE+0x10>
}
 800203c:	2000      	movs	r0, #0
 800203e:	bd08      	pop	{r3, pc}
    tmp = hi2c->XferCount;
 8002040:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002042:	b29b      	uxth	r3, r3
    if(tmp > 3U)
 8002044:	2b03      	cmp	r3, #3
 8002046:	d914      	bls.n	8002072 <I2C_MasterReceive_RXNE+0x42>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002048:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	6242      	str	r2, [r0, #36]	; 0x24
 800204e:	6802      	ldr	r2, [r0, #0]
 8002050:	6912      	ldr	r2, [r2, #16]
 8002052:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002054:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29b      	uxth	r3, r3
 800205c:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 800205e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b03      	cmp	r3, #3
 8002064:	d1ea      	bne.n	800203c <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002066:	6802      	ldr	r2, [r0, #0]
 8002068:	6853      	ldr	r3, [r2, #4]
 800206a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800206e:	6053      	str	r3, [r2, #4]
 8002070:	e7e4      	b.n	800203c <I2C_MasterReceive_RXNE+0xc>
    else if((tmp == 1U) || (tmp == 0U))
 8002072:	2b01      	cmp	r3, #1
 8002074:	d8e2      	bhi.n	800203c <I2C_MasterReceive_RXNE+0xc>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002076:	6802      	ldr	r2, [r0, #0]
 8002078:	6813      	ldr	r3, [r2, #0]
 800207a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800207e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002080:	6802      	ldr	r2, [r0, #0]
 8002082:	6853      	ldr	r3, [r2, #4]
 8002084:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002088:	6053      	str	r3, [r2, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800208a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	6242      	str	r2, [r0, #36]	; 0x24
 8002090:	6802      	ldr	r2, [r0, #0]
 8002092:	6912      	ldr	r2, [r2, #16]
 8002094:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002096:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29b      	uxth	r3, r3
 800209e:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	2320      	movs	r3, #32
 80020a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	6303      	str	r3, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80020aa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b40      	cmp	r3, #64	; 0x40
 80020b2:	d005      	beq.n	80020c0 <I2C_MasterReceive_RXNE+0x90>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80020ba:	f002 fe99 	bl	8004df0 <HAL_I2C_MasterRxCpltCallback>
 80020be:	e7bd      	b.n	800203c <I2C_MasterReceive_RXNE+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 80020c6:	f7ff ffb2 	bl	800202e <HAL_I2C_MemRxCpltCallback>
 80020ca:	e7b7      	b.n	800203c <I2C_MasterReceive_RXNE+0xc>

080020cc <I2C_MasterReceive_BTF>:
{
 80020cc:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020ce:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 80020d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d014      	beq.n	8002102 <I2C_MasterReceive_BTF+0x36>
  else if(hi2c->XferCount == 3U)
 80020d8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d021      	beq.n	8002124 <I2C_MasterReceive_BTF+0x58>
  else if(hi2c->XferCount == 2U)
 80020e0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d033      	beq.n	8002150 <I2C_MasterReceive_BTF+0x84>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	6242      	str	r2, [r0, #36]	; 0x24
 80020ee:	6802      	ldr	r2, [r0, #0]
 80020f0:	6912      	ldr	r2, [r2, #16]
 80020f2:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80020f4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80020fe:	2000      	movs	r0, #0
 8002100:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002102:	6802      	ldr	r2, [r0, #0]
 8002104:	6853      	ldr	r3, [r2, #4]
 8002106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800210a:	6053      	str	r3, [r2, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800210c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	6242      	str	r2, [r0, #36]	; 0x24
 8002112:	6802      	ldr	r2, [r0, #0]
 8002114:	6912      	ldr	r2, [r2, #16]
 8002116:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002118:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29b      	uxth	r3, r3
 8002120:	8543      	strh	r3, [r0, #42]	; 0x2a
 8002122:	e7ec      	b.n	80020fe <I2C_MasterReceive_BTF+0x32>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002124:	6802      	ldr	r2, [r0, #0]
 8002126:	6853      	ldr	r3, [r2, #4]
 8002128:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800212c:	6053      	str	r3, [r2, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800212e:	6802      	ldr	r2, [r0, #0]
 8002130:	6813      	ldr	r3, [r2, #0]
 8002132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002136:	6013      	str	r3, [r2, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002138:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	6242      	str	r2, [r0, #36]	; 0x24
 800213e:	6802      	ldr	r2, [r0, #0]
 8002140:	6912      	ldr	r2, [r2, #16]
 8002142:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002144:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29b      	uxth	r3, r3
 800214c:	8543      	strh	r3, [r0, #42]	; 0x2a
 800214e:	e7d6      	b.n	80020fe <I2C_MasterReceive_BTF+0x32>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8002150:	3a01      	subs	r2, #1
 8002152:	2a01      	cmp	r2, #1
 8002154:	d92f      	bls.n	80021b6 <I2C_MasterReceive_BTF+0xea>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002156:	6802      	ldr	r2, [r0, #0]
 8002158:	6813      	ldr	r3, [r2, #0]
 800215a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215e:	6013      	str	r3, [r2, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002160:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	6242      	str	r2, [r0, #36]	; 0x24
 8002166:	6802      	ldr	r2, [r0, #0]
 8002168:	6912      	ldr	r2, [r2, #16]
 800216a:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800216c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29b      	uxth	r3, r3
 8002174:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002176:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	6242      	str	r2, [r0, #36]	; 0x24
 800217c:	6802      	ldr	r2, [r0, #0]
 800217e:	6912      	ldr	r2, [r2, #16]
 8002180:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002182:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29b      	uxth	r3, r3
 800218a:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800218c:	6802      	ldr	r2, [r0, #0]
 800218e:	6853      	ldr	r3, [r2, #4]
 8002190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002194:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002196:	2320      	movs	r3, #32
 8002198:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800219c:	2300      	movs	r3, #0
 800219e:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80021a0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b40      	cmp	r3, #64	; 0x40
 80021a8:	d010      	beq.n	80021cc <I2C_MasterReceive_BTF+0x100>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021b0:	f002 fe1e 	bl	8004df0 <HAL_I2C_MasterRxCpltCallback>
 80021b4:	e7a3      	b.n	80020fe <I2C_MasterReceive_BTF+0x32>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021b6:	6802      	ldr	r2, [r0, #0]
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021be:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80021c0:	6802      	ldr	r2, [r0, #0]
 80021c2:	6813      	ldr	r3, [r2, #0]
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e7c9      	b.n	8002160 <I2C_MasterReceive_BTF+0x94>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 80021d2:	f7ff ff2c 	bl	800202e <HAL_I2C_MemRxCpltCallback>
 80021d6:	e792      	b.n	80020fe <I2C_MasterReceive_BTF+0x32>

080021d8 <HAL_I2C_ErrorCallback>:
{
 80021d8:	4770      	bx	lr

080021da <HAL_I2C_AbortCpltCallback>:
{
 80021da:	4770      	bx	lr

080021dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80021dc:	b510      	push	{r4, lr}
 80021de:	4604      	mov	r4, r0
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 80021e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80021e4:	3b29      	subs	r3, #41	; 0x29
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d937      	bls.n	800225a <I2C_ITError+0x7e>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 80021ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b60      	cmp	r3, #96	; 0x60
 80021f2:	d007      	beq.n	8002204 <I2C_ITError+0x28>
 80021f4:	6803      	ldr	r3, [r0, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80021fc:	d102      	bne.n	8002204 <I2C_ITError+0x28>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80021fe:	2320      	movs	r3, #32
 8002200:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002204:	2300      	movs	r3, #0
 8002206:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002208:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800220c:	6822      	ldr	r2, [r4, #0]
 800220e:	6813      	ldr	r3, [r2, #0]
 8002210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002214:	6013      	str	r3, [r2, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800221e:	d03f      	beq.n	80022a0 <I2C_ITError+0xc4>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002226:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002228:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800222a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d018      	beq.n	8002266 <I2C_ITError+0x8a>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002234:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <I2C_ITError+0x144>)
 8002236:	6513      	str	r3, [r2, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002238:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800223a:	f7ff f98b 	bl	8001554 <HAL_DMA_Abort_IT>
 800223e:	2800      	cmp	r0, #0
 8002240:	d03f      	beq.n	80022c2 <I2C_ITError+0xe6>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002242:	6822      	ldr	r2, [r4, #0]
 8002244:	6813      	ldr	r3, [r2, #0]
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800224c:	2320      	movs	r3, #32
 800224e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002252:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002254:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002256:	4798      	blx	r3
 8002258:	e033      	b.n	80022c2 <I2C_ITError+0xe6>
    hi2c->PreviousState = I2C_STATE_NONE;
 800225a:	2300      	movs	r3, #0
 800225c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800225e:	2328      	movs	r3, #40	; 0x28
 8002260:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002264:	e7d2      	b.n	800220c <I2C_ITError+0x30>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002266:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002268:	4a2d      	ldr	r2, [pc, #180]	; (8002320 <I2C_ITError+0x144>)
 800226a:	651a      	str	r2, [r3, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800226c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800226e:	f7ff f971 	bl	8001554 <HAL_DMA_Abort_IT>
 8002272:	b330      	cbz	r0, 80022c2 <I2C_ITError+0xe6>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	f012 0f40 	tst.w	r2, #64	; 0x40
 800227c:	d004      	beq.n	8002288 <I2C_ITError+0xac>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800227e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002280:	1c51      	adds	r1, r2, #1
 8002282:	6261      	str	r1, [r4, #36]	; 0x24
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	7013      	strb	r3, [r2, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002288:	6822      	ldr	r2, [r4, #0]
 800228a:	6813      	ldr	r3, [r2, #0]
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002292:	2320      	movs	r3, #32
 8002294:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002298:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800229a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800229c:	4798      	blx	r3
 800229e:	e010      	b.n	80022c2 <I2C_ITError+0xe6>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 80022a0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	2a60      	cmp	r2, #96	; 0x60
 80022a8:	d011      	beq.n	80022ce <I2C_ITError+0xf2>
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022b0:	d004      	beq.n	80022bc <I2C_ITError+0xe0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022b4:	1c51      	adds	r1, r2, #1
 80022b6:	6261      	str	r1, [r4, #36]	; 0x24
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	7013      	strb	r3, [r2, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 80022bc:	4620      	mov	r0, r4
 80022be:	f7ff ff8b 	bl	80021d8 <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80022c2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b28      	cmp	r3, #40	; 0x28
 80022ca:	d017      	beq.n	80022fc <I2C_ITError+0x120>
 80022cc:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80022ce:	2220      	movs	r2, #32
 80022d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d4:	2200      	movs	r2, #0
 80022d6:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022de:	d004      	beq.n	80022ea <I2C_ITError+0x10e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022e2:	1c51      	adds	r1, r2, #1
 80022e4:	6261      	str	r1, [r4, #36]	; 0x24
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	6813      	ldr	r3, [r2, #0]
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7ff ff70 	bl	80021da <HAL_I2C_AbortCpltCallback>
 80022fa:	e7e2      	b.n	80022c2 <I2C_ITError+0xe6>
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80022fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022fe:	f013 0f04 	tst.w	r3, #4
 8002302:	d0e3      	beq.n	80022cc <I2C_ITError+0xf0>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <I2C_ITError+0x148>)
 8002306:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002308:	2300      	movs	r3, #0
 800230a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800230c:	2220      	movs	r2, #32
 800230e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002312:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8002316:	4620      	mov	r0, r4
 8002318:	f7ff fd49 	bl	8001dae <HAL_I2C_ListenCpltCallback>
  }
}
 800231c:	e7d6      	b.n	80022cc <I2C_ITError+0xf0>
 800231e:	bf00      	nop
 8002320:	08002669 	.word	0x08002669
 8002324:	ffff0000 	.word	0xffff0000

08002328 <I2C_Slave_STOPF>:
{
 8002328:	b510      	push	{r4, lr}
 800232a:	b082      	sub	sp, #8
  uint32_t CurrentState = hi2c->State;
 800232c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002330:	b2db      	uxtb	r3, r3
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002332:	6801      	ldr	r1, [r0, #0]
 8002334:	684a      	ldr	r2, [r1, #4]
 8002336:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800233a:	604a      	str	r2, [r1, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800233c:	2200      	movs	r2, #0
 800233e:	9201      	str	r2, [sp, #4]
 8002340:	6802      	ldr	r2, [r0, #0]
 8002342:	6951      	ldr	r1, [r2, #20]
 8002344:	9101      	str	r1, [sp, #4]
 8002346:	6811      	ldr	r1, [r2, #0]
 8002348:	f041 0101 	orr.w	r1, r1, #1
 800234c:	6011      	str	r1, [r2, #0]
 800234e:	9a01      	ldr	r2, [sp, #4]
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002350:	6801      	ldr	r1, [r0, #0]
 8002352:	680a      	ldr	r2, [r1, #0]
 8002354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002358:	600a      	str	r2, [r1, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800235a:	6801      	ldr	r1, [r0, #0]
 800235c:	684a      	ldr	r2, [r1, #4]
 800235e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002362:	d00e      	beq.n	8002382 <I2C_Slave_STOPF+0x5a>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002364:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	2a22      	cmp	r2, #34	; 0x22
 800236c:	d044      	beq.n	80023f8 <I2C_Slave_STOPF+0xd0>
 800236e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	2a2a      	cmp	r2, #42	; 0x2a
 8002376:	d03f      	beq.n	80023f8 <I2C_Slave_STOPF+0xd0>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002378:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	6852      	ldr	r2, [r2, #4]
 800237e:	b292      	uxth	r2, r2
 8002380:	8542      	strh	r2, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 8002382:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002384:	b292      	uxth	r2, r2
 8002386:	b302      	cbz	r2, 80023ca <I2C_Slave_STOPF+0xa2>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002388:	694a      	ldr	r2, [r1, #20]
 800238a:	f012 0f04 	tst.w	r2, #4
 800238e:	d009      	beq.n	80023a4 <I2C_Slave_STOPF+0x7c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002390:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002392:	1c54      	adds	r4, r2, #1
 8002394:	6244      	str	r4, [r0, #36]	; 0x24
 8002396:	6909      	ldr	r1, [r1, #16]
 8002398:	7011      	strb	r1, [r2, #0]
      hi2c->XferCount--;
 800239a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800239c:	b292      	uxth	r2, r2
 800239e:	3a01      	subs	r2, #1
 80023a0:	b292      	uxth	r2, r2
 80023a2:	8542      	strh	r2, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80023a4:	6802      	ldr	r2, [r0, #0]
 80023a6:	6951      	ldr	r1, [r2, #20]
 80023a8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80023ac:	d009      	beq.n	80023c2 <I2C_Slave_STOPF+0x9a>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80023ae:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80023b0:	1c4c      	adds	r4, r1, #1
 80023b2:	6244      	str	r4, [r0, #36]	; 0x24
 80023b4:	6912      	ldr	r2, [r2, #16]
 80023b6:	700a      	strb	r2, [r1, #0]
      hi2c->XferCount--;
 80023b8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80023ba:	b292      	uxth	r2, r2
 80023bc:	3a01      	subs	r2, #1
 80023be:	b292      	uxth	r2, r2
 80023c0:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023c2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80023c4:	f042 0204 	orr.w	r2, r2, #4
 80023c8:	6402      	str	r2, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80023cc:	b9d2      	cbnz	r2, 8002404 <I2C_Slave_STOPF+0xdc>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80023ce:	2b28      	cmp	r3, #40	; 0x28
 80023d0:	d01b      	beq.n	800240a <I2C_Slave_STOPF+0xe2>
 80023d2:	2b2a      	cmp	r3, #42	; 0x2a
 80023d4:	d019      	beq.n	800240a <I2C_Slave_STOPF+0xe2>
 80023d6:	2b29      	cmp	r3, #41	; 0x29
 80023d8:	d017      	beq.n	800240a <I2C_Slave_STOPF+0xe2>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80023da:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80023dc:	2a22      	cmp	r2, #34	; 0x22
 80023de:	d001      	beq.n	80023e4 <I2C_Slave_STOPF+0xbc>
 80023e0:	2b22      	cmp	r3, #34	; 0x22
 80023e2:	d11d      	bne.n	8002420 <I2C_Slave_STOPF+0xf8>
        hi2c->PreviousState = I2C_STATE_NONE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023e8:	2220      	movs	r2, #32
 80023ea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ee:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023f2:	f002 fd17 	bl	8004e24 <HAL_I2C_SlaveRxCpltCallback>
 80023f6:	e013      	b.n	8002420 <I2C_Slave_STOPF+0xf8>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80023f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	6852      	ldr	r2, [r2, #4]
 80023fe:	b292      	uxth	r2, r2
 8002400:	8542      	strh	r2, [r0, #42]	; 0x2a
 8002402:	e7be      	b.n	8002382 <I2C_Slave_STOPF+0x5a>
    I2C_ITError(hi2c);
 8002404:	f7ff feea 	bl	80021dc <I2C_ITError>
 8002408:	e00a      	b.n	8002420 <I2C_Slave_STOPF+0xf8>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <I2C_Slave_STOPF+0x100>)
 800240c:	62c3      	str	r3, [r0, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800240e:	2300      	movs	r3, #0
 8002410:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002412:	2220      	movs	r2, #32
 8002414:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800241c:	f7ff fcc7 	bl	8001dae <HAL_I2C_ListenCpltCallback>
}
 8002420:	2000      	movs	r0, #0
 8002422:	b002      	add	sp, #8
 8002424:	bd10      	pop	{r4, pc}
 8002426:	bf00      	nop
 8002428:	ffff0000 	.word	0xffff0000

0800242c <HAL_I2C_EV_IRQHandler>:
{
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	4605      	mov	r5, r0
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002430:	6803      	ldr	r3, [r0, #0]
 8002432:	699f      	ldr	r7, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002434:	695c      	ldr	r4, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8002436:	685e      	ldr	r6, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8002438:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800243c:	b2db      	uxtb	r3, r3
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800243e:	2b10      	cmp	r3, #16
 8002440:	d025      	beq.n	800248e <HAL_I2C_EV_IRQHandler+0x62>
 8002442:	2b40      	cmp	r3, #64	; 0x40
 8002444:	d023      	beq.n	800248e <HAL_I2C_EV_IRQHandler+0x62>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002446:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <HAL_I2C_EV_IRQHandler+0x14c>)
 8002448:	4023      	ands	r3, r4
 800244a:	b113      	cbz	r3, 8002452 <HAL_I2C_EV_IRQHandler+0x26>
 800244c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002450:	d16e      	bne.n	8002530 <HAL_I2C_EV_IRQHandler+0x104>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002452:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_I2C_EV_IRQHandler+0x150>)
 8002454:	4023      	ands	r3, r4
 8002456:	b113      	cbz	r3, 800245e <HAL_I2C_EV_IRQHandler+0x32>
 8002458:	f416 7f00 	tst.w	r6, #512	; 0x200
 800245c:	d16b      	bne.n	8002536 <HAL_I2C_EV_IRQHandler+0x10a>
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800245e:	4b48      	ldr	r3, [pc, #288]	; (8002580 <HAL_I2C_EV_IRQHandler+0x154>)
 8002460:	403b      	ands	r3, r7
 8002462:	2b00      	cmp	r3, #0
 8002464:	d06f      	beq.n	8002546 <HAL_I2C_EV_IRQHandler+0x11a>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002466:	4b47      	ldr	r3, [pc, #284]	; (8002584 <HAL_I2C_EV_IRQHandler+0x158>)
 8002468:	4023      	ands	r3, r4
 800246a:	b133      	cbz	r3, 800247a <HAL_I2C_EV_IRQHandler+0x4e>
 800246c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002470:	d003      	beq.n	800247a <HAL_I2C_EV_IRQHandler+0x4e>
 8002472:	4b45      	ldr	r3, [pc, #276]	; (8002588 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002474:	4023      	ands	r3, r4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d061      	beq.n	800253e <HAL_I2C_EV_IRQHandler+0x112>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800247a:	4b43      	ldr	r3, [pc, #268]	; (8002588 <HAL_I2C_EV_IRQHandler+0x15c>)
 800247c:	4023      	ands	r3, r4
 800247e:	b353      	cbz	r3, 80024d6 <HAL_I2C_EV_IRQHandler+0xaa>
 8002480:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002484:	d027      	beq.n	80024d6 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveTransmit_BTF(hi2c);
 8002486:	4628      	mov	r0, r5
 8002488:	f7ff fb7f 	bl	8001b8a <I2C_SlaveTransmit_BTF>
 800248c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800248e:	f014 1f01 	tst.w	r4, #65537	; 0x10001
 8002492:	d002      	beq.n	800249a <HAL_I2C_EV_IRQHandler+0x6e>
 8002494:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002498:	d11e      	bne.n	80024d8 <HAL_I2C_EV_IRQHandler+0xac>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800249a:	4b3c      	ldr	r3, [pc, #240]	; (800258c <HAL_I2C_EV_IRQHandler+0x160>)
 800249c:	4023      	ands	r3, r4
 800249e:	b113      	cbz	r3, 80024a6 <HAL_I2C_EV_IRQHandler+0x7a>
 80024a0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80024a4:	d11c      	bne.n	80024e0 <HAL_I2C_EV_IRQHandler+0xb4>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_I2C_EV_IRQHandler+0x14c>)
 80024a8:	4023      	ands	r3, r4
 80024aa:	b113      	cbz	r3, 80024b2 <HAL_I2C_EV_IRQHandler+0x86>
 80024ac:	f416 7f00 	tst.w	r6, #512	; 0x200
 80024b0:	d11a      	bne.n	80024e8 <HAL_I2C_EV_IRQHandler+0xbc>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80024b2:	4b33      	ldr	r3, [pc, #204]	; (8002580 <HAL_I2C_EV_IRQHandler+0x154>)
 80024b4:	403b      	ands	r3, r7
 80024b6:	b31b      	cbz	r3, 8002500 <HAL_I2C_EV_IRQHandler+0xd4>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <HAL_I2C_EV_IRQHandler+0x158>)
 80024ba:	4023      	ands	r3, r4
 80024bc:	b12b      	cbz	r3, 80024ca <HAL_I2C_EV_IRQHandler+0x9e>
 80024be:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80024c2:	d002      	beq.n	80024ca <HAL_I2C_EV_IRQHandler+0x9e>
 80024c4:	4b30      	ldr	r3, [pc, #192]	; (8002588 <HAL_I2C_EV_IRQHandler+0x15c>)
 80024c6:	4023      	ands	r3, r4
 80024c8:	b193      	cbz	r3, 80024f0 <HAL_I2C_EV_IRQHandler+0xc4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80024ca:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <HAL_I2C_EV_IRQHandler+0x15c>)
 80024cc:	4023      	ands	r3, r4
 80024ce:	b113      	cbz	r3, 80024d6 <HAL_I2C_EV_IRQHandler+0xaa>
 80024d0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80024d4:	d110      	bne.n	80024f8 <HAL_I2C_EV_IRQHandler+0xcc>
 80024d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Master_SB(hi2c);
 80024d8:	4628      	mov	r0, r5
 80024da:	f7ff fa25 	bl	8001928 <I2C_Master_SB>
 80024de:	e7e8      	b.n	80024b2 <HAL_I2C_EV_IRQHandler+0x86>
      I2C_Master_ADD10(hi2c);
 80024e0:	4628      	mov	r0, r5
 80024e2:	f7ff fa66 	bl	80019b2 <I2C_Master_ADD10>
 80024e6:	e7e4      	b.n	80024b2 <HAL_I2C_EV_IRQHandler+0x86>
      I2C_Master_ADDR(hi2c);
 80024e8:	4628      	mov	r0, r5
 80024ea:	f7ff fa68 	bl	80019be <I2C_Master_ADDR>
 80024ee:	e7e0      	b.n	80024b2 <HAL_I2C_EV_IRQHandler+0x86>
        I2C_MasterTransmit_TXE(hi2c);
 80024f0:	4628      	mov	r0, r5
 80024f2:	f7ff fca8 	bl	8001e46 <I2C_MasterTransmit_TXE>
 80024f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_MasterTransmit_BTF(hi2c);
 80024f8:	4628      	mov	r0, r5
 80024fa:	f7ff fd49 	bl	8001f90 <I2C_MasterTransmit_BTF>
 80024fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_I2C_EV_IRQHandler+0x164>)
 8002502:	4023      	ands	r3, r4
 8002504:	b12b      	cbz	r3, 8002512 <HAL_I2C_EV_IRQHandler+0xe6>
 8002506:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800250a:	d002      	beq.n	8002512 <HAL_I2C_EV_IRQHandler+0xe6>
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_I2C_EV_IRQHandler+0x15c>)
 800250e:	4023      	ands	r3, r4
 8002510:	b153      	cbz	r3, 8002528 <HAL_I2C_EV_IRQHandler+0xfc>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002514:	4023      	ands	r3, r4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0dd      	beq.n	80024d6 <HAL_I2C_EV_IRQHandler+0xaa>
 800251a:	f416 7f00 	tst.w	r6, #512	; 0x200
 800251e:	d0da      	beq.n	80024d6 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_MasterReceive_BTF(hi2c);
 8002520:	4628      	mov	r0, r5
 8002522:	f7ff fdd3 	bl	80020cc <I2C_MasterReceive_BTF>
 8002526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_MasterReceive_RXNE(hi2c);
 8002528:	4628      	mov	r0, r5
 800252a:	f7ff fd81 	bl	8002030 <I2C_MasterReceive_RXNE>
 800252e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Slave_ADDR(hi2c);
 8002530:	f7ff fc29 	bl	8001d86 <I2C_Slave_ADDR>
 8002534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Slave_STOPF(hi2c);
 8002536:	4628      	mov	r0, r5
 8002538:	f7ff fef6 	bl	8002328 <I2C_Slave_STOPF>
 800253c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_SlaveTransmit_TXE(hi2c);
 800253e:	4628      	mov	r0, r5
 8002540:	f7ff fbd2 	bl	8001ce8 <I2C_SlaveTransmit_TXE>
 8002544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_I2C_EV_IRQHandler+0x164>)
 8002548:	4023      	ands	r3, r4
 800254a:	b12b      	cbz	r3, 8002558 <HAL_I2C_EV_IRQHandler+0x12c>
 800254c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002550:	d002      	beq.n	8002558 <HAL_I2C_EV_IRQHandler+0x12c>
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <HAL_I2C_EV_IRQHandler+0x15c>)
 8002554:	4023      	ands	r3, r4
 8002556:	b153      	cbz	r3, 800256e <HAL_I2C_EV_IRQHandler+0x142>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_I2C_EV_IRQHandler+0x15c>)
 800255a:	4023      	ands	r3, r4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ba      	beq.n	80024d6 <HAL_I2C_EV_IRQHandler+0xaa>
 8002560:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002564:	d0b7      	beq.n	80024d6 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveReceive_BTF(hi2c);
 8002566:	4628      	mov	r0, r5
 8002568:	f7ff fb1f 	bl	8001baa <I2C_SlaveReceive_BTF>
}
 800256c:	e7b3      	b.n	80024d6 <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveReceive_RXNE(hi2c);
 800256e:	4628      	mov	r0, r5
 8002570:	f7ff fbe2 	bl	8001d38 <I2C_SlaveReceive_RXNE>
 8002574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002576:	bf00      	nop
 8002578:	00010002 	.word	0x00010002
 800257c:	00010010 	.word	0x00010010
 8002580:	00100004 	.word	0x00100004
 8002584:	00010080 	.word	0x00010080
 8002588:	00010004 	.word	0x00010004
 800258c:	00010008 	.word	0x00010008
 8002590:	00010040 	.word	0x00010040

08002594 <HAL_I2C_ER_IRQHandler>:
{
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002598:	6803      	ldr	r3, [r0, #0]
 800259a:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800259c:	685e      	ldr	r6, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800259e:	4a31      	ldr	r2, [pc, #196]	; (8002664 <HAL_I2C_ER_IRQHandler+0xd0>)
 80025a0:	4215      	tst	r5, r2
 80025a2:	d009      	beq.n	80025b8 <HAL_I2C_ER_IRQHandler+0x24>
 80025a4:	f416 7f80 	tst.w	r6, #256	; 0x100
 80025a8:	d006      	beq.n	80025b8 <HAL_I2C_ER_IRQHandler+0x24>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025b6:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80025b8:	f415 3f81 	tst.w	r5, #66048	; 0x10200
 80025bc:	d00a      	beq.n	80025d4 <HAL_I2C_ER_IRQHandler+0x40>
 80025be:	f416 7f80 	tst.w	r6, #256	; 0x100
 80025c2:	d007      	beq.n	80025d4 <HAL_I2C_ER_IRQHandler+0x40>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80025c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025c6:	f043 0302 	orr.w	r3, r3, #2
 80025ca:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80025d2:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80025d4:	f415 3f82 	tst.w	r5, #66560	; 0x10400
 80025d8:	d01a      	beq.n	8002610 <HAL_I2C_ER_IRQHandler+0x7c>
 80025da:	f416 7f80 	tst.w	r6, #256	; 0x100
 80025de:	d017      	beq.n	8002610 <HAL_I2C_ER_IRQHandler+0x7c>
    tmp1 = hi2c->Mode;
 80025e0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80025e4:	b2db      	uxtb	r3, r3
    tmp2 = hi2c->XferCount;
 80025e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80025e8:	b291      	uxth	r1, r2
    tmp3 = hi2c->State;
 80025ea:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80025ee:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 80025f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d01d      	beq.n	8002632 <HAL_I2C_ER_IRQHandler+0x9e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6423      	str	r3, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 80025fe:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b10      	cmp	r3, #16
 8002606:	d022      	beq.n	800264e <HAL_I2C_ER_IRQHandler+0xba>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800260e:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002610:	f415 3f84 	tst.w	r5, #67584	; 0x10800
 8002614:	d00a      	beq.n	800262c <HAL_I2C_ER_IRQHandler+0x98>
 8002616:	f416 7f80 	tst.w	r6, #256	; 0x100
 800261a:	d007      	beq.n	800262c <HAL_I2C_ER_IRQHandler+0x98>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800261c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800261e:	f043 0308 	orr.w	r3, r3, #8
 8002622:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800262a:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800262c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800262e:	b9a3      	cbnz	r3, 800265a <HAL_I2C_ER_IRQHandler+0xc6>
 8002630:	bd70      	pop	{r4, r5, r6, pc}
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002632:	2900      	cmp	r1, #0
 8002634:	d1df      	bne.n	80025f6 <HAL_I2C_ER_IRQHandler+0x62>
 8002636:	2a21      	cmp	r2, #33	; 0x21
 8002638:	d005      	beq.n	8002646 <HAL_I2C_ER_IRQHandler+0xb2>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800263a:	2a29      	cmp	r2, #41	; 0x29
 800263c:	d003      	beq.n	8002646 <HAL_I2C_ER_IRQHandler+0xb2>
 800263e:	2a28      	cmp	r2, #40	; 0x28
 8002640:	d1d9      	bne.n	80025f6 <HAL_I2C_ER_IRQHandler+0x62>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002642:	2821      	cmp	r0, #33	; 0x21
 8002644:	d1d7      	bne.n	80025f6 <HAL_I2C_ER_IRQHandler+0x62>
      I2C_Slave_AF(hi2c);
 8002646:	4620      	mov	r0, r4
 8002648:	f7ff fbb2 	bl	8001db0 <I2C_Slave_AF>
 800264c:	e7e0      	b.n	8002610 <HAL_I2C_ER_IRQHandler+0x7c>
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	6813      	ldr	r3, [r2, #0]
 8002652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	e7d6      	b.n	8002608 <HAL_I2C_ER_IRQHandler+0x74>
    I2C_ITError(hi2c);
 800265a:	4620      	mov	r0, r4
 800265c:	f7ff fdbe 	bl	80021dc <I2C_ITError>
}
 8002660:	e7e6      	b.n	8002630 <HAL_I2C_ER_IRQHandler+0x9c>
 8002662:	bf00      	nop
 8002664:	00010100 	.word	0x00010100

08002668 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002668:	b508      	push	{r3, lr}
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800266a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800266c:	6802      	ldr	r2, [r0, #0]
 800266e:	6813      	ldr	r3, [r2, #0]
 8002670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002674:	6013      	str	r3, [r2, #0]

  hi2c->XferCount = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	8543      	strh	r3, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800267a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800267c:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800267e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002680:	6513      	str	r3, [r2, #80]	; 0x50

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002682:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b60      	cmp	r3, #96	; 0x60
 800268a:	d00d      	beq.n	80026a8 <I2C_DMAAbort+0x40>
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	2320      	movs	r3, #32
 800268e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002692:	2300      	movs	r3, #0
 8002694:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002698:	6802      	ldr	r2, [r0, #0]
 800269a:	6813      	ldr	r3, [r2, #0]
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	6013      	str	r3, [r2, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 80026a2:	f7ff fd99 	bl	80021d8 <HAL_I2C_ErrorCallback>
 80026a6:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	2320      	movs	r3, #32
 80026aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b4:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 80026b6:	6802      	ldr	r2, [r0, #0]
 80026b8:	6813      	ldr	r3, [r2, #0]
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80026c0:	f7ff fd8b 	bl	80021da <HAL_I2C_AbortCpltCallback>
 80026c4:	bd08      	pop	{r3, pc}
	...

080026c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026c8:	b510      	push	{r4, lr}
 80026ca:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_PWREx_EnableOverDrive+0x70>)
 80026d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026e4:	2201      	movs	r2, #1
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_PWREx_EnableOverDrive+0x74>)
 80026e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026ea:	f7fe fc6d 	bl	8000fc8 <HAL_GetTick>
 80026ee:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_PWREx_EnableOverDrive+0x78>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80026f8:	d108      	bne.n	800270c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026fa:	f7fe fc65 	bl	8000fc8 <HAL_GetTick>
 80026fe:	1b00      	subs	r0, r0, r4
 8002700:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002704:	d9f4      	bls.n	80026f0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8002706:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002708:	b002      	add	sp, #8
 800270a:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800270c:	2201      	movs	r2, #1
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_PWREx_EnableOverDrive+0x7c>)
 8002710:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002712:	f7fe fc59 	bl	8000fc8 <HAL_GetTick>
 8002716:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_PWREx_EnableOverDrive+0x78>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002720:	d107      	bne.n	8002732 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002722:	f7fe fc51 	bl	8000fc8 <HAL_GetTick>
 8002726:	1b00      	subs	r0, r0, r4
 8002728:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800272c:	d9f4      	bls.n	8002718 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 800272e:	2003      	movs	r0, #3
 8002730:	e7ea      	b.n	8002708 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8002732:	2000      	movs	r0, #0
 8002734:	e7e8      	b.n	8002708 <HAL_PWREx_EnableOverDrive+0x40>
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	420e0040 	.word	0x420e0040
 8002740:	40007000 	.word	0x40007000
 8002744:	420e0044 	.word	0x420e0044

08002748 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002748:	2800      	cmp	r0, #0
 800274a:	f000 809d 	beq.w	8002888 <HAL_RCC_ClockConfig+0x140>
{
 800274e:	b570      	push	{r4, r5, r6, lr}
 8002750:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002752:	4b4f      	ldr	r3, [pc, #316]	; (8002890 <HAL_RCC_ClockConfig+0x148>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	428b      	cmp	r3, r1
 800275c:	d209      	bcs.n	8002772 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	b2cb      	uxtb	r3, r1
 8002760:	4a4b      	ldr	r2, [pc, #300]	; (8002890 <HAL_RCC_ClockConfig+0x148>)
 8002762:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002764:	6813      	ldr	r3, [r2, #0]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	4299      	cmp	r1, r3
 800276c:	d001      	beq.n	8002772 <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 800276e:	2001      	movs	r0, #1
 8002770:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	f013 0f02 	tst.w	r3, #2
 8002778:	d017      	beq.n	80027aa <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277a:	f013 0f04 	tst.w	r3, #4
 800277e:	d004      	beq.n	800278a <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002780:	4a44      	ldr	r2, [pc, #272]	; (8002894 <HAL_RCC_ClockConfig+0x14c>)
 8002782:	6893      	ldr	r3, [r2, #8]
 8002784:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002788:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	f013 0f08 	tst.w	r3, #8
 8002790:	d004      	beq.n	800279c <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002792:	4a40      	ldr	r2, [pc, #256]	; (8002894 <HAL_RCC_ClockConfig+0x14c>)
 8002794:	6893      	ldr	r3, [r2, #8]
 8002796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800279a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800279c:	4a3d      	ldr	r2, [pc, #244]	; (8002894 <HAL_RCC_ClockConfig+0x14c>)
 800279e:	6893      	ldr	r3, [r2, #8]
 80027a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a4:	68a0      	ldr	r0, [r4, #8]
 80027a6:	4303      	orrs	r3, r0
 80027a8:	6093      	str	r3, [r2, #8]
 80027aa:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	f013 0f01 	tst.w	r3, #1
 80027b2:	d032      	beq.n	800281a <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b4:	6863      	ldr	r3, [r4, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d021      	beq.n	80027fe <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ba:	1e9a      	subs	r2, r3, #2
 80027bc:	2a01      	cmp	r2, #1
 80027be:	d925      	bls.n	800280c <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c0:	4a34      	ldr	r2, [pc, #208]	; (8002894 <HAL_RCC_ClockConfig+0x14c>)
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	f012 0f02 	tst.w	r2, #2
 80027c8:	d060      	beq.n	800288c <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ca:	4932      	ldr	r1, [pc, #200]	; (8002894 <HAL_RCC_ClockConfig+0x14c>)
 80027cc:	688a      	ldr	r2, [r1, #8]
 80027ce:	f022 0203 	bic.w	r2, r2, #3
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d6:	f7fe fbf7 	bl	8000fc8 <HAL_GetTick>
 80027da:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_RCC_ClockConfig+0x14c>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	6862      	ldr	r2, [r4, #4]
 80027e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027ea:	d016      	beq.n	800281a <HAL_RCC_ClockConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7fe fbec 	bl	8000fc8 <HAL_GetTick>
 80027f0:	1b80      	subs	r0, r0, r6
 80027f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80027f6:	4298      	cmp	r0, r3
 80027f8:	d9f0      	bls.n	80027dc <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_TIMEOUT;
 80027fa:	2003      	movs	r0, #3
 80027fc:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4a25      	ldr	r2, [pc, #148]	; (8002894 <HAL_RCC_ClockConfig+0x14c>)
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002806:	d1e0      	bne.n	80027ca <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002808:	2001      	movs	r0, #1
 800280a:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	4a21      	ldr	r2, [pc, #132]	; (8002894 <HAL_RCC_ClockConfig+0x14c>)
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002814:	d1d9      	bne.n	80027ca <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002816:	2001      	movs	r0, #1
 8002818:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCC_ClockConfig+0x148>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	429d      	cmp	r5, r3
 8002824:	d209      	bcs.n	800283a <HAL_RCC_ClockConfig+0xf2>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	b2ea      	uxtb	r2, r5
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_RCC_ClockConfig+0x148>)
 800282a:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	429d      	cmp	r5, r3
 8002834:	d001      	beq.n	800283a <HAL_RCC_ClockConfig+0xf2>
    {
      return HAL_ERROR;
 8002836:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8002838:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	f013 0f04 	tst.w	r3, #4
 8002840:	d006      	beq.n	8002850 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002842:	4a14      	ldr	r2, [pc, #80]	; (8002894 <HAL_RCC_ClockConfig+0x14c>)
 8002844:	6893      	ldr	r3, [r2, #8]
 8002846:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800284a:	68e1      	ldr	r1, [r4, #12]
 800284c:	430b      	orrs	r3, r1
 800284e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	f013 0f08 	tst.w	r3, #8
 8002856:	d007      	beq.n	8002868 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002858:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <HAL_RCC_ClockConfig+0x14c>)
 800285a:	6893      	ldr	r3, [r2, #8]
 800285c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002860:	6921      	ldr	r1, [r4, #16]
 8002862:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002866:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002868:	f000 f840 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x14c>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002874:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_RCC_ClockConfig+0x150>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	40d8      	lsrs	r0, r3
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_RCC_ClockConfig+0x154>)
 800287c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe fb56 	bl	8000f30 <HAL_InitTick>
  return HAL_OK;
 8002884:	2000      	movs	r0, #0
 8002886:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002888:	2001      	movs	r0, #1
 800288a:	4770      	bx	lr
        return HAL_ERROR;
 800288c:	2001      	movs	r0, #1
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	40023c00 	.word	0x40023c00
 8002894:	40023800 	.word	0x40023800
 8002898:	08008338 	.word	0x08008338
 800289c:	20000008 	.word	0x20000008

080028a0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80028a0:	4b01      	ldr	r3, [pc, #4]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000008 	.word	0x20000008

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028ae:	f7ff fff7 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80028ba:	4a03      	ldr	r2, [pc, #12]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80028bc:	5cd3      	ldrb	r3, [r2, r3]
}
 80028be:	40d8      	lsrs	r0, r3
 80028c0:	bd08      	pop	{r3, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	08008348 	.word	0x08008348

080028cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028cc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028ce:	f7ff ffe7 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028d2:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80028da:	4a03      	ldr	r2, [pc, #12]	; (80028e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
}
 80028de:	40d8      	lsrs	r0, r3
 80028e0:	bd08      	pop	{r3, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08008348 	.word	0x08008348

080028ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ee:	4b5c      	ldr	r3, [pc, #368]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x174>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d006      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x1c>
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d05a      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0xc8>
 80028fe:	2b04      	cmp	r3, #4
 8002900:	f000 80ac 	beq.w	8002a5c <HAL_RCC_GetSysClockFreq+0x170>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002904:	4857      	ldr	r0, [pc, #348]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x178>)
 8002906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002908:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x174>)
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002916:	d02a      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002918:	4b51      	ldr	r3, [pc, #324]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x174>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002920:	461e      	mov	r6, r3
 8002922:	2700      	movs	r7, #0
 8002924:	015c      	lsls	r4, r3, #5
 8002926:	2500      	movs	r5, #0
 8002928:	1ae4      	subs	r4, r4, r3
 800292a:	eb65 0507 	sbc.w	r5, r5, r7
 800292e:	01a9      	lsls	r1, r5, #6
 8002930:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002934:	01a0      	lsls	r0, r4, #6
 8002936:	1b00      	subs	r0, r0, r4
 8002938:	eb61 0105 	sbc.w	r1, r1, r5
 800293c:	00cb      	lsls	r3, r1, #3
 800293e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002942:	00c4      	lsls	r4, r0, #3
 8002944:	19a0      	adds	r0, r4, r6
 8002946:	eb43 0107 	adc.w	r1, r3, r7
 800294a:	024b      	lsls	r3, r1, #9
 800294c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002950:	0244      	lsls	r4, r0, #9
 8002952:	4620      	mov	r0, r4
 8002954:	4619      	mov	r1, r3
 8002956:	2300      	movs	r3, #0
 8002958:	f7fe f962 	bl	8000c20 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800295c:	4b40      	ldr	r3, [pc, #256]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x174>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002964:	3301      	adds	r3, #1
 8002966:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002968:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800296c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296e:	4b3c      	ldr	r3, [pc, #240]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x174>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002976:	461e      	mov	r6, r3
 8002978:	2700      	movs	r7, #0
 800297a:	015c      	lsls	r4, r3, #5
 800297c:	2500      	movs	r5, #0
 800297e:	1ae4      	subs	r4, r4, r3
 8002980:	eb65 0507 	sbc.w	r5, r5, r7
 8002984:	01a9      	lsls	r1, r5, #6
 8002986:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800298a:	01a0      	lsls	r0, r4, #6
 800298c:	1b00      	subs	r0, r0, r4
 800298e:	eb61 0105 	sbc.w	r1, r1, r5
 8002992:	00cb      	lsls	r3, r1, #3
 8002994:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002998:	00c4      	lsls	r4, r0, #3
 800299a:	19a0      	adds	r0, r4, r6
 800299c:	eb43 0107 	adc.w	r1, r3, r7
 80029a0:	028b      	lsls	r3, r1, #10
 80029a2:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80029a6:	0284      	lsls	r4, r0, #10
 80029a8:	4620      	mov	r0, r4
 80029aa:	4619      	mov	r1, r3
 80029ac:	2300      	movs	r3, #0
 80029ae:	f7fe f937 	bl	8000c20 <__aeabi_uldivmod>
 80029b2:	e7d3      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x70>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b4:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x174>)
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80029c2:	d028      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x12a>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c4:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x174>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80029cc:	461e      	mov	r6, r3
 80029ce:	2700      	movs	r7, #0
 80029d0:	015c      	lsls	r4, r3, #5
 80029d2:	2500      	movs	r5, #0
 80029d4:	1ae4      	subs	r4, r4, r3
 80029d6:	eb65 0507 	sbc.w	r5, r5, r7
 80029da:	01a9      	lsls	r1, r5, #6
 80029dc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80029e0:	01a0      	lsls	r0, r4, #6
 80029e2:	1b00      	subs	r0, r0, r4
 80029e4:	eb61 0105 	sbc.w	r1, r1, r5
 80029e8:	00cb      	lsls	r3, r1, #3
 80029ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80029ee:	00c4      	lsls	r4, r0, #3
 80029f0:	19a0      	adds	r0, r4, r6
 80029f2:	eb43 0107 	adc.w	r1, r3, r7
 80029f6:	024b      	lsls	r3, r1, #9
 80029f8:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80029fc:	0244      	lsls	r4, r0, #9
 80029fe:	4620      	mov	r0, r4
 8002a00:	4619      	mov	r1, r3
 8002a02:	2300      	movs	r3, #0
 8002a04:	f7fe f90c 	bl	8000c20 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a08:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x174>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 8002a10:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x174>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002a1e:	461e      	mov	r6, r3
 8002a20:	2700      	movs	r7, #0
 8002a22:	015c      	lsls	r4, r3, #5
 8002a24:	2500      	movs	r5, #0
 8002a26:	1ae4      	subs	r4, r4, r3
 8002a28:	eb65 0507 	sbc.w	r5, r5, r7
 8002a2c:	01a9      	lsls	r1, r5, #6
 8002a2e:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002a32:	01a0      	lsls	r0, r4, #6
 8002a34:	1b00      	subs	r0, r0, r4
 8002a36:	eb61 0105 	sbc.w	r1, r1, r5
 8002a3a:	00cb      	lsls	r3, r1, #3
 8002a3c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002a40:	00c4      	lsls	r4, r0, #3
 8002a42:	19a0      	adds	r0, r4, r6
 8002a44:	eb43 0107 	adc.w	r1, r3, r7
 8002a48:	028b      	lsls	r3, r1, #10
 8002a4a:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002a4e:	0284      	lsls	r4, r0, #10
 8002a50:	4620      	mov	r0, r4
 8002a52:	4619      	mov	r1, r3
 8002a54:	2300      	movs	r3, #0
 8002a56:	f7fe f8e3 	bl	8000c20 <__aeabi_uldivmod>
 8002a5a:	e7d5      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x11c>
      sysclockfreq = HSE_VALUE;
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x17c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	007a1200 	.word	0x007a1200

08002a6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a72:	6803      	ldr	r3, [r0, #0]
 8002a74:	f013 0f01 	tst.w	r3, #1
 8002a78:	d041      	beq.n	8002afe <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a7a:	4ba6      	ldr	r3, [pc, #664]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d032      	beq.n	8002aec <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a86:	4ba3      	ldr	r3, [pc, #652]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d027      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a92:	4ba0      	ldr	r3, [pc, #640]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d059      	beq.n	8002b52 <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9e:	6863      	ldr	r3, [r4, #4]
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa4:	d05b      	beq.n	8002b5e <HAL_RCC_OscConfig+0xf2>
 8002aa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aaa:	d05e      	beq.n	8002b6a <HAL_RCC_OscConfig+0xfe>
 8002aac:	4b99      	ldr	r3, [pc, #612]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002abc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002abe:	6863      	ldr	r3, [r4, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d05c      	beq.n	8002b7e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fa80 	bl	8000fc8 <HAL_GetTick>
 8002ac8:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	4b92      	ldr	r3, [pc, #584]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ad2:	d114      	bne.n	8002afe <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7fe fa78 	bl	8000fc8 <HAL_GetTick>
 8002ad8:	1b40      	subs	r0, r0, r5
 8002ada:	2864      	cmp	r0, #100	; 0x64
 8002adc:	d9f5      	bls.n	8002aca <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8002ade:	2003      	movs	r0, #3
 8002ae0:	e19d      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ae2:	4b8c      	ldr	r3, [pc, #560]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002aea:	d0d2      	beq.n	8002a92 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aec:	4b89      	ldr	r3, [pc, #548]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_OscConfig+0x92>
 8002af6:	6863      	ldr	r3, [r4, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 818d 	beq.w	8002e18 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	f013 0f02 	tst.w	r3, #2
 8002b04:	d067      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b06:	4b83      	ldr	r3, [pc, #524]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f013 0f0c 	tst.w	r3, #12
 8002b0e:	d04a      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b10:	4b80      	ldr	r3, [pc, #512]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d03f      	beq.n	8002b9c <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1c:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b24:	2b0c      	cmp	r3, #12
 8002b26:	d048      	beq.n	8002bba <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b28:	68e3      	ldr	r3, [r4, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d074      	beq.n	8002c18 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4b79      	ldr	r3, [pc, #484]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe fa48 	bl	8000fc8 <HAL_GetTick>
 8002b38:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3a:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f013 0f02 	tst.w	r3, #2
 8002b42:	d160      	bne.n	8002c06 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b44:	f7fe fa40 	bl	8000fc8 <HAL_GetTick>
 8002b48:	1b40      	subs	r0, r0, r5
 8002b4a:	2802      	cmp	r0, #2
 8002b4c:	d9f5      	bls.n	8002b3a <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8002b4e:	2003      	movs	r0, #3
 8002b50:	e165      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b52:	4b70      	ldr	r3, [pc, #448]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b5a:	d0a0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x32>
 8002b5c:	e7c6      	b.n	8002aec <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5e:	4a6d      	ldr	r2, [pc, #436]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002b60:	6813      	ldr	r3, [r2, #0]
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	e7a9      	b.n	8002abe <HAL_RCC_OscConfig+0x52>
 8002b6a:	4b6a      	ldr	r3, [pc, #424]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e79f      	b.n	8002abe <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fa23 	bl	8000fc8 <HAL_GetTick>
 8002b82:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b84:	4b63      	ldr	r3, [pc, #396]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b8c:	d0b7      	beq.n	8002afe <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8e:	f7fe fa1b 	bl	8000fc8 <HAL_GetTick>
 8002b92:	1b40      	subs	r0, r0, r5
 8002b94:	2864      	cmp	r0, #100	; 0x64
 8002b96:	d9f5      	bls.n	8002b84 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8002b98:	2003      	movs	r0, #3
 8002b9a:	e140      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b9c:	4b5d      	ldr	r3, [pc, #372]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002ba4:	d1ba      	bne.n	8002b1c <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f013 0f02 	tst.w	r3, #2
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x15a>
 8002bb0:	68e3      	ldr	r3, [r4, #12]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d007      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	e131      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bba:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002bc2:	d1b1      	bne.n	8002b28 <HAL_RCC_OscConfig+0xbc>
 8002bc4:	e7ef      	b.n	8002ba6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc6:	4a53      	ldr	r2, [pc, #332]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002bc8:	6813      	ldr	r3, [r2, #0]
 8002bca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002bce:	6921      	ldr	r1, [r4, #16]
 8002bd0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002bd4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	f013 0f08 	tst.w	r3, #8
 8002bdc:	d040      	beq.n	8002c60 <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bde:	6963      	ldr	r3, [r4, #20]
 8002be0:	b363      	cbz	r3, 8002c3c <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be2:	2201      	movs	r2, #1
 8002be4:	4b4d      	ldr	r3, [pc, #308]	; (8002d1c <HAL_RCC_OscConfig+0x2b0>)
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe f9ee 	bl	8000fc8 <HAL_GetTick>
 8002bec:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	4b49      	ldr	r3, [pc, #292]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf2:	f013 0f02 	tst.w	r3, #2
 8002bf6:	d133      	bne.n	8002c60 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7fe f9e6 	bl	8000fc8 <HAL_GetTick>
 8002bfc:	1b40      	subs	r0, r0, r5
 8002bfe:	2802      	cmp	r0, #2
 8002c00:	d9f5      	bls.n	8002bee <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8002c02:	2003      	movs	r0, #3
 8002c04:	e10b      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c06:	4a43      	ldr	r2, [pc, #268]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002c08:	6813      	ldr	r3, [r2, #0]
 8002c0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c0e:	6921      	ldr	r1, [r4, #16]
 8002c10:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e7de      	b.n	8002bd6 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4b3f      	ldr	r3, [pc, #252]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c1e:	f7fe f9d3 	bl	8000fc8 <HAL_GetTick>
 8002c22:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c24:	4b3b      	ldr	r3, [pc, #236]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f013 0f02 	tst.w	r3, #2
 8002c2c:	d0d3      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7fe f9cb 	bl	8000fc8 <HAL_GetTick>
 8002c32:	1b40      	subs	r0, r0, r5
 8002c34:	2802      	cmp	r0, #2
 8002c36:	d9f5      	bls.n	8002c24 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8002c38:	2003      	movs	r0, #3
 8002c3a:	e0f0      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <HAL_RCC_OscConfig+0x2b0>)
 8002c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c42:	f7fe f9c1 	bl	8000fc8 <HAL_GetTick>
 8002c46:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4c:	f013 0f02 	tst.w	r3, #2
 8002c50:	d006      	beq.n	8002c60 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c52:	f7fe f9b9 	bl	8000fc8 <HAL_GetTick>
 8002c56:	1b40      	subs	r0, r0, r5
 8002c58:	2802      	cmp	r0, #2
 8002c5a:	d9f5      	bls.n	8002c48 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8002c5c:	2003      	movs	r0, #3
 8002c5e:	e0de      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	f013 0f04 	tst.w	r3, #4
 8002c66:	d079      	beq.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c68:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002c70:	d133      	bne.n	8002cda <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c8a:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_OscConfig+0x2b4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c94:	d023      	beq.n	8002cde <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c96:	68a3      	ldr	r3, [r4, #8]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d034      	beq.n	8002d06 <HAL_RCC_OscConfig+0x29a>
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d041      	beq.n	8002d24 <HAL_RCC_OscConfig+0x2b8>
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002ca2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	671a      	str	r2, [r3, #112]	; 0x70
 8002caa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cac:	f022 0204 	bic.w	r2, r2, #4
 8002cb0:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb2:	68a3      	ldr	r3, [r4, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d03f      	beq.n	8002d38 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe f986 	bl	8000fc8 <HAL_GetTick>
 8002cbc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	f013 0f02 	tst.w	r3, #2
 8002cc6:	d148      	bne.n	8002d5a <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc8:	f7fe f97e 	bl	8000fc8 <HAL_GetTick>
 8002ccc:	1b80      	subs	r0, r0, r6
 8002cce:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cd2:	4298      	cmp	r0, r3
 8002cd4:	d9f3      	bls.n	8002cbe <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 8002cd6:	2003      	movs	r0, #3
 8002cd8:	e0a1      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002cda:	2500      	movs	r5, #0
 8002cdc:	e7d6      	b.n	8002c8c <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cde:	4a10      	ldr	r2, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x2b4>)
 8002ce0:	6813      	ldr	r3, [r2, #0]
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002ce8:	f7fe f96e 	bl	8000fc8 <HAL_GetTick>
 8002cec:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cee:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_RCC_OscConfig+0x2b4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002cf6:	d1ce      	bne.n	8002c96 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf8:	f7fe f966 	bl	8000fc8 <HAL_GetTick>
 8002cfc:	1b80      	subs	r0, r0, r6
 8002cfe:	2802      	cmp	r0, #2
 8002d00:	d9f5      	bls.n	8002cee <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8002d02:	2003      	movs	r0, #3
 8002d04:	e08b      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d06:	4a03      	ldr	r2, [pc, #12]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002d08:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d10:	e7cf      	b.n	8002cb2 <HAL_RCC_OscConfig+0x246>
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	42470000 	.word	0x42470000
 8002d1c:	42470e80 	.word	0x42470e80
 8002d20:	40007000 	.word	0x40007000
 8002d24:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <HAL_RCC_OscConfig+0x3bc>)
 8002d26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d28:	f042 0204 	orr.w	r2, r2, #4
 8002d2c:	671a      	str	r2, [r3, #112]	; 0x70
 8002d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d30:	f042 0201 	orr.w	r2, r2, #1
 8002d34:	671a      	str	r2, [r3, #112]	; 0x70
 8002d36:	e7bc      	b.n	8002cb2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe f946 	bl	8000fc8 <HAL_GetTick>
 8002d3c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <HAL_RCC_OscConfig+0x3bc>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	f013 0f02 	tst.w	r3, #2
 8002d46:	d008      	beq.n	8002d5a <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7fe f93e 	bl	8000fc8 <HAL_GetTick>
 8002d4c:	1b80      	subs	r0, r0, r6
 8002d4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d52:	4298      	cmp	r0, r3
 8002d54:	d9f3      	bls.n	8002d3e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8002d56:	2003      	movs	r0, #3
 8002d58:	e061      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d5a:	b9e5      	cbnz	r5, 8002d96 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5c:	69a3      	ldr	r3, [r4, #24]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d05c      	beq.n	8002e1c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d62:	4a31      	ldr	r2, [pc, #196]	; (8002e28 <HAL_RCC_OscConfig+0x3bc>)
 8002d64:	6892      	ldr	r2, [r2, #8]
 8002d66:	f002 020c 	and.w	r2, r2, #12
 8002d6a:	2a08      	cmp	r2, #8
 8002d6c:	d059      	beq.n	8002e22 <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d017      	beq.n	8002da2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	2200      	movs	r2, #0
 8002d74:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <HAL_RCC_OscConfig+0x3c0>)
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f926 	bl	8000fc8 <HAL_GetTick>
 8002d7c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <HAL_RCC_OscConfig+0x3bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d86:	d045      	beq.n	8002e14 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe f91e 	bl	8000fc8 <HAL_GetTick>
 8002d8c:	1b00      	subs	r0, r0, r4
 8002d8e:	2802      	cmp	r0, #2
 8002d90:	d9f5      	bls.n	8002d7e <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 8002d92:	2003      	movs	r0, #3
 8002d94:	e043      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d96:	4a24      	ldr	r2, [pc, #144]	; (8002e28 <HAL_RCC_OscConfig+0x3bc>)
 8002d98:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002da0:	e7dc      	b.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 8002da2:	2200      	movs	r2, #0
 8002da4:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <HAL_RCC_OscConfig+0x3c0>)
 8002da6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002da8:	f7fe f90e 	bl	8000fc8 <HAL_GetTick>
 8002dac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <HAL_RCC_OscConfig+0x3bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002db6:	d006      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe f906 	bl	8000fc8 <HAL_GetTick>
 8002dbc:	1b40      	subs	r0, r0, r5
 8002dbe:	2802      	cmp	r0, #2
 8002dc0:	d9f5      	bls.n	8002dae <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 8002dc2:	2003      	movs	r0, #3
 8002dc4:	e02b      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc6:	69e3      	ldr	r3, [r4, #28]
 8002dc8:	6a22      	ldr	r2, [r4, #32]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002dce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002dd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002dd4:	0852      	lsrs	r2, r2, #1
 8002dd6:	3a01      	subs	r2, #1
 8002dd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ddc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002dde:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002de2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002de4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002de8:	4a0f      	ldr	r2, [pc, #60]	; (8002e28 <HAL_RCC_OscConfig+0x3bc>)
 8002dea:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002dec:	2201      	movs	r2, #1
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <HAL_RCC_OscConfig+0x3c0>)
 8002df0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002df2:	f7fe f8e9 	bl	8000fc8 <HAL_GetTick>
 8002df6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_OscConfig+0x3bc>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e00:	d106      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe f8e1 	bl	8000fc8 <HAL_GetTick>
 8002e06:	1b00      	subs	r0, r0, r4
 8002e08:	2802      	cmp	r0, #2
 8002e0a:	d9f5      	bls.n	8002df8 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 8002e0c:	2003      	movs	r0, #3
 8002e0e:	e006      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002e10:	2000      	movs	r0, #0
 8002e12:	e004      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
 8002e14:	2000      	movs	r0, #0
 8002e16:	e002      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 8002e18:	2001      	movs	r0, #1
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 8002e1c:	2000      	movs	r0, #0
}
 8002e1e:	b002      	add	sp, #8
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002e22:	2001      	movs	r0, #1
 8002e24:	e7fb      	b.n	8002e1e <HAL_RCC_OscConfig+0x3b2>
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	42470060 	.word	0x42470060

08002e30 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d03b      	beq.n	8002eac <HAL_SPI_Init+0x7c>
{
 8002e34:	b510      	push	{r4, lr}
 8002e36:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002e3c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d02e      	beq.n	8002ea2 <HAL_SPI_Init+0x72>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e44:	2302      	movs	r3, #2
 8002e46:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e4a:	6822      	ldr	r2, [r4, #0]
 8002e4c:	6813      	ldr	r3, [r2, #0]
 8002e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e52:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e54:	6822      	ldr	r2, [r4, #0]
 8002e56:	6863      	ldr	r3, [r4, #4]
 8002e58:	68a1      	ldr	r1, [r4, #8]
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	68e1      	ldr	r1, [r4, #12]
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	6921      	ldr	r1, [r4, #16]
 8002e62:	430b      	orrs	r3, r1
 8002e64:	6961      	ldr	r1, [r4, #20]
 8002e66:	430b      	orrs	r3, r1
 8002e68:	69a1      	ldr	r1, [r4, #24]
 8002e6a:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	69e1      	ldr	r1, [r4, #28]
 8002e72:	430b      	orrs	r3, r1
 8002e74:	6a21      	ldr	r1, [r4, #32]
 8002e76:	430b      	orrs	r3, r1
 8002e78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002e7e:	6822      	ldr	r2, [r4, #0]
 8002e80:	8b63      	ldrh	r3, [r4, #26]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e8c:	6822      	ldr	r2, [r4, #0]
 8002e8e:	69d3      	ldr	r3, [r2, #28]
 8002e90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e94:	61d3      	str	r3, [r2, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e96:	2000      	movs	r0, #0
 8002e98:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8002ea0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002ea2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002ea6:	f001 fbf1 	bl	800468c <HAL_SPI_MspInit>
 8002eaa:	e7cb      	b.n	8002e44 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002eac:	2001      	movs	r0, #1
 8002eae:	4770      	bx	lr

08002eb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_SPI_IRQHandler>:
{
 8002eb4:	b510      	push	{r4, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8002eba:	6802      	ldr	r2, [r0, #0]
 8002ebc:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002ebe:	6893      	ldr	r3, [r2, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002ec0:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8002ec4:	2801      	cmp	r0, #1
 8002ec6:	d05c      	beq.n	8002f82 <HAL_SPI_IRQHandler+0xce>
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8002ec8:	f013 0f02 	tst.w	r3, #2
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_IRQHandler+0x20>
 8002ece:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002ed2:	d15d      	bne.n	8002f90 <HAL_SPI_IRQHandler+0xdc>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8002ed4:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8002ed8:	d05d      	beq.n	8002f96 <HAL_SPI_IRQHandler+0xe2>
 8002eda:	f011 0f20 	tst.w	r1, #32
 8002ede:	d05a      	beq.n	8002f96 <HAL_SPI_IRQHandler+0xe2>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8002ee0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ee4:	d00f      	beq.n	8002f06 <HAL_SPI_IRQHandler+0x52>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ee6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002eea:	b2c0      	uxtb	r0, r0
 8002eec:	2803      	cmp	r0, #3
 8002eee:	d054      	beq.n	8002f9a <HAL_SPI_IRQHandler+0xe6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ef0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ef2:	f040 0004 	orr.w	r0, r0, #4
 8002ef6:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ef8:	2000      	movs	r0, #0
 8002efa:	9000      	str	r0, [sp, #0]
 8002efc:	68d0      	ldr	r0, [r2, #12]
 8002efe:	9000      	str	r0, [sp, #0]
 8002f00:	6890      	ldr	r0, [r2, #8]
 8002f02:	9000      	str	r0, [sp, #0]
 8002f04:	9800      	ldr	r0, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8002f06:	f013 0f20 	tst.w	r3, #32
 8002f0a:	d00c      	beq.n	8002f26 <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f0e:	f040 0001 	orr.w	r0, r0, #1
 8002f12:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f14:	2000      	movs	r0, #0
 8002f16:	9002      	str	r0, [sp, #8]
 8002f18:	6890      	ldr	r0, [r2, #8]
 8002f1a:	9002      	str	r0, [sp, #8]
 8002f1c:	6810      	ldr	r0, [r2, #0]
 8002f1e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002f22:	6010      	str	r0, [r2, #0]
 8002f24:	9a02      	ldr	r2, [sp, #8]
    if((itflag & SPI_FLAG_FRE) != RESET)
 8002f26:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f2a:	d009      	beq.n	8002f40 <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002f2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f2e:	f043 0308 	orr.w	r3, r3, #8
 8002f32:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f34:	2300      	movs	r3, #0
 8002f36:	9303      	str	r3, [sp, #12]
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	9303      	str	r3, [sp, #12]
 8002f3e:	9b03      	ldr	r3, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f42:	b343      	cbz	r3, 8002f96 <HAL_SPI_IRQHandler+0xe2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	6853      	ldr	r3, [r2, #4]
 8002f48:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002f4c:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f54:	f011 0f03 	tst.w	r1, #3
 8002f58:	d027      	beq.n	8002faa <HAL_SPI_IRQHandler+0xf6>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002f5a:	6822      	ldr	r2, [r4, #0]
 8002f5c:	6853      	ldr	r3, [r2, #4]
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	6053      	str	r3, [r2, #4]
        if(hspi->hdmarx != NULL)
 8002f64:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002f66:	b123      	cbz	r3, 8002f72 <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f68:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <HAL_SPI_IRQHandler+0x100>)
 8002f6a:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8002f6c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002f6e:	f7fe faf1 	bl	8001554 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8002f72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002f74:	b17b      	cbz	r3, 8002f96 <HAL_SPI_IRQHandler+0xe2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f76:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <HAL_SPI_IRQHandler+0x100>)
 8002f78:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8002f7a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002f7c:	f7fe faea 	bl	8001554 <HAL_DMA_Abort_IT>
 8002f80:	e009      	b.n	8002f96 <HAL_SPI_IRQHandler+0xe2>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002f82:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002f86:	d09f      	beq.n	8002ec8 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8002f88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	4798      	blx	r3
    return;
 8002f8e:	e002      	b.n	8002f96 <HAL_SPI_IRQHandler+0xe2>
    hspi->TxISR(hspi);
 8002f90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f92:	4620      	mov	r0, r4
 8002f94:	4798      	blx	r3
}
 8002f96:	b004      	add	sp, #16
 8002f98:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	68d3      	ldr	r3, [r2, #12]
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	6893      	ldr	r3, [r2, #8]
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	9b01      	ldr	r3, [sp, #4]
        return;
 8002fa8:	e7f5      	b.n	8002f96 <HAL_SPI_IRQHandler+0xe2>
        HAL_SPI_ErrorCallback(hspi);
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7ff ff80 	bl	8002eb0 <HAL_SPI_ErrorCallback>
 8002fb0:	e7f1      	b.n	8002f96 <HAL_SPI_IRQHandler+0xe2>
 8002fb2:	bf00      	nop
 8002fb4:	08002fb9 	.word	0x08002fb9

08002fb8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002fc0:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8002fc2:	f7ff ff75 	bl	8002eb0 <HAL_SPI_ErrorCallback>
 8002fc6:	bd08      	pop	{r3, pc}

08002fc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fc8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fca:	6a03      	ldr	r3, [r0, #32]
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002fd4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fd6:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fdc:	680d      	ldr	r5, [r1, #0]
 8002fde:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fe0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fe4:	688d      	ldr	r5, [r1, #8]
 8002fe6:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002fe8:	4d0f      	ldr	r5, [pc, #60]	; (8003028 <TIM_OC1_SetConfig+0x60>)
 8002fea:	42a8      	cmp	r0, r5
 8002fec:	d01a      	beq.n	8003024 <TIM_OC1_SetConfig+0x5c>
 8002fee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ff2:	42a8      	cmp	r0, r5
 8002ff4:	d014      	beq.n	8003020 <TIM_OC1_SetConfig+0x58>
 8002ff6:	2500      	movs	r5, #0
 8002ff8:	b15d      	cbz	r5, 8003012 <TIM_OC1_SetConfig+0x4a>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ffa:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ffe:	68cd      	ldr	r5, [r1, #12]
 8003000:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003002:	f023 0304 	bic.w	r3, r3, #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003006:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800300a:	694d      	ldr	r5, [r1, #20]
 800300c:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800300e:	698d      	ldr	r5, [r1, #24]
 8003010:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003012:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003014:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003016:	684a      	ldr	r2, [r1, #4]
 8003018:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800301a:	6203      	str	r3, [r0, #32]
} 
 800301c:	bc30      	pop	{r4, r5}
 800301e:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003020:	2501      	movs	r5, #1
 8003022:	e7e9      	b.n	8002ff8 <TIM_OC1_SetConfig+0x30>
 8003024:	2501      	movs	r5, #1
 8003026:	e7e7      	b.n	8002ff8 <TIM_OC1_SetConfig+0x30>
 8003028:	40010000 	.word	0x40010000

0800302c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800302c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800302e:	6a03      	ldr	r3, [r0, #32]
 8003030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003034:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003036:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003038:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800303a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800303c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003040:	680d      	ldr	r5, [r1, #0]
 8003042:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003048:	688d      	ldr	r5, [r1, #8]
 800304a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800304e:	4d11      	ldr	r5, [pc, #68]	; (8003094 <TIM_OC3_SetConfig+0x68>)
 8003050:	42a8      	cmp	r0, r5
 8003052:	d01d      	beq.n	8003090 <TIM_OC3_SetConfig+0x64>
 8003054:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003058:	42a8      	cmp	r0, r5
 800305a:	d017      	beq.n	800308c <TIM_OC3_SetConfig+0x60>
 800305c:	2500      	movs	r5, #0
 800305e:	b175      	cbz	r5, 800307e <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003064:	68cd      	ldr	r5, [r1, #12]
 8003066:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800306a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800306e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003072:	694d      	ldr	r5, [r1, #20]
 8003074:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003078:	698d      	ldr	r5, [r1, #24]
 800307a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003080:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003082:	684a      	ldr	r2, [r1, #4]
 8003084:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003086:	6203      	str	r3, [r0, #32]
}
 8003088:	bc30      	pop	{r4, r5}
 800308a:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800308c:	2501      	movs	r5, #1
 800308e:	e7e6      	b.n	800305e <TIM_OC3_SetConfig+0x32>
 8003090:	2501      	movs	r5, #1
 8003092:	e7e4      	b.n	800305e <TIM_OC3_SetConfig+0x32>
 8003094:	40010000 	.word	0x40010000

08003098 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800309a:	6a03      	ldr	r3, [r0, #32]
 800309c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030a0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80030a4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030a6:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030a8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ac:	680d      	ldr	r5, [r1, #0]
 80030ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030b6:	688d      	ldr	r5, [r1, #8]
 80030b8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80030bc:	4d0c      	ldr	r5, [pc, #48]	; (80030f0 <TIM_OC4_SetConfig+0x58>)
 80030be:	42a8      	cmp	r0, r5
 80030c0:	d013      	beq.n	80030ea <TIM_OC4_SetConfig+0x52>
 80030c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030c6:	42a8      	cmp	r0, r5
 80030c8:	d00d      	beq.n	80030e6 <TIM_OC4_SetConfig+0x4e>
 80030ca:	2500      	movs	r5, #0
 80030cc:	b125      	cbz	r5, 80030d8 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030ce:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030d2:	694d      	ldr	r5, [r1, #20]
 80030d4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d8:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80030da:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030dc:	684a      	ldr	r2, [r1, #4]
 80030de:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e0:	6203      	str	r3, [r0, #32]
}
 80030e2:	bc30      	pop	{r4, r5}
 80030e4:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80030e6:	2501      	movs	r5, #1
 80030e8:	e7f0      	b.n	80030cc <TIM_OC4_SetConfig+0x34>
 80030ea:	2501      	movs	r5, #1
 80030ec:	e7ee      	b.n	80030cc <TIM_OC4_SetConfig+0x34>
 80030ee:	bf00      	nop
 80030f0:	40010000 	.word	0x40010000

080030f4 <TIM_TI2_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80030f4:	b430      	push	{r4, r5}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f6:	6a04      	ldr	r4, [r0, #32]
 80030f8:	f024 0410 	bic.w	r4, r4, #16
 80030fc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030fe:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003100:	6a05      	ldr	r5, [r0, #32]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003102:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003106:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800310a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800310e:	031b      	lsls	r3, r3, #12
 8003110:	b29b      	uxth	r3, r3
 8003112:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003114:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003118:	0109      	lsls	r1, r1, #4
 800311a:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 800311e:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003120:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003122:	6205      	str	r5, [r0, #32]
}
 8003124:	bc30      	pop	{r4, r5}
 8003126:	4770      	bx	lr

08003128 <TIM_TI3_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003128:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800312a:	6a04      	ldr	r4, [r0, #32]
 800312c:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8003130:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003132:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003134:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003136:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 800313a:	4322      	orrs	r2, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800313c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	b2db      	uxtb	r3, r3
 8003144:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003146:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800314a:	0209      	lsls	r1, r1, #8
 800314c:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8003150:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003152:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8003154:	6205      	str	r5, [r0, #32]
}
 8003156:	bc30      	pop	{r4, r5}
 8003158:	4770      	bx	lr

0800315a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800315a:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800315c:	6a04      	ldr	r4, [r0, #32]
 800315e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003162:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003164:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003166:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003168:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800316c:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003170:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003174:	031b      	lsls	r3, r3, #12
 8003176:	b29b      	uxth	r3, r3
 8003178:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800317a:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800317e:	0309      	lsls	r1, r1, #12
 8003180:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8003184:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003186:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003188:	6205      	str	r5, [r0, #32]
}
 800318a:	bc30      	pop	{r4, r5}
 800318c:	4770      	bx	lr

0800318e <HAL_TIM_ReadCapturedValue>:
{
 800318e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003190:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8003194:	2a01      	cmp	r2, #1
 8003196:	d01e      	beq.n	80031d6 <HAL_TIM_ReadCapturedValue+0x48>
 8003198:	2201      	movs	r2, #1
 800319a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  switch (Channel)
 800319e:	290c      	cmp	r1, #12
 80031a0:	d817      	bhi.n	80031d2 <HAL_TIM_ReadCapturedValue+0x44>
 80031a2:	e8df f001 	tbb	[pc, r1]
 80031a6:	1607      	.short	0x1607
 80031a8:	160d1616 	.word	0x160d1616
 80031ac:	16101616 	.word	0x16101616
 80031b0:	1616      	.short	0x1616
 80031b2:	13          	.byte	0x13
 80031b3:	00          	.byte	0x00
      tmpreg = htim->Instance->CCR1;
 80031b4:	6802      	ldr	r2, [r0, #0]
 80031b6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(htim);  
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return tmpreg;
 80031be:	4770      	bx	lr
      tmpreg = htim->Instance->CCR2;
 80031c0:	6802      	ldr	r2, [r0, #0]
 80031c2:	6b90      	ldr	r0, [r2, #56]	; 0x38
      break;
 80031c4:	e7f8      	b.n	80031b8 <HAL_TIM_ReadCapturedValue+0x2a>
      tmpreg = htim->Instance->CCR3;
 80031c6:	6802      	ldr	r2, [r0, #0]
 80031c8:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
      break;
 80031ca:	e7f5      	b.n	80031b8 <HAL_TIM_ReadCapturedValue+0x2a>
      tmpreg = htim->Instance->CCR4;
 80031cc:	6802      	ldr	r2, [r0, #0]
 80031ce:	6c10      	ldr	r0, [r2, #64]	; 0x40
      break;
 80031d0:	e7f2      	b.n	80031b8 <HAL_TIM_ReadCapturedValue+0x2a>
  uint32_t tmpreg = 0U;
 80031d2:	2000      	movs	r0, #0
 80031d4:	e7f0      	b.n	80031b8 <HAL_TIM_ReadCapturedValue+0x2a>
  __HAL_LOCK(htim);
 80031d6:	2002      	movs	r0, #2
}
 80031d8:	4770      	bx	lr

080031da <HAL_TIM_OC_DelayElapsedCallback>:
{
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_PWM_PulseFinishedCallback>:
{
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_TriggerCallback>:
{
 80031de:	4770      	bx	lr

080031e0 <HAL_TIM_IRQHandler>:
{
 80031e0:	b510      	push	{r4, lr}
 80031e2:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e4:	6803      	ldr	r3, [r0, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	f012 0f02 	tst.w	r2, #2
 80031ec:	d011      	beq.n	8003212 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	f012 0f02 	tst.w	r2, #2
 80031f4:	d00d      	beq.n	8003212 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031f6:	f06f 0202 	mvn.w	r2, #2
 80031fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031fc:	2301      	movs	r3, #1
 80031fe:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003200:	6803      	ldr	r3, [r0, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f013 0f03 	tst.w	r3, #3
 8003208:	d070      	beq.n	80032ec <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800320a:	f002 f897 	bl	800533c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	2300      	movs	r3, #0
 8003210:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	f012 0f04 	tst.w	r2, #4
 800321a:	d012      	beq.n	8003242 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	f012 0f04 	tst.w	r2, #4
 8003222:	d00e      	beq.n	8003242 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003224:	f06f 0204 	mvn.w	r2, #4
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800322a:	2302      	movs	r3, #2
 800322c:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003236:	d05f      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003238:	4620      	mov	r0, r4
 800323a:	f002 f87f 	bl	800533c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323e:	2300      	movs	r3, #0
 8003240:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	f012 0f08 	tst.w	r2, #8
 800324a:	d012      	beq.n	8003272 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	f012 0f08 	tst.w	r2, #8
 8003252:	d00e      	beq.n	8003272 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003254:	f06f 0208 	mvn.w	r2, #8
 8003258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800325a:	2304      	movs	r3, #4
 800325c:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f013 0f03 	tst.w	r3, #3
 8003266:	d04e      	beq.n	8003306 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003268:	4620      	mov	r0, r4
 800326a:	f002 f867 	bl	800533c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	2300      	movs	r3, #0
 8003270:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	f012 0f10 	tst.w	r2, #16
 800327a:	d012      	beq.n	80032a2 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	f012 0f10 	tst.w	r2, #16
 8003282:	d00e      	beq.n	80032a2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003284:	f06f 0210 	mvn.w	r2, #16
 8003288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800328a:	2308      	movs	r3, #8
 800328c:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003296:	d03d      	beq.n	8003314 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003298:	4620      	mov	r0, r4
 800329a:	f002 f84f 	bl	800533c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	2300      	movs	r3, #0
 80032a0:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	f012 0f01 	tst.w	r2, #1
 80032aa:	d003      	beq.n	80032b4 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	f012 0f01 	tst.w	r2, #1
 80032b2:	d136      	bne.n	8003322 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80032bc:	d003      	beq.n	80032c6 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80032c4:	d134      	bne.n	8003330 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	f012 0f40 	tst.w	r2, #64	; 0x40
 80032ce:	d003      	beq.n	80032d8 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80032d6:	d132      	bne.n	800333e <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	f012 0f20 	tst.w	r2, #32
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	f012 0f20 	tst.w	r2, #32
 80032e8:	d130      	bne.n	800334c <HAL_TIM_IRQHandler+0x16c>
 80032ea:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ec:	f7ff ff75 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff ff73 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
 80032f6:	e78a      	b.n	800320e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f8:	4620      	mov	r0, r4
 80032fa:	f7ff ff6e 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fe:	4620      	mov	r0, r4
 8003300:	f7ff ff6c 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003304:	e79b      	b.n	800323e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	4620      	mov	r0, r4
 8003308:	f7ff ff67 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff ff65 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003312:	e7ac      	b.n	800326e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003314:	4620      	mov	r0, r4
 8003316:	f7ff ff60 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331a:	4620      	mov	r0, r4
 800331c:	f7ff ff5e 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003320:	e7bd      	b.n	800329e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003322:	f06f 0201 	mvn.w	r2, #1
 8003326:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003328:	4620      	mov	r0, r4
 800332a:	f001 fe11 	bl	8004f50 <HAL_TIM_PeriodElapsedCallback>
 800332e:	e7c1      	b.n	80032b4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003334:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003336:	4620      	mov	r0, r4
 8003338:	f000 fb43 	bl	80039c2 <HAL_TIMEx_BreakCallback>
 800333c:	e7c3      	b.n	80032c6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800333e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003342:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003344:	4620      	mov	r0, r4
 8003346:	f7ff ff4a 	bl	80031de <HAL_TIM_TriggerCallback>
 800334a:	e7c5      	b.n	80032d8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800334c:	f06f 0220 	mvn.w	r2, #32
 8003350:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003352:	4620      	mov	r0, r4
 8003354:	f000 fb34 	bl	80039c0 <HAL_TIMEx_CommutationCallback>
}
 8003358:	e7c7      	b.n	80032ea <HAL_TIM_IRQHandler+0x10a>
	...

0800335c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800335c:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800335e:	4a45      	ldr	r2, [pc, #276]	; (8003474 <TIM_Base_SetConfig+0x118>)
 8003360:	4290      	cmp	r0, r2
 8003362:	d04a      	beq.n	80033fa <TIM_Base_SetConfig+0x9e>
 8003364:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003368:	d049      	beq.n	80033fe <TIM_Base_SetConfig+0xa2>
 800336a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800336e:	4290      	cmp	r0, r2
 8003370:	d047      	beq.n	8003402 <TIM_Base_SetConfig+0xa6>
 8003372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003376:	4290      	cmp	r0, r2
 8003378:	d045      	beq.n	8003406 <TIM_Base_SetConfig+0xaa>
 800337a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800337e:	4290      	cmp	r0, r2
 8003380:	d043      	beq.n	800340a <TIM_Base_SetConfig+0xae>
 8003382:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003386:	4290      	cmp	r0, r2
 8003388:	d035      	beq.n	80033f6 <TIM_Base_SetConfig+0x9a>
 800338a:	2200      	movs	r2, #0
 800338c:	b11a      	cbz	r2, 8003396 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800338e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003392:	684a      	ldr	r2, [r1, #4]
 8003394:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003396:	4a37      	ldr	r2, [pc, #220]	; (8003474 <TIM_Base_SetConfig+0x118>)
 8003398:	4290      	cmp	r0, r2
 800339a:	d03a      	beq.n	8003412 <TIM_Base_SetConfig+0xb6>
 800339c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033a0:	d050      	beq.n	8003444 <TIM_Base_SetConfig+0xe8>
 80033a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80033a6:	4290      	cmp	r0, r2
 80033a8:	d04e      	beq.n	8003448 <TIM_Base_SetConfig+0xec>
 80033aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033ae:	4290      	cmp	r0, r2
 80033b0:	d04c      	beq.n	800344c <TIM_Base_SetConfig+0xf0>
 80033b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033b6:	4290      	cmp	r0, r2
 80033b8:	d04a      	beq.n	8003450 <TIM_Base_SetConfig+0xf4>
 80033ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80033be:	4290      	cmp	r0, r2
 80033c0:	d048      	beq.n	8003454 <TIM_Base_SetConfig+0xf8>
 80033c2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80033c6:	4290      	cmp	r0, r2
 80033c8:	d046      	beq.n	8003458 <TIM_Base_SetConfig+0xfc>
 80033ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033ce:	4290      	cmp	r0, r2
 80033d0:	d044      	beq.n	800345c <TIM_Base_SetConfig+0x100>
 80033d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033d6:	4290      	cmp	r0, r2
 80033d8:	d042      	beq.n	8003460 <TIM_Base_SetConfig+0x104>
 80033da:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80033de:	4290      	cmp	r0, r2
 80033e0:	d040      	beq.n	8003464 <TIM_Base_SetConfig+0x108>
 80033e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033e6:	4290      	cmp	r0, r2
 80033e8:	d03e      	beq.n	8003468 <TIM_Base_SetConfig+0x10c>
 80033ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033ee:	4290      	cmp	r0, r2
 80033f0:	d00d      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033f2:	2200      	movs	r2, #0
 80033f4:	e00e      	b.n	8003414 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80033f6:	2201      	movs	r2, #1
 80033f8:	e7c8      	b.n	800338c <TIM_Base_SetConfig+0x30>
 80033fa:	2201      	movs	r2, #1
 80033fc:	e7c6      	b.n	800338c <TIM_Base_SetConfig+0x30>
 80033fe:	2201      	movs	r2, #1
 8003400:	e7c4      	b.n	800338c <TIM_Base_SetConfig+0x30>
 8003402:	2201      	movs	r2, #1
 8003404:	e7c2      	b.n	800338c <TIM_Base_SetConfig+0x30>
 8003406:	2201      	movs	r2, #1
 8003408:	e7c0      	b.n	800338c <TIM_Base_SetConfig+0x30>
 800340a:	2201      	movs	r2, #1
 800340c:	e7be      	b.n	800338c <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800340e:	2201      	movs	r2, #1
 8003410:	e000      	b.n	8003414 <TIM_Base_SetConfig+0xb8>
 8003412:	2201      	movs	r2, #1
 8003414:	b11a      	cbz	r2, 800341e <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800341a:	68ca      	ldr	r2, [r1, #12]
 800341c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800341e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003420:	688b      	ldr	r3, [r1, #8]
 8003422:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003424:	680b      	ldr	r3, [r1, #0]
 8003426:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <TIM_Base_SetConfig+0x118>)
 800342a:	4298      	cmp	r0, r3
 800342c:	d020      	beq.n	8003470 <TIM_Base_SetConfig+0x114>
 800342e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003432:	4298      	cmp	r0, r3
 8003434:	d01a      	beq.n	800346c <TIM_Base_SetConfig+0x110>
 8003436:	2300      	movs	r3, #0
 8003438:	b10b      	cbz	r3, 800343e <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800343a:	690b      	ldr	r3, [r1, #16]
 800343c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800343e:	2301      	movs	r3, #1
 8003440:	6143      	str	r3, [r0, #20]
 8003442:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003444:	2201      	movs	r2, #1
 8003446:	e7e5      	b.n	8003414 <TIM_Base_SetConfig+0xb8>
 8003448:	2201      	movs	r2, #1
 800344a:	e7e3      	b.n	8003414 <TIM_Base_SetConfig+0xb8>
 800344c:	2201      	movs	r2, #1
 800344e:	e7e1      	b.n	8003414 <TIM_Base_SetConfig+0xb8>
 8003450:	2201      	movs	r2, #1
 8003452:	e7df      	b.n	8003414 <TIM_Base_SetConfig+0xb8>
 8003454:	2201      	movs	r2, #1
 8003456:	e7dd      	b.n	8003414 <TIM_Base_SetConfig+0xb8>
 8003458:	2201      	movs	r2, #1
 800345a:	e7db      	b.n	8003414 <TIM_Base_SetConfig+0xb8>
 800345c:	2201      	movs	r2, #1
 800345e:	e7d9      	b.n	8003414 <TIM_Base_SetConfig+0xb8>
 8003460:	2201      	movs	r2, #1
 8003462:	e7d7      	b.n	8003414 <TIM_Base_SetConfig+0xb8>
 8003464:	2201      	movs	r2, #1
 8003466:	e7d5      	b.n	8003414 <TIM_Base_SetConfig+0xb8>
 8003468:	2201      	movs	r2, #1
 800346a:	e7d3      	b.n	8003414 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800346c:	2301      	movs	r3, #1
 800346e:	e7e3      	b.n	8003438 <TIM_Base_SetConfig+0xdc>
 8003470:	2301      	movs	r3, #1
 8003472:	e7e1      	b.n	8003438 <TIM_Base_SetConfig+0xdc>
 8003474:	40010000 	.word	0x40010000

08003478 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8003478:	b1a8      	cbz	r0, 80034a6 <HAL_TIM_Base_Init+0x2e>
{ 
 800347a:	b510      	push	{r4, lr}
 800347c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800347e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003482:	b15b      	cbz	r3, 800349c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8003484:	2302      	movs	r3, #2
 8003486:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800348a:	1d21      	adds	r1, r4, #4
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	f7ff ff65 	bl	800335c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003492:	2301      	movs	r3, #1
 8003494:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003498:	2000      	movs	r0, #0
 800349a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800349c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80034a0:	f001 f9e0 	bl	8004864 <HAL_TIM_Base_MspInit>
 80034a4:	e7ee      	b.n	8003484 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80034a6:	2001      	movs	r0, #1
 80034a8:	4770      	bx	lr

080034aa <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 80034aa:	b1a8      	cbz	r0, 80034d8 <HAL_TIM_PWM_Init+0x2e>
{
 80034ac:	b510      	push	{r4, lr}
 80034ae:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80034b0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80034b4:	b15b      	cbz	r3, 80034ce <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 80034b6:	2302      	movs	r3, #2
 80034b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80034bc:	1d21      	adds	r1, r4, #4
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	f7ff ff4c 	bl	800335c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80034ca:	2000      	movs	r0, #0
 80034cc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80034ce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80034d2:	f001 f97b 	bl	80047cc <HAL_TIM_PWM_MspInit>
 80034d6:	e7ee      	b.n	80034b6 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80034d8:	2001      	movs	r0, #1
 80034da:	4770      	bx	lr

080034dc <HAL_TIM_IC_Init>:
  if(htim == NULL)
 80034dc:	b1a8      	cbz	r0, 800350a <HAL_TIM_IC_Init+0x2e>
{
 80034de:	b510      	push	{r4, lr}
 80034e0:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80034e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80034e6:	b15b      	cbz	r3, 8003500 <HAL_TIM_IC_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;   
 80034e8:	2302      	movs	r3, #2
 80034ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80034ee:	1d21      	adds	r1, r4, #4
 80034f0:	6820      	ldr	r0, [r4, #0]
 80034f2:	f7ff ff33 	bl	800335c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80034fc:	2000      	movs	r0, #0
 80034fe:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003500:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8003504:	f001 f9ce 	bl	80048a4 <HAL_TIM_IC_MspInit>
 8003508:	e7ee      	b.n	80034e8 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 800350a:	2001      	movs	r0, #1
 800350c:	4770      	bx	lr

0800350e <HAL_TIM_Encoder_Init>:
  if(htim == NULL)
 800350e:	2800      	cmp	r0, #0
 8003510:	d047      	beq.n	80035a2 <HAL_TIM_Encoder_Init+0x94>
{
 8003512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003514:	4605      	mov	r5, r0
 8003516:	460c      	mov	r4, r1
  if(htim->State == HAL_TIM_STATE_RESET)
 8003518:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800351c:	2b00      	cmp	r3, #0
 800351e:	d03b      	beq.n	8003598 <HAL_TIM_Encoder_Init+0x8a>
  htim->State= HAL_TIM_STATE_BUSY;   
 8003520:	2302      	movs	r3, #2
 8003522:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003526:	4629      	mov	r1, r5
 8003528:	f851 2b04 	ldr.w	r2, [r1], #4
 800352c:	6893      	ldr	r3, [r2, #8]
 800352e:	f023 0307 	bic.w	r3, r3, #7
 8003532:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8003534:	6828      	ldr	r0, [r5, #0]
 8003536:	f7ff ff11 	bl	800335c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800353a:	6828      	ldr	r0, [r5, #0]
 800353c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800353e:	6983      	ldr	r3, [r0, #24]
  tmpccer = htim->Instance->CCER;
 8003540:	6a02      	ldr	r2, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003542:	6821      	ldr	r1, [r4, #0]
 8003544:	430e      	orrs	r6, r1
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354a:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800354e:	68a1      	ldr	r1, [r4, #8]
 8003550:	69a7      	ldr	r7, [r4, #24]
 8003552:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8003556:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003558:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800355c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003560:	68e1      	ldr	r1, [r4, #12]
 8003562:	69e7      	ldr	r7, [r4, #28]
 8003564:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8003568:	430b      	orrs	r3, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800356a:	6927      	ldr	r7, [r4, #16]
 800356c:	6a21      	ldr	r1, [r4, #32]
 800356e:	0309      	lsls	r1, r1, #12
 8003570:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 8003574:	430b      	orrs	r3, r1
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003576:	f022 02aa 	bic.w	r2, r2, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800357a:	6861      	ldr	r1, [r4, #4]
 800357c:	6964      	ldr	r4, [r4, #20]
 800357e:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 8003582:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8003584:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8003586:	6829      	ldr	r1, [r5, #0]
 8003588:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 800358a:	682b      	ldr	r3, [r5, #0]
 800358c:	621a      	str	r2, [r3, #32]
  htim->State= HAL_TIM_STATE_READY;
 800358e:	2301      	movs	r3, #1
 8003590:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 8003594:	2000      	movs	r0, #0
 8003596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8003598:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 800359c:	f001 f92e 	bl	80047fc <HAL_TIM_Encoder_MspInit>
 80035a0:	e7be      	b.n	8003520 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 80035a2:	2001      	movs	r0, #1
 80035a4:	4770      	bx	lr
	...

080035a8 <TIM_TI1_SetConfig>:
{
 80035a8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035aa:	6a04      	ldr	r4, [r0, #32]
 80035ac:	f024 0401 	bic.w	r4, r4, #1
 80035b0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80035b4:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80035b6:	4e23      	ldr	r6, [pc, #140]	; (8003644 <TIM_TI1_SetConfig+0x9c>)
 80035b8:	42b0      	cmp	r0, r6
 80035ba:	d030      	beq.n	800361e <TIM_TI1_SetConfig+0x76>
 80035bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80035c0:	d02f      	beq.n	8003622 <TIM_TI1_SetConfig+0x7a>
 80035c2:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80035c6:	42b0      	cmp	r0, r6
 80035c8:	d02d      	beq.n	8003626 <TIM_TI1_SetConfig+0x7e>
 80035ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035ce:	42b0      	cmp	r0, r6
 80035d0:	d02b      	beq.n	800362a <TIM_TI1_SetConfig+0x82>
 80035d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035d6:	42b0      	cmp	r0, r6
 80035d8:	d029      	beq.n	800362e <TIM_TI1_SetConfig+0x86>
 80035da:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80035de:	42b0      	cmp	r0, r6
 80035e0:	d027      	beq.n	8003632 <TIM_TI1_SetConfig+0x8a>
 80035e2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80035e6:	42b0      	cmp	r0, r6
 80035e8:	d025      	beq.n	8003636 <TIM_TI1_SetConfig+0x8e>
 80035ea:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80035ee:	42b0      	cmp	r0, r6
 80035f0:	d013      	beq.n	800361a <TIM_TI1_SetConfig+0x72>
 80035f2:	2600      	movs	r6, #0
 80035f4:	bb0e      	cbnz	r6, 800363a <TIM_TI1_SetConfig+0x92>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80035f6:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80035fa:	f042 0201 	orr.w	r2, r2, #1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003608:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800360c:	f001 010a 	and.w	r1, r1, #10
 8003610:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8003612:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003614:	6201      	str	r1, [r0, #32]
}
 8003616:	bc70      	pop	{r4, r5, r6}
 8003618:	4770      	bx	lr
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800361a:	2601      	movs	r6, #1
 800361c:	e7ea      	b.n	80035f4 <TIM_TI1_SetConfig+0x4c>
 800361e:	2601      	movs	r6, #1
 8003620:	e7e8      	b.n	80035f4 <TIM_TI1_SetConfig+0x4c>
 8003622:	2601      	movs	r6, #1
 8003624:	e7e6      	b.n	80035f4 <TIM_TI1_SetConfig+0x4c>
 8003626:	2601      	movs	r6, #1
 8003628:	e7e4      	b.n	80035f4 <TIM_TI1_SetConfig+0x4c>
 800362a:	2601      	movs	r6, #1
 800362c:	e7e2      	b.n	80035f4 <TIM_TI1_SetConfig+0x4c>
 800362e:	2601      	movs	r6, #1
 8003630:	e7e0      	b.n	80035f4 <TIM_TI1_SetConfig+0x4c>
 8003632:	2601      	movs	r6, #1
 8003634:	e7de      	b.n	80035f4 <TIM_TI1_SetConfig+0x4c>
 8003636:	2601      	movs	r6, #1
 8003638:	e7dc      	b.n	80035f4 <TIM_TI1_SetConfig+0x4c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800363a:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800363e:	4322      	orrs	r2, r4
 8003640:	e7dd      	b.n	80035fe <TIM_TI1_SetConfig+0x56>
 8003642:	bf00      	nop
 8003644:	40010000 	.word	0x40010000

08003648 <HAL_TIM_IC_ConfigChannel>:
{
 8003648:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800364a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800364e:	2b01      	cmp	r3, #1
 8003650:	d058      	beq.n	8003704 <HAL_TIM_IC_ConfigChannel+0xbc>
 8003652:	460d      	mov	r5, r1
 8003654:	4604      	mov	r4, r0
 8003656:	2301      	movs	r3, #1
 8003658:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	2302      	movs	r3, #2
 800365e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8003662:	b1da      	cbz	r2, 800369c <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 8003664:	2a04      	cmp	r2, #4
 8003666:	d02a      	beq.n	80036be <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 8003668:	2a08      	cmp	r2, #8
 800366a:	d03a      	beq.n	80036e2 <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance, 
 800366c:	68cb      	ldr	r3, [r1, #12]
 800366e:	684a      	ldr	r2, [r1, #4]
 8003670:	6809      	ldr	r1, [r1, #0]
 8003672:	6800      	ldr	r0, [r0, #0]
 8003674:	f7ff fd71 	bl	800315a <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003678:	6822      	ldr	r2, [r4, #0]
 800367a:	69d3      	ldr	r3, [r2, #28]
 800367c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003680:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003682:	6822      	ldr	r2, [r4, #0]
 8003684:	69d3      	ldr	r3, [r2, #28]
 8003686:	68a9      	ldr	r1, [r5, #8]
 8003688:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800368c:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 800368e:	2301      	movs	r3, #1
 8003690:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003694:	2000      	movs	r0, #0
 8003696:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK; 
 800369a:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800369c:	68cb      	ldr	r3, [r1, #12]
 800369e:	684a      	ldr	r2, [r1, #4]
 80036a0:	6809      	ldr	r1, [r1, #0]
 80036a2:	6800      	ldr	r0, [r0, #0]
 80036a4:	f7ff ff80 	bl	80035a8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036a8:	6822      	ldr	r2, [r4, #0]
 80036aa:	6993      	ldr	r3, [r2, #24]
 80036ac:	f023 030c 	bic.w	r3, r3, #12
 80036b0:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036b2:	6822      	ldr	r2, [r4, #0]
 80036b4:	6993      	ldr	r3, [r2, #24]
 80036b6:	68a9      	ldr	r1, [r5, #8]
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6193      	str	r3, [r2, #24]
 80036bc:	e7e7      	b.n	800368e <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance, 
 80036be:	68cb      	ldr	r3, [r1, #12]
 80036c0:	684a      	ldr	r2, [r1, #4]
 80036c2:	6809      	ldr	r1, [r1, #0]
 80036c4:	6800      	ldr	r0, [r0, #0]
 80036c6:	f7ff fd15 	bl	80030f4 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	6993      	ldr	r3, [r2, #24]
 80036ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80036d2:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036d4:	6822      	ldr	r2, [r4, #0]
 80036d6:	6993      	ldr	r3, [r2, #24]
 80036d8:	68a9      	ldr	r1, [r5, #8]
 80036da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80036de:	6193      	str	r3, [r2, #24]
 80036e0:	e7d5      	b.n	800368e <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,  
 80036e2:	68cb      	ldr	r3, [r1, #12]
 80036e4:	684a      	ldr	r2, [r1, #4]
 80036e6:	6809      	ldr	r1, [r1, #0]
 80036e8:	6800      	ldr	r0, [r0, #0]
 80036ea:	f7ff fd1d 	bl	8003128 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	69d3      	ldr	r3, [r2, #28]
 80036f2:	f023 030c 	bic.w	r3, r3, #12
 80036f6:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036f8:	6822      	ldr	r2, [r4, #0]
 80036fa:	69d3      	ldr	r3, [r2, #28]
 80036fc:	68a9      	ldr	r1, [r5, #8]
 80036fe:	430b      	orrs	r3, r1
 8003700:	61d3      	str	r3, [r2, #28]
 8003702:	e7c4      	b.n	800368e <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 8003704:	2002      	movs	r0, #2
}
 8003706:	bd38      	pop	{r3, r4, r5, pc}

08003708 <TIM_OC2_SetConfig>:
{
 8003708:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800370a:	6a03      	ldr	r3, [r0, #32]
 800370c:	f023 0310 	bic.w	r3, r3, #16
 8003710:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003712:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003714:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003716:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003718:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800371c:	680d      	ldr	r5, [r1, #0]
 800371e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003722:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003726:	688d      	ldr	r5, [r1, #8]
 8003728:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800372c:	4d11      	ldr	r5, [pc, #68]	; (8003774 <TIM_OC2_SetConfig+0x6c>)
 800372e:	42a8      	cmp	r0, r5
 8003730:	d01d      	beq.n	800376e <TIM_OC2_SetConfig+0x66>
 8003732:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003736:	42a8      	cmp	r0, r5
 8003738:	d017      	beq.n	800376a <TIM_OC2_SetConfig+0x62>
 800373a:	2500      	movs	r5, #0
 800373c:	b175      	cbz	r5, 800375c <TIM_OC2_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC2NP;
 800373e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003742:	68cd      	ldr	r5, [r1, #12]
 8003744:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800374c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003750:	694d      	ldr	r5, [r1, #20]
 8003752:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003756:	698d      	ldr	r5, [r1, #24]
 8003758:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800375c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800375e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003760:	684a      	ldr	r2, [r1, #4]
 8003762:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003764:	6203      	str	r3, [r0, #32]
}
 8003766:	bc30      	pop	{r4, r5}
 8003768:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800376a:	2501      	movs	r5, #1
 800376c:	e7e6      	b.n	800373c <TIM_OC2_SetConfig+0x34>
 800376e:	2501      	movs	r5, #1
 8003770:	e7e4      	b.n	800373c <TIM_OC2_SetConfig+0x34>
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000

08003778 <HAL_TIM_PWM_ConfigChannel>:
{
 8003778:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800377a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800377e:	2b01      	cmp	r3, #1
 8003780:	d066      	beq.n	8003850 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003782:	460d      	mov	r5, r1
 8003784:	4604      	mov	r4, r0
 8003786:	2301      	movs	r3, #1
 8003788:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	2302      	movs	r3, #2
 800378e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 8003792:	2a0c      	cmp	r2, #12
 8003794:	d81a      	bhi.n	80037cc <HAL_TIM_PWM_ConfigChannel+0x54>
 8003796:	e8df f002 	tbb	[pc, r2]
 800379a:	1907      	.short	0x1907
 800379c:	19201919 	.word	0x19201919
 80037a0:	19341919 	.word	0x19341919
 80037a4:	1919      	.short	0x1919
 80037a6:	47          	.byte	0x47
 80037a7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037a8:	6800      	ldr	r0, [r0, #0]
 80037aa:	f7ff fc0d 	bl	8002fc8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037ae:	6822      	ldr	r2, [r4, #0]
 80037b0:	6993      	ldr	r3, [r2, #24]
 80037b2:	f043 0308 	orr.w	r3, r3, #8
 80037b6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037b8:	6822      	ldr	r2, [r4, #0]
 80037ba:	6993      	ldr	r3, [r2, #24]
 80037bc:	f023 0304 	bic.w	r3, r3, #4
 80037c0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037c2:	6822      	ldr	r2, [r4, #0]
 80037c4:	6993      	ldr	r3, [r2, #24]
 80037c6:	6929      	ldr	r1, [r5, #16]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 80037d8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037da:	6800      	ldr	r0, [r0, #0]
 80037dc:	f7ff ff94 	bl	8003708 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037e0:	6822      	ldr	r2, [r4, #0]
 80037e2:	6993      	ldr	r3, [r2, #24]
 80037e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037e8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	6993      	ldr	r3, [r2, #24]
 80037ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037f2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	6993      	ldr	r3, [r2, #24]
 80037f8:	6929      	ldr	r1, [r5, #16]
 80037fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80037fe:	6193      	str	r3, [r2, #24]
    break;
 8003800:	e7e4      	b.n	80037cc <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003802:	6800      	ldr	r0, [r0, #0]
 8003804:	f7ff fc12 	bl	800302c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003808:	6822      	ldr	r2, [r4, #0]
 800380a:	69d3      	ldr	r3, [r2, #28]
 800380c:	f043 0308 	orr.w	r3, r3, #8
 8003810:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003812:	6822      	ldr	r2, [r4, #0]
 8003814:	69d3      	ldr	r3, [r2, #28]
 8003816:	f023 0304 	bic.w	r3, r3, #4
 800381a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800381c:	6822      	ldr	r2, [r4, #0]
 800381e:	69d3      	ldr	r3, [r2, #28]
 8003820:	6929      	ldr	r1, [r5, #16]
 8003822:	430b      	orrs	r3, r1
 8003824:	61d3      	str	r3, [r2, #28]
    break;
 8003826:	e7d1      	b.n	80037cc <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003828:	6800      	ldr	r0, [r0, #0]
 800382a:	f7ff fc35 	bl	8003098 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	69d3      	ldr	r3, [r2, #28]
 8003832:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003836:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003838:	6822      	ldr	r2, [r4, #0]
 800383a:	69d3      	ldr	r3, [r2, #28]
 800383c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003840:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	69d3      	ldr	r3, [r2, #28]
 8003846:	6929      	ldr	r1, [r5, #16]
 8003848:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800384c:	61d3      	str	r3, [r2, #28]
    break;
 800384e:	e7bd      	b.n	80037cc <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8003850:	2002      	movs	r0, #2
}
 8003852:	bd38      	pop	{r3, r4, r5, pc}

08003854 <TIM_CCxChannelCmd>:
{
 8003854:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << Channel;
 8003856:	2301      	movs	r3, #1
 8003858:	fa03 f401 	lsl.w	r4, r3, r1
  TIMx->CCER &= ~tmp;
 800385c:	6a03      	ldr	r3, [r0, #32]
 800385e:	ea23 0304 	bic.w	r3, r3, r4
 8003862:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003864:	6a03      	ldr	r3, [r0, #32]
 8003866:	408a      	lsls	r2, r1
 8003868:	4313      	orrs	r3, r2
 800386a:	6203      	str	r3, [r0, #32]
}
 800386c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <HAL_TIM_PWM_Start>:
{
 8003874:	b510      	push	{r4, lr}
 8003876:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003878:	2201      	movs	r2, #1
 800387a:	6800      	ldr	r0, [r0, #0]
 800387c:	f7ff ffea 	bl	8003854 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <HAL_TIM_PWM_Start+0x40>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d012      	beq.n	80038ae <HAL_TIM_PWM_Start+0x3a>
 8003888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800388c:	4293      	cmp	r3, r2
 800388e:	d00c      	beq.n	80038aa <HAL_TIM_PWM_Start+0x36>
 8003890:	2200      	movs	r2, #0
 8003892:	b11a      	cbz	r2, 800389c <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_MOE_ENABLE(htim);
 8003894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800389a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800389c:	6822      	ldr	r2, [r4, #0]
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6013      	str	r3, [r2, #0]
} 
 80038a6:	2000      	movs	r0, #0
 80038a8:	bd10      	pop	{r4, pc}
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80038aa:	2201      	movs	r2, #1
 80038ac:	e7f1      	b.n	8003892 <HAL_TIM_PWM_Start+0x1e>
 80038ae:	2201      	movs	r2, #1
 80038b0:	e7ef      	b.n	8003892 <HAL_TIM_PWM_Start+0x1e>
 80038b2:	bf00      	nop
 80038b4:	40010000 	.word	0x40010000

080038b8 <HAL_TIM_IC_Start_IT>:
{
 80038b8:	b510      	push	{r4, lr}
 80038ba:	4604      	mov	r4, r0
  switch (Channel)
 80038bc:	290c      	cmp	r1, #12
 80038be:	d80d      	bhi.n	80038dc <HAL_TIM_IC_Start_IT+0x24>
 80038c0:	e8df f001 	tbb	[pc, r1]
 80038c4:	0c0c0c07 	.word	0x0c0c0c07
 80038c8:	0c0c0c17 	.word	0x0c0c0c17
 80038cc:	0c0c0c1d 	.word	0x0c0c0c1d
 80038d0:	23          	.byte	0x23
 80038d1:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038d2:	6802      	ldr	r2, [r0, #0]
 80038d4:	68d3      	ldr	r3, [r2, #12]
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038dc:	2201      	movs	r2, #1
 80038de:	6820      	ldr	r0, [r4, #0]
 80038e0:	f7ff ffb8 	bl	8003854 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	6813      	ldr	r3, [r2, #0]
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6013      	str	r3, [r2, #0]
} 
 80038ee:	2000      	movs	r0, #0
 80038f0:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038f2:	6802      	ldr	r2, [r0, #0]
 80038f4:	68d3      	ldr	r3, [r2, #12]
 80038f6:	f043 0304 	orr.w	r3, r3, #4
 80038fa:	60d3      	str	r3, [r2, #12]
    break;
 80038fc:	e7ee      	b.n	80038dc <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80038fe:	6802      	ldr	r2, [r0, #0]
 8003900:	68d3      	ldr	r3, [r2, #12]
 8003902:	f043 0308 	orr.w	r3, r3, #8
 8003906:	60d3      	str	r3, [r2, #12]
    break;
 8003908:	e7e8      	b.n	80038dc <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800390a:	6802      	ldr	r2, [r0, #0]
 800390c:	68d3      	ldr	r3, [r2, #12]
 800390e:	f043 0310 	orr.w	r3, r3, #16
 8003912:	60d3      	str	r3, [r2, #12]
    break;
 8003914:	e7e2      	b.n	80038dc <HAL_TIM_IC_Start_IT+0x24>

08003916 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8003916:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800391a:	2b01      	cmp	r3, #1
 800391c:	d022      	beq.n	8003964 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 800391e:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003920:	2201      	movs	r2, #1
 8003922:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003926:	2302      	movs	r3, #2
 8003928:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800392c:	6804      	ldr	r4, [r0, #0]
 800392e:	6863      	ldr	r3, [r4, #4]
 8003930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003934:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8003936:	6804      	ldr	r4, [r0, #0]
 8003938:	6863      	ldr	r3, [r4, #4]
 800393a:	680d      	ldr	r5, [r1, #0]
 800393c:	432b      	orrs	r3, r5
 800393e:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003940:	6804      	ldr	r4, [r0, #0]
 8003942:	68a3      	ldr	r3, [r4, #8]
 8003944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003948:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800394a:	6804      	ldr	r4, [r0, #0]
 800394c:	68a3      	ldr	r3, [r4, #8]
 800394e:	6849      	ldr	r1, [r1, #4]
 8003950:	430b      	orrs	r3, r1
 8003952:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003954:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003958:	2300      	movs	r3, #0
 800395a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 800395e:	4618      	mov	r0, r3
} 
 8003960:	bc30      	pop	{r4, r5}
 8003962:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003964:	2002      	movs	r0, #2
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003968:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800396c:	2b01      	cmp	r3, #1
 800396e:	d025      	beq.n	80039bc <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8003970:	2301      	movs	r3, #1
 8003972:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003976:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397c:	688a      	ldr	r2, [r1, #8]
 800397e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003984:	684a      	ldr	r2, [r1, #4]
 8003986:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800398c:	680a      	ldr	r2, [r1, #0]
 800398e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003994:	690a      	ldr	r2, [r1, #16]
 8003996:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800399c:	694a      	ldr	r2, [r1, #20]
 800399e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039a4:	698a      	ldr	r2, [r1, #24]
 80039a6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039ac:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039ae:	6802      	ldr	r2, [r0, #0]
 80039b0:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80039b2:	2300      	movs	r3, #0
 80039b4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80039b8:	4618      	mov	r0, r3
 80039ba:	4770      	bx	lr
  __HAL_LOCK(htim);
 80039bc:	2002      	movs	r0, #2
}
 80039be:	4770      	bx	lr

080039c0 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	4770      	bx	lr

080039c2 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c2:	4770      	bx	lr

080039c4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039c8:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80039ca:	6802      	ldr	r2, [r0, #0]
 80039cc:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80039ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80039d2:	68c1      	ldr	r1, [r0, #12]
 80039d4:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80039d6:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80039d8:	6801      	ldr	r1, [r0, #0]
 80039da:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80039dc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039e0:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039e4:	6882      	ldr	r2, [r0, #8]
 80039e6:	6900      	ldr	r0, [r0, #16]
 80039e8:	4302      	orrs	r2, r0
 80039ea:	6960      	ldr	r0, [r4, #20]
 80039ec:	4302      	orrs	r2, r0
 80039ee:	69e0      	ldr	r0, [r4, #28]
 80039f0:	4302      	orrs	r2, r0
 80039f2:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80039f4:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80039f6:	6822      	ldr	r2, [r4, #0]
 80039f8:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80039fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80039fe:	69a1      	ldr	r1, [r4, #24]
 8003a00:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003a02:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a04:	69e3      	ldr	r3, [r4, #28]
 8003a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0a:	d062      	beq.n	8003ad2 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a0c:	f8d4 8000 	ldr.w	r8, [r4]
 8003a10:	4bbb      	ldr	r3, [pc, #748]	; (8003d00 <UART_SetConfig+0x33c>)
 8003a12:	4598      	cmp	r8, r3
 8003a14:	f000 811b 	beq.w	8003c4e <UART_SetConfig+0x28a>
 8003a18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a1c:	4598      	cmp	r8, r3
 8003a1e:	f000 8116 	beq.w	8003c4e <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003a22:	f7fe ff43 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003a26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a2e:	6865      	ldr	r5, [r4, #4]
 8003a30:	00ad      	lsls	r5, r5, #2
 8003a32:	fbb0 f5f5 	udiv	r5, r0, r5
 8003a36:	4fb3      	ldr	r7, [pc, #716]	; (8003d04 <UART_SetConfig+0x340>)
 8003a38:	fba7 3505 	umull	r3, r5, r7, r5
 8003a3c:	096d      	lsrs	r5, r5, #5
 8003a3e:	012e      	lsls	r6, r5, #4
 8003a40:	f7fe ff34 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003a44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a4c:	6865      	ldr	r5, [r4, #4]
 8003a4e:	00ad      	lsls	r5, r5, #2
 8003a50:	fbb0 faf5 	udiv	sl, r0, r5
 8003a54:	f7fe ff2a 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003a58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a60:	6865      	ldr	r5, [r4, #4]
 8003a62:	00ad      	lsls	r5, r5, #2
 8003a64:	fbb0 f5f5 	udiv	r5, r0, r5
 8003a68:	fba7 3505 	umull	r3, r5, r7, r5
 8003a6c:	096d      	lsrs	r5, r5, #5
 8003a6e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003a72:	fb09 a515 	mls	r5, r9, r5, sl
 8003a76:	012d      	lsls	r5, r5, #4
 8003a78:	3532      	adds	r5, #50	; 0x32
 8003a7a:	fba7 3505 	umull	r3, r5, r7, r5
 8003a7e:	096d      	lsrs	r5, r5, #5
 8003a80:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8003a84:	4435      	add	r5, r6
 8003a86:	f7fe ff11 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003a8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a92:	6866      	ldr	r6, [r4, #4]
 8003a94:	00b6      	lsls	r6, r6, #2
 8003a96:	fbb0 f6f6 	udiv	r6, r0, r6
 8003a9a:	f7fe ff07 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003a9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003aa2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003aa6:	6863      	ldr	r3, [r4, #4]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	fbb0 f0f3 	udiv	r0, r0, r3
 8003aae:	fba7 3000 	umull	r3, r0, r7, r0
 8003ab2:	0940      	lsrs	r0, r0, #5
 8003ab4:	fb09 6910 	mls	r9, r9, r0, r6
 8003ab8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8003abc:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8003ac0:	fba7 3709 	umull	r3, r7, r7, r9
 8003ac4:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8003ac8:	442f      	add	r7, r5
 8003aca:	f8c8 7008 	str.w	r7, [r8, #8]
 8003ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ad2:	f8d4 8000 	ldr.w	r8, [r4]
 8003ad6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ada:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8003ade:	4598      	cmp	r8, r3
 8003ae0:	d05c      	beq.n	8003b9c <UART_SetConfig+0x1d8>
 8003ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ae6:	4598      	cmp	r8, r3
 8003ae8:	d058      	beq.n	8003b9c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003aea:	f7fe fedf 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003aee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003af2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003af6:	6865      	ldr	r5, [r4, #4]
 8003af8:	006d      	lsls	r5, r5, #1
 8003afa:	fbb0 f5f5 	udiv	r5, r0, r5
 8003afe:	4f81      	ldr	r7, [pc, #516]	; (8003d04 <UART_SetConfig+0x340>)
 8003b00:	fba7 3505 	umull	r3, r5, r7, r5
 8003b04:	096d      	lsrs	r5, r5, #5
 8003b06:	012e      	lsls	r6, r5, #4
 8003b08:	f7fe fed0 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003b0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b14:	6865      	ldr	r5, [r4, #4]
 8003b16:	006d      	lsls	r5, r5, #1
 8003b18:	fbb0 faf5 	udiv	sl, r0, r5
 8003b1c:	f7fe fec6 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003b20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b28:	6865      	ldr	r5, [r4, #4]
 8003b2a:	006d      	lsls	r5, r5, #1
 8003b2c:	fbb0 f5f5 	udiv	r5, r0, r5
 8003b30:	fba7 3505 	umull	r3, r5, r7, r5
 8003b34:	096d      	lsrs	r5, r5, #5
 8003b36:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003b3a:	fb09 a515 	mls	r5, r9, r5, sl
 8003b3e:	00ed      	lsls	r5, r5, #3
 8003b40:	3532      	adds	r5, #50	; 0x32
 8003b42:	fba7 3505 	umull	r3, r5, r7, r5
 8003b46:	096d      	lsrs	r5, r5, #5
 8003b48:	006d      	lsls	r5, r5, #1
 8003b4a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8003b4e:	4435      	add	r5, r6
 8003b50:	f7fe feac 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003b54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b5c:	6866      	ldr	r6, [r4, #4]
 8003b5e:	0076      	lsls	r6, r6, #1
 8003b60:	fbb0 f6f6 	udiv	r6, r0, r6
 8003b64:	f7fe fea2 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003b68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b70:	6863      	ldr	r3, [r4, #4]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b78:	fba7 2303 	umull	r2, r3, r7, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	fb09 6913 	mls	r9, r9, r3, r6
 8003b82:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8003b86:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8003b8a:	fba7 3709 	umull	r3, r7, r7, r9
 8003b8e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8003b92:	442f      	add	r7, r5
 8003b94:	f8c8 7008 	str.w	r7, [r8, #8]
 8003b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003b9c:	f7fe fe96 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003ba0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ba4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ba8:	6865      	ldr	r5, [r4, #4]
 8003baa:	006d      	lsls	r5, r5, #1
 8003bac:	fbb0 f5f5 	udiv	r5, r0, r5
 8003bb0:	4f54      	ldr	r7, [pc, #336]	; (8003d04 <UART_SetConfig+0x340>)
 8003bb2:	fba7 3505 	umull	r3, r5, r7, r5
 8003bb6:	096d      	lsrs	r5, r5, #5
 8003bb8:	012e      	lsls	r6, r5, #4
 8003bba:	f7fe fe87 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003bbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003bc2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003bc6:	6865      	ldr	r5, [r4, #4]
 8003bc8:	006d      	lsls	r5, r5, #1
 8003bca:	fbb0 faf5 	udiv	sl, r0, r5
 8003bce:	f7fe fe7d 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003bd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003bd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003bda:	6865      	ldr	r5, [r4, #4]
 8003bdc:	006d      	lsls	r5, r5, #1
 8003bde:	fbb0 f5f5 	udiv	r5, r0, r5
 8003be2:	fba7 3505 	umull	r3, r5, r7, r5
 8003be6:	096d      	lsrs	r5, r5, #5
 8003be8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003bec:	fb09 a515 	mls	r5, r9, r5, sl
 8003bf0:	00ed      	lsls	r5, r5, #3
 8003bf2:	3532      	adds	r5, #50	; 0x32
 8003bf4:	fba7 3505 	umull	r3, r5, r7, r5
 8003bf8:	096d      	lsrs	r5, r5, #5
 8003bfa:	006d      	lsls	r5, r5, #1
 8003bfc:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8003c00:	4435      	add	r5, r6
 8003c02:	f7fe fe63 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003c06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c0e:	6866      	ldr	r6, [r4, #4]
 8003c10:	0076      	lsls	r6, r6, #1
 8003c12:	fbb0 f6f6 	udiv	r6, r0, r6
 8003c16:	f7fe fe59 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003c1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c22:	6863      	ldr	r3, [r4, #4]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2a:	fba7 2303 	umull	r2, r3, r7, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	fb09 6913 	mls	r9, r9, r3, r6
 8003c34:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8003c38:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8003c3c:	fba7 3709 	umull	r3, r7, r7, r9
 8003c40:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8003c44:	442f      	add	r7, r5
 8003c46:	f8c8 7008 	str.w	r7, [r8, #8]
 8003c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003c4e:	f7fe fe3d 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003c52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c5a:	6865      	ldr	r5, [r4, #4]
 8003c5c:	00ad      	lsls	r5, r5, #2
 8003c5e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003c62:	4f28      	ldr	r7, [pc, #160]	; (8003d04 <UART_SetConfig+0x340>)
 8003c64:	fba7 3505 	umull	r3, r5, r7, r5
 8003c68:	096d      	lsrs	r5, r5, #5
 8003c6a:	012e      	lsls	r6, r5, #4
 8003c6c:	f7fe fe2e 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003c70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c78:	6865      	ldr	r5, [r4, #4]
 8003c7a:	00ad      	lsls	r5, r5, #2
 8003c7c:	fbb0 faf5 	udiv	sl, r0, r5
 8003c80:	f7fe fe24 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003c84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c8c:	6865      	ldr	r5, [r4, #4]
 8003c8e:	00ad      	lsls	r5, r5, #2
 8003c90:	fbb0 f5f5 	udiv	r5, r0, r5
 8003c94:	fba7 3505 	umull	r3, r5, r7, r5
 8003c98:	096d      	lsrs	r5, r5, #5
 8003c9a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003c9e:	fb09 a515 	mls	r5, r9, r5, sl
 8003ca2:	012d      	lsls	r5, r5, #4
 8003ca4:	3532      	adds	r5, #50	; 0x32
 8003ca6:	fba7 3505 	umull	r3, r5, r7, r5
 8003caa:	096d      	lsrs	r5, r5, #5
 8003cac:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8003cb0:	4435      	add	r5, r6
 8003cb2:	f7fe fe0b 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003cb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003cba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003cbe:	6866      	ldr	r6, [r4, #4]
 8003cc0:	00b6      	lsls	r6, r6, #2
 8003cc2:	fbb0 f6f6 	udiv	r6, r0, r6
 8003cc6:	f7fe fe01 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003cca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003cce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003cd2:	6863      	ldr	r3, [r4, #4]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cda:	fba7 2303 	umull	r2, r3, r7, r3
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	fb09 6913 	mls	r9, r9, r3, r6
 8003ce4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8003ce8:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8003cec:	fba7 3709 	umull	r3, r7, r7, r9
 8003cf0:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8003cf4:	442f      	add	r7, r5
 8003cf6:	f8c8 7008 	str.w	r7, [r8, #8]
 8003cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfe:	bf00      	nop
 8003d00:	40011000 	.word	0x40011000
 8003d04:	51eb851f 	.word	0x51eb851f

08003d08 <UART_WaitOnFlagUntilTimeout>:
{
 8003d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	460f      	mov	r7, r1
 8003d10:	4616      	mov	r6, r2
 8003d12:	4698      	mov	r8, r3
 8003d14:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003d16:	682b      	ldr	r3, [r5, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	ea37 0303 	bics.w	r3, r7, r3
 8003d1e:	bf0c      	ite	eq
 8003d20:	2301      	moveq	r3, #1
 8003d22:	2300      	movne	r3, #0
 8003d24:	42b3      	cmp	r3, r6
 8003d26:	d11e      	bne.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8003d28:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003d2c:	d0f3      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003d2e:	b12c      	cbz	r4, 8003d3c <UART_WaitOnFlagUntilTimeout+0x34>
 8003d30:	f7fd f94a 	bl	8000fc8 <HAL_GetTick>
 8003d34:	eba0 0008 	sub.w	r0, r0, r8
 8003d38:	4284      	cmp	r4, r0
 8003d3a:	d2ec      	bcs.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d3c:	682a      	ldr	r2, [r5, #0]
 8003d3e:	68d3      	ldr	r3, [r2, #12]
 8003d40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d44:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d46:	682a      	ldr	r2, [r5, #0]
 8003d48:	6953      	ldr	r3, [r2, #20]
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003d50:	2320      	movs	r3, #32
 8003d52:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d56:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8003d60:	2003      	movs	r0, #3
 8003d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8003d66:	2000      	movs	r0, #0
}
 8003d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d6c <HAL_UART_Init>:
  if(huart == NULL)
 8003d6c:	b358      	cbz	r0, 8003dc6 <HAL_UART_Init+0x5a>
{
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8003d72:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003d76:	b30b      	cbz	r3, 8003dbc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003d78:	2324      	movs	r3, #36	; 0x24
 8003d7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003d7e:	6822      	ldr	r2, [r4, #0]
 8003d80:	68d3      	ldr	r3, [r2, #12]
 8003d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d86:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003d88:	4620      	mov	r0, r4
 8003d8a:	f7ff fe1b 	bl	80039c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d8e:	6822      	ldr	r2, [r4, #0]
 8003d90:	6913      	ldr	r3, [r2, #16]
 8003d92:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003d96:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d98:	6822      	ldr	r2, [r4, #0]
 8003d9a:	6953      	ldr	r3, [r2, #20]
 8003d9c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003da0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003da2:	6822      	ldr	r2, [r4, #0]
 8003da4:	68d3      	ldr	r3, [r2, #12]
 8003da6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003daa:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	2000      	movs	r0, #0
 8003dae:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003db0:	2320      	movs	r3, #32
 8003db2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003db6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003dba:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003dbc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003dc0:	f000 fde4 	bl	800498c <HAL_UART_MspInit>
 8003dc4:	e7d8      	b.n	8003d78 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	4770      	bx	lr

08003dca <HAL_UART_Transmit>:
{
 8003dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8003dd2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d004      	beq.n	8003de6 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	b002      	add	sp, #8
 8003de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003de6:	4604      	mov	r4, r0
 8003de8:	460d      	mov	r5, r1
 8003dea:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 8003dec:	2900      	cmp	r1, #0
 8003dee:	d055      	beq.n	8003e9c <HAL_UART_Transmit+0xd2>
 8003df0:	2a00      	cmp	r2, #0
 8003df2:	d055      	beq.n	8003ea0 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 8003df4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_UART_Transmit+0x36>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e7ee      	b.n	8003dde <HAL_UART_Transmit+0x14>
 8003e00:	2301      	movs	r3, #1
 8003e02:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e0a:	2321      	movs	r3, #33	; 0x21
 8003e0c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003e10:	f7fd f8da 	bl	8000fc8 <HAL_GetTick>
 8003e14:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003e16:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e1a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003e1e:	e010      	b.n	8003e42 <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e20:	9600      	str	r6, [sp, #0]
 8003e22:	463b      	mov	r3, r7
 8003e24:	2200      	movs	r2, #0
 8003e26:	2180      	movs	r1, #128	; 0x80
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f7ff ff6d 	bl	8003d08 <UART_WaitOnFlagUntilTimeout>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d138      	bne.n	8003ea4 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e32:	6822      	ldr	r2, [r4, #0]
 8003e34:	882b      	ldrh	r3, [r5, #0]
 8003e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003e3c:	6923      	ldr	r3, [r4, #16]
 8003e3e:	b9cb      	cbnz	r3, 8003e74 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8003e40:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 8003e42:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	b1bb      	cbz	r3, 8003e78 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 8003e48:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e52:	68a3      	ldr	r3, [r4, #8]
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e58:	d0e2      	beq.n	8003e20 <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e5a:	9600      	str	r6, [sp, #0]
 8003e5c:	463b      	mov	r3, r7
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2180      	movs	r1, #128	; 0x80
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7ff ff50 	bl	8003d08 <UART_WaitOnFlagUntilTimeout>
 8003e68:	b9f0      	cbnz	r0, 8003ea8 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	782a      	ldrb	r2, [r5, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	3501      	adds	r5, #1
 8003e72:	e7e6      	b.n	8003e42 <HAL_UART_Transmit+0x78>
          pData +=1U;
 8003e74:	3501      	adds	r5, #1
 8003e76:	e7e4      	b.n	8003e42 <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e78:	9600      	str	r6, [sp, #0]
 8003e7a:	463b      	mov	r3, r7
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2140      	movs	r1, #64	; 0x40
 8003e80:	4620      	mov	r0, r4
 8003e82:	f7ff ff41 	bl	8003d08 <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	b108      	cbz	r0, 8003e8e <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e7a7      	b.n	8003dde <HAL_UART_Transmit+0x14>
      huart->gState = HAL_UART_STATE_READY;
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8003e94:	2200      	movs	r2, #0
 8003e96:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8003e9a:	e7a0      	b.n	8003dde <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e79e      	b.n	8003dde <HAL_UART_Transmit+0x14>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e79c      	b.n	8003dde <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e79a      	b.n	8003dde <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e798      	b.n	8003dde <HAL_UART_Transmit+0x14>

08003eac <prj_main>:
#include "THL_Library_Basic.h"
#include "ICM20689_I2C_Tester.h"
#include "THL_SpiTester.h"
#include "PMW3901_Tester.h"
#include "THL_TimerTester.h"
void prj_main(void) {
 8003eac:	b508      	push	{r3, lr}
	testTimer();
 8003eae:	f000 ff5f 	bl	8004d70 <testTimer>
 8003eb2:	bd08      	pop	{r3, pc}

08003eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eb6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb8:	2400      	movs	r4, #0
 8003eba:	9405      	str	r4, [sp, #20]
 8003ebc:	9406      	str	r4, [sp, #24]
 8003ebe:	9407      	str	r4, [sp, #28]
 8003ec0:	9408      	str	r4, [sp, #32]
 8003ec2:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ec4:	9401      	str	r4, [sp, #4]
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <MX_GPIO_Init+0xbc>)
 8003ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eca:	f042 0204 	orr.w	r2, r2, #4
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
 8003ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed2:	f002 0204 	and.w	r2, r2, #4
 8003ed6:	9201      	str	r2, [sp, #4]
 8003ed8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003eda:	9402      	str	r4, [sp, #8]
 8003edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003eea:	9202      	str	r2, [sp, #8]
 8003eec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eee:	9403      	str	r4, [sp, #12]
 8003ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003efa:	f002 0201 	and.w	r2, r2, #1
 8003efe:	9203      	str	r2, [sp, #12]
 8003f00:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f02:	9404      	str	r4, [sp, #16]
 8003f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f06:	f042 0202 	orr.w	r2, r2, #2
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	9304      	str	r3, [sp, #16]
 8003f14:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003f16:	4f17      	ldr	r7, [pc, #92]	; (8003f74 <MX_GPIO_Init+0xc0>)
 8003f18:	4622      	mov	r2, r4
 8003f1a:	2120      	movs	r1, #32
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	f7fd fcfd 	bl	800191c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SoftCS_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003f22:	4d15      	ldr	r5, [pc, #84]	; (8003f78 <MX_GPIO_Init+0xc4>)
 8003f24:	4622      	mov	r2, r4
 8003f26:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f7fd fcf6 	bl	800191c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f34:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f36:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <MX_GPIO_Init+0xc8>)
 8003f38:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f3c:	a905      	add	r1, sp, #20
 8003f3e:	4810      	ldr	r0, [pc, #64]	; (8003f80 <MX_GPIO_Init+0xcc>)
 8003f40:	f7fd fc0a 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003f44:	2320      	movs	r3, #32
 8003f46:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f48:	2601      	movs	r6, #1
 8003f4a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003f50:	a905      	add	r1, sp, #20
 8003f52:	4638      	mov	r0, r7
 8003f54:	f7fd fc00 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SoftCS_Pin PB6 PB7 */
  GPIO_InitStruct.Pin = SPI2_SoftCS_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8003f58:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
 8003f5c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f5e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f62:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f64:	a905      	add	r1, sp, #20
 8003f66:	4628      	mov	r0, r5
 8003f68:	f7fd fbf6 	bl	8001758 <HAL_GPIO_Init>

}
 8003f6c:	b00b      	add	sp, #44	; 0x2c
 8003f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40020000 	.word	0x40020000
 8003f78:	40020400 	.word	0x40020400
 8003f7c:	10210000 	.word	0x10210000
 8003f80:	40020800 	.word	0x40020800

08003f84 <MX_DMA_Init>:
{
 8003f84:	b510      	push	{r4, lr}
 8003f86:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f88:	2400      	movs	r4, #0
 8003f8a:	9400      	str	r4, [sp, #0]
 8003f8c:	4b1e      	ldr	r3, [pc, #120]	; (8004008 <MX_DMA_Init+0x84>)
 8003f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f90:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
 8003f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f98:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f9c:	9200      	str	r2, [sp, #0]
 8003f9e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003fa0:	9401      	str	r4, [sp, #4]
 8003fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	200b      	movs	r0, #11
 8003fba:	f7fd f9a9 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003fbe:	200b      	movs	r0, #11
 8003fc0:	f7fd f9d8 	bl	8001374 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	200e      	movs	r0, #14
 8003fca:	f7fd f9a1 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003fce:	200e      	movs	r0, #14
 8003fd0:	f7fd f9d0 	bl	8001374 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	200f      	movs	r0, #15
 8003fda:	f7fd f999 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003fde:	200f      	movs	r0, #15
 8003fe0:	f7fd f9c8 	bl	8001374 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003fe4:	4622      	mov	r2, r4
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	202f      	movs	r0, #47	; 0x2f
 8003fea:	f7fd f991 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003fee:	202f      	movs	r0, #47	; 0x2f
 8003ff0:	f7fd f9c0 	bl	8001374 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	2038      	movs	r0, #56	; 0x38
 8003ffa:	f7fd f989 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003ffe:	2038      	movs	r0, #56	; 0x38
 8004000:	f7fd f9b8 	bl	8001374 <HAL_NVIC_EnableIRQ>
}
 8004004:	b002      	add	sp, #8
 8004006:	bd10      	pop	{r4, pc}
 8004008:	40023800 	.word	0x40023800

0800400c <MX_USART2_UART_Init>:
{
 800400c:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800400e:	4808      	ldr	r0, [pc, #32]	; (8004030 <MX_USART2_UART_Init+0x24>)
 8004010:	4b08      	ldr	r3, [pc, #32]	; (8004034 <MX_USART2_UART_Init+0x28>)
 8004012:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004014:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004018:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800401a:	2300      	movs	r3, #0
 800401c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800401e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004020:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004022:	220c      	movs	r2, #12
 8004024:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004026:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004028:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800402a:	f7ff fe9f 	bl	8003d6c <HAL_UART_Init>
 800402e:	bd08      	pop	{r3, pc}
 8004030:	20000a70 	.word	0x20000a70
 8004034:	40004400 	.word	0x40004400

08004038 <MX_TIM1_Init>:
{
 8004038:	b530      	push	{r4, r5, lr}
 800403a:	b091      	sub	sp, #68	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800403c:	2400      	movs	r4, #0
 800403e:	940e      	str	r4, [sp, #56]	; 0x38
 8004040:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004042:	9407      	str	r4, [sp, #28]
 8004044:	9408      	str	r4, [sp, #32]
 8004046:	9409      	str	r4, [sp, #36]	; 0x24
 8004048:	940a      	str	r4, [sp, #40]	; 0x28
 800404a:	940b      	str	r4, [sp, #44]	; 0x2c
 800404c:	940c      	str	r4, [sp, #48]	; 0x30
 800404e:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004050:	9400      	str	r4, [sp, #0]
 8004052:	9401      	str	r4, [sp, #4]
 8004054:	9402      	str	r4, [sp, #8]
 8004056:	9403      	str	r4, [sp, #12]
 8004058:	9404      	str	r4, [sp, #16]
 800405a:	9405      	str	r4, [sp, #20]
 800405c:	9406      	str	r4, [sp, #24]
  htim1.Instance = TIM1;
 800405e:	4d1f      	ldr	r5, [pc, #124]	; (80040dc <MX_TIM1_Init+0xa4>)
 8004060:	4b1f      	ldr	r3, [pc, #124]	; (80040e0 <MX_TIM1_Init+0xa8>)
 8004062:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8004064:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004066:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 8004068:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800406a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800406c:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800406e:	4628      	mov	r0, r5
 8004070:	f7ff fa1b 	bl	80034aa <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004074:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004076:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004078:	a90e      	add	r1, sp, #56	; 0x38
 800407a:	4628      	mov	r0, r5
 800407c:	f7ff fc4b 	bl	8003916 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004080:	2360      	movs	r3, #96	; 0x60
 8004082:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8004084:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004086:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004088:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800408a:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800408c:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800408e:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004090:	4622      	mov	r2, r4
 8004092:	a907      	add	r1, sp, #28
 8004094:	4628      	mov	r0, r5
 8004096:	f7ff fb6f 	bl	8003778 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800409a:	2204      	movs	r2, #4
 800409c:	a907      	add	r1, sp, #28
 800409e:	4628      	mov	r0, r5
 80040a0:	f7ff fb6a 	bl	8003778 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040a4:	2208      	movs	r2, #8
 80040a6:	a907      	add	r1, sp, #28
 80040a8:	4628      	mov	r0, r5
 80040aa:	f7ff fb65 	bl	8003778 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040ae:	220c      	movs	r2, #12
 80040b0:	a907      	add	r1, sp, #28
 80040b2:	4628      	mov	r0, r5
 80040b4:	f7ff fb60 	bl	8003778 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040b8:	9400      	str	r4, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040ba:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040bc:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040be:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040c0:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040c6:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040c8:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040ca:	4669      	mov	r1, sp
 80040cc:	4628      	mov	r0, r5
 80040ce:	f7ff fc4b 	bl	8003968 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 80040d2:	4628      	mov	r0, r5
 80040d4:	f000 fc2c 	bl	8004930 <HAL_TIM_MspPostInit>
}
 80040d8:	b011      	add	sp, #68	; 0x44
 80040da:	bd30      	pop	{r4, r5, pc}
 80040dc:	200009d4 	.word	0x200009d4
 80040e0:	40010000 	.word	0x40010000

080040e4 <MX_TIM5_Init>:
{
 80040e4:	b530      	push	{r4, r5, lr}
 80040e6:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 80040e8:	2224      	movs	r2, #36	; 0x24
 80040ea:	2100      	movs	r1, #0
 80040ec:	a803      	add	r0, sp, #12
 80040ee:	f001 fa26 	bl	800553e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040f2:	2400      	movs	r4, #0
 80040f4:	9401      	str	r4, [sp, #4]
 80040f6:	9402      	str	r4, [sp, #8]
  htim5.Instance = TIM5;
 80040f8:	4d0b      	ldr	r5, [pc, #44]	; (8004128 <MX_TIM5_Init+0x44>)
 80040fa:	4b0c      	ldr	r3, [pc, #48]	; (800412c <MX_TIM5_Init+0x48>)
 80040fc:	602b      	str	r3, [r5, #0]
  htim5.Init.Prescaler = 0;
 80040fe:	606c      	str	r4, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004100:	60ac      	str	r4, [r5, #8]
  htim5.Init.Period = 0;
 8004102:	60ec      	str	r4, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004104:	612c      	str	r4, [r5, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004106:	2301      	movs	r3, #1
 8004108:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800410a:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800410c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800410e:	a903      	add	r1, sp, #12
 8004110:	4628      	mov	r0, r5
 8004112:	f7ff f9fc 	bl	800350e <HAL_TIM_Encoder_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004116:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004118:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800411a:	a901      	add	r1, sp, #4
 800411c:	4628      	mov	r0, r5
 800411e:	f7ff fbfa 	bl	8003916 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004122:	b00d      	add	sp, #52	; 0x34
 8004124:	bd30      	pop	{r4, r5, pc}
 8004126:	bf00      	nop
 8004128:	200008f0 	.word	0x200008f0
 800412c:	40000c00 	.word	0x40000c00

08004130 <MX_I2C1_Init>:
{
 8004130:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8004132:	4809      	ldr	r0, [pc, #36]	; (8004158 <MX_I2C1_Init+0x28>)
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <MX_I2C1_Init+0x2c>)
 8004136:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <MX_I2C1_Init+0x30>)
 800413a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800413c:	2300      	movs	r3, #0
 800413e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 12;
 8004140:	220c      	movs	r2, #12
 8004142:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004144:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004148:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800414a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800414c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800414e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004150:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004152:	f7fd fd3b 	bl	8001bcc <HAL_I2C_Init>
 8004156:	bd08      	pop	{r3, pc}
 8004158:	200007e8 	.word	0x200007e8
 800415c:	40005400 	.word	0x40005400
 8004160:	000186a0 	.word	0x000186a0

08004164 <MX_I2C2_Init>:
{
 8004164:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8004166:	480a      	ldr	r0, [pc, #40]	; (8004190 <MX_I2C2_Init+0x2c>)
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <MX_I2C2_Init+0x30>)
 800416a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 10000;
 800416c:	f242 7310 	movw	r3, #10000	; 0x2710
 8004170:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004172:	2300      	movs	r3, #0
 8004174:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 6;
 8004176:	2206      	movs	r2, #6
 8004178:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800417a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800417e:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004180:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004182:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004184:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004186:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004188:	f7fd fd20 	bl	8001bcc <HAL_I2C_Init>
 800418c:	bd08      	pop	{r3, pc}
 800418e:	bf00      	nop
 8004190:	2000083c 	.word	0x2000083c
 8004194:	40005800 	.word	0x40005800

08004198 <MX_SPI2_Init>:
{
 8004198:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 800419a:	480d      	ldr	r0, [pc, #52]	; (80041d0 <MX_SPI2_Init+0x38>)
 800419c:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <MX_SPI2_Init+0x3c>)
 800419e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80041a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80041a4:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80041a6:	2300      	movs	r3, #0
 80041a8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80041aa:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80041ac:	2202      	movs	r2, #2
 80041ae:	6102      	str	r2, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80041b0:	2201      	movs	r2, #1
 80041b2:	6142      	str	r2, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80041b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b8:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80041ba:	2218      	movs	r2, #24
 80041bc:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041be:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80041c0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80041c4:	230a      	movs	r3, #10
 80041c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80041c8:	f7fe fe32 	bl	8002e30 <HAL_SPI_Init>
 80041cc:	bd08      	pop	{r3, pc}
 80041ce:	bf00      	nop
 80041d0:	200006f4 	.word	0x200006f4
 80041d4:	40003800 	.word	0x40003800

080041d8 <MX_ADC1_Init>:
{
 80041d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041da:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80041dc:	2300      	movs	r3, #0
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	9302      	str	r3, [sp, #8]
 80041e4:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 80041e6:	4c1c      	ldr	r4, [pc, #112]	; (8004258 <MX_ADC1_Init+0x80>)
 80041e8:	4a1c      	ldr	r2, [pc, #112]	; (800425c <MX_ADC1_Init+0x84>)
 80041ea:	6022      	str	r2, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80041ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041f0:	6062      	str	r2, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80041f2:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80041f4:	2501      	movs	r5, #1
 80041f6:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80041f8:	61a5      	str	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041fa:	6223      	str	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041fe:	4a18      	ldr	r2, [pc, #96]	; (8004260 <MX_ADC1_Init+0x88>)
 8004200:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004202:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 4;
 8004204:	2604      	movs	r6, #4
 8004206:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004208:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800420a:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800420c:	4620      	mov	r0, r4
 800420e:	f7fc ff79 	bl	8001104 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 8004212:	2306      	movs	r3, #6
 8004214:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8004216:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004218:	2703      	movs	r7, #3
 800421a:	9702      	str	r7, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800421c:	4669      	mov	r1, sp
 800421e:	4620      	mov	r0, r4
 8004220:	f7fc ff9a 	bl	8001158 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_7;
 8004224:	2507      	movs	r5, #7
 8004226:	9500      	str	r5, [sp, #0]
  sConfig.Rank = 2;
 8004228:	2302      	movs	r3, #2
 800422a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800422c:	4669      	mov	r1, sp
 800422e:	4620      	mov	r0, r4
 8004230:	f7fc ff92 	bl	8001158 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 8004234:	2308      	movs	r3, #8
 8004236:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8004238:	9701      	str	r7, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800423a:	4669      	mov	r1, sp
 800423c:	4620      	mov	r0, r4
 800423e:	f7fc ff8b 	bl	8001158 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <MX_ADC1_Init+0x8c>)
 8004244:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8004246:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004248:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800424a:	4669      	mov	r1, sp
 800424c:	4620      	mov	r0, r4
 800424e:	f7fc ff83 	bl	8001158 <HAL_ADC_ConfigChannel>
}
 8004252:	b005      	add	sp, #20
 8004254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004256:	bf00      	nop
 8004258:	2000092c 	.word	0x2000092c
 800425c:	40012000 	.word	0x40012000
 8004260:	0f000001 	.word	0x0f000001
 8004264:	10000012 	.word	0x10000012

08004268 <MX_TIM8_Init>:
{
 8004268:	b530      	push	{r4, r5, lr}
 800426a:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800426c:	2400      	movs	r4, #0
 800426e:	9404      	str	r4, [sp, #16]
 8004270:	9405      	str	r4, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004272:	9400      	str	r4, [sp, #0]
 8004274:	9401      	str	r4, [sp, #4]
 8004276:	9402      	str	r4, [sp, #8]
 8004278:	9403      	str	r4, [sp, #12]
  htim8.Instance = TIM8;
 800427a:	4d11      	ldr	r5, [pc, #68]	; (80042c0 <MX_TIM8_Init+0x58>)
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <MX_TIM8_Init+0x5c>)
 800427e:	602b      	str	r3, [r5, #0]
  htim8.Init.Prescaler = 0;
 8004280:	606c      	str	r4, [r5, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004282:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 0;
 8004284:	60ec      	str	r4, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004286:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 8004288:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800428a:	4628      	mov	r0, r5
 800428c:	f7ff f926 	bl	80034dc <HAL_TIM_IC_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004290:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004292:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004294:	a904      	add	r1, sp, #16
 8004296:	4628      	mov	r0, r5
 8004298:	f7ff fb3d 	bl	8003916 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800429c:	9400      	str	r4, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800429e:	2301      	movs	r3, #1
 80042a0:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80042a2:	9402      	str	r4, [sp, #8]
  sConfigIC.ICFilter = 0;
 80042a4:	9403      	str	r4, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80042a6:	2204      	movs	r2, #4
 80042a8:	4669      	mov	r1, sp
 80042aa:	4628      	mov	r0, r5
 80042ac:	f7ff f9cc 	bl	8003648 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80042b0:	2208      	movs	r2, #8
 80042b2:	4669      	mov	r1, sp
 80042b4:	4628      	mov	r0, r5
 80042b6:	f7ff f9c7 	bl	8003648 <HAL_TIM_IC_ConfigChannel>
}
 80042ba:	b007      	add	sp, #28
 80042bc:	bd30      	pop	{r4, r5, pc}
 80042be:	bf00      	nop
 80042c0:	2000074c 	.word	0x2000074c
 80042c4:	40010400 	.word	0x40010400

080042c8 <MX_TIM7_Init>:
{
 80042c8:	b530      	push	{r4, r5, lr}
 80042ca:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042cc:	2400      	movs	r4, #0
 80042ce:	9400      	str	r4, [sp, #0]
 80042d0:	9401      	str	r4, [sp, #4]
  htim7.Instance = TIM7;
 80042d2:	4d08      	ldr	r5, [pc, #32]	; (80042f4 <MX_TIM7_Init+0x2c>)
 80042d4:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <MX_TIM7_Init+0x30>)
 80042d6:	602b      	str	r3, [r5, #0]
  htim7.Init.Prescaler = 0;
 80042d8:	606c      	str	r4, [r5, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042da:	60ac      	str	r4, [r5, #8]
  htim7.Init.Period = 0;
 80042dc:	60ec      	str	r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80042de:	4628      	mov	r0, r5
 80042e0:	f7ff f8ca 	bl	8003478 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042e4:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042e6:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80042e8:	4669      	mov	r1, sp
 80042ea:	4628      	mov	r0, r5
 80042ec:	f7ff fb13 	bl	8003916 <HAL_TIMEx_MasterConfigSynchronization>
}
 80042f0:	b003      	add	sp, #12
 80042f2:	bd30      	pop	{r4, r5, pc}
 80042f4:	20000b10 	.word	0x20000b10
 80042f8:	40001400 	.word	0x40001400

080042fc <SystemClock_Config>:
{
 80042fc:	b530      	push	{r4, r5, lr}
 80042fe:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004300:	2234      	movs	r2, #52	; 0x34
 8004302:	2100      	movs	r1, #0
 8004304:	a807      	add	r0, sp, #28
 8004306:	f001 f91a 	bl	800553e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800430a:	2400      	movs	r4, #0
 800430c:	9402      	str	r4, [sp, #8]
 800430e:	9403      	str	r4, [sp, #12]
 8004310:	9404      	str	r4, [sp, #16]
 8004312:	9405      	str	r4, [sp, #20]
 8004314:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	9400      	str	r4, [sp, #0]
 8004318:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <SystemClock_Config+0x94>)
 800431a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800432c:	9401      	str	r4, [sp, #4]
 800432e:	4b19      	ldr	r3, [pc, #100]	; (8004394 <SystemClock_Config+0x98>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004342:	2301      	movs	r3, #1
 8004344:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800434a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800434c:	2502      	movs	r5, #2
 800434e:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004350:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004354:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004356:	2304      	movs	r3, #4
 8004358:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800435a:	23b4      	movs	r3, #180	; 0xb4
 800435c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800435e:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004360:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004362:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004364:	a807      	add	r0, sp, #28
 8004366:	f7fe fb81 	bl	8002a6c <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800436a:	f7fe f9ad 	bl	80026c8 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800436e:	230f      	movs	r3, #15
 8004370:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004372:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004374:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004376:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800437a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800437c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004380:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004382:	2105      	movs	r1, #5
 8004384:	a802      	add	r0, sp, #8
 8004386:	f7fe f9df 	bl	8002748 <HAL_RCC_ClockConfig>
}
 800438a:	b015      	add	sp, #84	; 0x54
 800438c:	bd30      	pop	{r4, r5, pc}
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
 8004394:	40007000 	.word	0x40007000

08004398 <main>:
{
 8004398:	b508      	push	{r3, lr}
  HAL_Init();
 800439a:	f7fc fdef 	bl	8000f7c <HAL_Init>
  SystemClock_Config();
 800439e:	f7ff ffad 	bl	80042fc <SystemClock_Config>
  MX_GPIO_Init();
 80043a2:	f7ff fd87 	bl	8003eb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80043a6:	f7ff fded 	bl	8003f84 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80043aa:	f7ff fe2f 	bl	800400c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80043ae:	f7ff fe43 	bl	8004038 <MX_TIM1_Init>
  MX_TIM5_Init();
 80043b2:	f7ff fe97 	bl	80040e4 <MX_TIM5_Init>
  MX_I2C1_Init();
 80043b6:	f7ff febb 	bl	8004130 <MX_I2C1_Init>
  MX_I2C2_Init();
 80043ba:	f7ff fed3 	bl	8004164 <MX_I2C2_Init>
  MX_SPI2_Init();
 80043be:	f7ff feeb 	bl	8004198 <MX_SPI2_Init>
  MX_ADC1_Init();
 80043c2:	f7ff ff09 	bl	80041d8 <MX_ADC1_Init>
  MX_TIM8_Init();
 80043c6:	f7ff ff4f 	bl	8004268 <MX_TIM8_Init>
  MX_TIM7_Init();
 80043ca:	f7ff ff7d 	bl	80042c8 <MX_TIM7_Init>
  prj_main();
 80043ce:	f7ff fd6d 	bl	8003eac <prj_main>
 80043d2:	e7fe      	b.n	80043d2 <main+0x3a>

080043d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043d8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043da:	2100      	movs	r1, #0
 80043dc:	9100      	str	r1, [sp, #0]
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_MspInit+0x34>)
 80043e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043e6:	645a      	str	r2, [r3, #68]	; 0x44
 80043e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80043ee:	9200      	str	r2, [sp, #0]
 80043f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043f2:	9101      	str	r1, [sp, #4]
 80043f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004406:	b002      	add	sp, #8
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40023800 	.word	0x40023800

08004410 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004410:	b570      	push	{r4, r5, r6, lr}
 8004412:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004414:	2300      	movs	r3, #0
 8004416:	9303      	str	r3, [sp, #12]
 8004418:	9304      	str	r3, [sp, #16]
 800441a:	9305      	str	r3, [sp, #20]
 800441c:	9306      	str	r3, [sp, #24]
 800441e:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8004420:	6802      	ldr	r2, [r0, #0]
 8004422:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004426:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800442a:	429a      	cmp	r2, r3
 800442c:	d001      	beq.n	8004432 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800442e:	b008      	add	sp, #32
 8004430:	bd70      	pop	{r4, r5, r6, pc}
 8004432:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004434:	2500      	movs	r5, #0
 8004436:	9500      	str	r5, [sp, #0]
 8004438:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800443c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004442:	645a      	str	r2, [r3, #68]	; 0x44
 8004444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004446:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800444a:	9200      	str	r2, [sp, #0]
 800444c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800444e:	9501      	str	r5, [sp, #4]
 8004450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
 8004458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800445a:	f002 0201 	and.w	r2, r2, #1
 800445e:	9201      	str	r2, [sp, #4]
 8004460:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004462:	9502      	str	r5, [sp, #8]
 8004464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004466:	f042 0202 	orr.w	r2, r2, #2
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	9302      	str	r3, [sp, #8]
 8004474:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004476:	23c0      	movs	r3, #192	; 0xc0
 8004478:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800447a:	2603      	movs	r6, #3
 800447c:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800447e:	a903      	add	r1, sp, #12
 8004480:	4814      	ldr	r0, [pc, #80]	; (80044d4 <HAL_ADC_MspInit+0xc4>)
 8004482:	f7fd f969 	bl	8001758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004486:	2301      	movs	r3, #1
 8004488:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800448a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448e:	a903      	add	r1, sp, #12
 8004490:	4811      	ldr	r0, [pc, #68]	; (80044d8 <HAL_ADC_MspInit+0xc8>)
 8004492:	f7fd f961 	bl	8001758 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8004496:	4811      	ldr	r0, [pc, #68]	; (80044dc <HAL_ADC_MspInit+0xcc>)
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <HAL_ADC_MspInit+0xd0>)
 800449a:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800449c:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800449e:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80044a0:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80044a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a6:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80044a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044ac:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80044ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044b2:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80044b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044b8:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80044ba:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044bc:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80044be:	f7fc ffe1 	bl	8001484 <HAL_DMA_Init>
 80044c2:	b918      	cbnz	r0, 80044cc <HAL_ADC_MspInit+0xbc>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_ADC_MspInit+0xcc>)
 80044c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80044c8:	639c      	str	r4, [r3, #56]	; 0x38
}
 80044ca:	e7b0      	b.n	800442e <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 80044cc:	f7ff ff82 	bl	80043d4 <Error_Handler>
 80044d0:	e7f8      	b.n	80044c4 <HAL_ADC_MspInit+0xb4>
 80044d2:	bf00      	nop
 80044d4:	40020000 	.word	0x40020000
 80044d8:	40020400 	.word	0x40020400
 80044dc:	20000974 	.word	0x20000974
 80044e0:	40026410 	.word	0x40026410

080044e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044e8:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ea:	2300      	movs	r3, #0
 80044ec:	9305      	str	r3, [sp, #20]
 80044ee:	9306      	str	r3, [sp, #24]
 80044f0:	9307      	str	r3, [sp, #28]
 80044f2:	9308      	str	r3, [sp, #32]
 80044f4:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 80044f6:	6803      	ldr	r3, [r0, #0]
 80044f8:	4a5b      	ldr	r2, [pc, #364]	; (8004668 <HAL_I2C_MspInit+0x184>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d005      	beq.n	800450a <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80044fe:	4a5b      	ldr	r2, [pc, #364]	; (800466c <HAL_I2C_MspInit+0x188>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d06f      	beq.n	80045e4 <HAL_I2C_MspInit+0x100>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004504:	b00b      	add	sp, #44	; 0x2c
 8004506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800450a:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800450c:	2500      	movs	r5, #0
 800450e:	9500      	str	r5, [sp, #0]
 8004510:	4e57      	ldr	r6, [pc, #348]	; (8004670 <HAL_I2C_MspInit+0x18c>)
 8004512:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004514:	f043 0302 	orr.w	r3, r3, #2
 8004518:	6333      	str	r3, [r6, #48]	; 0x30
 800451a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004524:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004528:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800452a:	2312      	movs	r3, #18
 800452c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452e:	2303      	movs	r3, #3
 8004530:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004532:	2304      	movs	r3, #4
 8004534:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004536:	a905      	add	r1, sp, #20
 8004538:	484e      	ldr	r0, [pc, #312]	; (8004674 <HAL_I2C_MspInit+0x190>)
 800453a:	f7fd f90d 	bl	8001758 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800453e:	9501      	str	r5, [sp, #4]
 8004540:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004546:	6433      	str	r3, [r6, #64]	; 0x40
 8004548:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800454a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8004552:	4849      	ldr	r0, [pc, #292]	; (8004678 <HAL_I2C_MspInit+0x194>)
 8004554:	4b49      	ldr	r3, [pc, #292]	; (800467c <HAL_I2C_MspInit+0x198>)
 8004556:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004558:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800455c:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800455e:	2340      	movs	r3, #64	; 0x40
 8004560:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004562:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004568:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800456a:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800456c:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800456e:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004570:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004574:	6203      	str	r3, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004576:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004578:	f7fc ff84 	bl	8001484 <HAL_DMA_Init>
 800457c:	bb60      	cbnz	r0, 80045d8 <HAL_I2C_MspInit+0xf4>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800457e:	4b3e      	ldr	r3, [pc, #248]	; (8004678 <HAL_I2C_MspInit+0x194>)
 8004580:	6363      	str	r3, [r4, #52]	; 0x34
 8004582:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004584:	483e      	ldr	r0, [pc, #248]	; (8004680 <HAL_I2C_MspInit+0x19c>)
 8004586:	4b3f      	ldr	r3, [pc, #252]	; (8004684 <HAL_I2C_MspInit+0x1a0>)
 8004588:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800458a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800458e:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004590:	2300      	movs	r3, #0
 8004592:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004594:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800459a:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800459c:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800459e:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80045a0:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80045a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80045a6:	6202      	str	r2, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045a8:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80045aa:	f7fc ff6b 	bl	8001484 <HAL_DMA_Init>
 80045ae:	b9b0      	cbnz	r0, 80045de <HAL_I2C_MspInit+0xfa>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80045b0:	4b33      	ldr	r3, [pc, #204]	; (8004680 <HAL_I2C_MspInit+0x19c>)
 80045b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80045b4:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	4611      	mov	r1, r2
 80045ba:	201f      	movs	r0, #31
 80045bc:	f7fc fea8 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80045c0:	201f      	movs	r0, #31
 80045c2:	f7fc fed7 	bl	8001374 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80045c6:	2200      	movs	r2, #0
 80045c8:	4611      	mov	r1, r2
 80045ca:	2020      	movs	r0, #32
 80045cc:	f7fc fea0 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80045d0:	2020      	movs	r0, #32
 80045d2:	f7fc fecf 	bl	8001374 <HAL_NVIC_EnableIRQ>
 80045d6:	e795      	b.n	8004504 <HAL_I2C_MspInit+0x20>
      Error_Handler();
 80045d8:	f7ff fefc 	bl	80043d4 <Error_Handler>
 80045dc:	e7cf      	b.n	800457e <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 80045de:	f7ff fef9 	bl	80043d4 <Error_Handler>
 80045e2:	e7e5      	b.n	80045b0 <HAL_I2C_MspInit+0xcc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e4:	2500      	movs	r5, #0
 80045e6:	9502      	str	r5, [sp, #8]
 80045e8:	4c21      	ldr	r4, [pc, #132]	; (8004670 <HAL_I2C_MspInit+0x18c>)
 80045ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045ec:	f043 0302 	orr.w	r3, r3, #2
 80045f0:	6323      	str	r3, [r4, #48]	; 0x30
 80045f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	9302      	str	r3, [sp, #8]
 80045fa:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045fc:	9503      	str	r5, [sp, #12]
 80045fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004600:	f043 0304 	orr.w	r3, r3, #4
 8004604:	6323      	str	r3, [r4, #48]	; 0x30
 8004606:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	9303      	str	r3, [sp, #12]
 800460e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004614:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004616:	f04f 0912 	mov.w	r9, #18
 800461a:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800461e:	f04f 0801 	mov.w	r8, #1
 8004622:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004626:	2703      	movs	r7, #3
 8004628:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800462a:	2604      	movs	r6, #4
 800462c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462e:	a905      	add	r1, sp, #20
 8004630:	4810      	ldr	r0, [pc, #64]	; (8004674 <HAL_I2C_MspInit+0x190>)
 8004632:	f7fd f891 	bl	8001758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800463a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800463c:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004640:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004644:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004646:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004648:	a905      	add	r1, sp, #20
 800464a:	480f      	ldr	r0, [pc, #60]	; (8004688 <HAL_I2C_MspInit+0x1a4>)
 800464c:	f7fd f884 	bl	8001758 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004650:	9504      	str	r5, [sp, #16]
 8004652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004654:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004658:	6423      	str	r3, [r4, #64]	; 0x40
 800465a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800465c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004660:	9304      	str	r3, [sp, #16]
 8004662:	9b04      	ldr	r3, [sp, #16]
}
 8004664:	e74e      	b.n	8004504 <HAL_I2C_MspInit+0x20>
 8004666:	bf00      	nop
 8004668:	40005400 	.word	0x40005400
 800466c:	40005800 	.word	0x40005800
 8004670:	40023800 	.word	0x40023800
 8004674:	40020400 	.word	0x40020400
 8004678:	20000788 	.word	0x20000788
 800467c:	400260b8 	.word	0x400260b8
 8004680:	20000a10 	.word	0x20000a10
 8004684:	40026010 	.word	0x40026010
 8004688:	40020800 	.word	0x40020800

0800468c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800468c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004690:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004692:	2300      	movs	r3, #0
 8004694:	9303      	str	r3, [sp, #12]
 8004696:	9304      	str	r3, [sp, #16]
 8004698:	9305      	str	r3, [sp, #20]
 800469a:	9306      	str	r3, [sp, #24]
 800469c:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 800469e:	6802      	ldr	r2, [r0, #0]
 80046a0:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <HAL_SPI_MspInit+0x124>)
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d002      	beq.n	80046ac <HAL_SPI_MspInit+0x20>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80046a6:	b009      	add	sp, #36	; 0x24
 80046a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046ac:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046ae:	2500      	movs	r5, #0
 80046b0:	9500      	str	r5, [sp, #0]
 80046b2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80046b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046bc:	641a      	str	r2, [r3, #64]	; 0x40
 80046be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80046c4:	9200      	str	r2, [sp, #0]
 80046c6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046c8:	9501      	str	r5, [sp, #4]
 80046ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046cc:	f042 0204 	orr.w	r2, r2, #4
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
 80046d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d4:	f002 0204 	and.w	r2, r2, #4
 80046d8:	9201      	str	r2, [sp, #4]
 80046da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046dc:	9502      	str	r5, [sp, #8]
 80046de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e0:	f042 0202 	orr.w	r2, r2, #2
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	9302      	str	r3, [sp, #8]
 80046ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80046f0:	2602      	movs	r6, #2
 80046f2:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f4:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f6:	2703      	movs	r7, #3
 80046f8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80046fa:	2307      	movs	r3, #7
 80046fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046fe:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80047c8 <HAL_SPI_MspInit+0x13c>
 8004702:	a903      	add	r1, sp, #12
 8004704:	4648      	mov	r0, r9
 8004706:	f7fd f827 	bl	8001758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800470a:	2304      	movs	r3, #4
 800470c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004710:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004712:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004714:	f04f 0805 	mov.w	r8, #5
 8004718:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800471c:	a903      	add	r1, sp, #12
 800471e:	4648      	mov	r0, r9
 8004720:	f7fd f81a 	bl	8001758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004728:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800472e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004730:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004734:	a903      	add	r1, sp, #12
 8004736:	481f      	ldr	r0, [pc, #124]	; (80047b4 <HAL_SPI_MspInit+0x128>)
 8004738:	f7fd f80e 	bl	8001758 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800473c:	481e      	ldr	r0, [pc, #120]	; (80047b8 <HAL_SPI_MspInit+0x12c>)
 800473e:	4b1f      	ldr	r3, [pc, #124]	; (80047bc <HAL_SPI_MspInit+0x130>)
 8004740:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8004742:	6045      	str	r5, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004744:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004746:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800474c:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800474e:	6145      	str	r5, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004750:	6185      	str	r5, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004752:	61c5      	str	r5, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004754:	6205      	str	r5, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004756:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004758:	f7fc fe94 	bl	8001484 <HAL_DMA_Init>
 800475c:	bb08      	cbnz	r0, 80047a2 <HAL_SPI_MspInit+0x116>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800475e:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <HAL_SPI_MspInit+0x12c>)
 8004760:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004762:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004764:	4816      	ldr	r0, [pc, #88]	; (80047c0 <HAL_SPI_MspInit+0x134>)
 8004766:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <HAL_SPI_MspInit+0x138>)
 8004768:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800476a:	2300      	movs	r3, #0
 800476c:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800476e:	2240      	movs	r2, #64	; 0x40
 8004770:	6082      	str	r2, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004772:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004774:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004778:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800477a:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800477c:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800477e:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004780:	6203      	str	r3, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004782:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004784:	f7fc fe7e 	bl	8001484 <HAL_DMA_Init>
 8004788:	b970      	cbnz	r0, 80047a8 <HAL_SPI_MspInit+0x11c>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800478a:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <HAL_SPI_MspInit+0x134>)
 800478c:	64a3      	str	r3, [r4, #72]	; 0x48
 800478e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004790:	2200      	movs	r2, #0
 8004792:	4611      	mov	r1, r2
 8004794:	2024      	movs	r0, #36	; 0x24
 8004796:	f7fc fdbb 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800479a:	2024      	movs	r0, #36	; 0x24
 800479c:	f7fc fdea 	bl	8001374 <HAL_NVIC_EnableIRQ>
}
 80047a0:	e781      	b.n	80046a6 <HAL_SPI_MspInit+0x1a>
      Error_Handler();
 80047a2:	f7ff fe17 	bl	80043d4 <Error_Handler>
 80047a6:	e7da      	b.n	800475e <HAL_SPI_MspInit+0xd2>
      Error_Handler();
 80047a8:	f7ff fe14 	bl	80043d4 <Error_Handler>
 80047ac:	e7ed      	b.n	800478a <HAL_SPI_MspInit+0xfe>
 80047ae:	bf00      	nop
 80047b0:	40003800 	.word	0x40003800
 80047b4:	40020400 	.word	0x40020400
 80047b8:	20000890 	.word	0x20000890
 80047bc:	40026058 	.word	0x40026058
 80047c0:	20000ab0 	.word	0x20000ab0
 80047c4:	40026070 	.word	0x40026070
 80047c8:	40020800 	.word	0x40020800

080047cc <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 80047cc:	6802      	ldr	r2, [r0, #0]
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <HAL_TIM_PWM_MspInit+0x28>)
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d000      	beq.n	80047d6 <HAL_TIM_PWM_MspInit+0xa>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80047d4:	4770      	bx	lr
{
 80047d6:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047d8:	2300      	movs	r3, #0
 80047da:	9301      	str	r3, [sp, #4]
 80047dc:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_TIM_PWM_MspInit+0x2c>)
 80047de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
 80047e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	9b01      	ldr	r3, [sp, #4]
}
 80047f0:	b002      	add	sp, #8
 80047f2:	e7ef      	b.n	80047d4 <HAL_TIM_PWM_MspInit+0x8>
 80047f4:	40010000 	.word	0x40010000
 80047f8:	40023800 	.word	0x40023800

080047fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80047fc:	b500      	push	{lr}
 80047fe:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004800:	2300      	movs	r3, #0
 8004802:	9303      	str	r3, [sp, #12]
 8004804:	9304      	str	r3, [sp, #16]
 8004806:	9305      	str	r3, [sp, #20]
 8004808:	9306      	str	r3, [sp, #24]
 800480a:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM5)
 800480c:	6802      	ldr	r2, [r0, #0]
 800480e:	4b13      	ldr	r3, [pc, #76]	; (800485c <HAL_TIM_Encoder_MspInit+0x60>)
 8004810:	429a      	cmp	r2, r3
 8004812:	d002      	beq.n	800481a <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004814:	b009      	add	sp, #36	; 0x24
 8004816:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 800481a:	2100      	movs	r1, #0
 800481c:	9101      	str	r1, [sp, #4]
 800481e:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 8004822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004824:	f042 0208 	orr.w	r2, r2, #8
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
 800482a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482c:	f002 0208 	and.w	r2, r2, #8
 8004830:	9201      	str	r2, [sp, #4]
 8004832:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004834:	9102      	str	r1, [sp, #8]
 8004836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004838:	f042 0201 	orr.w	r2, r2, #1
 800483c:	631a      	str	r2, [r3, #48]	; 0x30
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	9302      	str	r3, [sp, #8]
 8004846:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004848:	2303      	movs	r3, #3
 800484a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484c:	2302      	movs	r3, #2
 800484e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004850:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004852:	a903      	add	r1, sp, #12
 8004854:	4802      	ldr	r0, [pc, #8]	; (8004860 <HAL_TIM_Encoder_MspInit+0x64>)
 8004856:	f7fc ff7f 	bl	8001758 <HAL_GPIO_Init>
}
 800485a:	e7db      	b.n	8004814 <HAL_TIM_Encoder_MspInit+0x18>
 800485c:	40000c00 	.word	0x40000c00
 8004860:	40020000 	.word	0x40020000

08004864 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM7)
 8004864:	6802      	ldr	r2, [r0, #0]
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <HAL_TIM_Base_MspInit+0x3c>)
 8004868:	429a      	cmp	r2, r3
 800486a:	d000      	beq.n	800486e <HAL_TIM_Base_MspInit+0xa>
 800486c:	4770      	bx	lr
{
 800486e:	b500      	push	{lr}
 8004870:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004872:	2100      	movs	r1, #0
 8004874:	9101      	str	r1, [sp, #4]
 8004876:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 800487a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800487c:	f042 0220 	orr.w	r2, r2, #32
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	9b01      	ldr	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800488c:	460a      	mov	r2, r1
 800488e:	2037      	movs	r0, #55	; 0x37
 8004890:	f7fc fd3e 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004894:	2037      	movs	r0, #55	; 0x37
 8004896:	f7fc fd6d 	bl	8001374 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800489a:	b003      	add	sp, #12
 800489c:	f85d fb04 	ldr.w	pc, [sp], #4
 80048a0:	40001400 	.word	0x40001400

080048a4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80048a4:	b510      	push	{r4, lr}
 80048a6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a8:	2300      	movs	r3, #0
 80048aa:	9303      	str	r3, [sp, #12]
 80048ac:	9304      	str	r3, [sp, #16]
 80048ae:	9305      	str	r3, [sp, #20]
 80048b0:	9306      	str	r3, [sp, #24]
 80048b2:	9307      	str	r3, [sp, #28]
  if(htim_ic->Instance==TIM8)
 80048b4:	6802      	ldr	r2, [r0, #0]
 80048b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048ba:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80048be:	429a      	cmp	r2, r3
 80048c0:	d001      	beq.n	80048c6 <HAL_TIM_IC_MspInit+0x22>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80048c2:	b008      	add	sp, #32
 80048c4:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM8_CLK_ENABLE();
 80048c6:	2400      	movs	r4, #0
 80048c8:	9401      	str	r4, [sp, #4]
 80048ca:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 80048ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048d0:	f042 0202 	orr.w	r2, r2, #2
 80048d4:	645a      	str	r2, [r3, #68]	; 0x44
 80048d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048d8:	f002 0202 	and.w	r2, r2, #2
 80048dc:	9201      	str	r2, [sp, #4]
 80048de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048e0:	9402      	str	r4, [sp, #8]
 80048e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e4:	f042 0204 	orr.w	r2, r2, #4
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	9302      	str	r3, [sp, #8]
 80048f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80048f4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80048f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048fa:	2302      	movs	r3, #2
 80048fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80048fe:	2303      	movs	r3, #3
 8004900:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004902:	a903      	add	r1, sp, #12
 8004904:	4809      	ldr	r0, [pc, #36]	; (800492c <HAL_TIM_IC_MspInit+0x88>)
 8004906:	f7fc ff27 	bl	8001758 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800490a:	4622      	mov	r2, r4
 800490c:	4621      	mov	r1, r4
 800490e:	202c      	movs	r0, #44	; 0x2c
 8004910:	f7fc fcfe 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004914:	202c      	movs	r0, #44	; 0x2c
 8004916:	f7fc fd2d 	bl	8001374 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800491a:	4622      	mov	r2, r4
 800491c:	4621      	mov	r1, r4
 800491e:	202e      	movs	r0, #46	; 0x2e
 8004920:	f7fc fcf6 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004924:	202e      	movs	r0, #46	; 0x2e
 8004926:	f7fc fd25 	bl	8001374 <HAL_NVIC_EnableIRQ>
}
 800492a:	e7ca      	b.n	80048c2 <HAL_TIM_IC_MspInit+0x1e>
 800492c:	40020800 	.word	0x40020800

08004930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004930:	b500      	push	{lr}
 8004932:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004934:	2300      	movs	r3, #0
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	9302      	str	r3, [sp, #8]
 800493a:	9303      	str	r3, [sp, #12]
 800493c:	9304      	str	r3, [sp, #16]
 800493e:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8004940:	6802      	ldr	r2, [r0, #0]
 8004942:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <HAL_TIM_MspPostInit+0x50>)
 8004944:	429a      	cmp	r2, r3
 8004946:	d002      	beq.n	800494e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004948:	b007      	add	sp, #28
 800494a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <HAL_TIM_MspPostInit+0x54>)
 8004954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004966:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800496a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496c:	2302      	movs	r3, #2
 800496e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004970:	2301      	movs	r3, #1
 8004972:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004974:	a901      	add	r1, sp, #4
 8004976:	4804      	ldr	r0, [pc, #16]	; (8004988 <HAL_TIM_MspPostInit+0x58>)
 8004978:	f7fc feee 	bl	8001758 <HAL_GPIO_Init>
}
 800497c:	e7e4      	b.n	8004948 <HAL_TIM_MspPostInit+0x18>
 800497e:	bf00      	nop
 8004980:	40010000 	.word	0x40010000
 8004984:	40023800 	.word	0x40023800
 8004988:	40020000 	.word	0x40020000

0800498c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800498c:	b500      	push	{lr}
 800498e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004990:	2300      	movs	r3, #0
 8004992:	9303      	str	r3, [sp, #12]
 8004994:	9304      	str	r3, [sp, #16]
 8004996:	9305      	str	r3, [sp, #20]
 8004998:	9306      	str	r3, [sp, #24]
 800499a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800499c:	6802      	ldr	r2, [r0, #0]
 800499e:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <HAL_UART_MspInit+0x6c>)
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d002      	beq.n	80049aa <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80049a4:	b009      	add	sp, #36	; 0x24
 80049a6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80049aa:	2100      	movs	r1, #0
 80049ac:	9101      	str	r1, [sp, #4]
 80049ae:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80049b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
 80049ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049bc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80049c0:	9201      	str	r2, [sp, #4]
 80049c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049c4:	9102      	str	r1, [sp, #8]
 80049c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	9302      	str	r3, [sp, #8]
 80049d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80049d8:	230c      	movs	r3, #12
 80049da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049dc:	2302      	movs	r3, #2
 80049de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049e0:	2301      	movs	r3, #1
 80049e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049e4:	2303      	movs	r3, #3
 80049e6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049e8:	2307      	movs	r3, #7
 80049ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ec:	a903      	add	r1, sp, #12
 80049ee:	4803      	ldr	r0, [pc, #12]	; (80049fc <HAL_UART_MspInit+0x70>)
 80049f0:	f7fc feb2 	bl	8001758 <HAL_GPIO_Init>
}
 80049f4:	e7d6      	b.n	80049a4 <HAL_UART_MspInit+0x18>
 80049f6:	bf00      	nop
 80049f8:	40004400 	.word	0x40004400
 80049fc:	40020000 	.word	0x40020000

08004a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a00:	4770      	bx	lr

08004a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a02:	e7fe      	b.n	8004a02 <HardFault_Handler>

08004a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a04:	e7fe      	b.n	8004a04 <MemManage_Handler>

08004a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a06:	e7fe      	b.n	8004a06 <BusFault_Handler>

08004a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a08:	e7fe      	b.n	8004a08 <UsageFault_Handler>

08004a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a0a:	4770      	bx	lr

08004a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a0c:	4770      	bx	lr

08004a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a0e:	4770      	bx	lr

08004a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a12:	f7fc facd 	bl	8000fb0 <HAL_IncTick>
 8004a16:	bd08      	pop	{r3, pc}

08004a18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004a1a:	4802      	ldr	r0, [pc, #8]	; (8004a24 <DMA1_Stream0_IRQHandler+0xc>)
 8004a1c:	f7fc fdae 	bl	800157c <HAL_DMA_IRQHandler>
 8004a20:	bd08      	pop	{r3, pc}
 8004a22:	bf00      	nop
 8004a24:	20000a10 	.word	0x20000a10

08004a28 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004a28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004a2a:	4802      	ldr	r0, [pc, #8]	; (8004a34 <DMA1_Stream3_IRQHandler+0xc>)
 8004a2c:	f7fc fda6 	bl	800157c <HAL_DMA_IRQHandler>
 8004a30:	bd08      	pop	{r3, pc}
 8004a32:	bf00      	nop
 8004a34:	20000890 	.word	0x20000890

08004a38 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004a38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004a3a:	4802      	ldr	r0, [pc, #8]	; (8004a44 <DMA1_Stream4_IRQHandler+0xc>)
 8004a3c:	f7fc fd9e 	bl	800157c <HAL_DMA_IRQHandler>
 8004a40:	bd08      	pop	{r3, pc}
 8004a42:	bf00      	nop
 8004a44:	20000ab0 	.word	0x20000ab0

08004a48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004a48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004a4a:	4802      	ldr	r0, [pc, #8]	; (8004a54 <I2C1_EV_IRQHandler+0xc>)
 8004a4c:	f7fd fcee 	bl	800242c <HAL_I2C_EV_IRQHandler>
 8004a50:	bd08      	pop	{r3, pc}
 8004a52:	bf00      	nop
 8004a54:	200007e8 	.word	0x200007e8

08004a58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004a5a:	4802      	ldr	r0, [pc, #8]	; (8004a64 <I2C1_ER_IRQHandler+0xc>)
 8004a5c:	f7fd fd9a 	bl	8002594 <HAL_I2C_ER_IRQHandler>
 8004a60:	bd08      	pop	{r3, pc}
 8004a62:	bf00      	nop
 8004a64:	200007e8 	.word	0x200007e8

08004a68 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004a68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004a6a:	4802      	ldr	r0, [pc, #8]	; (8004a74 <SPI2_IRQHandler+0xc>)
 8004a6c:	f7fe fa22 	bl	8002eb4 <HAL_SPI_IRQHandler>
 8004a70:	bd08      	pop	{r3, pc}
 8004a72:	bf00      	nop
 8004a74:	200006f4 	.word	0x200006f4

08004a78 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004a78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004a7a:	4802      	ldr	r0, [pc, #8]	; (8004a84 <TIM8_UP_TIM13_IRQHandler+0xc>)
 8004a7c:	f7fe fbb0 	bl	80031e0 <HAL_TIM_IRQHandler>
 8004a80:	bd08      	pop	{r3, pc}
 8004a82:	bf00      	nop
 8004a84:	2000074c 	.word	0x2000074c

08004a88 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8004a88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004a8a:	4802      	ldr	r0, [pc, #8]	; (8004a94 <TIM8_CC_IRQHandler+0xc>)
 8004a8c:	f7fe fba8 	bl	80031e0 <HAL_TIM_IRQHandler>
 8004a90:	bd08      	pop	{r3, pc}
 8004a92:	bf00      	nop
 8004a94:	2000074c 	.word	0x2000074c

08004a98 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004a98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004a9a:	4802      	ldr	r0, [pc, #8]	; (8004aa4 <DMA1_Stream7_IRQHandler+0xc>)
 8004a9c:	f7fc fd6e 	bl	800157c <HAL_DMA_IRQHandler>
 8004aa0:	bd08      	pop	{r3, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000788 	.word	0x20000788

08004aa8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004aa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004aaa:	4802      	ldr	r0, [pc, #8]	; (8004ab4 <TIM7_IRQHandler+0xc>)
 8004aac:	f7fe fb98 	bl	80031e0 <HAL_TIM_IRQHandler>
 8004ab0:	bd08      	pop	{r3, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000b10 	.word	0x20000b10

08004ab8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004ab8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004aba:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <DMA2_Stream0_IRQHandler+0xc>)
 8004abc:	f7fc fd5e 	bl	800157c <HAL_DMA_IRQHandler>
 8004ac0:	bd08      	pop	{r3, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000974 	.word	0x20000974

08004ac8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ac8:	490f      	ldr	r1, [pc, #60]	; (8004b08 <SystemInit+0x40>)
 8004aca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004ace:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <SystemInit+0x44>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004aea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004aee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004af0:	4a07      	ldr	r2, [pc, #28]	; (8004b10 <SystemInit+0x48>)
 8004af2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004afa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004afc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004afe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b02:	608b      	str	r3, [r1, #8]
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	e000ed00 	.word	0xe000ed00
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	24003010 	.word	0x24003010

08004b14 <Exception_Handler>:

void testI2c(void) {
	testTwoNucleoBoardComm();
}

void Exception_Handler(const char* str) {
 8004b14:	b508      	push	{r3, lr}
	printf_u("\r%s\r\n",str);
 8004b16:	4601      	mov	r1, r0
 8004b18:	4801      	ldr	r0, [pc, #4]	; (8004b20 <Exception_Handler+0xc>)
 8004b1a:	f000 fc9d 	bl	8005458 <printf_u>
 8004b1e:	bd08      	pop	{r3, pc}
 8004b20:	08008350 	.word	0x08008350

08004b24 <setup>:
GPIO* button;
GPIO PB6Mem;
GPIO* PB6;


static void setup(void) {
 8004b24:	b508      	push	{r3, lr}
	system_console = newMainUSART(&huart2);
 8004b26:	480f      	ldr	r0, [pc, #60]	; (8004b64 <setup+0x40>)
 8004b28:	f000 fc56 	bl	80053d8 <newMainUSART>
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <setup+0x44>)
 8004b2e:	6018      	str	r0, [r3, #0]
	led = newGPIO(&ledMem, LD2_GPIO_Port, LD2_Pin);
 8004b30:	2220      	movs	r2, #32
 8004b32:	490e      	ldr	r1, [pc, #56]	; (8004b6c <setup+0x48>)
 8004b34:	480e      	ldr	r0, [pc, #56]	; (8004b70 <setup+0x4c>)
 8004b36:	f000 f920 	bl	8004d7a <newGPIO>
 8004b3a:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <setup+0x50>)
 8004b3c:	6018      	str	r0, [r3, #0]
	PB6 = newGPIO(&PB6Mem, GPIOB, GPIO_PIN_6);
 8004b3e:	2240      	movs	r2, #64	; 0x40
 8004b40:	490d      	ldr	r1, [pc, #52]	; (8004b78 <setup+0x54>)
 8004b42:	480e      	ldr	r0, [pc, #56]	; (8004b7c <setup+0x58>)
 8004b44:	f000 f919 	bl	8004d7a <newGPIO>
 8004b48:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <setup+0x5c>)
 8004b4a:	6018      	str	r0, [r3, #0]
	button = newGPIO(&buttonMem, B1_GPIO_Port, B1_Pin);
 8004b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b50:	490c      	ldr	r1, [pc, #48]	; (8004b84 <setup+0x60>)
 8004b52:	480d      	ldr	r0, [pc, #52]	; (8004b88 <setup+0x64>)
 8004b54:	f000 f911 	bl	8004d7a <newGPIO>
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <setup+0x68>)
 8004b5a:	6018      	str	r0, [r3, #0]
	printf_u("\rTimer Testing\r\n");
 8004b5c:	480c      	ldr	r0, [pc, #48]	; (8004b90 <setup+0x6c>)
 8004b5e:	f000 fc7b 	bl	8005458 <printf_u>
 8004b62:	bd08      	pop	{r3, pc}
 8004b64:	20000a70 	.word	0x20000a70
 8004b68:	20000d60 	.word	0x20000d60
 8004b6c:	40020000 	.word	0x40020000
 8004b70:	20000b50 	.word	0x20000b50
 8004b74:	20000b8c 	.word	0x20000b8c
 8004b78:	40020400 	.word	0x40020400
 8004b7c:	20000df4 	.word	0x20000df4
 8004b80:	20000dcc 	.word	0x20000dcc
 8004b84:	40020800 	.word	0x40020800
 8004b88:	20000b90 	.word	0x20000b90
 8004b8c:	20000b88 	.word	0x20000b88
 8004b90:	08008358 	.word	0x08008358
 8004b94:	00000000 	.word	0x00000000

08004b98 <testPWM_Input>:
		}
	}
}


static void testPWM_Input(void) {
 8004b98:	b508      	push	{r3, lr}
	timer1 = newTIM(&timer1Mem, &htim1, 1); //TIM1 belongs to APB2, HCLK/APB2 = 1
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	4926      	ldr	r1, [pc, #152]	; (8004c38 <testPWM_Input+0xa0>)
 8004b9e:	4827      	ldr	r0, [pc, #156]	; (8004c3c <testPWM_Input+0xa4>)
 8004ba0:	f000 f968 	bl	8004e74 <newTIM>
 8004ba4:	4c26      	ldr	r4, [pc, #152]	; (8004c40 <testPWM_Input+0xa8>)
 8004ba6:	6020      	str	r0, [r4, #0]
	initTIM_PWM_Out(timer1, 100, 1000); //max_cnt = 10,000; pwm_freq = 10k;
 8004ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bac:	2164      	movs	r1, #100	; 0x64
 8004bae:	f000 fa33 	bl	8005018 <initTIM_PWM_Out>
	timPwmGenBegin(timer1, TIM_CH1);
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	6820      	ldr	r0, [r4, #0]
 8004bb6:	f000 fa37 	bl	8005028 <timPwmGenBegin>
	timPwmGenBegin(timer1, TIM_CH2);
 8004bba:	2104      	movs	r1, #4
 8004bbc:	6820      	ldr	r0, [r4, #0]
 8004bbe:	f000 fa33 	bl	8005028 <timPwmGenBegin>

	timPwmWrite(timer1, TIM_CH1, 43.00);
 8004bc2:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8004c28 <testPWM_Input+0x90>
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	6820      	ldr	r0, [r4, #0]
 8004bca:	f000 fa39 	bl	8005040 <timPwmWrite>
	timPwmWrite(timer1, TIM_CH2, 61.00);
 8004bce:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8004c30 <testPWM_Input+0x98>
 8004bd2:	2104      	movs	r1, #4
 8004bd4:	6820      	ldr	r0, [r4, #0]
 8004bd6:	f000 fa33 	bl	8005040 <timPwmWrite>

	//Wire TIM1 CH1 pin to TIM8 CH2 pin,
	//     TIM1 CH2 pin to TIM8 CH3 pin for experimenting

	timer8 = newTIM(&timer8Mem, &htim8, 1); //TIM8 belongs to APB2, HCLK/APB2 = 1
 8004bda:	2201      	movs	r2, #1
 8004bdc:	4919      	ldr	r1, [pc, #100]	; (8004c44 <testPWM_Input+0xac>)
 8004bde:	481a      	ldr	r0, [pc, #104]	; (8004c48 <testPWM_Input+0xb0>)
 8004be0:	f000 f948 	bl	8004e74 <newTIM>
 8004be4:	4c19      	ldr	r4, [pc, #100]	; (8004c4c <testPWM_Input+0xb4>)
 8004be6:	6020      	str	r0, [r4, #0]

	initTIM_PWM_In(timer8, &timer8_IC_fieldsMem, 100, 1000); //match max_cnt & pwm_freq with timer1's
 8004be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bec:	2264      	movs	r2, #100	; 0x64
 8004bee:	4918      	ldr	r1, [pc, #96]	; (8004c50 <testPWM_Input+0xb8>)
 8004bf0:	f000 fa6a 	bl	80050c8 <initTIM_PWM_In>
															 //for proper interpretation upon capturing

	timPwmIcBegin(timer8, TIM_CH2, TIM_PulseOnHigh);
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	2104      	movs	r1, #4
 8004bf8:	6820      	ldr	r0, [r4, #0]
 8004bfa:	f000 faee 	bl	80051da <timPwmIcBegin>
	timPwmIcBegin(timer8, TIM_CH3, TIM_PulseOnHigh);
 8004bfe:	2201      	movs	r2, #1
 8004c00:	2108      	movs	r1, #8
 8004c02:	6820      	ldr	r0, [r4, #0]
 8004c04:	f000 fae9 	bl	80051da <timPwmIcBegin>


	while(1) {
		printf_u("\rPulse 1 = [%d]   Pulse 2 = [%d]\r\n",
 8004c08:	4c10      	ldr	r4, [pc, #64]	; (8004c4c <testPWM_Input+0xb4>)
 8004c0a:	2104      	movs	r1, #4
 8004c0c:	6820      	ldr	r0, [r4, #0]
 8004c0e:	f000 fa41 	bl	8005094 <timGetPulseWidth>
 8004c12:	4605      	mov	r5, r0
 8004c14:	2108      	movs	r1, #8
 8004c16:	6820      	ldr	r0, [r4, #0]
 8004c18:	f000 fa3c 	bl	8005094 <timGetPulseWidth>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4629      	mov	r1, r5
 8004c20:	480c      	ldr	r0, [pc, #48]	; (8004c54 <testPWM_Input+0xbc>)
 8004c22:	f000 fc19 	bl	8005458 <printf_u>
 8004c26:	e7ef      	b.n	8004c08 <testPWM_Input+0x70>
 8004c28:	00000000 	.word	0x00000000
 8004c2c:	40458000 	.word	0x40458000
 8004c30:	00000000 	.word	0x00000000
 8004c34:	404e8000 	.word	0x404e8000
 8004c38:	200009d4 	.word	0x200009d4
 8004c3c:	20000e04 	.word	0x20000e04
 8004c40:	20000e00 	.word	0x20000e00
 8004c44:	2000074c 	.word	0x2000074c
 8004c48:	20000e24 	.word	0x20000e24
 8004c4c:	20000df0 	.word	0x20000df0
 8004c50:	20000d88 	.word	0x20000d88
 8004c54:	0800836c 	.word	0x0800836c

08004c58 <timIC_IT_CallBack>:
	if(instance == timer8) {
 8004c58:	4b42      	ldr	r3, [pc, #264]	; (8004d64 <timIC_IT_CallBack+0x10c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4283      	cmp	r3, r0
 8004c5e:	d000      	beq.n	8004c62 <timIC_IT_CallBack+0xa>
 8004c60:	4770      	bx	lr
void timIC_IT_CallBack(TIM* instance, HAL_TIM_ActiveChannel active_channel) {
 8004c62:	b570      	push	{r4, r5, r6, lr}
 8004c64:	460d      	mov	r5, r1
 8004c66:	4604      	mov	r4, r0
		if(active_channel == TIM_Active_CH2) {
 8004c68:	2902      	cmp	r1, #2
 8004c6a:	d002      	beq.n	8004c72 <timIC_IT_CallBack+0x1a>
		if(active_channel == TIM_Active_CH3) {
 8004c6c:	2d04      	cmp	r5, #4
 8004c6e:	d03c      	beq.n	8004cea <timIC_IT_CallBack+0x92>
 8004c70:	bd70      	pop	{r4, r5, r6, pc}
			if(instance->IC_fields->ICpolarity[tim_channel_index(TIM_CH2)] == TIM_IC_RisingEdge) {
 8004c72:	69c6      	ldr	r6, [r0, #28]
 8004c74:	2004      	movs	r0, #4
 8004c76:	f000 f938 	bl	8004eea <tim_channel_index>
 8004c7a:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8004c7e:	b963      	cbnz	r3, 8004c9a <timIC_IT_CallBack+0x42>
				ICval[0] = timGetCapVal(timer8, TIM_CH2);
 8004c80:	4e38      	ldr	r6, [pc, #224]	; (8004d64 <timIC_IT_CallBack+0x10c>)
 8004c82:	2104      	movs	r1, #4
 8004c84:	6830      	ldr	r0, [r6, #0]
 8004c86:	f000 fac1 	bl	800520c <timGetCapVal>
 8004c8a:	4b37      	ldr	r3, [pc, #220]	; (8004d68 <timIC_IT_CallBack+0x110>)
 8004c8c:	6018      	str	r0, [r3, #0]
				timSetIC_Polarity(timer8, TIM_CH2, TIM_IC_FallingEdge);
 8004c8e:	2202      	movs	r2, #2
 8004c90:	2104      	movs	r1, #4
 8004c92:	6830      	ldr	r0, [r6, #0]
 8004c94:	f000 fa48 	bl	8005128 <timSetIC_Polarity>
 8004c98:	e7e8      	b.n	8004c6c <timIC_IT_CallBack+0x14>
			else if(instance->IC_fields->ICpolarity[tim_channel_index(TIM_CH2)] == TIM_IC_FallingEdge) {
 8004c9a:	69e6      	ldr	r6, [r4, #28]
 8004c9c:	2004      	movs	r0, #4
 8004c9e:	f000 f924 	bl	8004eea <tim_channel_index>
 8004ca2:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d1e0      	bne.n	8004c6c <timIC_IT_CallBack+0x14>
				PulseWidth[0] = timGetCapVal(timer8, TIM_CH2) - ICval[0];
 8004caa:	2104      	movs	r1, #4
 8004cac:	4b2d      	ldr	r3, [pc, #180]	; (8004d64 <timIC_IT_CallBack+0x10c>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	f000 faac 	bl	800520c <timGetCapVal>
 8004cb4:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <timIC_IT_CallBack+0x110>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	1ac3      	subs	r3, r0, r3
 8004cba:	4a2c      	ldr	r2, [pc, #176]	; (8004d6c <timIC_IT_CallBack+0x114>)
 8004cbc:	6013      	str	r3, [r2, #0]
				if(PulseWidth[0] < 0) {
 8004cbe:	6813      	ldr	r3, [r2, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	db06      	blt.n	8004cd2 <timIC_IT_CallBack+0x7a>
				timSetIC_Polarity(timer8, TIM_CH2, TIM_IC_RisingEdge);
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2104      	movs	r1, #4
 8004cc8:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <timIC_IT_CallBack+0x10c>)
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	f000 fa2c 	bl	8005128 <timSetIC_Polarity>
 8004cd0:	e7cc      	b.n	8004c6c <timIC_IT_CallBack+0x14>
					PulseWidth[0] += ICval[0] + instance->ARR+1 - ICval[0];
 8004cd2:	4a25      	ldr	r2, [pc, #148]	; (8004d68 <timIC_IT_CallBack+0x110>)
 8004cd4:	6813      	ldr	r3, [r2, #0]
 8004cd6:	68a1      	ldr	r1, [r4, #8]
 8004cd8:	440b      	add	r3, r1
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	3301      	adds	r3, #1
 8004ce0:	4922      	ldr	r1, [pc, #136]	; (8004d6c <timIC_IT_CallBack+0x114>)
 8004ce2:	680a      	ldr	r2, [r1, #0]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	600b      	str	r3, [r1, #0]
 8004ce8:	e7ec      	b.n	8004cc4 <timIC_IT_CallBack+0x6c>
			if(instance->IC_fields->ICpolarity[tim_channel_index(TIM_CH3)] == TIM_IC_RisingEdge) {
 8004cea:	69e5      	ldr	r5, [r4, #28]
 8004cec:	2008      	movs	r0, #8
 8004cee:	f000 f8fc 	bl	8004eea <tim_channel_index>
 8004cf2:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8004cf6:	b1db      	cbz	r3, 8004d30 <timIC_IT_CallBack+0xd8>
			else if(instance->IC_fields->ICpolarity[tim_channel_index(TIM_CH3)] == TIM_IC_FallingEdge) {
 8004cf8:	69e5      	ldr	r5, [r4, #28]
 8004cfa:	2008      	movs	r0, #8
 8004cfc:	f000 f8f5 	bl	8004eea <tim_channel_index>
 8004d00:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d1b3      	bne.n	8004c70 <timIC_IT_CallBack+0x18>
				PulseWidth[1] = timGetCapVal(timer8, TIM_CH3) - ICval[1];
 8004d08:	2108      	movs	r1, #8
 8004d0a:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <timIC_IT_CallBack+0x10c>)
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	f000 fa7d 	bl	800520c <timGetCapVal>
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <timIC_IT_CallBack+0x110>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	1ac3      	subs	r3, r0, r3
 8004d18:	4a14      	ldr	r2, [pc, #80]	; (8004d6c <timIC_IT_CallBack+0x114>)
 8004d1a:	6053      	str	r3, [r2, #4]
				if(PulseWidth[1] < 0) {
 8004d1c:	6853      	ldr	r3, [r2, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	db13      	blt.n	8004d4a <timIC_IT_CallBack+0xf2>
				timSetIC_Polarity(timer8, TIM_CH3, TIM_IC_RisingEdge);
 8004d22:	2200      	movs	r2, #0
 8004d24:	2108      	movs	r1, #8
 8004d26:	4b0f      	ldr	r3, [pc, #60]	; (8004d64 <timIC_IT_CallBack+0x10c>)
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	f000 f9fd 	bl	8005128 <timSetIC_Polarity>
}
 8004d2e:	e79f      	b.n	8004c70 <timIC_IT_CallBack+0x18>
				ICval[1] = timGetCapVal(timer8, TIM_CH3);
 8004d30:	4c0c      	ldr	r4, [pc, #48]	; (8004d64 <timIC_IT_CallBack+0x10c>)
 8004d32:	2108      	movs	r1, #8
 8004d34:	6820      	ldr	r0, [r4, #0]
 8004d36:	f000 fa69 	bl	800520c <timGetCapVal>
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <timIC_IT_CallBack+0x110>)
 8004d3c:	6058      	str	r0, [r3, #4]
				timSetIC_Polarity(timer8, TIM_CH3, TIM_IC_FallingEdge);
 8004d3e:	2202      	movs	r2, #2
 8004d40:	2108      	movs	r1, #8
 8004d42:	6820      	ldr	r0, [r4, #0]
 8004d44:	f000 f9f0 	bl	8005128 <timSetIC_Polarity>
 8004d48:	bd70      	pop	{r4, r5, r6, pc}
					PulseWidth[1] += ICval[1] + instance->ARR+1 - ICval[1];
 8004d4a:	4a07      	ldr	r2, [pc, #28]	; (8004d68 <timIC_IT_CallBack+0x110>)
 8004d4c:	6853      	ldr	r3, [r2, #4]
 8004d4e:	68a1      	ldr	r1, [r4, #8]
 8004d50:	440b      	add	r3, r1
 8004d52:	6852      	ldr	r2, [r2, #4]
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	3301      	adds	r3, #1
 8004d58:	4904      	ldr	r1, [pc, #16]	; (8004d6c <timIC_IT_CallBack+0x114>)
 8004d5a:	684a      	ldr	r2, [r1, #4]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	604b      	str	r3, [r1, #4]
 8004d60:	e7df      	b.n	8004d22 <timIC_IT_CallBack+0xca>
 8004d62:	bf00      	nop
 8004d64:	20000df0 	.word	0x20000df0
 8004d68:	2000069c 	.word	0x2000069c
 8004d6c:	200006a4 	.word	0x200006a4

08004d70 <testTimer>:
				timGetPulseWidth(timer8, TIM_CH2), timGetPulseWidth(timer8, TIM_CH3));
	}
}


void testTimer(void) {
 8004d70:	b508      	push	{r3, lr}
	setup();
 8004d72:	f7ff fed7 	bl	8004b24 <setup>
	UNUSED(testTIMdelay);

	//testIC();
	UNUSED(testIC);

	testPWM_Input();
 8004d76:	f7ff ff0f 	bl	8004b98 <testPWM_Input>

08004d7a <newGPIO>:



/*========================SETUP AND DATA STRUCTURE========================*/
GPIO *newGPIO(GPIO* obj, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	obj->GPIO_Pin = GPIO_Pin;
 8004d7a:	8082      	strh	r2, [r0, #4]
	obj->GPIOx = GPIOx;
 8004d7c:	6001      	str	r1, [r0, #0]
	return obj;
}
 8004d7e:	4770      	bx	lr

08004d80 <i2cTC_IT_CallBack>:
}
/*=========================================================================*/


/*==============================Interrupt Handler===============================*/
__weak void i2cTC_IT_CallBack(I2C* instance){
 8004d80:	4770      	bx	lr
	...

08004d84 <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 8004d88:	2400      	movs	r4, #0
 8004d8a:	e000      	b.n	8004d8e <HAL_I2C_MasterTxCpltCallback+0xa>
 8004d8c:	3401      	adds	r4, #1
 8004d8e:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	429c      	cmp	r4, r3
 8004d94:	da0b      	bge.n	8004dae <HAL_I2C_MasterTxCpltCallback+0x2a>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8004d96:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <HAL_I2C_MasterTxCpltCallback+0x30>)
 8004d98:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004d9c:	6803      	ldr	r3, [r0, #0]
 8004d9e:	42ab      	cmp	r3, r5
 8004da0:	d1f4      	bne.n	8004d8c <HAL_I2C_MasterTxCpltCallback+0x8>
			ActiveI2Cs[i]->TxStatus = Completed;
 8004da2:	2303      	movs	r3, #3
 8004da4:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
			i2cTC_IT_CallBack(ActiveI2Cs[i]);
 8004da8:	f7ff ffea 	bl	8004d80 <i2cTC_IT_CallBack>
 8004dac:	e7ee      	b.n	8004d8c <HAL_I2C_MasterTxCpltCallback+0x8>
}
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	200006ac 	.word	0x200006ac
 8004db4:	20000e44 	.word	0x20000e44

08004db8 <HAL_I2C_SlaveTxCpltCallback>:
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 8004dbc:	2400      	movs	r4, #0
 8004dbe:	e000      	b.n	8004dc2 <HAL_I2C_SlaveTxCpltCallback+0xa>
 8004dc0:	3401      	adds	r4, #1
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <HAL_I2C_SlaveTxCpltCallback+0x2c>)
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	429c      	cmp	r4, r3
 8004dc8:	da0b      	bge.n	8004de2 <HAL_I2C_SlaveTxCpltCallback+0x2a>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8004dca:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <HAL_I2C_SlaveTxCpltCallback+0x30>)
 8004dcc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004dd0:	6803      	ldr	r3, [r0, #0]
 8004dd2:	42ab      	cmp	r3, r5
 8004dd4:	d1f4      	bne.n	8004dc0 <HAL_I2C_SlaveTxCpltCallback+0x8>
			ActiveI2Cs[i]->TxStatus = Completed;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
			i2cTC_IT_CallBack(ActiveI2Cs[i]);
 8004ddc:	f7ff ffd0 	bl	8004d80 <i2cTC_IT_CallBack>
 8004de0:	e7ee      	b.n	8004dc0 <HAL_I2C_SlaveTxCpltCallback+0x8>
}
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	200006ac 	.word	0x200006ac
 8004de8:	20000e44 	.word	0x20000e44

08004dec <i2cRC_IT_CallBack>:
	 UNUSED(instance);
}

__weak void i2cRC_IT_CallBack(I2C* instance){
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 8004df4:	2400      	movs	r4, #0
 8004df6:	e000      	b.n	8004dfa <HAL_I2C_MasterRxCpltCallback+0xa>
 8004df8:	3401      	adds	r4, #1
 8004dfa:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <HAL_I2C_MasterRxCpltCallback+0x2c>)
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	429c      	cmp	r4, r3
 8004e00:	da0b      	bge.n	8004e1a <HAL_I2C_MasterRxCpltCallback+0x2a>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8004e02:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <HAL_I2C_MasterRxCpltCallback+0x30>)
 8004e04:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004e08:	6803      	ldr	r3, [r0, #0]
 8004e0a:	42ab      	cmp	r3, r5
 8004e0c:	d1f4      	bne.n	8004df8 <HAL_I2C_MasterRxCpltCallback+0x8>
			ActiveI2Cs[i]->RxStatus = Completed;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
			i2cRC_IT_CallBack(ActiveI2Cs[i]);
 8004e14:	f7ff ffea 	bl	8004dec <i2cRC_IT_CallBack>
 8004e18:	e7ee      	b.n	8004df8 <HAL_I2C_MasterRxCpltCallback+0x8>
}
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	200006ac 	.word	0x200006ac
 8004e20:	20000e44 	.word	0x20000e44

08004e24 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveI2Cs; i++) {
 8004e28:	2400      	movs	r4, #0
 8004e2a:	e000      	b.n	8004e2e <HAL_I2C_SlaveRxCpltCallback+0xa>
 8004e2c:	3401      	adds	r4, #1
 8004e2e:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	429c      	cmp	r4, r3
 8004e34:	da0b      	bge.n	8004e4e <HAL_I2C_SlaveRxCpltCallback+0x2a>
		if(ActiveI2Cs[i]->hi2c == hi2c) {
 8004e36:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 8004e38:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004e3c:	6803      	ldr	r3, [r0, #0]
 8004e3e:	42ab      	cmp	r3, r5
 8004e40:	d1f4      	bne.n	8004e2c <HAL_I2C_SlaveRxCpltCallback+0x8>
			ActiveI2Cs[i]->RxStatus = Completed;
 8004e42:	2303      	movs	r3, #3
 8004e44:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
			i2cRC_IT_CallBack(ActiveI2Cs[i]);
 8004e48:	f7ff ffd0 	bl	8004dec <i2cRC_IT_CallBack>
 8004e4c:	e7ee      	b.n	8004e2c <HAL_I2C_SlaveRxCpltCallback+0x8>
}
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	200006ac 	.word	0x200006ac
 8004e54:	20000e44 	.word	0x20000e44

08004e58 <timSysT_IT_CallBack>:
	initTIM_BasicCounting(sys_timer, 1000, 1000000); // AutoReload at every 1000 count, counting at 1000,000Hz = 1Mhz
	timCountBegin_IT(sys_timer);
}

void timSysT_IT_CallBack(TIM* instance) {
	if(instance == sys_timer) {
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <timSysT_IT_CallBack+0x14>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4283      	cmp	r3, r0
 8004e5e:	d000      	beq.n	8004e62 <timSysT_IT_CallBack+0xa>
 8004e60:	4770      	bx	lr
		millis_tick++;
 8004e62:	4a03      	ldr	r2, [pc, #12]	; (8004e70 <timSysT_IT_CallBack+0x18>)
 8004e64:	6813      	ldr	r3, [r2, #0]
 8004e66:	3301      	adds	r3, #1
 8004e68:	6013      	str	r3, [r2, #0]
	}
}
 8004e6a:	e7f9      	b.n	8004e60 <timSysT_IT_CallBack+0x8>
 8004e6c:	20000e6c 	.word	0x20000e6c
 8004e70:	200006b0 	.word	0x200006b0

08004e74 <newTIM>:
  */
/**
 * Please use STM32CubeMx to config period and prescaler
 * Period & prescaler setting are applied on all four channels
 */
TIM *newTIM(TIM* instance, TIM_HandleTypeDef *htim, uint32_t APBx_DivFactor) {
 8004e74:	b410      	push	{r4}
	instance->htim = htim;
 8004e76:	6001      	str	r1, [r0, #0]
	instance->APBx_Div_Factor = APBx_DivFactor;
 8004e78:	6142      	str	r2, [r0, #20]
	for(int i = 0; i < numActiveTIMs; i++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	4a0c      	ldr	r2, [pc, #48]	; (8004eb0 <newTIM+0x3c>)
 8004e7e:	8812      	ldrh	r2, [r2, #0]
 8004e80:	4614      	mov	r4, r2
 8004e82:	4293      	cmp	r3, r2
 8004e84:	da0b      	bge.n	8004e9e <newTIM+0x2a>
		if(ActiveTIMs[i]->htim == htim) {
 8004e86:	4a0b      	ldr	r2, [pc, #44]	; (8004eb4 <newTIM+0x40>)
 8004e88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	4291      	cmp	r1, r2
 8004e90:	d001      	beq.n	8004e96 <newTIM+0x22>
	for(int i = 0; i < numActiveTIMs; i++)
 8004e92:	3301      	adds	r3, #1
 8004e94:	e7f2      	b.n	8004e7c <newTIM+0x8>
			ActiveTIMs[i] = instance;
 8004e96:	4a07      	ldr	r2, [pc, #28]	; (8004eb4 <newTIM+0x40>)
 8004e98:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			return instance;
 8004e9c:	e005      	b.n	8004eaa <newTIM+0x36>
		}
	ActiveTIMs[numActiveTIMs++] = instance;
 8004e9e:	3201      	adds	r2, #1
 8004ea0:	4b03      	ldr	r3, [pc, #12]	; (8004eb0 <newTIM+0x3c>)
 8004ea2:	801a      	strh	r2, [r3, #0]
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <newTIM+0x40>)
 8004ea6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	return instance;
}
 8004eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	200006b4 	.word	0x200006b4
 8004eb4:	20000e90 	.word	0x20000e90

08004eb8 <timSetARR>:

void timSetARR(TIM* instance, uint32_t ARR_val) {
	instance->ARR = ARR_val;
 8004eb8:	6081      	str	r1, [r0, #8]
	__HAL_TIM_SET_AUTORELOAD(instance->htim, instance->ARR);
 8004eba:	6803      	ldr	r3, [r0, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6882      	ldr	r2, [r0, #8]
 8004ec0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ec2:	6803      	ldr	r3, [r0, #0]
 8004ec4:	6882      	ldr	r2, [r0, #8]
 8004ec6:	60da      	str	r2, [r3, #12]
 8004ec8:	4770      	bx	lr

08004eca <timSetCCR>:
	instance->ARR = __HAL_TIM_GET_AUTORELOAD(instance->htim);
	return instance->ARR;
}

void timSetCCR(TIM* instance, uint32_t channel, uint32_t CCR_val) {
	instance->CCR = CCR_val;
 8004eca:	60c2      	str	r2, [r0, #12]
	__HAL_TIM_SET_COMPARE(instance->htim, channel, CCR_val);
 8004ecc:	6803      	ldr	r3, [r0, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3334      	adds	r3, #52	; 0x34
 8004ed2:	0889      	lsrs	r1, r1, #2
 8004ed4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004ed8:	4770      	bx	lr

08004eda <timSetPrescaler>:
	instance->CNT = __HAL_TIM_GET_COUNTER(instance->htim);
	return instance->CNT;
}

void timSetPrescaler(TIM* instance, uint32_t prescaler_val) {
	instance->TimerPrescaler = prescaler_val;
 8004eda:	6041      	str	r1, [r0, #4]
	__HAL_TIM_SET_PRESCALER(instance->htim, instance->TimerPrescaler);
 8004edc:	6803      	ldr	r3, [r0, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6842      	ldr	r2, [r0, #4]
 8004ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ee4:	4770      	bx	lr

08004ee6 <timGetPrescaler>:
}

uint32_t timGetPrescaler(TIM* instance) {
	return instance->TimerPrescaler;
 8004ee6:	6840      	ldr	r0, [r0, #4]
}
 8004ee8:	4770      	bx	lr

08004eea <tim_channel_index>:

uint8_t tim_channel_index(uint32_t channel) {
	if(channel == TIM_CH1) return 1;
 8004eea:	b148      	cbz	r0, 8004f00 <tim_channel_index+0x16>
	if(channel == TIM_CH2) return 2;
 8004eec:	2804      	cmp	r0, #4
 8004eee:	d009      	beq.n	8004f04 <tim_channel_index+0x1a>
	if(channel == TIM_CH3) return 3;
 8004ef0:	2808      	cmp	r0, #8
 8004ef2:	d009      	beq.n	8004f08 <tim_channel_index+0x1e>
	if(channel == TIM_CH4) return 4;
 8004ef4:	280c      	cmp	r0, #12
 8004ef6:	d001      	beq.n	8004efc <tim_channel_index+0x12>
	return 0;
 8004ef8:	2000      	movs	r0, #0
}
 8004efa:	4770      	bx	lr
	if(channel == TIM_CH4) return 4;
 8004efc:	2004      	movs	r0, #4
 8004efe:	4770      	bx	lr
	if(channel == TIM_CH1) return 1;
 8004f00:	2001      	movs	r0, #1
 8004f02:	4770      	bx	lr
	if(channel == TIM_CH2) return 2;
 8004f04:	2002      	movs	r0, #2
 8004f06:	4770      	bx	lr
	if(channel == TIM_CH3) return 3;
 8004f08:	2003      	movs	r0, #3
 8004f0a:	4770      	bx	lr

08004f0c <timSetFrequency>:
	Bool rtn = timSetFrequency(instance, timer_frequency);
	return rtn;
}


Bool timSetFrequency(TIM* instance, uint32_t timer_frequency) {
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	4605      	mov	r5, r0
 8004f10:	460e      	mov	r6, r1
	uint32_t TimerMaxFrequency = HAL_RCC_GetHCLKFreq() / instance->APBx_Div_Factor;
 8004f12:	f7fd fcc5 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 8004f16:	696c      	ldr	r4, [r5, #20]
 8004f18:	fbb0 f4f4 	udiv	r4, r0, r4

	if(timer_frequency > TimerMaxFrequency) {
 8004f1c:	42b4      	cmp	r4, r6
 8004f1e:	d30e      	bcc.n	8004f3e <timSetFrequency+0x32>
		throwException("THL_Timer.c: timSetFrequency() | timer_frequency must be less or equal than TimerMaxFrequency");
		return Failed;
	}
	timSetPrescaler(instance, TimerMaxFrequency / timer_frequency - 1);
 8004f20:	fbb4 f1f6 	udiv	r1, r4, r6
 8004f24:	3901      	subs	r1, #1
 8004f26:	4628      	mov	r0, r5
 8004f28:	f7ff ffd7 	bl	8004eda <timSetPrescaler>

	//Prescaled frequency is subject to rounding error
	instance->ActualFreq = TimerMaxFrequency / (timGetPrescaler(instance) + 1);
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f7ff ffda 	bl	8004ee6 <timGetPrescaler>
 8004f32:	3001      	adds	r0, #1
 8004f34:	fbb4 f4f0 	udiv	r4, r4, r0
 8004f38:	61ac      	str	r4, [r5, #24]
	return Succeeded;
 8004f3a:	2001      	movs	r0, #1
}
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}
		throwException("THL_Timer.c: timSetFrequency() | timer_frequency must be less or equal than TimerMaxFrequency");
 8004f3e:	4802      	ldr	r0, [pc, #8]	; (8004f48 <timSetFrequency+0x3c>)
 8004f40:	f000 faa0 	bl	8005484 <throwException>
		return Failed;
 8004f44:	2000      	movs	r0, #0
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
 8004f48:	08008390 	.word	0x08008390

08004f4c <timPE_IT_CallBack>:
			timSysT_IT_CallBack(ActiveTIMs[i]);
		}
	}
}

__weak void timPE_IT_CallBack(TIM* instance) {
 8004f4c:	4770      	bx	lr
	...

08004f50 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveTIMs; i++) {
 8004f54:	2400      	movs	r4, #0
 8004f56:	e000      	b.n	8004f5a <HAL_TIM_PeriodElapsedCallback+0xa>
 8004f58:	3401      	adds	r4, #1
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	429c      	cmp	r4, r3
 8004f60:	da0d      	bge.n	8004f7e <HAL_TIM_PeriodElapsedCallback+0x2e>
		if(ActiveTIMs[i]->htim == htim) {
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004f64:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004f68:	6803      	ldr	r3, [r0, #0]
 8004f6a:	42ab      	cmp	r3, r5
 8004f6c:	d1f4      	bne.n	8004f58 <HAL_TIM_PeriodElapsedCallback+0x8>
			timPE_IT_CallBack(ActiveTIMs[i]);
 8004f6e:	f7ff ffed 	bl	8004f4c <timPE_IT_CallBack>
			timSysT_IT_CallBack(ActiveTIMs[i]);
 8004f72:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004f74:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004f78:	f7ff ff6e 	bl	8004e58 <timSysT_IT_CallBack>
 8004f7c:	e7ec      	b.n	8004f58 <HAL_TIM_PeriodElapsedCallback+0x8>
}
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	200006b4 	.word	0x200006b4
 8004f84:	20000e90 	.word	0x20000e90

08004f88 <timSetPwmFrequency>:
	Bool rtn = timSetPwmFrequency(instance, max_count, pwm_frequency);
	return rtn;
}

/*Set PWM frequency at runtime*/
Bool timSetPwmFrequency(TIM* instance, uint32_t max_count, uint32_t pwm_frequency) {
 8004f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	4682      	mov	sl, r0
 8004f8e:	460d      	mov	r5, r1
 8004f90:	4693      	mov	fp, r2
	double TimerMaxFrequency = HAL_RCC_GetHCLKFreq() / instance->APBx_Div_Factor;
 8004f92:	f7fd fc85 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 8004f96:	f8da 4014 	ldr.w	r4, [sl, #20]
 8004f9a:	fbb0 f4f4 	udiv	r4, r0, r4
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f7fb fad0 	bl	8000544 <__aeabi_ui2d>
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	460f      	mov	r7, r1
	double TimerFrequency = max_count * pwm_frequency;
 8004fa8:	fb0b f505 	mul.w	r5, fp, r5
 8004fac:	4628      	mov	r0, r5
 8004fae:	f7fb fac9 	bl	8000544 <__aeabi_ui2d>
 8004fb2:	4680      	mov	r8, r0
 8004fb4:	4689      	mov	r9, r1
	if(TimerFrequency > TimerMaxFrequency) {
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4630      	mov	r0, r6
 8004fbc:	4639      	mov	r1, r7
 8004fbe:	f7fb fda9 	bl	8000b14 <__aeabi_dcmplt>
 8004fc2:	b9f0      	cbnz	r0, 8005002 <timSetPwmFrequency+0x7a>
		throwException("THL_Timer.c: setPwmFrequency() | max_count * pwm_frequency must be less or equal than TimerMaxFrequency");
		return Failed;
	}
	instance->ActualFreq = TimerFrequency;
 8004fc4:	f8ca 5018 	str.w	r5, [sl, #24]

	timSetPrescaler(instance, TimerMaxFrequency / TimerFrequency - 1);
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	4630      	mov	r0, r6
 8004fce:	4639      	mov	r1, r7
 8004fd0:	f7fb fc58 	bl	8000884 <__aeabi_ddiv>
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <timSetPwmFrequency+0x88>)
 8004fd8:	f7fb f976 	bl	80002c8 <__aeabi_dsub>
 8004fdc:	f7fb fe00 	bl	8000be0 <__aeabi_d2uiz>
 8004fe0:	4601      	mov	r1, r0
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	f7ff ff79 	bl	8004eda <timSetPrescaler>
	timSetARR(instance, ((uint32_t)TimerMaxFrequency / (instance->TimerPrescaler + 1) ) / pwm_frequency);
 8004fe8:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004fec:	3101      	adds	r1, #1
 8004fee:	fbb4 f1f1 	udiv	r1, r4, r1
 8004ff2:	fbb1 f1fb 	udiv	r1, r1, fp
 8004ff6:	4650      	mov	r0, sl
 8004ff8:	f7ff ff5e 	bl	8004eb8 <timSetARR>
												//Minimize rounding error
	return Succeeded;
 8004ffc:	2001      	movs	r0, #1
}
 8004ffe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		throwException("THL_Timer.c: setPwmFrequency() | max_count * pwm_frequency must be less or equal than TimerMaxFrequency");
 8005002:	4804      	ldr	r0, [pc, #16]	; (8005014 <timSetPwmFrequency+0x8c>)
 8005004:	f000 fa3e 	bl	8005484 <throwException>
		return Failed;
 8005008:	2000      	movs	r0, #0
 800500a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500e:	bf00      	nop
 8005010:	3ff00000 	.word	0x3ff00000
 8005014:	080083f0 	.word	0x080083f0

08005018 <initTIM_PWM_Out>:
Bool initTIM_PWM_Out(TIM* instance, uint32_t max_count, uint32_t pwm_frequency) {
 8005018:	b508      	push	{r3, lr}
	Bool rtn = timSetPwmFrequency(instance, max_count, pwm_frequency);
 800501a:	f7ff ffb5 	bl	8004f88 <timSetPwmFrequency>
}
 800501e:	bd08      	pop	{r3, pc}

08005020 <timSetPwmDutyCycle>:

void timPwmGenEnd(TIM* instance, uint32_t channel) {
	HAL_TIM_PWM_Stop(instance->htim, channel);
}

void timSetPwmDutyCycle(TIM* instance, uint32_t channel, uint32_t dutyCycleCnt) {
 8005020:	b508      	push	{r3, lr}
	timSetCCR(instance, channel, dutyCycleCnt);
 8005022:	f7ff ff52 	bl	8004eca <timSetCCR>
 8005026:	bd08      	pop	{r3, pc}

08005028 <timPwmGenBegin>:
void timPwmGenBegin(TIM* instance, uint32_t channel) {
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4604      	mov	r4, r0
 800502c:	460d      	mov	r5, r1
	HAL_TIM_PWM_Start(instance->htim, channel);
 800502e:	6800      	ldr	r0, [r0, #0]
 8005030:	f7fe fc20 	bl	8003874 <HAL_TIM_PWM_Start>
	timSetPwmDutyCycle(instance, channel, 0);
 8005034:	2200      	movs	r2, #0
 8005036:	4629      	mov	r1, r5
 8005038:	4620      	mov	r0, r4
 800503a:	f7ff fff1 	bl	8005020 <timSetPwmDutyCycle>
 800503e:	bd38      	pop	{r3, r4, r5, pc}

08005040 <timPwmWrite>:
}

//Pretty straightforward
void timPwmWrite(TIM* instance, uint32_t channel, double dutyCyclePercent) {
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	4606      	mov	r6, r0
 8005044:	460f      	mov	r7, r1
 8005046:	ec55 4b10 	vmov	r4, r5, d0
	if(dutyCyclePercent > 100.00f) dutyCyclePercent = 100.00f;
 800504a:	2200      	movs	r2, #0
 800504c:	4b10      	ldr	r3, [pc, #64]	; (8005090 <timPwmWrite+0x50>)
 800504e:	ee10 0a10 	vmov	r0, s0
 8005052:	4629      	mov	r1, r5
 8005054:	f7fb fd7c 	bl	8000b50 <__aeabi_dcmpgt>
 8005058:	b108      	cbz	r0, 800505e <timPwmWrite+0x1e>
 800505a:	2400      	movs	r4, #0
 800505c:	4d0c      	ldr	r5, [pc, #48]	; (8005090 <timPwmWrite+0x50>)
	dutyCyclePercent /= 100.00f;
 800505e:	2200      	movs	r2, #0
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <timPwmWrite+0x50>)
 8005062:	4620      	mov	r0, r4
 8005064:	4629      	mov	r1, r5
 8005066:	f7fb fc0d 	bl	8000884 <__aeabi_ddiv>
 800506a:	4604      	mov	r4, r0
 800506c:	460d      	mov	r5, r1
	timSetPwmDutyCycle(instance, channel, (uint32_t)(dutyCyclePercent * (double)instance->ARR));
 800506e:	68b0      	ldr	r0, [r6, #8]
 8005070:	f7fb fa68 	bl	8000544 <__aeabi_ui2d>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4620      	mov	r0, r4
 800507a:	4629      	mov	r1, r5
 800507c:	f7fb fad8 	bl	8000630 <__aeabi_dmul>
 8005080:	f7fb fdae 	bl	8000be0 <__aeabi_d2uiz>
 8005084:	4602      	mov	r2, r0
 8005086:	4639      	mov	r1, r7
 8005088:	4630      	mov	r0, r6
 800508a:	f7ff ffc9 	bl	8005020 <timSetPwmDutyCycle>
 800508e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005090:	40590000 	.word	0x40590000

08005094 <timGetPulseWidth>:
void timPwmIcEnd(TIM* instance, uint32_t channel) {
	timIcEnd_IT(instance, channel);
}


int32_t timGetPulseWidth(TIM* instance, uint32_t channel) {
 8005094:	b510      	push	{r4, lr}
	return instance->IC_fields->PulseWidth[tim_channel_index(channel)];
 8005096:	69c4      	ldr	r4, [r0, #28]
 8005098:	4608      	mov	r0, r1
 800509a:	f7ff ff26 	bl	8004eea <tim_channel_index>
 800509e:	300a      	adds	r0, #10
 80050a0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
}
 80050a4:	bd10      	pop	{r4, pc}

080050a6 <initTIM_IC>:
/*=========================================================================*/



/*================Input Capture(Interrupt Mode Only)=======================*/
uint32_t initTIM_IC(TIM* instance, TIM_IC* IC_fields, uint32_t AutoReload_count, uint32_t timer_frequency) {
 80050a6:	b570      	push	{r4, r5, r6, lr}
 80050a8:	4604      	mov	r4, r0
 80050aa:	460d      	mov	r5, r1
 80050ac:	461e      	mov	r6, r3
	timSetARR(instance, AutoReload_count);
 80050ae:	4611      	mov	r1, r2
 80050b0:	f7ff ff02 	bl	8004eb8 <timSetARR>
	timSetFrequency(instance, timer_frequency);
 80050b4:	4631      	mov	r1, r6
 80050b6:	4620      	mov	r0, r4
 80050b8:	f7ff ff28 	bl	8004f0c <timSetFrequency>
	instance->IC_fields = IC_fields;
 80050bc:	61e5      	str	r5, [r4, #28]
	instance->IC_fields->isUsedForPwmInput = False;
 80050be:	2300      	movs	r3, #0
 80050c0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	return instance->ActualFreq;
}
 80050c4:	69a0      	ldr	r0, [r4, #24]
 80050c6:	bd70      	pop	{r4, r5, r6, pc}

080050c8 <initTIM_PWM_In>:
Bool initTIM_PWM_In(TIM* instance, TIM_IC* IC_fields, uint32_t max_count, uint32_t pwm_frequency) {
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	4605      	mov	r5, r0
 80050cc:	460c      	mov	r4, r1
 80050ce:	4616      	mov	r6, r2
	uint32_t timer_frequency = max_count * pwm_frequency;
 80050d0:	fb03 f702 	mul.w	r7, r3, r2
	uint32_t TimerMaxFrequency = HAL_RCC_GetHCLKFreq() / instance->APBx_Div_Factor;
 80050d4:	f7fd fbe4 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80050d8:	696b      	ldr	r3, [r5, #20]
 80050da:	fbb0 f0f3 	udiv	r0, r0, r3
	if(timer_frequency > TimerMaxFrequency) {
 80050de:	4287      	cmp	r7, r0
 80050e0:	d808      	bhi.n	80050f4 <initTIM_PWM_In+0x2c>
	initTIM_IC(instance, IC_fields, 0xFFFF, timer_frequency);
 80050e2:	463b      	mov	r3, r7
 80050e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050e8:	4621      	mov	r1, r4
 80050ea:	4628      	mov	r0, r5
 80050ec:	f7ff ffdb 	bl	80050a6 <initTIM_IC>
	for(int i = 1; i < TIM_Num_Channels+1; i++) {
 80050f0:	2301      	movs	r3, #1
 80050f2:	e00e      	b.n	8005112 <initTIM_PWM_In+0x4a>
		throwException("THL_Timer.c: timSetFrequency() | timer_frequency must be less or equal than TimerMaxFrequency");
 80050f4:	480b      	ldr	r0, [pc, #44]	; (8005124 <initTIM_PWM_In+0x5c>)
 80050f6:	f000 f9c5 	bl	8005484 <throwException>
		return Failed;
 80050fa:	2000      	movs	r0, #0
 80050fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		IC_fields->IC_FirstEdge[i] = 0;
 80050fe:	1d1a      	adds	r2, r3, #4
 8005100:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005104:	2100      	movs	r1, #0
 8005106:	6051      	str	r1, [r2, #4]
		IC_fields->PulseWidth[i] = 0;
 8005108:	f103 020a 	add.w	r2, r3, #10
 800510c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for(int i = 1; i < TIM_Num_Channels+1; i++) {
 8005110:	3301      	adds	r3, #1
 8005112:	2b04      	cmp	r3, #4
 8005114:	ddf3      	ble.n	80050fe <initTIM_PWM_In+0x36>
	instance->IC_fields->isUsedForPwmInput = True;
 8005116:	69eb      	ldr	r3, [r5, #28]
 8005118:	2001      	movs	r0, #1
 800511a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
	instance->IC_fields->pwm_input_max_count = max_count;
 800511e:	69eb      	ldr	r3, [r5, #28]
 8005120:	641e      	str	r6, [r3, #64]	; 0x40
}
 8005122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005124:	08008390 	.word	0x08008390

08005128 <timSetIC_Polarity>:

void timSetIC_Polarity(TIM* instance, uint32_t channel, uint32_t ICpolarity) {
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	4606      	mov	r6, r0
 800512c:	460c      	mov	r4, r1
 800512e:	4615      	mov	r5, r2
	instance->IC_fields->ICpolarity[tim_channel_index(channel)] = ICpolarity;
 8005130:	69c7      	ldr	r7, [r0, #28]
 8005132:	4608      	mov	r0, r1
 8005134:	f7ff fed9 	bl	8004eea <tim_channel_index>
 8005138:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
	__HAL_TIM_SET_CAPTUREPOLARITY(instance->htim, channel, ICpolarity);
 800513c:	b9ac      	cbnz	r4, 800516a <timSetIC_Polarity+0x42>
 800513e:	6833      	ldr	r3, [r6, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	6a13      	ldr	r3, [r2, #32]
 8005144:	f023 030a 	bic.w	r3, r3, #10
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	0c1b      	lsrs	r3, r3, #16
 800514c:	6213      	str	r3, [r2, #32]
 800514e:	b35c      	cbz	r4, 80051a8 <timSetIC_Polarity+0x80>
 8005150:	2c04      	cmp	r4, #4
 8005152:	d02f      	beq.n	80051b4 <timSetIC_Polarity+0x8c>
 8005154:	2c08      	cmp	r4, #8
 8005156:	d034      	beq.n	80051c2 <timSetIC_Polarity+0x9a>
 8005158:	6833      	ldr	r3, [r6, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	6a13      	ldr	r3, [r2, #32]
 800515e:	032d      	lsls	r5, r5, #12
 8005160:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8005164:	431d      	orrs	r5, r3
 8005166:	6215      	str	r5, [r2, #32]
 8005168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800516a:	2c04      	cmp	r4, #4
 800516c:	d00a      	beq.n	8005184 <timSetIC_Polarity+0x5c>
 800516e:	2c08      	cmp	r4, #8
 8005170:	d011      	beq.n	8005196 <timSetIC_Polarity+0x6e>
 8005172:	6833      	ldr	r3, [r6, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	6a13      	ldr	r3, [r2, #32]
 8005178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800517c:	041b      	lsls	r3, r3, #16
 800517e:	0c1b      	lsrs	r3, r3, #16
 8005180:	6213      	str	r3, [r2, #32]
 8005182:	e7e4      	b.n	800514e <timSetIC_Polarity+0x26>
 8005184:	6833      	ldr	r3, [r6, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	6a13      	ldr	r3, [r2, #32]
 800518a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800518e:	041b      	lsls	r3, r3, #16
 8005190:	0c1b      	lsrs	r3, r3, #16
 8005192:	6213      	str	r3, [r2, #32]
 8005194:	e7db      	b.n	800514e <timSetIC_Polarity+0x26>
 8005196:	6833      	ldr	r3, [r6, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	6a13      	ldr	r3, [r2, #32]
 800519c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	0c1b      	lsrs	r3, r3, #16
 80051a4:	6213      	str	r3, [r2, #32]
 80051a6:	e7d2      	b.n	800514e <timSetIC_Polarity+0x26>
 80051a8:	6833      	ldr	r3, [r6, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	6a13      	ldr	r3, [r2, #32]
 80051ae:	431d      	orrs	r5, r3
 80051b0:	6215      	str	r5, [r2, #32]
 80051b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b4:	6833      	ldr	r3, [r6, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	6a13      	ldr	r3, [r2, #32]
 80051ba:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
 80051be:	6215      	str	r5, [r2, #32]
 80051c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c2:	6833      	ldr	r3, [r6, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	6a13      	ldr	r3, [r2, #32]
 80051c8:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
 80051cc:	6215      	str	r5, [r2, #32]
 80051ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080051d0 <timIcBegin_IT>:
}
void timIcBegin_IT(TIM* instance, uint32_t channel) {
 80051d0:	b508      	push	{r3, lr}
	HAL_TIM_IC_Start_IT(instance->htim, channel);
 80051d2:	6800      	ldr	r0, [r0, #0]
 80051d4:	f7fe fb70 	bl	80038b8 <HAL_TIM_IC_Start_IT>
 80051d8:	bd08      	pop	{r3, pc}

080051da <timPwmIcBegin>:
void timPwmIcBegin(TIM* instance, uint32_t channel, PulseLevel pulse_polarity) {
 80051da:	b570      	push	{r4, r5, r6, lr}
 80051dc:	4605      	mov	r5, r0
 80051de:	460e      	mov	r6, r1
 80051e0:	4614      	mov	r4, r2
	if(pulse_polarity == TIM_PulseOnHigh)
 80051e2:	2a01      	cmp	r2, #1
 80051e4:	d008      	beq.n	80051f8 <timPwmIcBegin+0x1e>
	if(pulse_polarity == TIM_PulseOnLow)
 80051e6:	b15c      	cbz	r4, 8005200 <timPwmIcBegin+0x26>
	instance->IC_fields->pulse_polarity = pulse_polarity;
 80051e8:	69eb      	ldr	r3, [r5, #28]
 80051ea:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
	timIcBegin_IT(instance, channel);
 80051ee:	4631      	mov	r1, r6
 80051f0:	4628      	mov	r0, r5
 80051f2:	f7ff ffed 	bl	80051d0 <timIcBegin_IT>
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
		timSetIC_Polarity(instance, channel, TIM_IC_RisingEdge);
 80051f8:	2200      	movs	r2, #0
 80051fa:	f7ff ff95 	bl	8005128 <timSetIC_Polarity>
 80051fe:	e7f2      	b.n	80051e6 <timPwmIcBegin+0xc>
		timSetIC_Polarity(instance, channel, TIM_IC_FallingEdge);
 8005200:	2202      	movs	r2, #2
 8005202:	4631      	mov	r1, r6
 8005204:	4628      	mov	r0, r5
 8005206:	f7ff ff8f 	bl	8005128 <timSetIC_Polarity>
 800520a:	e7ed      	b.n	80051e8 <timPwmIcBegin+0xe>

0800520c <timGetCapVal>:
void timIcEnd_IT(TIM* instance, uint32_t channel) {
	HAL_TIM_IC_Stop_IT(instance->htim, channel);
}


uint32_t timGetCapVal(TIM* instance, uint32_t channel) {
 800520c:	b508      	push	{r3, lr}
	return HAL_TIM_ReadCapturedValue(instance->htim, channel);
 800520e:	6800      	ldr	r0, [r0, #0]
 8005210:	f7fd ffbd 	bl	800318e <HAL_TIM_ReadCapturedValue>
}
 8005214:	bd08      	pop	{r3, pc}

08005216 <timPWM_IN_IT_CallBack>:
static void timPWM_IN_IT_CallBack(TIM* instance, HAL_TIM_ActiveChannel active_channel) {
 8005216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(instance->IC_fields->isUsedForPwmInput == True) {
 8005218:	69c5      	ldr	r5, [r0, #28]
 800521a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d000      	beq.n	8005226 <timPWM_IN_IT_CallBack+0x10>
 8005224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(active_channel == TIM_Active_CH2) channel = TIM_CH2;
 8005226:	2902      	cmp	r1, #2
 8005228:	d02f      	beq.n	800528a <timPWM_IN_IT_CallBack+0x74>
 800522a:	2600      	movs	r6, #0
		if(active_channel == TIM_Active_CH3) channel = TIM_CH3;
 800522c:	2904      	cmp	r1, #4
 800522e:	d02e      	beq.n	800528e <timPWM_IN_IT_CallBack+0x78>
		if(active_channel == TIM_Active_CH4) channel = TIM_CH4;
 8005230:	2908      	cmp	r1, #8
 8005232:	d02e      	beq.n	8005292 <timPWM_IN_IT_CallBack+0x7c>
 8005234:	4604      	mov	r4, r0
		if(instance->IC_fields->pulse_polarity == TIM_PulseOnHigh) {
 8005236:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	d02a      	beq.n	8005296 <timPWM_IN_IT_CallBack+0x80>
			if(instance->IC_fields->ICpolarity[tim_channel_index(channel)] == TIM_IC_FallingEdge) {
 8005240:	4630      	mov	r0, r6
 8005242:	f7ff fe52 	bl	8004eea <tim_channel_index>
 8005246:	4607      	mov	r7, r0
 8005248:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d05d      	beq.n	800530c <timPWM_IN_IT_CallBack+0xf6>
			else if(instance->IC_fields->ICpolarity[tim_channel_index(channel)] == TIM_IC_RisingEdge) {
 8005250:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e5      	bne.n	8005224 <timPWM_IN_IT_CallBack+0xe>
												= timGetCapVal(instance, channel)
 8005258:	4631      	mov	r1, r6
 800525a:	4620      	mov	r0, r4
 800525c:	f7ff ffd6 	bl	800520c <timGetCapVal>
												  - instance->IC_fields->IC_FirstEdge[tim_channel_index(channel)];
 8005260:	69e2      	ldr	r2, [r4, #28]
 8005262:	1d3b      	adds	r3, r7, #4
 8005264:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	1ac0      	subs	r0, r0, r3
												= timGetCapVal(instance, channel)
 800526c:	f107 030a 	add.w	r3, r7, #10
 8005270:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
				if(instance->IC_fields->PulseWidth[tim_channel_index(channel)] < 0) {
 8005274:	69e2      	ldr	r2, [r4, #28]
 8005276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527a:	2b00      	cmp	r3, #0
 800527c:	db54      	blt.n	8005328 <timPWM_IN_IT_CallBack+0x112>
				timSetIC_Polarity(instance, channel, TIM_IC_FallingEdge);
 800527e:	2202      	movs	r2, #2
 8005280:	4631      	mov	r1, r6
 8005282:	4620      	mov	r0, r4
 8005284:	f7ff ff50 	bl	8005128 <timSetIC_Polarity>
}
 8005288:	e7cc      	b.n	8005224 <timPWM_IN_IT_CallBack+0xe>
		if(active_channel == TIM_Active_CH2) channel = TIM_CH2;
 800528a:	2604      	movs	r6, #4
 800528c:	e7ce      	b.n	800522c <timPWM_IN_IT_CallBack+0x16>
		if(active_channel == TIM_Active_CH3) channel = TIM_CH3;
 800528e:	2608      	movs	r6, #8
 8005290:	e7ce      	b.n	8005230 <timPWM_IN_IT_CallBack+0x1a>
		if(active_channel == TIM_Active_CH4) channel = TIM_CH4;
 8005292:	260c      	movs	r6, #12
 8005294:	e7ce      	b.n	8005234 <timPWM_IN_IT_CallBack+0x1e>
			if(instance->IC_fields->ICpolarity[tim_channel_index(channel)] == TIM_IC_RisingEdge) {
 8005296:	4630      	mov	r0, r6
 8005298:	f7ff fe27 	bl	8004eea <tim_channel_index>
 800529c:	4607      	mov	r7, r0
 800529e:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 80052a2:	b1e3      	cbz	r3, 80052de <timPWM_IN_IT_CallBack+0xc8>
			else if(instance->IC_fields->ICpolarity[tim_channel_index(channel)] == TIM_IC_FallingEdge) {
 80052a4:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d1bb      	bne.n	8005224 <timPWM_IN_IT_CallBack+0xe>
												= timGetCapVal(instance, channel)
 80052ac:	4631      	mov	r1, r6
 80052ae:	4620      	mov	r0, r4
 80052b0:	f7ff ffac 	bl	800520c <timGetCapVal>
												  - instance->IC_fields->IC_FirstEdge[tim_channel_index(channel)];
 80052b4:	69e2      	ldr	r2, [r4, #28]
 80052b6:	1d3b      	adds	r3, r7, #4
 80052b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	1ac0      	subs	r0, r0, r3
												= timGetCapVal(instance, channel)
 80052c0:	f107 030a 	add.w	r3, r7, #10
 80052c4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
				if(instance->IC_fields->PulseWidth[tim_channel_index(channel)] < 0) {
 80052c8:	69e2      	ldr	r2, [r4, #28]
 80052ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	db13      	blt.n	80052fa <timPWM_IN_IT_CallBack+0xe4>
				timSetIC_Polarity(instance, channel, TIM_IC_RisingEdge);
 80052d2:	2200      	movs	r2, #0
 80052d4:	4631      	mov	r1, r6
 80052d6:	4620      	mov	r0, r4
 80052d8:	f7ff ff26 	bl	8005128 <timSetIC_Polarity>
 80052dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
												  = timGetCapVal(instance, channel);
 80052de:	4631      	mov	r1, r6
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7ff ff93 	bl	800520c <timGetCapVal>
 80052e6:	3704      	adds	r7, #4
 80052e8:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80052ec:	6068      	str	r0, [r5, #4]
				timSetIC_Polarity(instance, channel, TIM_IC_FallingEdge);
 80052ee:	2202      	movs	r2, #2
 80052f0:	4631      	mov	r1, r6
 80052f2:	4620      	mov	r0, r4
 80052f4:	f7ff ff18 	bl	8005128 <timSetIC_Polarity>
 80052f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
													+= instance->ARR+1;
 80052fa:	68a1      	ldr	r1, [r4, #8]
 80052fc:	3101      	adds	r1, #1
 80052fe:	370a      	adds	r7, #10
 8005300:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8005304:	440b      	add	r3, r1
 8005306:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800530a:	e7e2      	b.n	80052d2 <timPWM_IN_IT_CallBack+0xbc>
												  = timGetCapVal(instance, channel);
 800530c:	4631      	mov	r1, r6
 800530e:	4620      	mov	r0, r4
 8005310:	f7ff ff7c 	bl	800520c <timGetCapVal>
 8005314:	3704      	adds	r7, #4
 8005316:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800531a:	6068      	str	r0, [r5, #4]
				timSetIC_Polarity(instance, channel, TIM_IC_RisingEdge);
 800531c:	2200      	movs	r2, #0
 800531e:	4631      	mov	r1, r6
 8005320:	4620      	mov	r0, r4
 8005322:	f7ff ff01 	bl	8005128 <timSetIC_Polarity>
 8005326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
													+= instance->ARR+1;
 8005328:	68a1      	ldr	r1, [r4, #8]
 800532a:	3101      	adds	r1, #1
 800532c:	370a      	adds	r7, #10
 800532e:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8005332:	440b      	add	r3, r1
 8005334:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8005338:	e7a1      	b.n	800527e <timPWM_IN_IT_CallBack+0x68>
	...

0800533c <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveTIMs; i++) {
 8005340:	2400      	movs	r4, #0
 8005342:	e002      	b.n	800534a <HAL_TIM_IC_CaptureCallback+0xe>
		if(ActiveTIMs[i]->htim == htim) {
			HAL_TIM_ActiveChannel active_channel = htim->Channel;
			if(ActiveTIMs[i]->IC_fields->isUsedForPwmInput == True) {
				timPWM_IN_IT_CallBack(ActiveTIMs[i], active_channel);
 8005344:	f7ff ff67 	bl	8005216 <timPWM_IN_IT_CallBack>
	for(int i = 0; i < numActiveTIMs; i++) {
 8005348:	3401      	adds	r4, #1
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <HAL_TIM_IC_CaptureCallback+0x38>)
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	429c      	cmp	r4, r3
 8005350:	da0f      	bge.n	8005372 <HAL_TIM_IC_CaptureCallback+0x36>
		if(ActiveTIMs[i]->htim == htim) {
 8005352:	4b09      	ldr	r3, [pc, #36]	; (8005378 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8005354:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005358:	6803      	ldr	r3, [r0, #0]
 800535a:	42ab      	cmp	r3, r5
 800535c:	d1f4      	bne.n	8005348 <HAL_TIM_IC_CaptureCallback+0xc>
			HAL_TIM_ActiveChannel active_channel = htim->Channel;
 800535e:	7e29      	ldrb	r1, [r5, #24]
			if(ActiveTIMs[i]->IC_fields->isUsedForPwmInput == True) {
 8005360:	69c3      	ldr	r3, [r0, #28]
 8005362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	d0eb      	beq.n	8005344 <HAL_TIM_IC_CaptureCallback+0x8>
			}
			else {
				timIC_IT_CallBack(ActiveTIMs[i], active_channel);
 800536c:	f7ff fc74 	bl	8004c58 <timIC_IT_CallBack>
 8005370:	e7ea      	b.n	8005348 <HAL_TIM_IC_CaptureCallback+0xc>
			}
		}
	}
}
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	200006b4 	.word	0x200006b4
 8005378:	20000e90 	.word	0x20000e90

0800537c <newUSART>:
  *The actual initiation of the usart circuit takes place by HAL 
  *before THL_Main.c gets called by main.c
  *Treated it as Pseudo-Constructor
  *Note: no memory allocation occurs
  */
USART *newUSART(USART* instance, UART_HandleTypeDef *huart) {
 800537c:	b410      	push	{r4}
	instance->huart = huart;
 800537e:	6001      	str	r1, [r0, #0]
	instance->TxTimeOut = USART_Default_TxTimeOut;
 8005380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005384:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	instance->RxTimeOut = USART_Default_RxTimeOut;
 8005388:	f04f 33ff 	mov.w	r3, #4294967295
 800538c:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	instance->TxStatus = Ready;
 8005390:	2301      	movs	r3, #1
 8005392:	f880 30d4 	strb.w	r3, [r0, #212]	; 0xd4
	instance->RxStatus = Ready;
 8005396:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	for(int i = 0; i < numActiveUSARTs; i++) 
 800539a:	2300      	movs	r3, #0
 800539c:	4a0c      	ldr	r2, [pc, #48]	; (80053d0 <newUSART+0x54>)
 800539e:	8812      	ldrh	r2, [r2, #0]
 80053a0:	4614      	mov	r4, r2
 80053a2:	4293      	cmp	r3, r2
 80053a4:	da0b      	bge.n	80053be <newUSART+0x42>
		if(ActiveUSARTs[i]->huart == huart) {
 80053a6:	4a0b      	ldr	r2, [pc, #44]	; (80053d4 <newUSART+0x58>)
 80053a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	4291      	cmp	r1, r2
 80053b0:	d001      	beq.n	80053b6 <newUSART+0x3a>
	for(int i = 0; i < numActiveUSARTs; i++) 
 80053b2:	3301      	adds	r3, #1
 80053b4:	e7f2      	b.n	800539c <newUSART+0x20>
			ActiveUSARTs[i] = instance;
 80053b6:	4a07      	ldr	r2, [pc, #28]	; (80053d4 <newUSART+0x58>)
 80053b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			return instance;
 80053bc:	e005      	b.n	80053ca <newUSART+0x4e>
		}
	ActiveUSARTs[numActiveUSARTs++] = instance;
 80053be:	3201      	adds	r2, #1
 80053c0:	4b03      	ldr	r3, [pc, #12]	; (80053d0 <newUSART+0x54>)
 80053c2:	801a      	strh	r2, [r3, #0]
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <newUSART+0x58>)
 80053c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	return instance;
}
 80053ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	200006b6 	.word	0x200006b6
 80053d4:	20000fb8 	.word	0x20000fb8

080053d8 <newMainUSART>:

/**Pseudo-Constructor for Default/Main USART
  *It sets the usart
  */
USART *newMainUSART(UART_HandleTypeDef *huart) { 
 80053d8:	b508      	push	{r3, lr}
	return newUSART(&DefaultUSART, huart);
 80053da:	4601      	mov	r1, r0
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <newMainUSART+0xc>)
 80053de:	f7ff ffcd 	bl	800537c <newUSART>
}
 80053e2:	bd08      	pop	{r3, pc}
 80053e4:	20000ee0 	.word	0x20000ee0

080053e8 <usartWrite>:
/*=========================================================================*/



/*==============================Transmission===============================*/
void usartWrite(USART* instance) {
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	4605      	mov	r5, r0
	HAL_StatusTypeDef Status;
	Status = HAL_UART_Transmit(instance->huart, (uint8_t*)instance->TxBuffer, strlen(instance->TxBuffer), instance->TxTimeOut);
 80053ec:	4604      	mov	r4, r0
 80053ee:	f854 6b04 	ldr.w	r6, [r4], #4
 80053f2:	4620      	mov	r0, r4
 80053f4:	f7fa ff0c 	bl	8000210 <strlen>
 80053f8:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
 80053fc:	b282      	uxth	r2, r0
 80053fe:	4621      	mov	r1, r4
 8005400:	4630      	mov	r0, r6
 8005402:	f7fe fce2 	bl	8003dca <HAL_UART_Transmit>
	if(Status == HAL_BUSY) instance->TxStatus = InProcess;
 8005406:	2802      	cmp	r0, #2
 8005408:	d008      	beq.n	800541c <usartWrite+0x34>
	else if(Status == HAL_TIMEOUT) {
 800540a:	2803      	cmp	r0, #3
 800540c:	d00a      	beq.n	8005424 <usartWrite+0x3c>
		__HAL_UNLOCK(instance->huart);
		instance->huart->gState = HAL_UART_STATE_READY;
		
		throwException("THL_Usart.c: usartWrite() | TimeOut");
	}
	else if(Status == HAL_ERROR) {
 800540e:	2801      	cmp	r0, #1
 8005410:	d017      	beq.n	8005442 <usartWrite+0x5a>
		instance->TxStatus = Error;
		throwException("THL_Usart.c: usartWrite() | Error");
	}
	else if(Status == HAL_OK) instance->TxStatus = Completed;
 8005412:	b910      	cbnz	r0, 800541a <usartWrite+0x32>
 8005414:	2303      	movs	r3, #3
 8005416:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
 800541a:	bd70      	pop	{r4, r5, r6, pc}
	if(Status == HAL_BUSY) instance->TxStatus = InProcess;
 800541c:	2302      	movs	r3, #2
 800541e:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
 8005422:	bd70      	pop	{r4, r5, r6, pc}
		instance->TxStatus = TimeOut;
 8005424:	2304      	movs	r3, #4
 8005426:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
		__HAL_UNLOCK(instance->huart);
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		instance->huart->gState = HAL_UART_STATE_READY;
 8005432:	682b      	ldr	r3, [r5, #0]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		throwException("THL_Usart.c: usartWrite() | TimeOut");
 800543a:	4805      	ldr	r0, [pc, #20]	; (8005450 <usartWrite+0x68>)
 800543c:	f000 f822 	bl	8005484 <throwException>
 8005440:	bd70      	pop	{r4, r5, r6, pc}
		instance->TxStatus = Error;
 8005442:	2305      	movs	r3, #5
 8005444:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
		throwException("THL_Usart.c: usartWrite() | Error");
 8005448:	4802      	ldr	r0, [pc, #8]	; (8005454 <usartWrite+0x6c>)
 800544a:	f000 f81b 	bl	8005484 <throwException>
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	08008458 	.word	0x08008458
 8005454:	0800847c 	.word	0x0800847c

08005458 <printf_u>:

void print(USART* instance, Format_Param) {
	formatStrings(instance->TxBuffer);
	usartWrite(instance);
}
void printf_u(Format_Param) {
 8005458:	b40f      	push	{r0, r1, r2, r3}
 800545a:	b510      	push	{r4, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	aa04      	add	r2, sp, #16
 8005460:	f852 1b04 	ldr.w	r1, [r2], #4
	formatStrings(DefaultUSART.TxBuffer);
 8005464:	9201      	str	r2, [sp, #4]
 8005466:	4c06      	ldr	r4, [pc, #24]	; (8005480 <printf_u+0x28>)
 8005468:	4620      	mov	r0, r4
 800546a:	f000 f889 	bl	8005580 <vsprintf>
	usartWrite(&DefaultUSART);
 800546e:	1f20      	subs	r0, r4, #4
 8005470:	f7ff ffba 	bl	80053e8 <usartWrite>
}
 8005474:	b002      	add	sp, #8
 8005476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800547a:	b004      	add	sp, #16
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000ee4 	.word	0x20000ee4

08005484 <throwException>:

/*==========================Exception Handling==============================*/
__weak void Exception_Handler(const char* str) {
	UNUSED(str);
}
void throwException(const char* str) {
 8005484:	b508      	push	{r3, lr}
	Exception_Handler(str);
 8005486:	f7ff fb45 	bl	8004b14 <Exception_Handler>
 800548a:	bd08      	pop	{r3, pc}

0800548c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800548c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005490:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005492:	e003      	b.n	800549c <LoopCopyDataInit>

08005494 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005494:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005496:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005498:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800549a:	3104      	adds	r1, #4

0800549c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800549c:	480b      	ldr	r0, [pc, #44]	; (80054cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80054a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80054a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80054a4:	d3f6      	bcc.n	8005494 <CopyDataInit>
  ldr  r2, =_sbss
 80054a6:	4a0b      	ldr	r2, [pc, #44]	; (80054d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80054a8:	e002      	b.n	80054b0 <LoopFillZerobss>

080054aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80054aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80054ac:	f842 3b04 	str.w	r3, [r2], #4

080054b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80054b0:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80054b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80054b4:	d3f9      	bcc.n	80054aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80054b6:	f7ff fb07 	bl	8004ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054ba:	f000 f811 	bl	80054e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054be:	f7fe ff6b 	bl	8004398 <main>
  bx  lr    
 80054c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80054c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80054c8:	08008780 	.word	0x08008780
  ldr  r0, =_sdata
 80054cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80054d0:	2000067c 	.word	0x2000067c
  ldr  r2, =_sbss
 80054d4:	20000680 	.word	0x20000680
  ldr  r3, = _ebss
 80054d8:	20001018 	.word	0x20001018

080054dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054dc:	e7fe      	b.n	80054dc <ADC_IRQHandler>
	...

080054e0 <__libc_init_array>:
 80054e0:	b570      	push	{r4, r5, r6, lr}
 80054e2:	4e0d      	ldr	r6, [pc, #52]	; (8005518 <__libc_init_array+0x38>)
 80054e4:	4c0d      	ldr	r4, [pc, #52]	; (800551c <__libc_init_array+0x3c>)
 80054e6:	1ba4      	subs	r4, r4, r6
 80054e8:	10a4      	asrs	r4, r4, #2
 80054ea:	2500      	movs	r5, #0
 80054ec:	42a5      	cmp	r5, r4
 80054ee:	d109      	bne.n	8005504 <__libc_init_array+0x24>
 80054f0:	4e0b      	ldr	r6, [pc, #44]	; (8005520 <__libc_init_array+0x40>)
 80054f2:	4c0c      	ldr	r4, [pc, #48]	; (8005524 <__libc_init_array+0x44>)
 80054f4:	f002 ff10 	bl	8008318 <_init>
 80054f8:	1ba4      	subs	r4, r4, r6
 80054fa:	10a4      	asrs	r4, r4, #2
 80054fc:	2500      	movs	r5, #0
 80054fe:	42a5      	cmp	r5, r4
 8005500:	d105      	bne.n	800550e <__libc_init_array+0x2e>
 8005502:	bd70      	pop	{r4, r5, r6, pc}
 8005504:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005508:	4798      	blx	r3
 800550a:	3501      	adds	r5, #1
 800550c:	e7ee      	b.n	80054ec <__libc_init_array+0xc>
 800550e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005512:	4798      	blx	r3
 8005514:	3501      	adds	r5, #1
 8005516:	e7f2      	b.n	80054fe <__libc_init_array+0x1e>
 8005518:	08008778 	.word	0x08008778
 800551c:	08008778 	.word	0x08008778
 8005520:	08008778 	.word	0x08008778
 8005524:	0800877c 	.word	0x0800877c

08005528 <memcpy>:
 8005528:	b510      	push	{r4, lr}
 800552a:	1e43      	subs	r3, r0, #1
 800552c:	440a      	add	r2, r1
 800552e:	4291      	cmp	r1, r2
 8005530:	d100      	bne.n	8005534 <memcpy+0xc>
 8005532:	bd10      	pop	{r4, pc}
 8005534:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800553c:	e7f7      	b.n	800552e <memcpy+0x6>

0800553e <memset>:
 800553e:	4402      	add	r2, r0
 8005540:	4603      	mov	r3, r0
 8005542:	4293      	cmp	r3, r2
 8005544:	d100      	bne.n	8005548 <memset+0xa>
 8005546:	4770      	bx	lr
 8005548:	f803 1b01 	strb.w	r1, [r3], #1
 800554c:	e7f9      	b.n	8005542 <memset+0x4>

0800554e <_vsprintf_r>:
 800554e:	b510      	push	{r4, lr}
 8005550:	b09a      	sub	sp, #104	; 0x68
 8005552:	f44f 7402 	mov.w	r4, #520	; 0x208
 8005556:	9100      	str	r1, [sp, #0]
 8005558:	9104      	str	r1, [sp, #16]
 800555a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800555e:	9102      	str	r1, [sp, #8]
 8005560:	9105      	str	r1, [sp, #20]
 8005562:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005566:	f8ad 100e 	strh.w	r1, [sp, #14]
 800556a:	4669      	mov	r1, sp
 800556c:	f8ad 400c 	strh.w	r4, [sp, #12]
 8005570:	f000 f812 	bl	8005598 <_svfprintf_r>
 8005574:	9b00      	ldr	r3, [sp, #0]
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	b01a      	add	sp, #104	; 0x68
 800557c:	bd10      	pop	{r4, pc}
	...

08005580 <vsprintf>:
 8005580:	4613      	mov	r3, r2
 8005582:	460a      	mov	r2, r1
 8005584:	4601      	mov	r1, r0
 8005586:	4802      	ldr	r0, [pc, #8]	; (8005590 <vsprintf+0x10>)
 8005588:	6800      	ldr	r0, [r0, #0]
 800558a:	f7ff bfe0 	b.w	800554e <_vsprintf_r>
 800558e:	bf00      	nop
 8005590:	2000000c 	.word	0x2000000c
 8005594:	00000000 	.word	0x00000000

08005598 <_svfprintf_r>:
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	b0bd      	sub	sp, #244	; 0xf4
 800559e:	468a      	mov	sl, r1
 80055a0:	4615      	mov	r5, r2
 80055a2:	461f      	mov	r7, r3
 80055a4:	4683      	mov	fp, r0
 80055a6:	f001 fe25 	bl	80071f4 <_localeconv_r>
 80055aa:	6803      	ldr	r3, [r0, #0]
 80055ac:	930d      	str	r3, [sp, #52]	; 0x34
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fa fe2e 	bl	8000210 <strlen>
 80055b4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80055b8:	9008      	str	r0, [sp, #32]
 80055ba:	061b      	lsls	r3, r3, #24
 80055bc:	d518      	bpl.n	80055f0 <_svfprintf_r+0x58>
 80055be:	f8da 3010 	ldr.w	r3, [sl, #16]
 80055c2:	b9ab      	cbnz	r3, 80055f0 <_svfprintf_r+0x58>
 80055c4:	2140      	movs	r1, #64	; 0x40
 80055c6:	4658      	mov	r0, fp
 80055c8:	f001 fe2a 	bl	8007220 <_malloc_r>
 80055cc:	f8ca 0000 	str.w	r0, [sl]
 80055d0:	f8ca 0010 	str.w	r0, [sl, #16]
 80055d4:	b948      	cbnz	r0, 80055ea <_svfprintf_r+0x52>
 80055d6:	230c      	movs	r3, #12
 80055d8:	f8cb 3000 	str.w	r3, [fp]
 80055dc:	f04f 33ff 	mov.w	r3, #4294967295
 80055e0:	9309      	str	r3, [sp, #36]	; 0x24
 80055e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055e4:	b03d      	add	sp, #244	; 0xf4
 80055e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ea:	2340      	movs	r3, #64	; 0x40
 80055ec:	f8ca 3014 	str.w	r3, [sl, #20]
 80055f0:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8005858 <_svfprintf_r+0x2c0>
 80055f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80055f8:	2300      	movs	r3, #0
 80055fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80055fc:	941f      	str	r4, [sp, #124]	; 0x7c
 80055fe:	9321      	str	r3, [sp, #132]	; 0x84
 8005600:	9320      	str	r3, [sp, #128]	; 0x80
 8005602:	9505      	str	r5, [sp, #20]
 8005604:	9303      	str	r3, [sp, #12]
 8005606:	9311      	str	r3, [sp, #68]	; 0x44
 8005608:	9310      	str	r3, [sp, #64]	; 0x40
 800560a:	9309      	str	r3, [sp, #36]	; 0x24
 800560c:	9d05      	ldr	r5, [sp, #20]
 800560e:	462b      	mov	r3, r5
 8005610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005614:	b112      	cbz	r2, 800561c <_svfprintf_r+0x84>
 8005616:	2a25      	cmp	r2, #37	; 0x25
 8005618:	f040 8083 	bne.w	8005722 <_svfprintf_r+0x18a>
 800561c:	9b05      	ldr	r3, [sp, #20]
 800561e:	1aee      	subs	r6, r5, r3
 8005620:	d00d      	beq.n	800563e <_svfprintf_r+0xa6>
 8005622:	e884 0048 	stmia.w	r4, {r3, r6}
 8005626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005628:	4433      	add	r3, r6
 800562a:	9321      	str	r3, [sp, #132]	; 0x84
 800562c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800562e:	3301      	adds	r3, #1
 8005630:	2b07      	cmp	r3, #7
 8005632:	9320      	str	r3, [sp, #128]	; 0x80
 8005634:	dc77      	bgt.n	8005726 <_svfprintf_r+0x18e>
 8005636:	3408      	adds	r4, #8
 8005638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563a:	4433      	add	r3, r6
 800563c:	9309      	str	r3, [sp, #36]	; 0x24
 800563e:	782b      	ldrb	r3, [r5, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 8729 	beq.w	8006498 <_svfprintf_r+0xf00>
 8005646:	2300      	movs	r3, #0
 8005648:	1c69      	adds	r1, r5, #1
 800564a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800564e:	461a      	mov	r2, r3
 8005650:	f04f 39ff 	mov.w	r9, #4294967295
 8005654:	930a      	str	r3, [sp, #40]	; 0x28
 8005656:	461d      	mov	r5, r3
 8005658:	200a      	movs	r0, #10
 800565a:	1c4e      	adds	r6, r1, #1
 800565c:	7809      	ldrb	r1, [r1, #0]
 800565e:	9605      	str	r6, [sp, #20]
 8005660:	9102      	str	r1, [sp, #8]
 8005662:	9902      	ldr	r1, [sp, #8]
 8005664:	3920      	subs	r1, #32
 8005666:	2958      	cmp	r1, #88	; 0x58
 8005668:	f200 8418 	bhi.w	8005e9c <_svfprintf_r+0x904>
 800566c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005670:	041600a6 	.word	0x041600a6
 8005674:	00ab0416 	.word	0x00ab0416
 8005678:	04160416 	.word	0x04160416
 800567c:	04160416 	.word	0x04160416
 8005680:	04160416 	.word	0x04160416
 8005684:	006500ae 	.word	0x006500ae
 8005688:	00b70416 	.word	0x00b70416
 800568c:	041600ba 	.word	0x041600ba
 8005690:	00da00d7 	.word	0x00da00d7
 8005694:	00da00da 	.word	0x00da00da
 8005698:	00da00da 	.word	0x00da00da
 800569c:	00da00da 	.word	0x00da00da
 80056a0:	00da00da 	.word	0x00da00da
 80056a4:	04160416 	.word	0x04160416
 80056a8:	04160416 	.word	0x04160416
 80056ac:	04160416 	.word	0x04160416
 80056b0:	04160416 	.word	0x04160416
 80056b4:	04160416 	.word	0x04160416
 80056b8:	012b0115 	.word	0x012b0115
 80056bc:	012b0416 	.word	0x012b0416
 80056c0:	04160416 	.word	0x04160416
 80056c4:	04160416 	.word	0x04160416
 80056c8:	041600ed 	.word	0x041600ed
 80056cc:	03400416 	.word	0x03400416
 80056d0:	04160416 	.word	0x04160416
 80056d4:	04160416 	.word	0x04160416
 80056d8:	03a80416 	.word	0x03a80416
 80056dc:	04160416 	.word	0x04160416
 80056e0:	04160086 	.word	0x04160086
 80056e4:	04160416 	.word	0x04160416
 80056e8:	04160416 	.word	0x04160416
 80056ec:	04160416 	.word	0x04160416
 80056f0:	04160416 	.word	0x04160416
 80056f4:	01070416 	.word	0x01070416
 80056f8:	012b006b 	.word	0x012b006b
 80056fc:	012b012b 	.word	0x012b012b
 8005700:	006b00f0 	.word	0x006b00f0
 8005704:	04160416 	.word	0x04160416
 8005708:	041600fa 	.word	0x041600fa
 800570c:	03420322 	.word	0x03420322
 8005710:	01010376 	.word	0x01010376
 8005714:	03870416 	.word	0x03870416
 8005718:	03aa0416 	.word	0x03aa0416
 800571c:	04160416 	.word	0x04160416
 8005720:	03c2      	.short	0x03c2
 8005722:	461d      	mov	r5, r3
 8005724:	e773      	b.n	800560e <_svfprintf_r+0x76>
 8005726:	aa1f      	add	r2, sp, #124	; 0x7c
 8005728:	4651      	mov	r1, sl
 800572a:	4658      	mov	r0, fp
 800572c:	f002 fa84 	bl	8007c38 <__ssprint_r>
 8005730:	2800      	cmp	r0, #0
 8005732:	f040 8692 	bne.w	800645a <_svfprintf_r+0xec2>
 8005736:	ac2c      	add	r4, sp, #176	; 0xb0
 8005738:	e77e      	b.n	8005638 <_svfprintf_r+0xa0>
 800573a:	2301      	movs	r3, #1
 800573c:	222b      	movs	r2, #43	; 0x2b
 800573e:	9905      	ldr	r1, [sp, #20]
 8005740:	e78b      	b.n	800565a <_svfprintf_r+0xc2>
 8005742:	460f      	mov	r7, r1
 8005744:	e7fb      	b.n	800573e <_svfprintf_r+0x1a6>
 8005746:	b10b      	cbz	r3, 800574c <_svfprintf_r+0x1b4>
 8005748:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800574c:	06ae      	lsls	r6, r5, #26
 800574e:	f140 80aa 	bpl.w	80058a6 <_svfprintf_r+0x30e>
 8005752:	3707      	adds	r7, #7
 8005754:	f027 0707 	bic.w	r7, r7, #7
 8005758:	f107 0308 	add.w	r3, r7, #8
 800575c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005760:	9304      	str	r3, [sp, #16]
 8005762:	2e00      	cmp	r6, #0
 8005764:	f177 0300 	sbcs.w	r3, r7, #0
 8005768:	da06      	bge.n	8005778 <_svfprintf_r+0x1e0>
 800576a:	4276      	negs	r6, r6
 800576c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8005770:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005774:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005778:	2301      	movs	r3, #1
 800577a:	e2ca      	b.n	8005d12 <_svfprintf_r+0x77a>
 800577c:	b10b      	cbz	r3, 8005782 <_svfprintf_r+0x1ea>
 800577e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005782:	4b37      	ldr	r3, [pc, #220]	; (8005860 <_svfprintf_r+0x2c8>)
 8005784:	9311      	str	r3, [sp, #68]	; 0x44
 8005786:	06ab      	lsls	r3, r5, #26
 8005788:	f140 8339 	bpl.w	8005dfe <_svfprintf_r+0x866>
 800578c:	3707      	adds	r7, #7
 800578e:	f027 0707 	bic.w	r7, r7, #7
 8005792:	f107 0308 	add.w	r3, r7, #8
 8005796:	e9d7 6700 	ldrd	r6, r7, [r7]
 800579a:	9304      	str	r3, [sp, #16]
 800579c:	07e8      	lsls	r0, r5, #31
 800579e:	d50b      	bpl.n	80057b8 <_svfprintf_r+0x220>
 80057a0:	ea56 0307 	orrs.w	r3, r6, r7
 80057a4:	d008      	beq.n	80057b8 <_svfprintf_r+0x220>
 80057a6:	2330      	movs	r3, #48	; 0x30
 80057a8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80057ac:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80057b0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80057b4:	f045 0502 	orr.w	r5, r5, #2
 80057b8:	2302      	movs	r3, #2
 80057ba:	e2a7      	b.n	8005d0c <_svfprintf_r+0x774>
 80057bc:	2a00      	cmp	r2, #0
 80057be:	d1be      	bne.n	800573e <_svfprintf_r+0x1a6>
 80057c0:	2301      	movs	r3, #1
 80057c2:	2220      	movs	r2, #32
 80057c4:	e7bb      	b.n	800573e <_svfprintf_r+0x1a6>
 80057c6:	f045 0501 	orr.w	r5, r5, #1
 80057ca:	e7b8      	b.n	800573e <_svfprintf_r+0x1a6>
 80057cc:	683e      	ldr	r6, [r7, #0]
 80057ce:	960a      	str	r6, [sp, #40]	; 0x28
 80057d0:	2e00      	cmp	r6, #0
 80057d2:	f107 0104 	add.w	r1, r7, #4
 80057d6:	dab4      	bge.n	8005742 <_svfprintf_r+0x1aa>
 80057d8:	4276      	negs	r6, r6
 80057da:	960a      	str	r6, [sp, #40]	; 0x28
 80057dc:	460f      	mov	r7, r1
 80057de:	f045 0504 	orr.w	r5, r5, #4
 80057e2:	e7ac      	b.n	800573e <_svfprintf_r+0x1a6>
 80057e4:	9905      	ldr	r1, [sp, #20]
 80057e6:	1c4e      	adds	r6, r1, #1
 80057e8:	7809      	ldrb	r1, [r1, #0]
 80057ea:	9102      	str	r1, [sp, #8]
 80057ec:	292a      	cmp	r1, #42	; 0x2a
 80057ee:	d010      	beq.n	8005812 <_svfprintf_r+0x27a>
 80057f0:	f04f 0900 	mov.w	r9, #0
 80057f4:	9605      	str	r6, [sp, #20]
 80057f6:	9902      	ldr	r1, [sp, #8]
 80057f8:	3930      	subs	r1, #48	; 0x30
 80057fa:	2909      	cmp	r1, #9
 80057fc:	f63f af31 	bhi.w	8005662 <_svfprintf_r+0xca>
 8005800:	fb00 1909 	mla	r9, r0, r9, r1
 8005804:	9905      	ldr	r1, [sp, #20]
 8005806:	460e      	mov	r6, r1
 8005808:	f816 1b01 	ldrb.w	r1, [r6], #1
 800580c:	9102      	str	r1, [sp, #8]
 800580e:	9605      	str	r6, [sp, #20]
 8005810:	e7f1      	b.n	80057f6 <_svfprintf_r+0x25e>
 8005812:	6839      	ldr	r1, [r7, #0]
 8005814:	9605      	str	r6, [sp, #20]
 8005816:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 800581a:	3704      	adds	r7, #4
 800581c:	e78f      	b.n	800573e <_svfprintf_r+0x1a6>
 800581e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005822:	e78c      	b.n	800573e <_svfprintf_r+0x1a6>
 8005824:	2100      	movs	r1, #0
 8005826:	910a      	str	r1, [sp, #40]	; 0x28
 8005828:	9902      	ldr	r1, [sp, #8]
 800582a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800582c:	3930      	subs	r1, #48	; 0x30
 800582e:	fb00 1106 	mla	r1, r0, r6, r1
 8005832:	910a      	str	r1, [sp, #40]	; 0x28
 8005834:	9905      	ldr	r1, [sp, #20]
 8005836:	460e      	mov	r6, r1
 8005838:	f816 1b01 	ldrb.w	r1, [r6], #1
 800583c:	9102      	str	r1, [sp, #8]
 800583e:	9902      	ldr	r1, [sp, #8]
 8005840:	9605      	str	r6, [sp, #20]
 8005842:	3930      	subs	r1, #48	; 0x30
 8005844:	2909      	cmp	r1, #9
 8005846:	d9ef      	bls.n	8005828 <_svfprintf_r+0x290>
 8005848:	e70b      	b.n	8005662 <_svfprintf_r+0xca>
 800584a:	f045 0508 	orr.w	r5, r5, #8
 800584e:	e776      	b.n	800573e <_svfprintf_r+0x1a6>
 8005850:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8005854:	e773      	b.n	800573e <_svfprintf_r+0x1a6>
 8005856:	bf00      	nop
	...
 8005860:	080084b0 	.word	0x080084b0
 8005864:	9905      	ldr	r1, [sp, #20]
 8005866:	7809      	ldrb	r1, [r1, #0]
 8005868:	296c      	cmp	r1, #108	; 0x6c
 800586a:	d105      	bne.n	8005878 <_svfprintf_r+0x2e0>
 800586c:	9905      	ldr	r1, [sp, #20]
 800586e:	3101      	adds	r1, #1
 8005870:	9105      	str	r1, [sp, #20]
 8005872:	f045 0520 	orr.w	r5, r5, #32
 8005876:	e762      	b.n	800573e <_svfprintf_r+0x1a6>
 8005878:	f045 0510 	orr.w	r5, r5, #16
 800587c:	e75f      	b.n	800573e <_svfprintf_r+0x1a6>
 800587e:	1d3b      	adds	r3, r7, #4
 8005880:	9304      	str	r3, [sp, #16]
 8005882:	2600      	movs	r6, #0
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800588a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800588e:	f04f 0901 	mov.w	r9, #1
 8005892:	4637      	mov	r7, r6
 8005894:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8005898:	e11b      	b.n	8005ad2 <_svfprintf_r+0x53a>
 800589a:	b10b      	cbz	r3, 80058a0 <_svfprintf_r+0x308>
 800589c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80058a0:	f045 0510 	orr.w	r5, r5, #16
 80058a4:	e752      	b.n	800574c <_svfprintf_r+0x1b4>
 80058a6:	f015 0f10 	tst.w	r5, #16
 80058aa:	f107 0304 	add.w	r3, r7, #4
 80058ae:	d003      	beq.n	80058b8 <_svfprintf_r+0x320>
 80058b0:	683e      	ldr	r6, [r7, #0]
 80058b2:	9304      	str	r3, [sp, #16]
 80058b4:	17f7      	asrs	r7, r6, #31
 80058b6:	e754      	b.n	8005762 <_svfprintf_r+0x1ca>
 80058b8:	683e      	ldr	r6, [r7, #0]
 80058ba:	9304      	str	r3, [sp, #16]
 80058bc:	f015 0f40 	tst.w	r5, #64	; 0x40
 80058c0:	bf18      	it	ne
 80058c2:	b236      	sxthne	r6, r6
 80058c4:	e7f6      	b.n	80058b4 <_svfprintf_r+0x31c>
 80058c6:	b10b      	cbz	r3, 80058cc <_svfprintf_r+0x334>
 80058c8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80058cc:	3707      	adds	r7, #7
 80058ce:	f027 0707 	bic.w	r7, r7, #7
 80058d2:	f107 0308 	add.w	r3, r7, #8
 80058d6:	9304      	str	r3, [sp, #16]
 80058d8:	ed97 7b00 	vldr	d7, [r7]
 80058dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80058e0:	9b06      	ldr	r3, [sp, #24]
 80058e2:	9312      	str	r3, [sp, #72]	; 0x48
 80058e4:	9b07      	ldr	r3, [sp, #28]
 80058e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80058ec:	f04f 32ff 	mov.w	r2, #4294967295
 80058f0:	4b4a      	ldr	r3, [pc, #296]	; (8005a1c <_svfprintf_r+0x484>)
 80058f2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80058f6:	f7fb f935 	bl	8000b64 <__aeabi_dcmpun>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	f040 85d5 	bne.w	80064aa <_svfprintf_r+0xf12>
 8005900:	f04f 32ff 	mov.w	r2, #4294967295
 8005904:	4b45      	ldr	r3, [pc, #276]	; (8005a1c <_svfprintf_r+0x484>)
 8005906:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800590a:	f7fb f90d 	bl	8000b28 <__aeabi_dcmple>
 800590e:	2800      	cmp	r0, #0
 8005910:	f040 85cb 	bne.w	80064aa <_svfprintf_r+0xf12>
 8005914:	2200      	movs	r2, #0
 8005916:	2300      	movs	r3, #0
 8005918:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800591c:	f7fb f8fa 	bl	8000b14 <__aeabi_dcmplt>
 8005920:	b110      	cbz	r0, 8005928 <_svfprintf_r+0x390>
 8005922:	232d      	movs	r3, #45	; 0x2d
 8005924:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005928:	4b3d      	ldr	r3, [pc, #244]	; (8005a20 <_svfprintf_r+0x488>)
 800592a:	4a3e      	ldr	r2, [pc, #248]	; (8005a24 <_svfprintf_r+0x48c>)
 800592c:	9902      	ldr	r1, [sp, #8]
 800592e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005932:	2947      	cmp	r1, #71	; 0x47
 8005934:	bfcc      	ite	gt
 8005936:	4690      	movgt	r8, r2
 8005938:	4698      	movle	r8, r3
 800593a:	f04f 0903 	mov.w	r9, #3
 800593e:	2600      	movs	r6, #0
 8005940:	4637      	mov	r7, r6
 8005942:	e0c6      	b.n	8005ad2 <_svfprintf_r+0x53a>
 8005944:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005948:	d022      	beq.n	8005990 <_svfprintf_r+0x3f8>
 800594a:	9b02      	ldr	r3, [sp, #8]
 800594c:	f023 0320 	bic.w	r3, r3, #32
 8005950:	2b47      	cmp	r3, #71	; 0x47
 8005952:	d104      	bne.n	800595e <_svfprintf_r+0x3c6>
 8005954:	f1b9 0f00 	cmp.w	r9, #0
 8005958:	bf08      	it	eq
 800595a:	f04f 0901 	moveq.w	r9, #1
 800595e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8005962:	930c      	str	r3, [sp, #48]	; 0x30
 8005964:	9b07      	ldr	r3, [sp, #28]
 8005966:	2b00      	cmp	r3, #0
 8005968:	da15      	bge.n	8005996 <_svfprintf_r+0x3fe>
 800596a:	9b06      	ldr	r3, [sp, #24]
 800596c:	930e      	str	r3, [sp, #56]	; 0x38
 800596e:	9b07      	ldr	r3, [sp, #28]
 8005970:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005974:	930f      	str	r3, [sp, #60]	; 0x3c
 8005976:	232d      	movs	r3, #45	; 0x2d
 8005978:	930b      	str	r3, [sp, #44]	; 0x2c
 800597a:	9b02      	ldr	r3, [sp, #8]
 800597c:	f023 0720 	bic.w	r7, r3, #32
 8005980:	2f46      	cmp	r7, #70	; 0x46
 8005982:	d00e      	beq.n	80059a2 <_svfprintf_r+0x40a>
 8005984:	2f45      	cmp	r7, #69	; 0x45
 8005986:	d146      	bne.n	8005a16 <_svfprintf_r+0x47e>
 8005988:	f109 0601 	add.w	r6, r9, #1
 800598c:	2102      	movs	r1, #2
 800598e:	e00a      	b.n	80059a6 <_svfprintf_r+0x40e>
 8005990:	f04f 0906 	mov.w	r9, #6
 8005994:	e7e3      	b.n	800595e <_svfprintf_r+0x3c6>
 8005996:	ed9d 7b06 	vldr	d7, [sp, #24]
 800599a:	2300      	movs	r3, #0
 800599c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80059a0:	e7ea      	b.n	8005978 <_svfprintf_r+0x3e0>
 80059a2:	464e      	mov	r6, r9
 80059a4:	2103      	movs	r1, #3
 80059a6:	ab1d      	add	r3, sp, #116	; 0x74
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	ab1a      	add	r3, sp, #104	; 0x68
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	4632      	mov	r2, r6
 80059b0:	ab19      	add	r3, sp, #100	; 0x64
 80059b2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80059b6:	4658      	mov	r0, fp
 80059b8:	f000 fe4e 	bl	8006658 <_dtoa_r>
 80059bc:	2f47      	cmp	r7, #71	; 0x47
 80059be:	4680      	mov	r8, r0
 80059c0:	d102      	bne.n	80059c8 <_svfprintf_r+0x430>
 80059c2:	07e8      	lsls	r0, r5, #31
 80059c4:	f140 857e 	bpl.w	80064c4 <_svfprintf_r+0xf2c>
 80059c8:	eb08 0306 	add.w	r3, r8, r6
 80059cc:	2f46      	cmp	r7, #70	; 0x46
 80059ce:	9303      	str	r3, [sp, #12]
 80059d0:	d111      	bne.n	80059f6 <_svfprintf_r+0x45e>
 80059d2:	f898 3000 	ldrb.w	r3, [r8]
 80059d6:	2b30      	cmp	r3, #48	; 0x30
 80059d8:	d109      	bne.n	80059ee <_svfprintf_r+0x456>
 80059da:	2200      	movs	r2, #0
 80059dc:	2300      	movs	r3, #0
 80059de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80059e2:	f7fb f88d 	bl	8000b00 <__aeabi_dcmpeq>
 80059e6:	b910      	cbnz	r0, 80059ee <_svfprintf_r+0x456>
 80059e8:	f1c6 0601 	rsb	r6, r6, #1
 80059ec:	9619      	str	r6, [sp, #100]	; 0x64
 80059ee:	9a03      	ldr	r2, [sp, #12]
 80059f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059f2:	441a      	add	r2, r3
 80059f4:	9203      	str	r2, [sp, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	2300      	movs	r3, #0
 80059fa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80059fe:	f7fb f87f 	bl	8000b00 <__aeabi_dcmpeq>
 8005a02:	b988      	cbnz	r0, 8005a28 <_svfprintf_r+0x490>
 8005a04:	2230      	movs	r2, #48	; 0x30
 8005a06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a08:	9903      	ldr	r1, [sp, #12]
 8005a0a:	4299      	cmp	r1, r3
 8005a0c:	d90e      	bls.n	8005a2c <_svfprintf_r+0x494>
 8005a0e:	1c59      	adds	r1, r3, #1
 8005a10:	911d      	str	r1, [sp, #116]	; 0x74
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	e7f7      	b.n	8005a06 <_svfprintf_r+0x46e>
 8005a16:	464e      	mov	r6, r9
 8005a18:	e7b8      	b.n	800598c <_svfprintf_r+0x3f4>
 8005a1a:	bf00      	nop
 8005a1c:	7fefffff 	.word	0x7fefffff
 8005a20:	080084a0 	.word	0x080084a0
 8005a24:	080084a4 	.word	0x080084a4
 8005a28:	9b03      	ldr	r3, [sp, #12]
 8005a2a:	931d      	str	r3, [sp, #116]	; 0x74
 8005a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a2e:	2f47      	cmp	r7, #71	; 0x47
 8005a30:	eba3 0308 	sub.w	r3, r3, r8
 8005a34:	9303      	str	r3, [sp, #12]
 8005a36:	f040 80fa 	bne.w	8005c2e <_svfprintf_r+0x696>
 8005a3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a3c:	1cd9      	adds	r1, r3, #3
 8005a3e:	db02      	blt.n	8005a46 <_svfprintf_r+0x4ae>
 8005a40:	4599      	cmp	r9, r3
 8005a42:	f280 8120 	bge.w	8005c86 <_svfprintf_r+0x6ee>
 8005a46:	9b02      	ldr	r3, [sp, #8]
 8005a48:	3b02      	subs	r3, #2
 8005a4a:	9302      	str	r3, [sp, #8]
 8005a4c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a4e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8005a52:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8005a56:	1e53      	subs	r3, r2, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	9319      	str	r3, [sp, #100]	; 0x64
 8005a5c:	bfb6      	itet	lt
 8005a5e:	f1c2 0301 	rsblt	r3, r2, #1
 8005a62:	222b      	movge	r2, #43	; 0x2b
 8005a64:	222d      	movlt	r2, #45	; 0x2d
 8005a66:	2b09      	cmp	r3, #9
 8005a68:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005a6c:	f340 80fb 	ble.w	8005c66 <_svfprintf_r+0x6ce>
 8005a70:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005a74:	260a      	movs	r6, #10
 8005a76:	fb93 f0f6 	sdiv	r0, r3, r6
 8005a7a:	fb06 3310 	mls	r3, r6, r0, r3
 8005a7e:	3330      	adds	r3, #48	; 0x30
 8005a80:	2809      	cmp	r0, #9
 8005a82:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a86:	f102 31ff 	add.w	r1, r2, #4294967295
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f300 80e4 	bgt.w	8005c58 <_svfprintf_r+0x6c0>
 8005a90:	3330      	adds	r3, #48	; 0x30
 8005a92:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005a96:	3a02      	subs	r2, #2
 8005a98:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8005a9c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8005aa0:	4282      	cmp	r2, r0
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	f0c0 80da 	bcc.w	8005c5c <_svfprintf_r+0x6c4>
 8005aa8:	9a03      	ldr	r2, [sp, #12]
 8005aaa:	ab1b      	add	r3, sp, #108	; 0x6c
 8005aac:	1acb      	subs	r3, r1, r3
 8005aae:	2a01      	cmp	r2, #1
 8005ab0:	9310      	str	r3, [sp, #64]	; 0x40
 8005ab2:	eb03 0902 	add.w	r9, r3, r2
 8005ab6:	dc02      	bgt.n	8005abe <_svfprintf_r+0x526>
 8005ab8:	f015 0701 	ands.w	r7, r5, #1
 8005abc:	d002      	beq.n	8005ac4 <_svfprintf_r+0x52c>
 8005abe:	9b08      	ldr	r3, [sp, #32]
 8005ac0:	2700      	movs	r7, #0
 8005ac2:	4499      	add	r9, r3
 8005ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ac6:	b113      	cbz	r3, 8005ace <_svfprintf_r+0x536>
 8005ac8:	232d      	movs	r3, #45	; 0x2d
 8005aca:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005ace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ad0:	2600      	movs	r6, #0
 8005ad2:	454e      	cmp	r6, r9
 8005ad4:	4633      	mov	r3, r6
 8005ad6:	bfb8      	it	lt
 8005ad8:	464b      	movlt	r3, r9
 8005ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8005adc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005ae0:	b113      	cbz	r3, 8005ae8 <_svfprintf_r+0x550>
 8005ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ae8:	f015 0302 	ands.w	r3, r5, #2
 8005aec:	9314      	str	r3, [sp, #80]	; 0x50
 8005aee:	bf1e      	ittt	ne
 8005af0:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8005af2:	3302      	addne	r3, #2
 8005af4:	930b      	strne	r3, [sp, #44]	; 0x2c
 8005af6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8005afa:	9315      	str	r3, [sp, #84]	; 0x54
 8005afc:	d118      	bne.n	8005b30 <_svfprintf_r+0x598>
 8005afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	930c      	str	r3, [sp, #48]	; 0x30
 8005b08:	dd12      	ble.n	8005b30 <_svfprintf_r+0x598>
 8005b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b0c:	2b10      	cmp	r3, #16
 8005b0e:	4ba9      	ldr	r3, [pc, #676]	; (8005db4 <_svfprintf_r+0x81c>)
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	f300 81d5 	bgt.w	8005ec0 <_svfprintf_r+0x928>
 8005b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b18:	6063      	str	r3, [r4, #4]
 8005b1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b1e:	4413      	add	r3, r2
 8005b20:	9321      	str	r3, [sp, #132]	; 0x84
 8005b22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b24:	3301      	adds	r3, #1
 8005b26:	2b07      	cmp	r3, #7
 8005b28:	9320      	str	r3, [sp, #128]	; 0x80
 8005b2a:	f300 81e2 	bgt.w	8005ef2 <_svfprintf_r+0x95a>
 8005b2e:	3408      	adds	r4, #8
 8005b30:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005b34:	b173      	cbz	r3, 8005b54 <_svfprintf_r+0x5bc>
 8005b36:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	6063      	str	r3, [r4, #4]
 8005b40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b42:	3301      	adds	r3, #1
 8005b44:	9321      	str	r3, [sp, #132]	; 0x84
 8005b46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b48:	3301      	adds	r3, #1
 8005b4a:	2b07      	cmp	r3, #7
 8005b4c:	9320      	str	r3, [sp, #128]	; 0x80
 8005b4e:	f300 81da 	bgt.w	8005f06 <_svfprintf_r+0x96e>
 8005b52:	3408      	adds	r4, #8
 8005b54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b56:	b16b      	cbz	r3, 8005b74 <_svfprintf_r+0x5dc>
 8005b58:	ab18      	add	r3, sp, #96	; 0x60
 8005b5a:	6023      	str	r3, [r4, #0]
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	6063      	str	r3, [r4, #4]
 8005b60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b62:	3302      	adds	r3, #2
 8005b64:	9321      	str	r3, [sp, #132]	; 0x84
 8005b66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b68:	3301      	adds	r3, #1
 8005b6a:	2b07      	cmp	r3, #7
 8005b6c:	9320      	str	r3, [sp, #128]	; 0x80
 8005b6e:	f300 81d4 	bgt.w	8005f1a <_svfprintf_r+0x982>
 8005b72:	3408      	adds	r4, #8
 8005b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b76:	2b80      	cmp	r3, #128	; 0x80
 8005b78:	d114      	bne.n	8005ba4 <_svfprintf_r+0x60c>
 8005b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b7e:	1a9b      	subs	r3, r3, r2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	dd0f      	ble.n	8005ba4 <_svfprintf_r+0x60c>
 8005b84:	4a8c      	ldr	r2, [pc, #560]	; (8005db8 <_svfprintf_r+0x820>)
 8005b86:	6022      	str	r2, [r4, #0]
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	f300 81d0 	bgt.w	8005f2e <_svfprintf_r+0x996>
 8005b8e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b90:	6063      	str	r3, [r4, #4]
 8005b92:	4413      	add	r3, r2
 8005b94:	9321      	str	r3, [sp, #132]	; 0x84
 8005b96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b98:	3301      	adds	r3, #1
 8005b9a:	2b07      	cmp	r3, #7
 8005b9c:	9320      	str	r3, [sp, #128]	; 0x80
 8005b9e:	f300 81df 	bgt.w	8005f60 <_svfprintf_r+0x9c8>
 8005ba2:	3408      	adds	r4, #8
 8005ba4:	eba6 0609 	sub.w	r6, r6, r9
 8005ba8:	2e00      	cmp	r6, #0
 8005baa:	dd0f      	ble.n	8005bcc <_svfprintf_r+0x634>
 8005bac:	4b82      	ldr	r3, [pc, #520]	; (8005db8 <_svfprintf_r+0x820>)
 8005bae:	6023      	str	r3, [r4, #0]
 8005bb0:	2e10      	cmp	r6, #16
 8005bb2:	f300 81df 	bgt.w	8005f74 <_svfprintf_r+0x9dc>
 8005bb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005bb8:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005bba:	6066      	str	r6, [r4, #4]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	4406      	add	r6, r0
 8005bc0:	2b07      	cmp	r3, #7
 8005bc2:	9621      	str	r6, [sp, #132]	; 0x84
 8005bc4:	9320      	str	r3, [sp, #128]	; 0x80
 8005bc6:	f300 81ec 	bgt.w	8005fa2 <_svfprintf_r+0xa0a>
 8005bca:	3408      	adds	r4, #8
 8005bcc:	05eb      	lsls	r3, r5, #23
 8005bce:	f100 81f2 	bmi.w	8005fb6 <_svfprintf_r+0xa1e>
 8005bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bd4:	e884 0300 	stmia.w	r4, {r8, r9}
 8005bd8:	444b      	add	r3, r9
 8005bda:	9321      	str	r3, [sp, #132]	; 0x84
 8005bdc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005bde:	3301      	adds	r3, #1
 8005be0:	2b07      	cmp	r3, #7
 8005be2:	9320      	str	r3, [sp, #128]	; 0x80
 8005be4:	f340 8419 	ble.w	800641a <_svfprintf_r+0xe82>
 8005be8:	aa1f      	add	r2, sp, #124	; 0x7c
 8005bea:	4651      	mov	r1, sl
 8005bec:	4658      	mov	r0, fp
 8005bee:	f002 f823 	bl	8007c38 <__ssprint_r>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f040 8431 	bne.w	800645a <_svfprintf_r+0xec2>
 8005bf8:	ac2c      	add	r4, sp, #176	; 0xb0
 8005bfa:	076b      	lsls	r3, r5, #29
 8005bfc:	f100 8410 	bmi.w	8006420 <_svfprintf_r+0xe88>
 8005c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c06:	428a      	cmp	r2, r1
 8005c08:	bfac      	ite	ge
 8005c0a:	189b      	addge	r3, r3, r2
 8005c0c:	185b      	addlt	r3, r3, r1
 8005c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c12:	b13b      	cbz	r3, 8005c24 <_svfprintf_r+0x68c>
 8005c14:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c16:	4651      	mov	r1, sl
 8005c18:	4658      	mov	r0, fp
 8005c1a:	f002 f80d 	bl	8007c38 <__ssprint_r>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f040 841b 	bne.w	800645a <_svfprintf_r+0xec2>
 8005c24:	2300      	movs	r3, #0
 8005c26:	9320      	str	r3, [sp, #128]	; 0x80
 8005c28:	9f04      	ldr	r7, [sp, #16]
 8005c2a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005c2c:	e4ee      	b.n	800560c <_svfprintf_r+0x74>
 8005c2e:	9b02      	ldr	r3, [sp, #8]
 8005c30:	2b65      	cmp	r3, #101	; 0x65
 8005c32:	f77f af0b 	ble.w	8005a4c <_svfprintf_r+0x4b4>
 8005c36:	9b02      	ldr	r3, [sp, #8]
 8005c38:	2b66      	cmp	r3, #102	; 0x66
 8005c3a:	d124      	bne.n	8005c86 <_svfprintf_r+0x6ee>
 8005c3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	dd19      	ble.n	8005c76 <_svfprintf_r+0x6de>
 8005c42:	f1b9 0f00 	cmp.w	r9, #0
 8005c46:	d101      	bne.n	8005c4c <_svfprintf_r+0x6b4>
 8005c48:	07ea      	lsls	r2, r5, #31
 8005c4a:	d502      	bpl.n	8005c52 <_svfprintf_r+0x6ba>
 8005c4c:	9a08      	ldr	r2, [sp, #32]
 8005c4e:	4413      	add	r3, r2
 8005c50:	444b      	add	r3, r9
 8005c52:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8005c54:	4699      	mov	r9, r3
 8005c56:	e735      	b.n	8005ac4 <_svfprintf_r+0x52c>
 8005c58:	460a      	mov	r2, r1
 8005c5a:	e70c      	b.n	8005a76 <_svfprintf_r+0x4de>
 8005c5c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005c60:	f803 1b01 	strb.w	r1, [r3], #1
 8005c64:	e71c      	b.n	8005aa0 <_svfprintf_r+0x508>
 8005c66:	2230      	movs	r2, #48	; 0x30
 8005c68:	4413      	add	r3, r2
 8005c6a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8005c6e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8005c72:	a91c      	add	r1, sp, #112	; 0x70
 8005c74:	e718      	b.n	8005aa8 <_svfprintf_r+0x510>
 8005c76:	f1b9 0f00 	cmp.w	r9, #0
 8005c7a:	d101      	bne.n	8005c80 <_svfprintf_r+0x6e8>
 8005c7c:	07eb      	lsls	r3, r5, #31
 8005c7e:	d515      	bpl.n	8005cac <_svfprintf_r+0x714>
 8005c80:	9b08      	ldr	r3, [sp, #32]
 8005c82:	3301      	adds	r3, #1
 8005c84:	e7e4      	b.n	8005c50 <_svfprintf_r+0x6b8>
 8005c86:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c88:	9b03      	ldr	r3, [sp, #12]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	db06      	blt.n	8005c9c <_svfprintf_r+0x704>
 8005c8e:	07ef      	lsls	r7, r5, #31
 8005c90:	d50e      	bpl.n	8005cb0 <_svfprintf_r+0x718>
 8005c92:	9b08      	ldr	r3, [sp, #32]
 8005c94:	4413      	add	r3, r2
 8005c96:	2267      	movs	r2, #103	; 0x67
 8005c98:	9202      	str	r2, [sp, #8]
 8005c9a:	e7da      	b.n	8005c52 <_svfprintf_r+0x6ba>
 8005c9c:	9b03      	ldr	r3, [sp, #12]
 8005c9e:	9908      	ldr	r1, [sp, #32]
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	440b      	add	r3, r1
 8005ca4:	dcf7      	bgt.n	8005c96 <_svfprintf_r+0x6fe>
 8005ca6:	f1c2 0201 	rsb	r2, r2, #1
 8005caa:	e7f3      	b.n	8005c94 <_svfprintf_r+0x6fc>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e7d0      	b.n	8005c52 <_svfprintf_r+0x6ba>
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	e7f0      	b.n	8005c96 <_svfprintf_r+0x6fe>
 8005cb4:	b10b      	cbz	r3, 8005cba <_svfprintf_r+0x722>
 8005cb6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005cba:	f015 0f20 	tst.w	r5, #32
 8005cbe:	f107 0304 	add.w	r3, r7, #4
 8005cc2:	d008      	beq.n	8005cd6 <_svfprintf_r+0x73e>
 8005cc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	17ce      	asrs	r6, r1, #31
 8005cca:	4608      	mov	r0, r1
 8005ccc:	4631      	mov	r1, r6
 8005cce:	e9c2 0100 	strd	r0, r1, [r2]
 8005cd2:	461f      	mov	r7, r3
 8005cd4:	e49a      	b.n	800560c <_svfprintf_r+0x74>
 8005cd6:	06ee      	lsls	r6, r5, #27
 8005cd8:	d503      	bpl.n	8005ce2 <_svfprintf_r+0x74a>
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cde:	6011      	str	r1, [r2, #0]
 8005ce0:	e7f7      	b.n	8005cd2 <_svfprintf_r+0x73a>
 8005ce2:	0668      	lsls	r0, r5, #25
 8005ce4:	d5f9      	bpl.n	8005cda <_svfprintf_r+0x742>
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8005cec:	8011      	strh	r1, [r2, #0]
 8005cee:	e7f0      	b.n	8005cd2 <_svfprintf_r+0x73a>
 8005cf0:	f045 0510 	orr.w	r5, r5, #16
 8005cf4:	f015 0320 	ands.w	r3, r5, #32
 8005cf8:	d022      	beq.n	8005d40 <_svfprintf_r+0x7a8>
 8005cfa:	3707      	adds	r7, #7
 8005cfc:	f027 0707 	bic.w	r7, r7, #7
 8005d00:	f107 0308 	add.w	r3, r7, #8
 8005d04:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005d08:	9304      	str	r3, [sp, #16]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005d12:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005d16:	f000 83db 	beq.w	80064d0 <_svfprintf_r+0xf38>
 8005d1a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8005d1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d20:	ea56 0207 	orrs.w	r2, r6, r7
 8005d24:	f040 83d9 	bne.w	80064da <_svfprintf_r+0xf42>
 8005d28:	f1b9 0f00 	cmp.w	r9, #0
 8005d2c:	f000 80aa 	beq.w	8005e84 <_svfprintf_r+0x8ec>
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d076      	beq.n	8005e22 <_svfprintf_r+0x88a>
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	f000 8091 	beq.w	8005e5c <_svfprintf_r+0x8c4>
 8005d3a:	2600      	movs	r6, #0
 8005d3c:	2700      	movs	r7, #0
 8005d3e:	e3d2      	b.n	80064e6 <_svfprintf_r+0xf4e>
 8005d40:	1d3a      	adds	r2, r7, #4
 8005d42:	f015 0110 	ands.w	r1, r5, #16
 8005d46:	9204      	str	r2, [sp, #16]
 8005d48:	d002      	beq.n	8005d50 <_svfprintf_r+0x7b8>
 8005d4a:	683e      	ldr	r6, [r7, #0]
 8005d4c:	2700      	movs	r7, #0
 8005d4e:	e7dd      	b.n	8005d0c <_svfprintf_r+0x774>
 8005d50:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005d54:	d0f9      	beq.n	8005d4a <_svfprintf_r+0x7b2>
 8005d56:	883e      	ldrh	r6, [r7, #0]
 8005d58:	2700      	movs	r7, #0
 8005d5a:	e7d6      	b.n	8005d0a <_svfprintf_r+0x772>
 8005d5c:	1d3b      	adds	r3, r7, #4
 8005d5e:	9304      	str	r3, [sp, #16]
 8005d60:	2330      	movs	r3, #48	; 0x30
 8005d62:	2278      	movs	r2, #120	; 0x78
 8005d64:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005d68:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <_svfprintf_r+0x824>)
 8005d6a:	683e      	ldr	r6, [r7, #0]
 8005d6c:	9311      	str	r3, [sp, #68]	; 0x44
 8005d6e:	2700      	movs	r7, #0
 8005d70:	f045 0502 	orr.w	r5, r5, #2
 8005d74:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8005d78:	2302      	movs	r3, #2
 8005d7a:	9202      	str	r2, [sp, #8]
 8005d7c:	e7c6      	b.n	8005d0c <_svfprintf_r+0x774>
 8005d7e:	1d3b      	adds	r3, r7, #4
 8005d80:	2600      	movs	r6, #0
 8005d82:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005d86:	9304      	str	r3, [sp, #16]
 8005d88:	f8d7 8000 	ldr.w	r8, [r7]
 8005d8c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005d90:	d00a      	beq.n	8005da8 <_svfprintf_r+0x810>
 8005d92:	464a      	mov	r2, r9
 8005d94:	4631      	mov	r1, r6
 8005d96:	4640      	mov	r0, r8
 8005d98:	f7fa fa42 	bl	8000220 <memchr>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	f000 808d 	beq.w	8005ebc <_svfprintf_r+0x924>
 8005da2:	eba0 0908 	sub.w	r9, r0, r8
 8005da6:	e5cb      	b.n	8005940 <_svfprintf_r+0x3a8>
 8005da8:	4640      	mov	r0, r8
 8005daa:	f7fa fa31 	bl	8000210 <strlen>
 8005dae:	4681      	mov	r9, r0
 8005db0:	e5c6      	b.n	8005940 <_svfprintf_r+0x3a8>
 8005db2:	bf00      	nop
 8005db4:	080084d4 	.word	0x080084d4
 8005db8:	080084e4 	.word	0x080084e4
 8005dbc:	080084c1 	.word	0x080084c1
 8005dc0:	f045 0510 	orr.w	r5, r5, #16
 8005dc4:	06a9      	lsls	r1, r5, #26
 8005dc6:	d509      	bpl.n	8005ddc <_svfprintf_r+0x844>
 8005dc8:	3707      	adds	r7, #7
 8005dca:	f027 0707 	bic.w	r7, r7, #7
 8005dce:	f107 0308 	add.w	r3, r7, #8
 8005dd2:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005dd6:	9304      	str	r3, [sp, #16]
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e797      	b.n	8005d0c <_svfprintf_r+0x774>
 8005ddc:	1d3b      	adds	r3, r7, #4
 8005dde:	f015 0f10 	tst.w	r5, #16
 8005de2:	9304      	str	r3, [sp, #16]
 8005de4:	d001      	beq.n	8005dea <_svfprintf_r+0x852>
 8005de6:	683e      	ldr	r6, [r7, #0]
 8005de8:	e002      	b.n	8005df0 <_svfprintf_r+0x858>
 8005dea:	066a      	lsls	r2, r5, #25
 8005dec:	d5fb      	bpl.n	8005de6 <_svfprintf_r+0x84e>
 8005dee:	883e      	ldrh	r6, [r7, #0]
 8005df0:	2700      	movs	r7, #0
 8005df2:	e7f1      	b.n	8005dd8 <_svfprintf_r+0x840>
 8005df4:	b10b      	cbz	r3, 8005dfa <_svfprintf_r+0x862>
 8005df6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005dfa:	4ba3      	ldr	r3, [pc, #652]	; (8006088 <_svfprintf_r+0xaf0>)
 8005dfc:	e4c2      	b.n	8005784 <_svfprintf_r+0x1ec>
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	f015 0f10 	tst.w	r5, #16
 8005e04:	9304      	str	r3, [sp, #16]
 8005e06:	d001      	beq.n	8005e0c <_svfprintf_r+0x874>
 8005e08:	683e      	ldr	r6, [r7, #0]
 8005e0a:	e002      	b.n	8005e12 <_svfprintf_r+0x87a>
 8005e0c:	066e      	lsls	r6, r5, #25
 8005e0e:	d5fb      	bpl.n	8005e08 <_svfprintf_r+0x870>
 8005e10:	883e      	ldrh	r6, [r7, #0]
 8005e12:	2700      	movs	r7, #0
 8005e14:	e4c2      	b.n	800579c <_svfprintf_r+0x204>
 8005e16:	4643      	mov	r3, r8
 8005e18:	e366      	b.n	80064e8 <_svfprintf_r+0xf50>
 8005e1a:	2f00      	cmp	r7, #0
 8005e1c:	bf08      	it	eq
 8005e1e:	2e0a      	cmpeq	r6, #10
 8005e20:	d205      	bcs.n	8005e2e <_svfprintf_r+0x896>
 8005e22:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005e26:	3630      	adds	r6, #48	; 0x30
 8005e28:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8005e2c:	e377      	b.n	800651e <_svfprintf_r+0xf86>
 8005e2e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005e32:	4630      	mov	r0, r6
 8005e34:	4639      	mov	r1, r7
 8005e36:	220a      	movs	r2, #10
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f7fa fef1 	bl	8000c20 <__aeabi_uldivmod>
 8005e3e:	3230      	adds	r2, #48	; 0x30
 8005e40:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8005e44:	2300      	movs	r3, #0
 8005e46:	4630      	mov	r0, r6
 8005e48:	4639      	mov	r1, r7
 8005e4a:	220a      	movs	r2, #10
 8005e4c:	f7fa fee8 	bl	8000c20 <__aeabi_uldivmod>
 8005e50:	4606      	mov	r6, r0
 8005e52:	460f      	mov	r7, r1
 8005e54:	ea56 0307 	orrs.w	r3, r6, r7
 8005e58:	d1eb      	bne.n	8005e32 <_svfprintf_r+0x89a>
 8005e5a:	e360      	b.n	800651e <_svfprintf_r+0xf86>
 8005e5c:	2600      	movs	r6, #0
 8005e5e:	2700      	movs	r7, #0
 8005e60:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005e64:	f006 030f 	and.w	r3, r6, #15
 8005e68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005e6a:	5cd3      	ldrb	r3, [r2, r3]
 8005e6c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005e70:	0933      	lsrs	r3, r6, #4
 8005e72:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005e76:	093a      	lsrs	r2, r7, #4
 8005e78:	461e      	mov	r6, r3
 8005e7a:	4617      	mov	r7, r2
 8005e7c:	ea56 0307 	orrs.w	r3, r6, r7
 8005e80:	d1f0      	bne.n	8005e64 <_svfprintf_r+0x8cc>
 8005e82:	e34c      	b.n	800651e <_svfprintf_r+0xf86>
 8005e84:	b93b      	cbnz	r3, 8005e96 <_svfprintf_r+0x8fe>
 8005e86:	07ea      	lsls	r2, r5, #31
 8005e88:	d505      	bpl.n	8005e96 <_svfprintf_r+0x8fe>
 8005e8a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005e8e:	2330      	movs	r3, #48	; 0x30
 8005e90:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8005e94:	e343      	b.n	800651e <_svfprintf_r+0xf86>
 8005e96:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005e9a:	e340      	b.n	800651e <_svfprintf_r+0xf86>
 8005e9c:	b10b      	cbz	r3, 8005ea2 <_svfprintf_r+0x90a>
 8005e9e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005ea2:	9b02      	ldr	r3, [sp, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 82f7 	beq.w	8006498 <_svfprintf_r+0xf00>
 8005eaa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005eae:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005eb2:	2600      	movs	r6, #0
 8005eb4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005eb8:	9704      	str	r7, [sp, #16]
 8005eba:	e4e8      	b.n	800588e <_svfprintf_r+0x2f6>
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	e53f      	b.n	8005940 <_svfprintf_r+0x3a8>
 8005ec0:	2310      	movs	r3, #16
 8005ec2:	6063      	str	r3, [r4, #4]
 8005ec4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ec6:	3310      	adds	r3, #16
 8005ec8:	9321      	str	r3, [sp, #132]	; 0x84
 8005eca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ecc:	3301      	adds	r3, #1
 8005ece:	2b07      	cmp	r3, #7
 8005ed0:	9320      	str	r3, [sp, #128]	; 0x80
 8005ed2:	dc04      	bgt.n	8005ede <_svfprintf_r+0x946>
 8005ed4:	3408      	adds	r4, #8
 8005ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ed8:	3b10      	subs	r3, #16
 8005eda:	930c      	str	r3, [sp, #48]	; 0x30
 8005edc:	e615      	b.n	8005b0a <_svfprintf_r+0x572>
 8005ede:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ee0:	4651      	mov	r1, sl
 8005ee2:	4658      	mov	r0, fp
 8005ee4:	f001 fea8 	bl	8007c38 <__ssprint_r>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	f040 82b6 	bne.w	800645a <_svfprintf_r+0xec2>
 8005eee:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ef0:	e7f1      	b.n	8005ed6 <_svfprintf_r+0x93e>
 8005ef2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ef4:	4651      	mov	r1, sl
 8005ef6:	4658      	mov	r0, fp
 8005ef8:	f001 fe9e 	bl	8007c38 <__ssprint_r>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	f040 82ac 	bne.w	800645a <_svfprintf_r+0xec2>
 8005f02:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f04:	e614      	b.n	8005b30 <_svfprintf_r+0x598>
 8005f06:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f08:	4651      	mov	r1, sl
 8005f0a:	4658      	mov	r0, fp
 8005f0c:	f001 fe94 	bl	8007c38 <__ssprint_r>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f040 82a2 	bne.w	800645a <_svfprintf_r+0xec2>
 8005f16:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f18:	e61c      	b.n	8005b54 <_svfprintf_r+0x5bc>
 8005f1a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f1c:	4651      	mov	r1, sl
 8005f1e:	4658      	mov	r0, fp
 8005f20:	f001 fe8a 	bl	8007c38 <__ssprint_r>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	f040 8298 	bne.w	800645a <_svfprintf_r+0xec2>
 8005f2a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f2c:	e622      	b.n	8005b74 <_svfprintf_r+0x5dc>
 8005f2e:	2210      	movs	r2, #16
 8005f30:	6062      	str	r2, [r4, #4]
 8005f32:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f34:	3210      	adds	r2, #16
 8005f36:	9221      	str	r2, [sp, #132]	; 0x84
 8005f38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f3a:	3201      	adds	r2, #1
 8005f3c:	2a07      	cmp	r2, #7
 8005f3e:	9220      	str	r2, [sp, #128]	; 0x80
 8005f40:	dc02      	bgt.n	8005f48 <_svfprintf_r+0x9b0>
 8005f42:	3408      	adds	r4, #8
 8005f44:	3b10      	subs	r3, #16
 8005f46:	e61d      	b.n	8005b84 <_svfprintf_r+0x5ec>
 8005f48:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f4a:	4651      	mov	r1, sl
 8005f4c:	4658      	mov	r0, fp
 8005f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8005f50:	f001 fe72 	bl	8007c38 <__ssprint_r>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	f040 8280 	bne.w	800645a <_svfprintf_r+0xec2>
 8005f5a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f5e:	e7f1      	b.n	8005f44 <_svfprintf_r+0x9ac>
 8005f60:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f62:	4651      	mov	r1, sl
 8005f64:	4658      	mov	r0, fp
 8005f66:	f001 fe67 	bl	8007c38 <__ssprint_r>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	f040 8275 	bne.w	800645a <_svfprintf_r+0xec2>
 8005f70:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f72:	e617      	b.n	8005ba4 <_svfprintf_r+0x60c>
 8005f74:	2310      	movs	r3, #16
 8005f76:	6063      	str	r3, [r4, #4]
 8005f78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f7a:	3310      	adds	r3, #16
 8005f7c:	9321      	str	r3, [sp, #132]	; 0x84
 8005f7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f80:	3301      	adds	r3, #1
 8005f82:	2b07      	cmp	r3, #7
 8005f84:	9320      	str	r3, [sp, #128]	; 0x80
 8005f86:	dc02      	bgt.n	8005f8e <_svfprintf_r+0x9f6>
 8005f88:	3408      	adds	r4, #8
 8005f8a:	3e10      	subs	r6, #16
 8005f8c:	e60e      	b.n	8005bac <_svfprintf_r+0x614>
 8005f8e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f90:	4651      	mov	r1, sl
 8005f92:	4658      	mov	r0, fp
 8005f94:	f001 fe50 	bl	8007c38 <__ssprint_r>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	f040 825e 	bne.w	800645a <_svfprintf_r+0xec2>
 8005f9e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005fa0:	e7f3      	b.n	8005f8a <_svfprintf_r+0x9f2>
 8005fa2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005fa4:	4651      	mov	r1, sl
 8005fa6:	4658      	mov	r0, fp
 8005fa8:	f001 fe46 	bl	8007c38 <__ssprint_r>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	f040 8254 	bne.w	800645a <_svfprintf_r+0xec2>
 8005fb2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005fb4:	e60a      	b.n	8005bcc <_svfprintf_r+0x634>
 8005fb6:	9b02      	ldr	r3, [sp, #8]
 8005fb8:	2b65      	cmp	r3, #101	; 0x65
 8005fba:	f340 81a9 	ble.w	8006310 <_svfprintf_r+0xd78>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fc6:	f7fa fd9b 	bl	8000b00 <__aeabi_dcmpeq>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	d062      	beq.n	8006094 <_svfprintf_r+0xafc>
 8005fce:	4b2f      	ldr	r3, [pc, #188]	; (800608c <_svfprintf_r+0xaf4>)
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	6063      	str	r3, [r4, #4]
 8005fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fd8:	3301      	adds	r3, #1
 8005fda:	9321      	str	r3, [sp, #132]	; 0x84
 8005fdc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005fde:	3301      	adds	r3, #1
 8005fe0:	2b07      	cmp	r3, #7
 8005fe2:	9320      	str	r3, [sp, #128]	; 0x80
 8005fe4:	dc25      	bgt.n	8006032 <_svfprintf_r+0xa9a>
 8005fe6:	3408      	adds	r4, #8
 8005fe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fea:	9a03      	ldr	r2, [sp, #12]
 8005fec:	4293      	cmp	r3, r2
 8005fee:	db02      	blt.n	8005ff6 <_svfprintf_r+0xa5e>
 8005ff0:	07ee      	lsls	r6, r5, #31
 8005ff2:	f57f ae02 	bpl.w	8005bfa <_svfprintf_r+0x662>
 8005ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	9b08      	ldr	r3, [sp, #32]
 8005ffc:	6063      	str	r3, [r4, #4]
 8005ffe:	9a08      	ldr	r2, [sp, #32]
 8006000:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006002:	4413      	add	r3, r2
 8006004:	9321      	str	r3, [sp, #132]	; 0x84
 8006006:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006008:	3301      	adds	r3, #1
 800600a:	2b07      	cmp	r3, #7
 800600c:	9320      	str	r3, [sp, #128]	; 0x80
 800600e:	dc1a      	bgt.n	8006046 <_svfprintf_r+0xaae>
 8006010:	3408      	adds	r4, #8
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	1e5e      	subs	r6, r3, #1
 8006016:	2e00      	cmp	r6, #0
 8006018:	f77f adef 	ble.w	8005bfa <_svfprintf_r+0x662>
 800601c:	4f1c      	ldr	r7, [pc, #112]	; (8006090 <_svfprintf_r+0xaf8>)
 800601e:	f04f 0810 	mov.w	r8, #16
 8006022:	2e10      	cmp	r6, #16
 8006024:	6027      	str	r7, [r4, #0]
 8006026:	dc18      	bgt.n	800605a <_svfprintf_r+0xac2>
 8006028:	6066      	str	r6, [r4, #4]
 800602a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800602c:	441e      	add	r6, r3
 800602e:	9621      	str	r6, [sp, #132]	; 0x84
 8006030:	e5d4      	b.n	8005bdc <_svfprintf_r+0x644>
 8006032:	aa1f      	add	r2, sp, #124	; 0x7c
 8006034:	4651      	mov	r1, sl
 8006036:	4658      	mov	r0, fp
 8006038:	f001 fdfe 	bl	8007c38 <__ssprint_r>
 800603c:	2800      	cmp	r0, #0
 800603e:	f040 820c 	bne.w	800645a <_svfprintf_r+0xec2>
 8006042:	ac2c      	add	r4, sp, #176	; 0xb0
 8006044:	e7d0      	b.n	8005fe8 <_svfprintf_r+0xa50>
 8006046:	aa1f      	add	r2, sp, #124	; 0x7c
 8006048:	4651      	mov	r1, sl
 800604a:	4658      	mov	r0, fp
 800604c:	f001 fdf4 	bl	8007c38 <__ssprint_r>
 8006050:	2800      	cmp	r0, #0
 8006052:	f040 8202 	bne.w	800645a <_svfprintf_r+0xec2>
 8006056:	ac2c      	add	r4, sp, #176	; 0xb0
 8006058:	e7db      	b.n	8006012 <_svfprintf_r+0xa7a>
 800605a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800605c:	f8c4 8004 	str.w	r8, [r4, #4]
 8006060:	3310      	adds	r3, #16
 8006062:	9321      	str	r3, [sp, #132]	; 0x84
 8006064:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006066:	3301      	adds	r3, #1
 8006068:	2b07      	cmp	r3, #7
 800606a:	9320      	str	r3, [sp, #128]	; 0x80
 800606c:	dc02      	bgt.n	8006074 <_svfprintf_r+0xadc>
 800606e:	3408      	adds	r4, #8
 8006070:	3e10      	subs	r6, #16
 8006072:	e7d6      	b.n	8006022 <_svfprintf_r+0xa8a>
 8006074:	aa1f      	add	r2, sp, #124	; 0x7c
 8006076:	4651      	mov	r1, sl
 8006078:	4658      	mov	r0, fp
 800607a:	f001 fddd 	bl	8007c38 <__ssprint_r>
 800607e:	2800      	cmp	r0, #0
 8006080:	f040 81eb 	bne.w	800645a <_svfprintf_r+0xec2>
 8006084:	ac2c      	add	r4, sp, #176	; 0xb0
 8006086:	e7f3      	b.n	8006070 <_svfprintf_r+0xad8>
 8006088:	080084c1 	.word	0x080084c1
 800608c:	080084d2 	.word	0x080084d2
 8006090:	080084e4 	.word	0x080084e4
 8006094:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006096:	2b00      	cmp	r3, #0
 8006098:	dc7a      	bgt.n	8006190 <_svfprintf_r+0xbf8>
 800609a:	4b9b      	ldr	r3, [pc, #620]	; (8006308 <_svfprintf_r+0xd70>)
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	2301      	movs	r3, #1
 80060a0:	6063      	str	r3, [r4, #4]
 80060a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060a4:	3301      	adds	r3, #1
 80060a6:	9321      	str	r3, [sp, #132]	; 0x84
 80060a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060aa:	3301      	adds	r3, #1
 80060ac:	2b07      	cmp	r3, #7
 80060ae:	9320      	str	r3, [sp, #128]	; 0x80
 80060b0:	dc44      	bgt.n	800613c <_svfprintf_r+0xba4>
 80060b2:	3408      	adds	r4, #8
 80060b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060b6:	b923      	cbnz	r3, 80060c2 <_svfprintf_r+0xb2a>
 80060b8:	9b03      	ldr	r3, [sp, #12]
 80060ba:	b913      	cbnz	r3, 80060c2 <_svfprintf_r+0xb2a>
 80060bc:	07e8      	lsls	r0, r5, #31
 80060be:	f57f ad9c 	bpl.w	8005bfa <_svfprintf_r+0x662>
 80060c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	9b08      	ldr	r3, [sp, #32]
 80060c8:	6063      	str	r3, [r4, #4]
 80060ca:	9a08      	ldr	r2, [sp, #32]
 80060cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ce:	4413      	add	r3, r2
 80060d0:	9321      	str	r3, [sp, #132]	; 0x84
 80060d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060d4:	3301      	adds	r3, #1
 80060d6:	2b07      	cmp	r3, #7
 80060d8:	9320      	str	r3, [sp, #128]	; 0x80
 80060da:	dc39      	bgt.n	8006150 <_svfprintf_r+0xbb8>
 80060dc:	f104 0308 	add.w	r3, r4, #8
 80060e0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80060e2:	2e00      	cmp	r6, #0
 80060e4:	da19      	bge.n	800611a <_svfprintf_r+0xb82>
 80060e6:	4f89      	ldr	r7, [pc, #548]	; (800630c <_svfprintf_r+0xd74>)
 80060e8:	4276      	negs	r6, r6
 80060ea:	2410      	movs	r4, #16
 80060ec:	2e10      	cmp	r6, #16
 80060ee:	601f      	str	r7, [r3, #0]
 80060f0:	dc38      	bgt.n	8006164 <_svfprintf_r+0xbcc>
 80060f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060f4:	605e      	str	r6, [r3, #4]
 80060f6:	4416      	add	r6, r2
 80060f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80060fa:	9621      	str	r6, [sp, #132]	; 0x84
 80060fc:	3201      	adds	r2, #1
 80060fe:	2a07      	cmp	r2, #7
 8006100:	f103 0308 	add.w	r3, r3, #8
 8006104:	9220      	str	r2, [sp, #128]	; 0x80
 8006106:	dd08      	ble.n	800611a <_svfprintf_r+0xb82>
 8006108:	aa1f      	add	r2, sp, #124	; 0x7c
 800610a:	4651      	mov	r1, sl
 800610c:	4658      	mov	r0, fp
 800610e:	f001 fd93 	bl	8007c38 <__ssprint_r>
 8006112:	2800      	cmp	r0, #0
 8006114:	f040 81a1 	bne.w	800645a <_svfprintf_r+0xec2>
 8006118:	ab2c      	add	r3, sp, #176	; 0xb0
 800611a:	9a03      	ldr	r2, [sp, #12]
 800611c:	605a      	str	r2, [r3, #4]
 800611e:	9903      	ldr	r1, [sp, #12]
 8006120:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006122:	f8c3 8000 	str.w	r8, [r3]
 8006126:	440a      	add	r2, r1
 8006128:	9221      	str	r2, [sp, #132]	; 0x84
 800612a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800612c:	3201      	adds	r2, #1
 800612e:	2a07      	cmp	r2, #7
 8006130:	9220      	str	r2, [sp, #128]	; 0x80
 8006132:	f73f ad59 	bgt.w	8005be8 <_svfprintf_r+0x650>
 8006136:	f103 0408 	add.w	r4, r3, #8
 800613a:	e55e      	b.n	8005bfa <_svfprintf_r+0x662>
 800613c:	aa1f      	add	r2, sp, #124	; 0x7c
 800613e:	4651      	mov	r1, sl
 8006140:	4658      	mov	r0, fp
 8006142:	f001 fd79 	bl	8007c38 <__ssprint_r>
 8006146:	2800      	cmp	r0, #0
 8006148:	f040 8187 	bne.w	800645a <_svfprintf_r+0xec2>
 800614c:	ac2c      	add	r4, sp, #176	; 0xb0
 800614e:	e7b1      	b.n	80060b4 <_svfprintf_r+0xb1c>
 8006150:	aa1f      	add	r2, sp, #124	; 0x7c
 8006152:	4651      	mov	r1, sl
 8006154:	4658      	mov	r0, fp
 8006156:	f001 fd6f 	bl	8007c38 <__ssprint_r>
 800615a:	2800      	cmp	r0, #0
 800615c:	f040 817d 	bne.w	800645a <_svfprintf_r+0xec2>
 8006160:	ab2c      	add	r3, sp, #176	; 0xb0
 8006162:	e7bd      	b.n	80060e0 <_svfprintf_r+0xb48>
 8006164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006166:	605c      	str	r4, [r3, #4]
 8006168:	3210      	adds	r2, #16
 800616a:	9221      	str	r2, [sp, #132]	; 0x84
 800616c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800616e:	3201      	adds	r2, #1
 8006170:	2a07      	cmp	r2, #7
 8006172:	9220      	str	r2, [sp, #128]	; 0x80
 8006174:	dc02      	bgt.n	800617c <_svfprintf_r+0xbe4>
 8006176:	3308      	adds	r3, #8
 8006178:	3e10      	subs	r6, #16
 800617a:	e7b7      	b.n	80060ec <_svfprintf_r+0xb54>
 800617c:	aa1f      	add	r2, sp, #124	; 0x7c
 800617e:	4651      	mov	r1, sl
 8006180:	4658      	mov	r0, fp
 8006182:	f001 fd59 	bl	8007c38 <__ssprint_r>
 8006186:	2800      	cmp	r0, #0
 8006188:	f040 8167 	bne.w	800645a <_svfprintf_r+0xec2>
 800618c:	ab2c      	add	r3, sp, #176	; 0xb0
 800618e:	e7f3      	b.n	8006178 <_svfprintf_r+0xbe0>
 8006190:	9b03      	ldr	r3, [sp, #12]
 8006192:	42bb      	cmp	r3, r7
 8006194:	bfa8      	it	ge
 8006196:	463b      	movge	r3, r7
 8006198:	2b00      	cmp	r3, #0
 800619a:	461e      	mov	r6, r3
 800619c:	dd0b      	ble.n	80061b6 <_svfprintf_r+0xc1e>
 800619e:	6063      	str	r3, [r4, #4]
 80061a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061a2:	f8c4 8000 	str.w	r8, [r4]
 80061a6:	4433      	add	r3, r6
 80061a8:	9321      	str	r3, [sp, #132]	; 0x84
 80061aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061ac:	3301      	adds	r3, #1
 80061ae:	2b07      	cmp	r3, #7
 80061b0:	9320      	str	r3, [sp, #128]	; 0x80
 80061b2:	dc5f      	bgt.n	8006274 <_svfprintf_r+0xcdc>
 80061b4:	3408      	adds	r4, #8
 80061b6:	2e00      	cmp	r6, #0
 80061b8:	bfac      	ite	ge
 80061ba:	1bbe      	subge	r6, r7, r6
 80061bc:	463e      	movlt	r6, r7
 80061be:	2e00      	cmp	r6, #0
 80061c0:	dd0f      	ble.n	80061e2 <_svfprintf_r+0xc4a>
 80061c2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800630c <_svfprintf_r+0xd74>
 80061c6:	f8c4 9000 	str.w	r9, [r4]
 80061ca:	2e10      	cmp	r6, #16
 80061cc:	dc5c      	bgt.n	8006288 <_svfprintf_r+0xcf0>
 80061ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061d0:	6066      	str	r6, [r4, #4]
 80061d2:	441e      	add	r6, r3
 80061d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061d6:	9621      	str	r6, [sp, #132]	; 0x84
 80061d8:	3301      	adds	r3, #1
 80061da:	2b07      	cmp	r3, #7
 80061dc:	9320      	str	r3, [sp, #128]	; 0x80
 80061de:	dc6a      	bgt.n	80062b6 <_svfprintf_r+0xd1e>
 80061e0:	3408      	adds	r4, #8
 80061e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061e4:	9a03      	ldr	r2, [sp, #12]
 80061e6:	4293      	cmp	r3, r2
 80061e8:	db01      	blt.n	80061ee <_svfprintf_r+0xc56>
 80061ea:	07e9      	lsls	r1, r5, #31
 80061ec:	d50d      	bpl.n	800620a <_svfprintf_r+0xc72>
 80061ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	9b08      	ldr	r3, [sp, #32]
 80061f4:	6063      	str	r3, [r4, #4]
 80061f6:	9a08      	ldr	r2, [sp, #32]
 80061f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061fa:	4413      	add	r3, r2
 80061fc:	9321      	str	r3, [sp, #132]	; 0x84
 80061fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006200:	3301      	adds	r3, #1
 8006202:	2b07      	cmp	r3, #7
 8006204:	9320      	str	r3, [sp, #128]	; 0x80
 8006206:	dc60      	bgt.n	80062ca <_svfprintf_r+0xd32>
 8006208:	3408      	adds	r4, #8
 800620a:	9b03      	ldr	r3, [sp, #12]
 800620c:	9a03      	ldr	r2, [sp, #12]
 800620e:	1bde      	subs	r6, r3, r7
 8006210:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	429e      	cmp	r6, r3
 8006216:	bfa8      	it	ge
 8006218:	461e      	movge	r6, r3
 800621a:	2e00      	cmp	r6, #0
 800621c:	dd0b      	ble.n	8006236 <_svfprintf_r+0xc9e>
 800621e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006220:	6066      	str	r6, [r4, #4]
 8006222:	4433      	add	r3, r6
 8006224:	9321      	str	r3, [sp, #132]	; 0x84
 8006226:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006228:	3301      	adds	r3, #1
 800622a:	4447      	add	r7, r8
 800622c:	2b07      	cmp	r3, #7
 800622e:	6027      	str	r7, [r4, #0]
 8006230:	9320      	str	r3, [sp, #128]	; 0x80
 8006232:	dc54      	bgt.n	80062de <_svfprintf_r+0xd46>
 8006234:	3408      	adds	r4, #8
 8006236:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006238:	9a03      	ldr	r2, [sp, #12]
 800623a:	2e00      	cmp	r6, #0
 800623c:	eba2 0303 	sub.w	r3, r2, r3
 8006240:	bfac      	ite	ge
 8006242:	1b9e      	subge	r6, r3, r6
 8006244:	461e      	movlt	r6, r3
 8006246:	2e00      	cmp	r6, #0
 8006248:	f77f acd7 	ble.w	8005bfa <_svfprintf_r+0x662>
 800624c:	4f2f      	ldr	r7, [pc, #188]	; (800630c <_svfprintf_r+0xd74>)
 800624e:	f04f 0810 	mov.w	r8, #16
 8006252:	2e10      	cmp	r6, #16
 8006254:	6027      	str	r7, [r4, #0]
 8006256:	f77f aee7 	ble.w	8006028 <_svfprintf_r+0xa90>
 800625a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800625c:	f8c4 8004 	str.w	r8, [r4, #4]
 8006260:	3310      	adds	r3, #16
 8006262:	9321      	str	r3, [sp, #132]	; 0x84
 8006264:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006266:	3301      	adds	r3, #1
 8006268:	2b07      	cmp	r3, #7
 800626a:	9320      	str	r3, [sp, #128]	; 0x80
 800626c:	dc41      	bgt.n	80062f2 <_svfprintf_r+0xd5a>
 800626e:	3408      	adds	r4, #8
 8006270:	3e10      	subs	r6, #16
 8006272:	e7ee      	b.n	8006252 <_svfprintf_r+0xcba>
 8006274:	aa1f      	add	r2, sp, #124	; 0x7c
 8006276:	4651      	mov	r1, sl
 8006278:	4658      	mov	r0, fp
 800627a:	f001 fcdd 	bl	8007c38 <__ssprint_r>
 800627e:	2800      	cmp	r0, #0
 8006280:	f040 80eb 	bne.w	800645a <_svfprintf_r+0xec2>
 8006284:	ac2c      	add	r4, sp, #176	; 0xb0
 8006286:	e796      	b.n	80061b6 <_svfprintf_r+0xc1e>
 8006288:	2310      	movs	r3, #16
 800628a:	6063      	str	r3, [r4, #4]
 800628c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800628e:	3310      	adds	r3, #16
 8006290:	9321      	str	r3, [sp, #132]	; 0x84
 8006292:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006294:	3301      	adds	r3, #1
 8006296:	2b07      	cmp	r3, #7
 8006298:	9320      	str	r3, [sp, #128]	; 0x80
 800629a:	dc02      	bgt.n	80062a2 <_svfprintf_r+0xd0a>
 800629c:	3408      	adds	r4, #8
 800629e:	3e10      	subs	r6, #16
 80062a0:	e791      	b.n	80061c6 <_svfprintf_r+0xc2e>
 80062a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80062a4:	4651      	mov	r1, sl
 80062a6:	4658      	mov	r0, fp
 80062a8:	f001 fcc6 	bl	8007c38 <__ssprint_r>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	f040 80d4 	bne.w	800645a <_svfprintf_r+0xec2>
 80062b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80062b4:	e7f3      	b.n	800629e <_svfprintf_r+0xd06>
 80062b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80062b8:	4651      	mov	r1, sl
 80062ba:	4658      	mov	r0, fp
 80062bc:	f001 fcbc 	bl	8007c38 <__ssprint_r>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	f040 80ca 	bne.w	800645a <_svfprintf_r+0xec2>
 80062c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80062c8:	e78b      	b.n	80061e2 <_svfprintf_r+0xc4a>
 80062ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80062cc:	4651      	mov	r1, sl
 80062ce:	4658      	mov	r0, fp
 80062d0:	f001 fcb2 	bl	8007c38 <__ssprint_r>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	f040 80c0 	bne.w	800645a <_svfprintf_r+0xec2>
 80062da:	ac2c      	add	r4, sp, #176	; 0xb0
 80062dc:	e795      	b.n	800620a <_svfprintf_r+0xc72>
 80062de:	aa1f      	add	r2, sp, #124	; 0x7c
 80062e0:	4651      	mov	r1, sl
 80062e2:	4658      	mov	r0, fp
 80062e4:	f001 fca8 	bl	8007c38 <__ssprint_r>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	f040 80b6 	bne.w	800645a <_svfprintf_r+0xec2>
 80062ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80062f0:	e7a1      	b.n	8006236 <_svfprintf_r+0xc9e>
 80062f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80062f4:	4651      	mov	r1, sl
 80062f6:	4658      	mov	r0, fp
 80062f8:	f001 fc9e 	bl	8007c38 <__ssprint_r>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	f040 80ac 	bne.w	800645a <_svfprintf_r+0xec2>
 8006302:	ac2c      	add	r4, sp, #176	; 0xb0
 8006304:	e7b4      	b.n	8006270 <_svfprintf_r+0xcd8>
 8006306:	bf00      	nop
 8006308:	080084d2 	.word	0x080084d2
 800630c:	080084e4 	.word	0x080084e4
 8006310:	9b03      	ldr	r3, [sp, #12]
 8006312:	2b01      	cmp	r3, #1
 8006314:	dc01      	bgt.n	800631a <_svfprintf_r+0xd82>
 8006316:	07ea      	lsls	r2, r5, #31
 8006318:	d576      	bpl.n	8006408 <_svfprintf_r+0xe70>
 800631a:	2301      	movs	r3, #1
 800631c:	6063      	str	r3, [r4, #4]
 800631e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006320:	f8c4 8000 	str.w	r8, [r4]
 8006324:	3301      	adds	r3, #1
 8006326:	9321      	str	r3, [sp, #132]	; 0x84
 8006328:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800632a:	3301      	adds	r3, #1
 800632c:	2b07      	cmp	r3, #7
 800632e:	9320      	str	r3, [sp, #128]	; 0x80
 8006330:	dc36      	bgt.n	80063a0 <_svfprintf_r+0xe08>
 8006332:	3408      	adds	r4, #8
 8006334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	9b08      	ldr	r3, [sp, #32]
 800633a:	6063      	str	r3, [r4, #4]
 800633c:	9a08      	ldr	r2, [sp, #32]
 800633e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006340:	4413      	add	r3, r2
 8006342:	9321      	str	r3, [sp, #132]	; 0x84
 8006344:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006346:	3301      	adds	r3, #1
 8006348:	2b07      	cmp	r3, #7
 800634a:	9320      	str	r3, [sp, #128]	; 0x80
 800634c:	dc31      	bgt.n	80063b2 <_svfprintf_r+0xe1a>
 800634e:	3408      	adds	r4, #8
 8006350:	2300      	movs	r3, #0
 8006352:	2200      	movs	r2, #0
 8006354:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006358:	f7fa fbd2 	bl	8000b00 <__aeabi_dcmpeq>
 800635c:	9b03      	ldr	r3, [sp, #12]
 800635e:	1e5e      	subs	r6, r3, #1
 8006360:	2800      	cmp	r0, #0
 8006362:	d12f      	bne.n	80063c4 <_svfprintf_r+0xe2c>
 8006364:	f108 0301 	add.w	r3, r8, #1
 8006368:	e884 0048 	stmia.w	r4, {r3, r6}
 800636c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800636e:	9a03      	ldr	r2, [sp, #12]
 8006370:	3b01      	subs	r3, #1
 8006372:	4413      	add	r3, r2
 8006374:	9321      	str	r3, [sp, #132]	; 0x84
 8006376:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006378:	3301      	adds	r3, #1
 800637a:	2b07      	cmp	r3, #7
 800637c:	9320      	str	r3, [sp, #128]	; 0x80
 800637e:	dd4a      	ble.n	8006416 <_svfprintf_r+0xe7e>
 8006380:	aa1f      	add	r2, sp, #124	; 0x7c
 8006382:	4651      	mov	r1, sl
 8006384:	4658      	mov	r0, fp
 8006386:	f001 fc57 	bl	8007c38 <__ssprint_r>
 800638a:	2800      	cmp	r0, #0
 800638c:	d165      	bne.n	800645a <_svfprintf_r+0xec2>
 800638e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006390:	ab1b      	add	r3, sp, #108	; 0x6c
 8006392:	6023      	str	r3, [r4, #0]
 8006394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006396:	6063      	str	r3, [r4, #4]
 8006398:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800639a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800639c:	4413      	add	r3, r2
 800639e:	e41c      	b.n	8005bda <_svfprintf_r+0x642>
 80063a0:	aa1f      	add	r2, sp, #124	; 0x7c
 80063a2:	4651      	mov	r1, sl
 80063a4:	4658      	mov	r0, fp
 80063a6:	f001 fc47 	bl	8007c38 <__ssprint_r>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d155      	bne.n	800645a <_svfprintf_r+0xec2>
 80063ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80063b0:	e7c0      	b.n	8006334 <_svfprintf_r+0xd9c>
 80063b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80063b4:	4651      	mov	r1, sl
 80063b6:	4658      	mov	r0, fp
 80063b8:	f001 fc3e 	bl	8007c38 <__ssprint_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d14c      	bne.n	800645a <_svfprintf_r+0xec2>
 80063c0:	ac2c      	add	r4, sp, #176	; 0xb0
 80063c2:	e7c5      	b.n	8006350 <_svfprintf_r+0xdb8>
 80063c4:	2e00      	cmp	r6, #0
 80063c6:	dde3      	ble.n	8006390 <_svfprintf_r+0xdf8>
 80063c8:	4f59      	ldr	r7, [pc, #356]	; (8006530 <_svfprintf_r+0xf98>)
 80063ca:	f04f 0810 	mov.w	r8, #16
 80063ce:	2e10      	cmp	r6, #16
 80063d0:	6027      	str	r7, [r4, #0]
 80063d2:	dc04      	bgt.n	80063de <_svfprintf_r+0xe46>
 80063d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063d6:	6066      	str	r6, [r4, #4]
 80063d8:	441e      	add	r6, r3
 80063da:	9621      	str	r6, [sp, #132]	; 0x84
 80063dc:	e7cb      	b.n	8006376 <_svfprintf_r+0xdde>
 80063de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063e0:	f8c4 8004 	str.w	r8, [r4, #4]
 80063e4:	3310      	adds	r3, #16
 80063e6:	9321      	str	r3, [sp, #132]	; 0x84
 80063e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063ea:	3301      	adds	r3, #1
 80063ec:	2b07      	cmp	r3, #7
 80063ee:	9320      	str	r3, [sp, #128]	; 0x80
 80063f0:	dc02      	bgt.n	80063f8 <_svfprintf_r+0xe60>
 80063f2:	3408      	adds	r4, #8
 80063f4:	3e10      	subs	r6, #16
 80063f6:	e7ea      	b.n	80063ce <_svfprintf_r+0xe36>
 80063f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80063fa:	4651      	mov	r1, sl
 80063fc:	4658      	mov	r0, fp
 80063fe:	f001 fc1b 	bl	8007c38 <__ssprint_r>
 8006402:	bb50      	cbnz	r0, 800645a <_svfprintf_r+0xec2>
 8006404:	ac2c      	add	r4, sp, #176	; 0xb0
 8006406:	e7f5      	b.n	80063f4 <_svfprintf_r+0xe5c>
 8006408:	2301      	movs	r3, #1
 800640a:	6063      	str	r3, [r4, #4]
 800640c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800640e:	f8c4 8000 	str.w	r8, [r4]
 8006412:	3301      	adds	r3, #1
 8006414:	e7ae      	b.n	8006374 <_svfprintf_r+0xddc>
 8006416:	3408      	adds	r4, #8
 8006418:	e7ba      	b.n	8006390 <_svfprintf_r+0xdf8>
 800641a:	3408      	adds	r4, #8
 800641c:	f7ff bbed 	b.w	8005bfa <_svfprintf_r+0x662>
 8006420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006422:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006424:	1a9d      	subs	r5, r3, r2
 8006426:	2d00      	cmp	r5, #0
 8006428:	f77f abea 	ble.w	8005c00 <_svfprintf_r+0x668>
 800642c:	2610      	movs	r6, #16
 800642e:	4b41      	ldr	r3, [pc, #260]	; (8006534 <_svfprintf_r+0xf9c>)
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	2d10      	cmp	r5, #16
 8006434:	dc1b      	bgt.n	800646e <_svfprintf_r+0xed6>
 8006436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006438:	6065      	str	r5, [r4, #4]
 800643a:	441d      	add	r5, r3
 800643c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800643e:	9521      	str	r5, [sp, #132]	; 0x84
 8006440:	3301      	adds	r3, #1
 8006442:	2b07      	cmp	r3, #7
 8006444:	9320      	str	r3, [sp, #128]	; 0x80
 8006446:	f77f abdb 	ble.w	8005c00 <_svfprintf_r+0x668>
 800644a:	aa1f      	add	r2, sp, #124	; 0x7c
 800644c:	4651      	mov	r1, sl
 800644e:	4658      	mov	r0, fp
 8006450:	f001 fbf2 	bl	8007c38 <__ssprint_r>
 8006454:	2800      	cmp	r0, #0
 8006456:	f43f abd3 	beq.w	8005c00 <_svfprintf_r+0x668>
 800645a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800645e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006464:	bf18      	it	ne
 8006466:	f04f 33ff 	movne.w	r3, #4294967295
 800646a:	f7ff b8b9 	b.w	80055e0 <_svfprintf_r+0x48>
 800646e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006470:	6066      	str	r6, [r4, #4]
 8006472:	3310      	adds	r3, #16
 8006474:	9321      	str	r3, [sp, #132]	; 0x84
 8006476:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006478:	3301      	adds	r3, #1
 800647a:	2b07      	cmp	r3, #7
 800647c:	9320      	str	r3, [sp, #128]	; 0x80
 800647e:	dc02      	bgt.n	8006486 <_svfprintf_r+0xeee>
 8006480:	3408      	adds	r4, #8
 8006482:	3d10      	subs	r5, #16
 8006484:	e7d3      	b.n	800642e <_svfprintf_r+0xe96>
 8006486:	aa1f      	add	r2, sp, #124	; 0x7c
 8006488:	4651      	mov	r1, sl
 800648a:	4658      	mov	r0, fp
 800648c:	f001 fbd4 	bl	8007c38 <__ssprint_r>
 8006490:	2800      	cmp	r0, #0
 8006492:	d1e2      	bne.n	800645a <_svfprintf_r+0xec2>
 8006494:	ac2c      	add	r4, sp, #176	; 0xb0
 8006496:	e7f4      	b.n	8006482 <_svfprintf_r+0xeea>
 8006498:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0dd      	beq.n	800645a <_svfprintf_r+0xec2>
 800649e:	aa1f      	add	r2, sp, #124	; 0x7c
 80064a0:	4651      	mov	r1, sl
 80064a2:	4658      	mov	r0, fp
 80064a4:	f001 fbc8 	bl	8007c38 <__ssprint_r>
 80064a8:	e7d7      	b.n	800645a <_svfprintf_r+0xec2>
 80064aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064ae:	4610      	mov	r0, r2
 80064b0:	4619      	mov	r1, r3
 80064b2:	f7fa fb57 	bl	8000b64 <__aeabi_dcmpun>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	f43f aa44 	beq.w	8005944 <_svfprintf_r+0x3ac>
 80064bc:	4b1e      	ldr	r3, [pc, #120]	; (8006538 <_svfprintf_r+0xfa0>)
 80064be:	4a1f      	ldr	r2, [pc, #124]	; (800653c <_svfprintf_r+0xfa4>)
 80064c0:	f7ff ba34 	b.w	800592c <_svfprintf_r+0x394>
 80064c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064c6:	eba3 0308 	sub.w	r3, r3, r8
 80064ca:	9303      	str	r3, [sp, #12]
 80064cc:	f7ff bab5 	b.w	8005a3a <_svfprintf_r+0x4a2>
 80064d0:	ea56 0207 	orrs.w	r2, r6, r7
 80064d4:	950b      	str	r5, [sp, #44]	; 0x2c
 80064d6:	f43f ac2b 	beq.w	8005d30 <_svfprintf_r+0x798>
 80064da:	2b01      	cmp	r3, #1
 80064dc:	f43f ac9d 	beq.w	8005e1a <_svfprintf_r+0x882>
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	f43f acbd 	beq.w	8005e60 <_svfprintf_r+0x8c8>
 80064e6:	ab2c      	add	r3, sp, #176	; 0xb0
 80064e8:	08f1      	lsrs	r1, r6, #3
 80064ea:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80064ee:	08f8      	lsrs	r0, r7, #3
 80064f0:	f006 0207 	and.w	r2, r6, #7
 80064f4:	4607      	mov	r7, r0
 80064f6:	460e      	mov	r6, r1
 80064f8:	3230      	adds	r2, #48	; 0x30
 80064fa:	ea56 0107 	orrs.w	r1, r6, r7
 80064fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8006502:	f803 2c01 	strb.w	r2, [r3, #-1]
 8006506:	f47f ac86 	bne.w	8005e16 <_svfprintf_r+0x87e>
 800650a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800650c:	07c9      	lsls	r1, r1, #31
 800650e:	d506      	bpl.n	800651e <_svfprintf_r+0xf86>
 8006510:	2a30      	cmp	r2, #48	; 0x30
 8006512:	d004      	beq.n	800651e <_svfprintf_r+0xf86>
 8006514:	2230      	movs	r2, #48	; 0x30
 8006516:	f808 2c01 	strb.w	r2, [r8, #-1]
 800651a:	f1a3 0802 	sub.w	r8, r3, #2
 800651e:	464e      	mov	r6, r9
 8006520:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006524:	eba9 0908 	sub.w	r9, r9, r8
 8006528:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800652a:	2700      	movs	r7, #0
 800652c:	f7ff bad1 	b.w	8005ad2 <_svfprintf_r+0x53a>
 8006530:	080084e4 	.word	0x080084e4
 8006534:	080084d4 	.word	0x080084d4
 8006538:	080084a8 	.word	0x080084a8
 800653c:	080084ac 	.word	0x080084ac

08006540 <quorem>:
 8006540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	6903      	ldr	r3, [r0, #16]
 8006546:	690c      	ldr	r4, [r1, #16]
 8006548:	429c      	cmp	r4, r3
 800654a:	4680      	mov	r8, r0
 800654c:	f300 8082 	bgt.w	8006654 <quorem+0x114>
 8006550:	3c01      	subs	r4, #1
 8006552:	f101 0714 	add.w	r7, r1, #20
 8006556:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800655a:	f100 0614 	add.w	r6, r0, #20
 800655e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006562:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006566:	eb06 030e 	add.w	r3, r6, lr
 800656a:	3501      	adds	r5, #1
 800656c:	eb07 090e 	add.w	r9, r7, lr
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	fbb0 f5f5 	udiv	r5, r0, r5
 8006576:	b395      	cbz	r5, 80065de <quorem+0x9e>
 8006578:	f04f 0a00 	mov.w	sl, #0
 800657c:	4638      	mov	r0, r7
 800657e:	46b4      	mov	ip, r6
 8006580:	46d3      	mov	fp, sl
 8006582:	f850 2b04 	ldr.w	r2, [r0], #4
 8006586:	b293      	uxth	r3, r2
 8006588:	fb05 a303 	mla	r3, r5, r3, sl
 800658c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006590:	b29b      	uxth	r3, r3
 8006592:	ebab 0303 	sub.w	r3, fp, r3
 8006596:	0c12      	lsrs	r2, r2, #16
 8006598:	f8bc b000 	ldrh.w	fp, [ip]
 800659c:	fb05 a202 	mla	r2, r5, r2, sl
 80065a0:	fa13 f38b 	uxtah	r3, r3, fp
 80065a4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80065a8:	fa1f fb82 	uxth.w	fp, r2
 80065ac:	f8dc 2000 	ldr.w	r2, [ip]
 80065b0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80065b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065be:	4581      	cmp	r9, r0
 80065c0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80065c4:	f84c 3b04 	str.w	r3, [ip], #4
 80065c8:	d2db      	bcs.n	8006582 <quorem+0x42>
 80065ca:	f856 300e 	ldr.w	r3, [r6, lr]
 80065ce:	b933      	cbnz	r3, 80065de <quorem+0x9e>
 80065d0:	9b01      	ldr	r3, [sp, #4]
 80065d2:	3b04      	subs	r3, #4
 80065d4:	429e      	cmp	r6, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	d330      	bcc.n	800663c <quorem+0xfc>
 80065da:	f8c8 4010 	str.w	r4, [r8, #16]
 80065de:	4640      	mov	r0, r8
 80065e0:	f001 fa53 	bl	8007a8a <__mcmp>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	db25      	blt.n	8006634 <quorem+0xf4>
 80065e8:	3501      	adds	r5, #1
 80065ea:	4630      	mov	r0, r6
 80065ec:	f04f 0e00 	mov.w	lr, #0
 80065f0:	f857 2b04 	ldr.w	r2, [r7], #4
 80065f4:	f8d0 c000 	ldr.w	ip, [r0]
 80065f8:	b293      	uxth	r3, r2
 80065fa:	ebae 0303 	sub.w	r3, lr, r3
 80065fe:	0c12      	lsrs	r2, r2, #16
 8006600:	fa13 f38c 	uxtah	r3, r3, ip
 8006604:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800660c:	b29b      	uxth	r3, r3
 800660e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006612:	45b9      	cmp	r9, r7
 8006614:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006618:	f840 3b04 	str.w	r3, [r0], #4
 800661c:	d2e8      	bcs.n	80065f0 <quorem+0xb0>
 800661e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006622:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006626:	b92a      	cbnz	r2, 8006634 <quorem+0xf4>
 8006628:	3b04      	subs	r3, #4
 800662a:	429e      	cmp	r6, r3
 800662c:	461a      	mov	r2, r3
 800662e:	d30b      	bcc.n	8006648 <quorem+0x108>
 8006630:	f8c8 4010 	str.w	r4, [r8, #16]
 8006634:	4628      	mov	r0, r5
 8006636:	b003      	add	sp, #12
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	3b04      	subs	r3, #4
 8006640:	2a00      	cmp	r2, #0
 8006642:	d1ca      	bne.n	80065da <quorem+0x9a>
 8006644:	3c01      	subs	r4, #1
 8006646:	e7c5      	b.n	80065d4 <quorem+0x94>
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	3b04      	subs	r3, #4
 800664c:	2a00      	cmp	r2, #0
 800664e:	d1ef      	bne.n	8006630 <quorem+0xf0>
 8006650:	3c01      	subs	r4, #1
 8006652:	e7ea      	b.n	800662a <quorem+0xea>
 8006654:	2000      	movs	r0, #0
 8006656:	e7ee      	b.n	8006636 <quorem+0xf6>

08006658 <_dtoa_r>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	ec57 6b10 	vmov	r6, r7, d0
 8006660:	b097      	sub	sp, #92	; 0x5c
 8006662:	e9cd 6700 	strd	r6, r7, [sp]
 8006666:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006668:	9107      	str	r1, [sp, #28]
 800666a:	4604      	mov	r4, r0
 800666c:	920a      	str	r2, [sp, #40]	; 0x28
 800666e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006670:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006672:	b93e      	cbnz	r6, 8006684 <_dtoa_r+0x2c>
 8006674:	2010      	movs	r0, #16
 8006676:	f000 fdcb 	bl	8007210 <malloc>
 800667a:	6260      	str	r0, [r4, #36]	; 0x24
 800667c:	6046      	str	r6, [r0, #4]
 800667e:	6086      	str	r6, [r0, #8]
 8006680:	6006      	str	r6, [r0, #0]
 8006682:	60c6      	str	r6, [r0, #12]
 8006684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006686:	6819      	ldr	r1, [r3, #0]
 8006688:	b151      	cbz	r1, 80066a0 <_dtoa_r+0x48>
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	604a      	str	r2, [r1, #4]
 800668e:	2301      	movs	r3, #1
 8006690:	4093      	lsls	r3, r2
 8006692:	608b      	str	r3, [r1, #8]
 8006694:	4620      	mov	r0, r4
 8006696:	f001 f823 	bl	80076e0 <_Bfree>
 800669a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	9b01      	ldr	r3, [sp, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	bfbf      	itttt	lt
 80066a6:	2301      	movlt	r3, #1
 80066a8:	602b      	strlt	r3, [r5, #0]
 80066aa:	9b01      	ldrlt	r3, [sp, #4]
 80066ac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80066b0:	bfb2      	itee	lt
 80066b2:	9301      	strlt	r3, [sp, #4]
 80066b4:	2300      	movge	r3, #0
 80066b6:	602b      	strge	r3, [r5, #0]
 80066b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80066bc:	4ba8      	ldr	r3, [pc, #672]	; (8006960 <_dtoa_r+0x308>)
 80066be:	ea33 0308 	bics.w	r3, r3, r8
 80066c2:	d11b      	bne.n	80066fc <_dtoa_r+0xa4>
 80066c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	9b00      	ldr	r3, [sp, #0]
 80066ce:	b923      	cbnz	r3, 80066da <_dtoa_r+0x82>
 80066d0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f000 8578 	beq.w	80071ca <_dtoa_r+0xb72>
 80066da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066dc:	b953      	cbnz	r3, 80066f4 <_dtoa_r+0x9c>
 80066de:	4ba1      	ldr	r3, [pc, #644]	; (8006964 <_dtoa_r+0x30c>)
 80066e0:	e021      	b.n	8006726 <_dtoa_r+0xce>
 80066e2:	4ba1      	ldr	r3, [pc, #644]	; (8006968 <_dtoa_r+0x310>)
 80066e4:	9302      	str	r3, [sp, #8]
 80066e6:	3308      	adds	r3, #8
 80066e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	9802      	ldr	r0, [sp, #8]
 80066ee:	b017      	add	sp, #92	; 0x5c
 80066f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f4:	4b9b      	ldr	r3, [pc, #620]	; (8006964 <_dtoa_r+0x30c>)
 80066f6:	9302      	str	r3, [sp, #8]
 80066f8:	3303      	adds	r3, #3
 80066fa:	e7f5      	b.n	80066e8 <_dtoa_r+0x90>
 80066fc:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006700:	2200      	movs	r2, #0
 8006702:	2300      	movs	r3, #0
 8006704:	4630      	mov	r0, r6
 8006706:	4639      	mov	r1, r7
 8006708:	f7fa f9fa 	bl	8000b00 <__aeabi_dcmpeq>
 800670c:	4681      	mov	r9, r0
 800670e:	b160      	cbz	r0, 800672a <_dtoa_r+0xd2>
 8006710:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006712:	2301      	movs	r3, #1
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8553 	beq.w	80071c4 <_dtoa_r+0xb6c>
 800671e:	4b93      	ldr	r3, [pc, #588]	; (800696c <_dtoa_r+0x314>)
 8006720:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	3b01      	subs	r3, #1
 8006726:	9302      	str	r3, [sp, #8]
 8006728:	e7e0      	b.n	80066ec <_dtoa_r+0x94>
 800672a:	aa14      	add	r2, sp, #80	; 0x50
 800672c:	a915      	add	r1, sp, #84	; 0x54
 800672e:	ec47 6b10 	vmov	d0, r6, r7
 8006732:	4620      	mov	r0, r4
 8006734:	f001 fa21 	bl	8007b7a <__d2b>
 8006738:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800673c:	4682      	mov	sl, r0
 800673e:	2d00      	cmp	r5, #0
 8006740:	d07e      	beq.n	8006840 <_dtoa_r+0x1e8>
 8006742:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006746:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800674a:	4630      	mov	r0, r6
 800674c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006750:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006754:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8006758:	2200      	movs	r2, #0
 800675a:	4b85      	ldr	r3, [pc, #532]	; (8006970 <_dtoa_r+0x318>)
 800675c:	f7f9 fdb4 	bl	80002c8 <__aeabi_dsub>
 8006760:	a379      	add	r3, pc, #484	; (adr r3, 8006948 <_dtoa_r+0x2f0>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 ff63 	bl	8000630 <__aeabi_dmul>
 800676a:	a379      	add	r3, pc, #484	; (adr r3, 8006950 <_dtoa_r+0x2f8>)
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f7f9 fdac 	bl	80002cc <__adddf3>
 8006774:	4606      	mov	r6, r0
 8006776:	4628      	mov	r0, r5
 8006778:	460f      	mov	r7, r1
 800677a:	f7f9 fef3 	bl	8000564 <__aeabi_i2d>
 800677e:	a376      	add	r3, pc, #472	; (adr r3, 8006958 <_dtoa_r+0x300>)
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f7f9 ff54 	bl	8000630 <__aeabi_dmul>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4630      	mov	r0, r6
 800678e:	4639      	mov	r1, r7
 8006790:	f7f9 fd9c 	bl	80002cc <__adddf3>
 8006794:	4606      	mov	r6, r0
 8006796:	460f      	mov	r7, r1
 8006798:	f7fa f9fa 	bl	8000b90 <__aeabi_d2iz>
 800679c:	2200      	movs	r2, #0
 800679e:	4683      	mov	fp, r0
 80067a0:	2300      	movs	r3, #0
 80067a2:	4630      	mov	r0, r6
 80067a4:	4639      	mov	r1, r7
 80067a6:	f7fa f9b5 	bl	8000b14 <__aeabi_dcmplt>
 80067aa:	b158      	cbz	r0, 80067c4 <_dtoa_r+0x16c>
 80067ac:	4658      	mov	r0, fp
 80067ae:	f7f9 fed9 	bl	8000564 <__aeabi_i2d>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4630      	mov	r0, r6
 80067b8:	4639      	mov	r1, r7
 80067ba:	f7fa f9a1 	bl	8000b00 <__aeabi_dcmpeq>
 80067be:	b908      	cbnz	r0, 80067c4 <_dtoa_r+0x16c>
 80067c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067c4:	f1bb 0f16 	cmp.w	fp, #22
 80067c8:	d859      	bhi.n	800687e <_dtoa_r+0x226>
 80067ca:	496a      	ldr	r1, [pc, #424]	; (8006974 <_dtoa_r+0x31c>)
 80067cc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80067d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067d8:	f7fa f9ba 	bl	8000b50 <__aeabi_dcmpgt>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d050      	beq.n	8006882 <_dtoa_r+0x22a>
 80067e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067e4:	2300      	movs	r3, #0
 80067e6:	930e      	str	r3, [sp, #56]	; 0x38
 80067e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067ea:	1b5d      	subs	r5, r3, r5
 80067ec:	1e6b      	subs	r3, r5, #1
 80067ee:	9306      	str	r3, [sp, #24]
 80067f0:	bf45      	ittet	mi
 80067f2:	f1c5 0301 	rsbmi	r3, r5, #1
 80067f6:	9305      	strmi	r3, [sp, #20]
 80067f8:	2300      	movpl	r3, #0
 80067fa:	2300      	movmi	r3, #0
 80067fc:	bf4c      	ite	mi
 80067fe:	9306      	strmi	r3, [sp, #24]
 8006800:	9305      	strpl	r3, [sp, #20]
 8006802:	f1bb 0f00 	cmp.w	fp, #0
 8006806:	db3e      	blt.n	8006886 <_dtoa_r+0x22e>
 8006808:	9b06      	ldr	r3, [sp, #24]
 800680a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800680e:	445b      	add	r3, fp
 8006810:	9306      	str	r3, [sp, #24]
 8006812:	2300      	movs	r3, #0
 8006814:	9308      	str	r3, [sp, #32]
 8006816:	9b07      	ldr	r3, [sp, #28]
 8006818:	2b09      	cmp	r3, #9
 800681a:	f200 80af 	bhi.w	800697c <_dtoa_r+0x324>
 800681e:	2b05      	cmp	r3, #5
 8006820:	bfc4      	itt	gt
 8006822:	3b04      	subgt	r3, #4
 8006824:	9307      	strgt	r3, [sp, #28]
 8006826:	9b07      	ldr	r3, [sp, #28]
 8006828:	f1a3 0302 	sub.w	r3, r3, #2
 800682c:	bfcc      	ite	gt
 800682e:	2600      	movgt	r6, #0
 8006830:	2601      	movle	r6, #1
 8006832:	2b03      	cmp	r3, #3
 8006834:	f200 80ae 	bhi.w	8006994 <_dtoa_r+0x33c>
 8006838:	e8df f003 	tbb	[pc, r3]
 800683c:	772f8482 	.word	0x772f8482
 8006840:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006842:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006844:	441d      	add	r5, r3
 8006846:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800684a:	2b20      	cmp	r3, #32
 800684c:	dd11      	ble.n	8006872 <_dtoa_r+0x21a>
 800684e:	9a00      	ldr	r2, [sp, #0]
 8006850:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006854:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006858:	fa22 f000 	lsr.w	r0, r2, r0
 800685c:	fa08 f303 	lsl.w	r3, r8, r3
 8006860:	4318      	orrs	r0, r3
 8006862:	f7f9 fe6f 	bl	8000544 <__aeabi_ui2d>
 8006866:	2301      	movs	r3, #1
 8006868:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800686c:	3d01      	subs	r5, #1
 800686e:	9312      	str	r3, [sp, #72]	; 0x48
 8006870:	e772      	b.n	8006758 <_dtoa_r+0x100>
 8006872:	f1c3 0020 	rsb	r0, r3, #32
 8006876:	9b00      	ldr	r3, [sp, #0]
 8006878:	fa03 f000 	lsl.w	r0, r3, r0
 800687c:	e7f1      	b.n	8006862 <_dtoa_r+0x20a>
 800687e:	2301      	movs	r3, #1
 8006880:	e7b1      	b.n	80067e6 <_dtoa_r+0x18e>
 8006882:	900e      	str	r0, [sp, #56]	; 0x38
 8006884:	e7b0      	b.n	80067e8 <_dtoa_r+0x190>
 8006886:	9b05      	ldr	r3, [sp, #20]
 8006888:	eba3 030b 	sub.w	r3, r3, fp
 800688c:	9305      	str	r3, [sp, #20]
 800688e:	f1cb 0300 	rsb	r3, fp, #0
 8006892:	9308      	str	r3, [sp, #32]
 8006894:	2300      	movs	r3, #0
 8006896:	930b      	str	r3, [sp, #44]	; 0x2c
 8006898:	e7bd      	b.n	8006816 <_dtoa_r+0x1be>
 800689a:	2301      	movs	r3, #1
 800689c:	9309      	str	r3, [sp, #36]	; 0x24
 800689e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	dd7a      	ble.n	800699a <_dtoa_r+0x342>
 80068a4:	9304      	str	r3, [sp, #16]
 80068a6:	9303      	str	r3, [sp, #12]
 80068a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80068aa:	2200      	movs	r2, #0
 80068ac:	606a      	str	r2, [r5, #4]
 80068ae:	2104      	movs	r1, #4
 80068b0:	f101 0214 	add.w	r2, r1, #20
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d975      	bls.n	80069a4 <_dtoa_r+0x34c>
 80068b8:	6869      	ldr	r1, [r5, #4]
 80068ba:	4620      	mov	r0, r4
 80068bc:	f000 fedc 	bl	8007678 <_Balloc>
 80068c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068c2:	6028      	str	r0, [r5, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	9302      	str	r3, [sp, #8]
 80068c8:	9b03      	ldr	r3, [sp, #12]
 80068ca:	2b0e      	cmp	r3, #14
 80068cc:	f200 80e5 	bhi.w	8006a9a <_dtoa_r+0x442>
 80068d0:	2e00      	cmp	r6, #0
 80068d2:	f000 80e2 	beq.w	8006a9a <_dtoa_r+0x442>
 80068d6:	ed9d 7b00 	vldr	d7, [sp]
 80068da:	f1bb 0f00 	cmp.w	fp, #0
 80068de:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80068e2:	dd74      	ble.n	80069ce <_dtoa_r+0x376>
 80068e4:	4a23      	ldr	r2, [pc, #140]	; (8006974 <_dtoa_r+0x31c>)
 80068e6:	f00b 030f 	and.w	r3, fp, #15
 80068ea:	ea4f 162b 	mov.w	r6, fp, asr #4
 80068ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068f2:	06f0      	lsls	r0, r6, #27
 80068f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068f8:	d559      	bpl.n	80069ae <_dtoa_r+0x356>
 80068fa:	4b1f      	ldr	r3, [pc, #124]	; (8006978 <_dtoa_r+0x320>)
 80068fc:	ec51 0b17 	vmov	r0, r1, d7
 8006900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006904:	f7f9 ffbe 	bl	8000884 <__aeabi_ddiv>
 8006908:	e9cd 0100 	strd	r0, r1, [sp]
 800690c:	f006 060f 	and.w	r6, r6, #15
 8006910:	2503      	movs	r5, #3
 8006912:	4f19      	ldr	r7, [pc, #100]	; (8006978 <_dtoa_r+0x320>)
 8006914:	2e00      	cmp	r6, #0
 8006916:	d14c      	bne.n	80069b2 <_dtoa_r+0x35a>
 8006918:	4642      	mov	r2, r8
 800691a:	464b      	mov	r3, r9
 800691c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006920:	f7f9 ffb0 	bl	8000884 <__aeabi_ddiv>
 8006924:	e9cd 0100 	strd	r0, r1, [sp]
 8006928:	e06a      	b.n	8006a00 <_dtoa_r+0x3a8>
 800692a:	2301      	movs	r3, #1
 800692c:	9309      	str	r3, [sp, #36]	; 0x24
 800692e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006930:	445b      	add	r3, fp
 8006932:	9304      	str	r3, [sp, #16]
 8006934:	3301      	adds	r3, #1
 8006936:	2b01      	cmp	r3, #1
 8006938:	9303      	str	r3, [sp, #12]
 800693a:	bfb8      	it	lt
 800693c:	2301      	movlt	r3, #1
 800693e:	e7b3      	b.n	80068a8 <_dtoa_r+0x250>
 8006940:	2300      	movs	r3, #0
 8006942:	e7ab      	b.n	800689c <_dtoa_r+0x244>
 8006944:	2300      	movs	r3, #0
 8006946:	e7f1      	b.n	800692c <_dtoa_r+0x2d4>
 8006948:	636f4361 	.word	0x636f4361
 800694c:	3fd287a7 	.word	0x3fd287a7
 8006950:	8b60c8b3 	.word	0x8b60c8b3
 8006954:	3fc68a28 	.word	0x3fc68a28
 8006958:	509f79fb 	.word	0x509f79fb
 800695c:	3fd34413 	.word	0x3fd34413
 8006960:	7ff00000 	.word	0x7ff00000
 8006964:	080084fd 	.word	0x080084fd
 8006968:	080084f4 	.word	0x080084f4
 800696c:	080084d3 	.word	0x080084d3
 8006970:	3ff80000 	.word	0x3ff80000
 8006974:	08008538 	.word	0x08008538
 8006978:	08008510 	.word	0x08008510
 800697c:	2601      	movs	r6, #1
 800697e:	2300      	movs	r3, #0
 8006980:	9307      	str	r3, [sp, #28]
 8006982:	9609      	str	r6, [sp, #36]	; 0x24
 8006984:	f04f 33ff 	mov.w	r3, #4294967295
 8006988:	9304      	str	r3, [sp, #16]
 800698a:	9303      	str	r3, [sp, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	2312      	movs	r3, #18
 8006990:	920a      	str	r2, [sp, #40]	; 0x28
 8006992:	e789      	b.n	80068a8 <_dtoa_r+0x250>
 8006994:	2301      	movs	r3, #1
 8006996:	9309      	str	r3, [sp, #36]	; 0x24
 8006998:	e7f4      	b.n	8006984 <_dtoa_r+0x32c>
 800699a:	2301      	movs	r3, #1
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	9303      	str	r3, [sp, #12]
 80069a0:	461a      	mov	r2, r3
 80069a2:	e7f5      	b.n	8006990 <_dtoa_r+0x338>
 80069a4:	686a      	ldr	r2, [r5, #4]
 80069a6:	3201      	adds	r2, #1
 80069a8:	606a      	str	r2, [r5, #4]
 80069aa:	0049      	lsls	r1, r1, #1
 80069ac:	e780      	b.n	80068b0 <_dtoa_r+0x258>
 80069ae:	2502      	movs	r5, #2
 80069b0:	e7af      	b.n	8006912 <_dtoa_r+0x2ba>
 80069b2:	07f1      	lsls	r1, r6, #31
 80069b4:	d508      	bpl.n	80069c8 <_dtoa_r+0x370>
 80069b6:	4640      	mov	r0, r8
 80069b8:	4649      	mov	r1, r9
 80069ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069be:	f7f9 fe37 	bl	8000630 <__aeabi_dmul>
 80069c2:	3501      	adds	r5, #1
 80069c4:	4680      	mov	r8, r0
 80069c6:	4689      	mov	r9, r1
 80069c8:	1076      	asrs	r6, r6, #1
 80069ca:	3708      	adds	r7, #8
 80069cc:	e7a2      	b.n	8006914 <_dtoa_r+0x2bc>
 80069ce:	f000 809d 	beq.w	8006b0c <_dtoa_r+0x4b4>
 80069d2:	f1cb 0600 	rsb	r6, fp, #0
 80069d6:	4b9f      	ldr	r3, [pc, #636]	; (8006c54 <_dtoa_r+0x5fc>)
 80069d8:	4f9f      	ldr	r7, [pc, #636]	; (8006c58 <_dtoa_r+0x600>)
 80069da:	f006 020f 	and.w	r2, r6, #15
 80069de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069ea:	f7f9 fe21 	bl	8000630 <__aeabi_dmul>
 80069ee:	e9cd 0100 	strd	r0, r1, [sp]
 80069f2:	1136      	asrs	r6, r6, #4
 80069f4:	2300      	movs	r3, #0
 80069f6:	2502      	movs	r5, #2
 80069f8:	2e00      	cmp	r6, #0
 80069fa:	d17c      	bne.n	8006af6 <_dtoa_r+0x49e>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d191      	bne.n	8006924 <_dtoa_r+0x2cc>
 8006a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 8084 	beq.w	8006b10 <_dtoa_r+0x4b8>
 8006a08:	e9dd 8900 	ldrd	r8, r9, [sp]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4b93      	ldr	r3, [pc, #588]	; (8006c5c <_dtoa_r+0x604>)
 8006a10:	4640      	mov	r0, r8
 8006a12:	4649      	mov	r1, r9
 8006a14:	f7fa f87e 	bl	8000b14 <__aeabi_dcmplt>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d079      	beq.n	8006b10 <_dtoa_r+0x4b8>
 8006a1c:	9b03      	ldr	r3, [sp, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d076      	beq.n	8006b10 <_dtoa_r+0x4b8>
 8006a22:	9b04      	ldr	r3, [sp, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dd34      	ble.n	8006a92 <_dtoa_r+0x43a>
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4b8d      	ldr	r3, [pc, #564]	; (8006c60 <_dtoa_r+0x608>)
 8006a2c:	4640      	mov	r0, r8
 8006a2e:	4649      	mov	r1, r9
 8006a30:	f7f9 fdfe 	bl	8000630 <__aeabi_dmul>
 8006a34:	e9cd 0100 	strd	r0, r1, [sp]
 8006a38:	9e04      	ldr	r6, [sp, #16]
 8006a3a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006a3e:	3501      	adds	r5, #1
 8006a40:	4628      	mov	r0, r5
 8006a42:	f7f9 fd8f 	bl	8000564 <__aeabi_i2d>
 8006a46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a4a:	f7f9 fdf1 	bl	8000630 <__aeabi_dmul>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	4b84      	ldr	r3, [pc, #528]	; (8006c64 <_dtoa_r+0x60c>)
 8006a52:	f7f9 fc3b 	bl	80002cc <__adddf3>
 8006a56:	4680      	mov	r8, r0
 8006a58:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006a5c:	2e00      	cmp	r6, #0
 8006a5e:	d15a      	bne.n	8006b16 <_dtoa_r+0x4be>
 8006a60:	2200      	movs	r2, #0
 8006a62:	4b81      	ldr	r3, [pc, #516]	; (8006c68 <_dtoa_r+0x610>)
 8006a64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a68:	f7f9 fc2e 	bl	80002c8 <__aeabi_dsub>
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	e9cd 0100 	strd	r0, r1, [sp]
 8006a74:	f7fa f86c 	bl	8000b50 <__aeabi_dcmpgt>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	f040 829b 	bne.w	8006fb4 <_dtoa_r+0x95c>
 8006a7e:	4642      	mov	r2, r8
 8006a80:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006a84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a88:	f7fa f844 	bl	8000b14 <__aeabi_dcmplt>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	f040 828f 	bne.w	8006fb0 <_dtoa_r+0x958>
 8006a92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006a96:	e9cd 2300 	strd	r2, r3, [sp]
 8006a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f2c0 8150 	blt.w	8006d42 <_dtoa_r+0x6ea>
 8006aa2:	f1bb 0f0e 	cmp.w	fp, #14
 8006aa6:	f300 814c 	bgt.w	8006d42 <_dtoa_r+0x6ea>
 8006aaa:	4b6a      	ldr	r3, [pc, #424]	; (8006c54 <_dtoa_r+0x5fc>)
 8006aac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ab0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f280 80da 	bge.w	8006c70 <_dtoa_r+0x618>
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f300 80d6 	bgt.w	8006c70 <_dtoa_r+0x618>
 8006ac4:	f040 8273 	bne.w	8006fae <_dtoa_r+0x956>
 8006ac8:	2200      	movs	r2, #0
 8006aca:	4b67      	ldr	r3, [pc, #412]	; (8006c68 <_dtoa_r+0x610>)
 8006acc:	4640      	mov	r0, r8
 8006ace:	4649      	mov	r1, r9
 8006ad0:	f7f9 fdae 	bl	8000630 <__aeabi_dmul>
 8006ad4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ad8:	f7fa f830 	bl	8000b3c <__aeabi_dcmpge>
 8006adc:	9e03      	ldr	r6, [sp, #12]
 8006ade:	4637      	mov	r7, r6
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	f040 824a 	bne.w	8006f7a <_dtoa_r+0x922>
 8006ae6:	9b02      	ldr	r3, [sp, #8]
 8006ae8:	9a02      	ldr	r2, [sp, #8]
 8006aea:	1c5d      	adds	r5, r3, #1
 8006aec:	2331      	movs	r3, #49	; 0x31
 8006aee:	7013      	strb	r3, [r2, #0]
 8006af0:	f10b 0b01 	add.w	fp, fp, #1
 8006af4:	e245      	b.n	8006f82 <_dtoa_r+0x92a>
 8006af6:	07f2      	lsls	r2, r6, #31
 8006af8:	d505      	bpl.n	8006b06 <_dtoa_r+0x4ae>
 8006afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006afe:	f7f9 fd97 	bl	8000630 <__aeabi_dmul>
 8006b02:	3501      	adds	r5, #1
 8006b04:	2301      	movs	r3, #1
 8006b06:	1076      	asrs	r6, r6, #1
 8006b08:	3708      	adds	r7, #8
 8006b0a:	e775      	b.n	80069f8 <_dtoa_r+0x3a0>
 8006b0c:	2502      	movs	r5, #2
 8006b0e:	e777      	b.n	8006a00 <_dtoa_r+0x3a8>
 8006b10:	465f      	mov	r7, fp
 8006b12:	9e03      	ldr	r6, [sp, #12]
 8006b14:	e794      	b.n	8006a40 <_dtoa_r+0x3e8>
 8006b16:	9a02      	ldr	r2, [sp, #8]
 8006b18:	4b4e      	ldr	r3, [pc, #312]	; (8006c54 <_dtoa_r+0x5fc>)
 8006b1a:	4432      	add	r2, r6
 8006b1c:	9213      	str	r2, [sp, #76]	; 0x4c
 8006b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b20:	1e71      	subs	r1, r6, #1
 8006b22:	2a00      	cmp	r2, #0
 8006b24:	d048      	beq.n	8006bb8 <_dtoa_r+0x560>
 8006b26:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	2000      	movs	r0, #0
 8006b30:	494e      	ldr	r1, [pc, #312]	; (8006c6c <_dtoa_r+0x614>)
 8006b32:	f7f9 fea7 	bl	8000884 <__aeabi_ddiv>
 8006b36:	4642      	mov	r2, r8
 8006b38:	464b      	mov	r3, r9
 8006b3a:	f7f9 fbc5 	bl	80002c8 <__aeabi_dsub>
 8006b3e:	9d02      	ldr	r5, [sp, #8]
 8006b40:	4680      	mov	r8, r0
 8006b42:	4689      	mov	r9, r1
 8006b44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b48:	f7fa f822 	bl	8000b90 <__aeabi_d2iz>
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	f7f9 fd09 	bl	8000564 <__aeabi_i2d>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b5a:	f7f9 fbb5 	bl	80002c8 <__aeabi_dsub>
 8006b5e:	3630      	adds	r6, #48	; 0x30
 8006b60:	f805 6b01 	strb.w	r6, [r5], #1
 8006b64:	4642      	mov	r2, r8
 8006b66:	464b      	mov	r3, r9
 8006b68:	e9cd 0100 	strd	r0, r1, [sp]
 8006b6c:	f7f9 ffd2 	bl	8000b14 <__aeabi_dcmplt>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d165      	bne.n	8006c40 <_dtoa_r+0x5e8>
 8006b74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b78:	2000      	movs	r0, #0
 8006b7a:	4938      	ldr	r1, [pc, #224]	; (8006c5c <_dtoa_r+0x604>)
 8006b7c:	f7f9 fba4 	bl	80002c8 <__aeabi_dsub>
 8006b80:	4642      	mov	r2, r8
 8006b82:	464b      	mov	r3, r9
 8006b84:	f7f9 ffc6 	bl	8000b14 <__aeabi_dcmplt>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	f040 80ba 	bne.w	8006d02 <_dtoa_r+0x6aa>
 8006b8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b90:	429d      	cmp	r5, r3
 8006b92:	f43f af7e 	beq.w	8006a92 <_dtoa_r+0x43a>
 8006b96:	2200      	movs	r2, #0
 8006b98:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <_dtoa_r+0x608>)
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	f7f9 fd47 	bl	8000630 <__aeabi_dmul>
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	4689      	mov	r9, r1
 8006ba8:	4b2d      	ldr	r3, [pc, #180]	; (8006c60 <_dtoa_r+0x608>)
 8006baa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bae:	f7f9 fd3f 	bl	8000630 <__aeabi_dmul>
 8006bb2:	e9cd 0100 	strd	r0, r1, [sp]
 8006bb6:	e7c5      	b.n	8006b44 <_dtoa_r+0x4ec>
 8006bb8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006bbc:	4642      	mov	r2, r8
 8006bbe:	464b      	mov	r3, r9
 8006bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc4:	f7f9 fd34 	bl	8000630 <__aeabi_dmul>
 8006bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bcc:	9d02      	ldr	r5, [sp, #8]
 8006bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bd2:	f7f9 ffdd 	bl	8000b90 <__aeabi_d2iz>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	f7f9 fcc4 	bl	8000564 <__aeabi_i2d>
 8006bdc:	3630      	adds	r6, #48	; 0x30
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006be6:	f7f9 fb6f 	bl	80002c8 <__aeabi_dsub>
 8006bea:	f805 6b01 	strb.w	r6, [r5], #1
 8006bee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bf0:	42ab      	cmp	r3, r5
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	4689      	mov	r9, r1
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	d125      	bne.n	8006c48 <_dtoa_r+0x5f0>
 8006bfc:	4b1b      	ldr	r3, [pc, #108]	; (8006c6c <_dtoa_r+0x614>)
 8006bfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c02:	f7f9 fb63 	bl	80002cc <__adddf3>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	f7f9 ff9f 	bl	8000b50 <__aeabi_dcmpgt>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d175      	bne.n	8006d02 <_dtoa_r+0x6aa>
 8006c16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	4913      	ldr	r1, [pc, #76]	; (8006c6c <_dtoa_r+0x614>)
 8006c1e:	f7f9 fb53 	bl	80002c8 <__aeabi_dsub>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4640      	mov	r0, r8
 8006c28:	4649      	mov	r1, r9
 8006c2a:	f7f9 ff73 	bl	8000b14 <__aeabi_dcmplt>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f43f af2f 	beq.w	8006a92 <_dtoa_r+0x43a>
 8006c34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c38:	2b30      	cmp	r3, #48	; 0x30
 8006c3a:	f105 32ff 	add.w	r2, r5, #4294967295
 8006c3e:	d001      	beq.n	8006c44 <_dtoa_r+0x5ec>
 8006c40:	46bb      	mov	fp, r7
 8006c42:	e04d      	b.n	8006ce0 <_dtoa_r+0x688>
 8006c44:	4615      	mov	r5, r2
 8006c46:	e7f5      	b.n	8006c34 <_dtoa_r+0x5dc>
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <_dtoa_r+0x608>)
 8006c4a:	f7f9 fcf1 	bl	8000630 <__aeabi_dmul>
 8006c4e:	e9cd 0100 	strd	r0, r1, [sp]
 8006c52:	e7bc      	b.n	8006bce <_dtoa_r+0x576>
 8006c54:	08008538 	.word	0x08008538
 8006c58:	08008510 	.word	0x08008510
 8006c5c:	3ff00000 	.word	0x3ff00000
 8006c60:	40240000 	.word	0x40240000
 8006c64:	401c0000 	.word	0x401c0000
 8006c68:	40140000 	.word	0x40140000
 8006c6c:	3fe00000 	.word	0x3fe00000
 8006c70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006c74:	9d02      	ldr	r5, [sp, #8]
 8006c76:	4642      	mov	r2, r8
 8006c78:	464b      	mov	r3, r9
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	f7f9 fe01 	bl	8000884 <__aeabi_ddiv>
 8006c82:	f7f9 ff85 	bl	8000b90 <__aeabi_d2iz>
 8006c86:	9000      	str	r0, [sp, #0]
 8006c88:	f7f9 fc6c 	bl	8000564 <__aeabi_i2d>
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	464b      	mov	r3, r9
 8006c90:	f7f9 fcce 	bl	8000630 <__aeabi_dmul>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4630      	mov	r0, r6
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	f7f9 fb14 	bl	80002c8 <__aeabi_dsub>
 8006ca0:	9e00      	ldr	r6, [sp, #0]
 8006ca2:	9f03      	ldr	r7, [sp, #12]
 8006ca4:	3630      	adds	r6, #48	; 0x30
 8006ca6:	f805 6b01 	strb.w	r6, [r5], #1
 8006caa:	9e02      	ldr	r6, [sp, #8]
 8006cac:	1bae      	subs	r6, r5, r6
 8006cae:	42b7      	cmp	r7, r6
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	d138      	bne.n	8006d28 <_dtoa_r+0x6d0>
 8006cb6:	f7f9 fb09 	bl	80002cc <__adddf3>
 8006cba:	4606      	mov	r6, r0
 8006cbc:	460f      	mov	r7, r1
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	f7f9 ff25 	bl	8000b14 <__aeabi_dcmplt>
 8006cca:	b9c8      	cbnz	r0, 8006d00 <_dtoa_r+0x6a8>
 8006ccc:	4632      	mov	r2, r6
 8006cce:	463b      	mov	r3, r7
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	f7f9 ff14 	bl	8000b00 <__aeabi_dcmpeq>
 8006cd8:	b110      	cbz	r0, 8006ce0 <_dtoa_r+0x688>
 8006cda:	9b00      	ldr	r3, [sp, #0]
 8006cdc:	07db      	lsls	r3, r3, #31
 8006cde:	d40f      	bmi.n	8006d00 <_dtoa_r+0x6a8>
 8006ce0:	4651      	mov	r1, sl
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 fcfc 	bl	80076e0 <_Bfree>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006cec:	702b      	strb	r3, [r5, #0]
 8006cee:	f10b 0301 	add.w	r3, fp, #1
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f43f acf8 	beq.w	80066ec <_dtoa_r+0x94>
 8006cfc:	601d      	str	r5, [r3, #0]
 8006cfe:	e4f5      	b.n	80066ec <_dtoa_r+0x94>
 8006d00:	465f      	mov	r7, fp
 8006d02:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d06:	2a39      	cmp	r2, #57	; 0x39
 8006d08:	f105 33ff 	add.w	r3, r5, #4294967295
 8006d0c:	d106      	bne.n	8006d1c <_dtoa_r+0x6c4>
 8006d0e:	9a02      	ldr	r2, [sp, #8]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d107      	bne.n	8006d24 <_dtoa_r+0x6cc>
 8006d14:	2330      	movs	r3, #48	; 0x30
 8006d16:	7013      	strb	r3, [r2, #0]
 8006d18:	3701      	adds	r7, #1
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	781a      	ldrb	r2, [r3, #0]
 8006d1e:	3201      	adds	r2, #1
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	e78d      	b.n	8006c40 <_dtoa_r+0x5e8>
 8006d24:	461d      	mov	r5, r3
 8006d26:	e7ec      	b.n	8006d02 <_dtoa_r+0x6aa>
 8006d28:	2200      	movs	r2, #0
 8006d2a:	4ba4      	ldr	r3, [pc, #656]	; (8006fbc <_dtoa_r+0x964>)
 8006d2c:	f7f9 fc80 	bl	8000630 <__aeabi_dmul>
 8006d30:	2200      	movs	r2, #0
 8006d32:	2300      	movs	r3, #0
 8006d34:	4606      	mov	r6, r0
 8006d36:	460f      	mov	r7, r1
 8006d38:	f7f9 fee2 	bl	8000b00 <__aeabi_dcmpeq>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d09a      	beq.n	8006c76 <_dtoa_r+0x61e>
 8006d40:	e7ce      	b.n	8006ce0 <_dtoa_r+0x688>
 8006d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d44:	2a00      	cmp	r2, #0
 8006d46:	f000 80cd 	beq.w	8006ee4 <_dtoa_r+0x88c>
 8006d4a:	9a07      	ldr	r2, [sp, #28]
 8006d4c:	2a01      	cmp	r2, #1
 8006d4e:	f300 80af 	bgt.w	8006eb0 <_dtoa_r+0x858>
 8006d52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d54:	2a00      	cmp	r2, #0
 8006d56:	f000 80a7 	beq.w	8006ea8 <_dtoa_r+0x850>
 8006d5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d5e:	9e08      	ldr	r6, [sp, #32]
 8006d60:	9d05      	ldr	r5, [sp, #20]
 8006d62:	9a05      	ldr	r2, [sp, #20]
 8006d64:	441a      	add	r2, r3
 8006d66:	9205      	str	r2, [sp, #20]
 8006d68:	9a06      	ldr	r2, [sp, #24]
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	441a      	add	r2, r3
 8006d6e:	4620      	mov	r0, r4
 8006d70:	9206      	str	r2, [sp, #24]
 8006d72:	f000 fd55 	bl	8007820 <__i2b>
 8006d76:	4607      	mov	r7, r0
 8006d78:	2d00      	cmp	r5, #0
 8006d7a:	dd0c      	ble.n	8006d96 <_dtoa_r+0x73e>
 8006d7c:	9b06      	ldr	r3, [sp, #24]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dd09      	ble.n	8006d96 <_dtoa_r+0x73e>
 8006d82:	42ab      	cmp	r3, r5
 8006d84:	9a05      	ldr	r2, [sp, #20]
 8006d86:	bfa8      	it	ge
 8006d88:	462b      	movge	r3, r5
 8006d8a:	1ad2      	subs	r2, r2, r3
 8006d8c:	9205      	str	r2, [sp, #20]
 8006d8e:	9a06      	ldr	r2, [sp, #24]
 8006d90:	1aed      	subs	r5, r5, r3
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	9306      	str	r3, [sp, #24]
 8006d96:	9b08      	ldr	r3, [sp, #32]
 8006d98:	b1f3      	cbz	r3, 8006dd8 <_dtoa_r+0x780>
 8006d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 80a5 	beq.w	8006eec <_dtoa_r+0x894>
 8006da2:	2e00      	cmp	r6, #0
 8006da4:	dd10      	ble.n	8006dc8 <_dtoa_r+0x770>
 8006da6:	4639      	mov	r1, r7
 8006da8:	4632      	mov	r2, r6
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 fdce 	bl	800794c <__pow5mult>
 8006db0:	4652      	mov	r2, sl
 8006db2:	4601      	mov	r1, r0
 8006db4:	4607      	mov	r7, r0
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 fd3b 	bl	8007832 <__multiply>
 8006dbc:	4651      	mov	r1, sl
 8006dbe:	4680      	mov	r8, r0
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 fc8d 	bl	80076e0 <_Bfree>
 8006dc6:	46c2      	mov	sl, r8
 8006dc8:	9b08      	ldr	r3, [sp, #32]
 8006dca:	1b9a      	subs	r2, r3, r6
 8006dcc:	d004      	beq.n	8006dd8 <_dtoa_r+0x780>
 8006dce:	4651      	mov	r1, sl
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fdbb 	bl	800794c <__pow5mult>
 8006dd6:	4682      	mov	sl, r0
 8006dd8:	2101      	movs	r1, #1
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 fd20 	bl	8007820 <__i2b>
 8006de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	4606      	mov	r6, r0
 8006de6:	f340 8083 	ble.w	8006ef0 <_dtoa_r+0x898>
 8006dea:	461a      	mov	r2, r3
 8006dec:	4601      	mov	r1, r0
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 fdac 	bl	800794c <__pow5mult>
 8006df4:	9b07      	ldr	r3, [sp, #28]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	4606      	mov	r6, r0
 8006dfa:	dd7c      	ble.n	8006ef6 <_dtoa_r+0x89e>
 8006dfc:	f04f 0800 	mov.w	r8, #0
 8006e00:	6933      	ldr	r3, [r6, #16]
 8006e02:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e06:	6918      	ldr	r0, [r3, #16]
 8006e08:	f000 fcbc 	bl	8007784 <__hi0bits>
 8006e0c:	f1c0 0020 	rsb	r0, r0, #32
 8006e10:	9b06      	ldr	r3, [sp, #24]
 8006e12:	4418      	add	r0, r3
 8006e14:	f010 001f 	ands.w	r0, r0, #31
 8006e18:	f000 8096 	beq.w	8006f48 <_dtoa_r+0x8f0>
 8006e1c:	f1c0 0320 	rsb	r3, r0, #32
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	f340 8087 	ble.w	8006f34 <_dtoa_r+0x8dc>
 8006e26:	9b05      	ldr	r3, [sp, #20]
 8006e28:	f1c0 001c 	rsb	r0, r0, #28
 8006e2c:	4403      	add	r3, r0
 8006e2e:	9305      	str	r3, [sp, #20]
 8006e30:	9b06      	ldr	r3, [sp, #24]
 8006e32:	4405      	add	r5, r0
 8006e34:	4403      	add	r3, r0
 8006e36:	9306      	str	r3, [sp, #24]
 8006e38:	9b05      	ldr	r3, [sp, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dd05      	ble.n	8006e4a <_dtoa_r+0x7f2>
 8006e3e:	4651      	mov	r1, sl
 8006e40:	461a      	mov	r2, r3
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 fdd0 	bl	80079e8 <__lshift>
 8006e48:	4682      	mov	sl, r0
 8006e4a:	9b06      	ldr	r3, [sp, #24]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dd05      	ble.n	8006e5c <_dtoa_r+0x804>
 8006e50:	4631      	mov	r1, r6
 8006e52:	461a      	mov	r2, r3
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 fdc7 	bl	80079e8 <__lshift>
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d074      	beq.n	8006f4c <_dtoa_r+0x8f4>
 8006e62:	4631      	mov	r1, r6
 8006e64:	4650      	mov	r0, sl
 8006e66:	f000 fe10 	bl	8007a8a <__mcmp>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	da6e      	bge.n	8006f4c <_dtoa_r+0x8f4>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	4651      	mov	r1, sl
 8006e72:	220a      	movs	r2, #10
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 fc4a 	bl	800770e <__multadd>
 8006e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e80:	4682      	mov	sl, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 81a8 	beq.w	80071d8 <_dtoa_r+0xb80>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	220a      	movs	r2, #10
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f000 fc3d 	bl	800770e <__multadd>
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	4607      	mov	r7, r0
 8006e9a:	f300 80c8 	bgt.w	800702e <_dtoa_r+0x9d6>
 8006e9e:	9b07      	ldr	r3, [sp, #28]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	f340 80c4 	ble.w	800702e <_dtoa_r+0x9d6>
 8006ea6:	e059      	b.n	8006f5c <_dtoa_r+0x904>
 8006ea8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006eaa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006eae:	e756      	b.n	8006d5e <_dtoa_r+0x706>
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	1e5e      	subs	r6, r3, #1
 8006eb4:	9b08      	ldr	r3, [sp, #32]
 8006eb6:	42b3      	cmp	r3, r6
 8006eb8:	bfbf      	itttt	lt
 8006eba:	9b08      	ldrlt	r3, [sp, #32]
 8006ebc:	9608      	strlt	r6, [sp, #32]
 8006ebe:	1af2      	sublt	r2, r6, r3
 8006ec0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006ec2:	bfb6      	itet	lt
 8006ec4:	189b      	addlt	r3, r3, r2
 8006ec6:	1b9e      	subge	r6, r3, r6
 8006ec8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	bfb8      	it	lt
 8006ece:	2600      	movlt	r6, #0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	bfb9      	ittee	lt
 8006ed4:	9b05      	ldrlt	r3, [sp, #20]
 8006ed6:	9a03      	ldrlt	r2, [sp, #12]
 8006ed8:	9d05      	ldrge	r5, [sp, #20]
 8006eda:	9b03      	ldrge	r3, [sp, #12]
 8006edc:	bfbc      	itt	lt
 8006ede:	1a9d      	sublt	r5, r3, r2
 8006ee0:	2300      	movlt	r3, #0
 8006ee2:	e73e      	b.n	8006d62 <_dtoa_r+0x70a>
 8006ee4:	9e08      	ldr	r6, [sp, #32]
 8006ee6:	9d05      	ldr	r5, [sp, #20]
 8006ee8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006eea:	e745      	b.n	8006d78 <_dtoa_r+0x720>
 8006eec:	9a08      	ldr	r2, [sp, #32]
 8006eee:	e76e      	b.n	8006dce <_dtoa_r+0x776>
 8006ef0:	9b07      	ldr	r3, [sp, #28]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	dc19      	bgt.n	8006f2a <_dtoa_r+0x8d2>
 8006ef6:	9b00      	ldr	r3, [sp, #0]
 8006ef8:	b9bb      	cbnz	r3, 8006f2a <_dtoa_r+0x8d2>
 8006efa:	9b01      	ldr	r3, [sp, #4]
 8006efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f00:	b99b      	cbnz	r3, 8006f2a <_dtoa_r+0x8d2>
 8006f02:	9b01      	ldr	r3, [sp, #4]
 8006f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f08:	0d1b      	lsrs	r3, r3, #20
 8006f0a:	051b      	lsls	r3, r3, #20
 8006f0c:	b183      	cbz	r3, 8006f30 <_dtoa_r+0x8d8>
 8006f0e:	9b05      	ldr	r3, [sp, #20]
 8006f10:	3301      	adds	r3, #1
 8006f12:	9305      	str	r3, [sp, #20]
 8006f14:	9b06      	ldr	r3, [sp, #24]
 8006f16:	3301      	adds	r3, #1
 8006f18:	9306      	str	r3, [sp, #24]
 8006f1a:	f04f 0801 	mov.w	r8, #1
 8006f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f47f af6d 	bne.w	8006e00 <_dtoa_r+0x7a8>
 8006f26:	2001      	movs	r0, #1
 8006f28:	e772      	b.n	8006e10 <_dtoa_r+0x7b8>
 8006f2a:	f04f 0800 	mov.w	r8, #0
 8006f2e:	e7f6      	b.n	8006f1e <_dtoa_r+0x8c6>
 8006f30:	4698      	mov	r8, r3
 8006f32:	e7f4      	b.n	8006f1e <_dtoa_r+0x8c6>
 8006f34:	d080      	beq.n	8006e38 <_dtoa_r+0x7e0>
 8006f36:	9a05      	ldr	r2, [sp, #20]
 8006f38:	331c      	adds	r3, #28
 8006f3a:	441a      	add	r2, r3
 8006f3c:	9205      	str	r2, [sp, #20]
 8006f3e:	9a06      	ldr	r2, [sp, #24]
 8006f40:	441a      	add	r2, r3
 8006f42:	441d      	add	r5, r3
 8006f44:	4613      	mov	r3, r2
 8006f46:	e776      	b.n	8006e36 <_dtoa_r+0x7de>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	e7f4      	b.n	8006f36 <_dtoa_r+0x8de>
 8006f4c:	9b03      	ldr	r3, [sp, #12]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	dc36      	bgt.n	8006fc0 <_dtoa_r+0x968>
 8006f52:	9b07      	ldr	r3, [sp, #28]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	dd33      	ble.n	8006fc0 <_dtoa_r+0x968>
 8006f58:	9b03      	ldr	r3, [sp, #12]
 8006f5a:	9304      	str	r3, [sp, #16]
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	b963      	cbnz	r3, 8006f7a <_dtoa_r+0x922>
 8006f60:	4631      	mov	r1, r6
 8006f62:	2205      	movs	r2, #5
 8006f64:	4620      	mov	r0, r4
 8006f66:	f000 fbd2 	bl	800770e <__multadd>
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	4650      	mov	r0, sl
 8006f70:	f000 fd8b 	bl	8007a8a <__mcmp>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	f73f adb6 	bgt.w	8006ae6 <_dtoa_r+0x48e>
 8006f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f7c:	9d02      	ldr	r5, [sp, #8]
 8006f7e:	ea6f 0b03 	mvn.w	fp, r3
 8006f82:	2300      	movs	r3, #0
 8006f84:	9303      	str	r3, [sp, #12]
 8006f86:	4631      	mov	r1, r6
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 fba9 	bl	80076e0 <_Bfree>
 8006f8e:	2f00      	cmp	r7, #0
 8006f90:	f43f aea6 	beq.w	8006ce0 <_dtoa_r+0x688>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	b12b      	cbz	r3, 8006fa4 <_dtoa_r+0x94c>
 8006f98:	42bb      	cmp	r3, r7
 8006f9a:	d003      	beq.n	8006fa4 <_dtoa_r+0x94c>
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 fb9e 	bl	80076e0 <_Bfree>
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 fb9a 	bl	80076e0 <_Bfree>
 8006fac:	e698      	b.n	8006ce0 <_dtoa_r+0x688>
 8006fae:	2600      	movs	r6, #0
 8006fb0:	4637      	mov	r7, r6
 8006fb2:	e7e2      	b.n	8006f7a <_dtoa_r+0x922>
 8006fb4:	46bb      	mov	fp, r7
 8006fb6:	4637      	mov	r7, r6
 8006fb8:	e595      	b.n	8006ae6 <_dtoa_r+0x48e>
 8006fba:	bf00      	nop
 8006fbc:	40240000 	.word	0x40240000
 8006fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc2:	bb93      	cbnz	r3, 800702a <_dtoa_r+0x9d2>
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	9304      	str	r3, [sp, #16]
 8006fc8:	9d02      	ldr	r5, [sp, #8]
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4650      	mov	r0, sl
 8006fce:	f7ff fab7 	bl	8006540 <quorem>
 8006fd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006fd6:	f805 9b01 	strb.w	r9, [r5], #1
 8006fda:	9b02      	ldr	r3, [sp, #8]
 8006fdc:	9a04      	ldr	r2, [sp, #16]
 8006fde:	1aeb      	subs	r3, r5, r3
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	f300 80dc 	bgt.w	800719e <_dtoa_r+0xb46>
 8006fe6:	9b02      	ldr	r3, [sp, #8]
 8006fe8:	2a01      	cmp	r2, #1
 8006fea:	bfac      	ite	ge
 8006fec:	189b      	addge	r3, r3, r2
 8006fee:	3301      	addlt	r3, #1
 8006ff0:	4698      	mov	r8, r3
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9303      	str	r3, [sp, #12]
 8006ff6:	4651      	mov	r1, sl
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f000 fcf4 	bl	80079e8 <__lshift>
 8007000:	4631      	mov	r1, r6
 8007002:	4682      	mov	sl, r0
 8007004:	f000 fd41 	bl	8007a8a <__mcmp>
 8007008:	2800      	cmp	r0, #0
 800700a:	f300 808d 	bgt.w	8007128 <_dtoa_r+0xad0>
 800700e:	d103      	bne.n	8007018 <_dtoa_r+0x9c0>
 8007010:	f019 0f01 	tst.w	r9, #1
 8007014:	f040 8088 	bne.w	8007128 <_dtoa_r+0xad0>
 8007018:	4645      	mov	r5, r8
 800701a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800701e:	2b30      	cmp	r3, #48	; 0x30
 8007020:	f105 32ff 	add.w	r2, r5, #4294967295
 8007024:	d1af      	bne.n	8006f86 <_dtoa_r+0x92e>
 8007026:	4615      	mov	r5, r2
 8007028:	e7f7      	b.n	800701a <_dtoa_r+0x9c2>
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	9304      	str	r3, [sp, #16]
 800702e:	2d00      	cmp	r5, #0
 8007030:	dd05      	ble.n	800703e <_dtoa_r+0x9e6>
 8007032:	4639      	mov	r1, r7
 8007034:	462a      	mov	r2, r5
 8007036:	4620      	mov	r0, r4
 8007038:	f000 fcd6 	bl	80079e8 <__lshift>
 800703c:	4607      	mov	r7, r0
 800703e:	f1b8 0f00 	cmp.w	r8, #0
 8007042:	d04c      	beq.n	80070de <_dtoa_r+0xa86>
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	4620      	mov	r0, r4
 8007048:	f000 fb16 	bl	8007678 <_Balloc>
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	3202      	adds	r2, #2
 8007050:	4605      	mov	r5, r0
 8007052:	0092      	lsls	r2, r2, #2
 8007054:	f107 010c 	add.w	r1, r7, #12
 8007058:	300c      	adds	r0, #12
 800705a:	f7fe fa65 	bl	8005528 <memcpy>
 800705e:	2201      	movs	r2, #1
 8007060:	4629      	mov	r1, r5
 8007062:	4620      	mov	r0, r4
 8007064:	f000 fcc0 	bl	80079e8 <__lshift>
 8007068:	9b00      	ldr	r3, [sp, #0]
 800706a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800706e:	9703      	str	r7, [sp, #12]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	4607      	mov	r7, r0
 8007076:	9305      	str	r3, [sp, #20]
 8007078:	4631      	mov	r1, r6
 800707a:	4650      	mov	r0, sl
 800707c:	f7ff fa60 	bl	8006540 <quorem>
 8007080:	9903      	ldr	r1, [sp, #12]
 8007082:	4605      	mov	r5, r0
 8007084:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007088:	4650      	mov	r0, sl
 800708a:	f000 fcfe 	bl	8007a8a <__mcmp>
 800708e:	463a      	mov	r2, r7
 8007090:	9000      	str	r0, [sp, #0]
 8007092:	4631      	mov	r1, r6
 8007094:	4620      	mov	r0, r4
 8007096:	f000 fd12 	bl	8007abe <__mdiff>
 800709a:	68c3      	ldr	r3, [r0, #12]
 800709c:	4602      	mov	r2, r0
 800709e:	bb03      	cbnz	r3, 80070e2 <_dtoa_r+0xa8a>
 80070a0:	4601      	mov	r1, r0
 80070a2:	9006      	str	r0, [sp, #24]
 80070a4:	4650      	mov	r0, sl
 80070a6:	f000 fcf0 	bl	8007a8a <__mcmp>
 80070aa:	9a06      	ldr	r2, [sp, #24]
 80070ac:	4603      	mov	r3, r0
 80070ae:	4611      	mov	r1, r2
 80070b0:	4620      	mov	r0, r4
 80070b2:	9306      	str	r3, [sp, #24]
 80070b4:	f000 fb14 	bl	80076e0 <_Bfree>
 80070b8:	9b06      	ldr	r3, [sp, #24]
 80070ba:	b9a3      	cbnz	r3, 80070e6 <_dtoa_r+0xa8e>
 80070bc:	9a07      	ldr	r2, [sp, #28]
 80070be:	b992      	cbnz	r2, 80070e6 <_dtoa_r+0xa8e>
 80070c0:	9a05      	ldr	r2, [sp, #20]
 80070c2:	b982      	cbnz	r2, 80070e6 <_dtoa_r+0xa8e>
 80070c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070c8:	d029      	beq.n	800711e <_dtoa_r+0xac6>
 80070ca:	9b00      	ldr	r3, [sp, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dd01      	ble.n	80070d4 <_dtoa_r+0xa7c>
 80070d0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80070d4:	f108 0501 	add.w	r5, r8, #1
 80070d8:	f888 9000 	strb.w	r9, [r8]
 80070dc:	e753      	b.n	8006f86 <_dtoa_r+0x92e>
 80070de:	4638      	mov	r0, r7
 80070e0:	e7c2      	b.n	8007068 <_dtoa_r+0xa10>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e7e3      	b.n	80070ae <_dtoa_r+0xa56>
 80070e6:	9a00      	ldr	r2, [sp, #0]
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	db04      	blt.n	80070f6 <_dtoa_r+0xa9e>
 80070ec:	d125      	bne.n	800713a <_dtoa_r+0xae2>
 80070ee:	9a07      	ldr	r2, [sp, #28]
 80070f0:	bb1a      	cbnz	r2, 800713a <_dtoa_r+0xae2>
 80070f2:	9a05      	ldr	r2, [sp, #20]
 80070f4:	bb0a      	cbnz	r2, 800713a <_dtoa_r+0xae2>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	ddec      	ble.n	80070d4 <_dtoa_r+0xa7c>
 80070fa:	4651      	mov	r1, sl
 80070fc:	2201      	movs	r2, #1
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 fc72 	bl	80079e8 <__lshift>
 8007104:	4631      	mov	r1, r6
 8007106:	4682      	mov	sl, r0
 8007108:	f000 fcbf 	bl	8007a8a <__mcmp>
 800710c:	2800      	cmp	r0, #0
 800710e:	dc03      	bgt.n	8007118 <_dtoa_r+0xac0>
 8007110:	d1e0      	bne.n	80070d4 <_dtoa_r+0xa7c>
 8007112:	f019 0f01 	tst.w	r9, #1
 8007116:	d0dd      	beq.n	80070d4 <_dtoa_r+0xa7c>
 8007118:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800711c:	d1d8      	bne.n	80070d0 <_dtoa_r+0xa78>
 800711e:	2339      	movs	r3, #57	; 0x39
 8007120:	f888 3000 	strb.w	r3, [r8]
 8007124:	f108 0801 	add.w	r8, r8, #1
 8007128:	4645      	mov	r5, r8
 800712a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800712e:	2b39      	cmp	r3, #57	; 0x39
 8007130:	f105 32ff 	add.w	r2, r5, #4294967295
 8007134:	d03b      	beq.n	80071ae <_dtoa_r+0xb56>
 8007136:	3301      	adds	r3, #1
 8007138:	e040      	b.n	80071bc <_dtoa_r+0xb64>
 800713a:	2b00      	cmp	r3, #0
 800713c:	f108 0501 	add.w	r5, r8, #1
 8007140:	dd05      	ble.n	800714e <_dtoa_r+0xaf6>
 8007142:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007146:	d0ea      	beq.n	800711e <_dtoa_r+0xac6>
 8007148:	f109 0901 	add.w	r9, r9, #1
 800714c:	e7c4      	b.n	80070d8 <_dtoa_r+0xa80>
 800714e:	9b02      	ldr	r3, [sp, #8]
 8007150:	9a04      	ldr	r2, [sp, #16]
 8007152:	f805 9c01 	strb.w	r9, [r5, #-1]
 8007156:	1aeb      	subs	r3, r5, r3
 8007158:	4293      	cmp	r3, r2
 800715a:	46a8      	mov	r8, r5
 800715c:	f43f af4b 	beq.w	8006ff6 <_dtoa_r+0x99e>
 8007160:	4651      	mov	r1, sl
 8007162:	2300      	movs	r3, #0
 8007164:	220a      	movs	r2, #10
 8007166:	4620      	mov	r0, r4
 8007168:	f000 fad1 	bl	800770e <__multadd>
 800716c:	9b03      	ldr	r3, [sp, #12]
 800716e:	9903      	ldr	r1, [sp, #12]
 8007170:	42bb      	cmp	r3, r7
 8007172:	4682      	mov	sl, r0
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	f04f 020a 	mov.w	r2, #10
 800717c:	4620      	mov	r0, r4
 800717e:	d104      	bne.n	800718a <_dtoa_r+0xb32>
 8007180:	f000 fac5 	bl	800770e <__multadd>
 8007184:	9003      	str	r0, [sp, #12]
 8007186:	4607      	mov	r7, r0
 8007188:	e776      	b.n	8007078 <_dtoa_r+0xa20>
 800718a:	f000 fac0 	bl	800770e <__multadd>
 800718e:	2300      	movs	r3, #0
 8007190:	9003      	str	r0, [sp, #12]
 8007192:	220a      	movs	r2, #10
 8007194:	4639      	mov	r1, r7
 8007196:	4620      	mov	r0, r4
 8007198:	f000 fab9 	bl	800770e <__multadd>
 800719c:	e7f3      	b.n	8007186 <_dtoa_r+0xb2e>
 800719e:	4651      	mov	r1, sl
 80071a0:	2300      	movs	r3, #0
 80071a2:	220a      	movs	r2, #10
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 fab2 	bl	800770e <__multadd>
 80071aa:	4682      	mov	sl, r0
 80071ac:	e70d      	b.n	8006fca <_dtoa_r+0x972>
 80071ae:	9b02      	ldr	r3, [sp, #8]
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d105      	bne.n	80071c0 <_dtoa_r+0xb68>
 80071b4:	9a02      	ldr	r2, [sp, #8]
 80071b6:	f10b 0b01 	add.w	fp, fp, #1
 80071ba:	2331      	movs	r3, #49	; 0x31
 80071bc:	7013      	strb	r3, [r2, #0]
 80071be:	e6e2      	b.n	8006f86 <_dtoa_r+0x92e>
 80071c0:	4615      	mov	r5, r2
 80071c2:	e7b2      	b.n	800712a <_dtoa_r+0xad2>
 80071c4:	4b09      	ldr	r3, [pc, #36]	; (80071ec <_dtoa_r+0xb94>)
 80071c6:	f7ff baae 	b.w	8006726 <_dtoa_r+0xce>
 80071ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f47f aa88 	bne.w	80066e2 <_dtoa_r+0x8a>
 80071d2:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <_dtoa_r+0xb98>)
 80071d4:	f7ff baa7 	b.w	8006726 <_dtoa_r+0xce>
 80071d8:	9b04      	ldr	r3, [sp, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f73f aef4 	bgt.w	8006fc8 <_dtoa_r+0x970>
 80071e0:	9b07      	ldr	r3, [sp, #28]
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	f77f aef0 	ble.w	8006fc8 <_dtoa_r+0x970>
 80071e8:	e6b8      	b.n	8006f5c <_dtoa_r+0x904>
 80071ea:	bf00      	nop
 80071ec:	080084d2 	.word	0x080084d2
 80071f0:	080084f4 	.word	0x080084f4

080071f4 <_localeconv_r>:
 80071f4:	4b04      	ldr	r3, [pc, #16]	; (8007208 <_localeconv_r+0x14>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6a18      	ldr	r0, [r3, #32]
 80071fa:	4b04      	ldr	r3, [pc, #16]	; (800720c <_localeconv_r+0x18>)
 80071fc:	2800      	cmp	r0, #0
 80071fe:	bf08      	it	eq
 8007200:	4618      	moveq	r0, r3
 8007202:	30f0      	adds	r0, #240	; 0xf0
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	2000000c 	.word	0x2000000c
 800720c:	20000100 	.word	0x20000100

08007210 <malloc>:
 8007210:	4b02      	ldr	r3, [pc, #8]	; (800721c <malloc+0xc>)
 8007212:	4601      	mov	r1, r0
 8007214:	6818      	ldr	r0, [r3, #0]
 8007216:	f000 b803 	b.w	8007220 <_malloc_r>
 800721a:	bf00      	nop
 800721c:	2000000c 	.word	0x2000000c

08007220 <_malloc_r>:
 8007220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	f101 040b 	add.w	r4, r1, #11
 8007228:	2c16      	cmp	r4, #22
 800722a:	4681      	mov	r9, r0
 800722c:	d907      	bls.n	800723e <_malloc_r+0x1e>
 800722e:	f034 0407 	bics.w	r4, r4, #7
 8007232:	d505      	bpl.n	8007240 <_malloc_r+0x20>
 8007234:	230c      	movs	r3, #12
 8007236:	f8c9 3000 	str.w	r3, [r9]
 800723a:	2600      	movs	r6, #0
 800723c:	e131      	b.n	80074a2 <_malloc_r+0x282>
 800723e:	2410      	movs	r4, #16
 8007240:	428c      	cmp	r4, r1
 8007242:	d3f7      	bcc.n	8007234 <_malloc_r+0x14>
 8007244:	4648      	mov	r0, r9
 8007246:	f000 fa0b 	bl	8007660 <__malloc_lock>
 800724a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800724e:	4d9c      	ldr	r5, [pc, #624]	; (80074c0 <_malloc_r+0x2a0>)
 8007250:	d236      	bcs.n	80072c0 <_malloc_r+0xa0>
 8007252:	f104 0208 	add.w	r2, r4, #8
 8007256:	442a      	add	r2, r5
 8007258:	f1a2 0108 	sub.w	r1, r2, #8
 800725c:	6856      	ldr	r6, [r2, #4]
 800725e:	428e      	cmp	r6, r1
 8007260:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8007264:	d102      	bne.n	800726c <_malloc_r+0x4c>
 8007266:	68d6      	ldr	r6, [r2, #12]
 8007268:	42b2      	cmp	r2, r6
 800726a:	d010      	beq.n	800728e <_malloc_r+0x6e>
 800726c:	6873      	ldr	r3, [r6, #4]
 800726e:	68f2      	ldr	r2, [r6, #12]
 8007270:	68b1      	ldr	r1, [r6, #8]
 8007272:	f023 0303 	bic.w	r3, r3, #3
 8007276:	60ca      	str	r2, [r1, #12]
 8007278:	4433      	add	r3, r6
 800727a:	6091      	str	r1, [r2, #8]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	f042 0201 	orr.w	r2, r2, #1
 8007282:	605a      	str	r2, [r3, #4]
 8007284:	4648      	mov	r0, r9
 8007286:	f000 f9f1 	bl	800766c <__malloc_unlock>
 800728a:	3608      	adds	r6, #8
 800728c:	e109      	b.n	80074a2 <_malloc_r+0x282>
 800728e:	3302      	adds	r3, #2
 8007290:	4a8c      	ldr	r2, [pc, #560]	; (80074c4 <_malloc_r+0x2a4>)
 8007292:	692e      	ldr	r6, [r5, #16]
 8007294:	4296      	cmp	r6, r2
 8007296:	4611      	mov	r1, r2
 8007298:	d06d      	beq.n	8007376 <_malloc_r+0x156>
 800729a:	6870      	ldr	r0, [r6, #4]
 800729c:	f020 0003 	bic.w	r0, r0, #3
 80072a0:	1b07      	subs	r7, r0, r4
 80072a2:	2f0f      	cmp	r7, #15
 80072a4:	dd47      	ble.n	8007336 <_malloc_r+0x116>
 80072a6:	1933      	adds	r3, r6, r4
 80072a8:	f044 0401 	orr.w	r4, r4, #1
 80072ac:	6074      	str	r4, [r6, #4]
 80072ae:	616b      	str	r3, [r5, #20]
 80072b0:	612b      	str	r3, [r5, #16]
 80072b2:	60da      	str	r2, [r3, #12]
 80072b4:	609a      	str	r2, [r3, #8]
 80072b6:	f047 0201 	orr.w	r2, r7, #1
 80072ba:	605a      	str	r2, [r3, #4]
 80072bc:	5037      	str	r7, [r6, r0]
 80072be:	e7e1      	b.n	8007284 <_malloc_r+0x64>
 80072c0:	0a63      	lsrs	r3, r4, #9
 80072c2:	d02a      	beq.n	800731a <_malloc_r+0xfa>
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d812      	bhi.n	80072ee <_malloc_r+0xce>
 80072c8:	09a3      	lsrs	r3, r4, #6
 80072ca:	3338      	adds	r3, #56	; 0x38
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80072d2:	f1a2 0008 	sub.w	r0, r2, #8
 80072d6:	6856      	ldr	r6, [r2, #4]
 80072d8:	4286      	cmp	r6, r0
 80072da:	d006      	beq.n	80072ea <_malloc_r+0xca>
 80072dc:	6872      	ldr	r2, [r6, #4]
 80072de:	f022 0203 	bic.w	r2, r2, #3
 80072e2:	1b11      	subs	r1, r2, r4
 80072e4:	290f      	cmp	r1, #15
 80072e6:	dd1c      	ble.n	8007322 <_malloc_r+0x102>
 80072e8:	3b01      	subs	r3, #1
 80072ea:	3301      	adds	r3, #1
 80072ec:	e7d0      	b.n	8007290 <_malloc_r+0x70>
 80072ee:	2b14      	cmp	r3, #20
 80072f0:	d801      	bhi.n	80072f6 <_malloc_r+0xd6>
 80072f2:	335b      	adds	r3, #91	; 0x5b
 80072f4:	e7ea      	b.n	80072cc <_malloc_r+0xac>
 80072f6:	2b54      	cmp	r3, #84	; 0x54
 80072f8:	d802      	bhi.n	8007300 <_malloc_r+0xe0>
 80072fa:	0b23      	lsrs	r3, r4, #12
 80072fc:	336e      	adds	r3, #110	; 0x6e
 80072fe:	e7e5      	b.n	80072cc <_malloc_r+0xac>
 8007300:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007304:	d802      	bhi.n	800730c <_malloc_r+0xec>
 8007306:	0be3      	lsrs	r3, r4, #15
 8007308:	3377      	adds	r3, #119	; 0x77
 800730a:	e7df      	b.n	80072cc <_malloc_r+0xac>
 800730c:	f240 5254 	movw	r2, #1364	; 0x554
 8007310:	4293      	cmp	r3, r2
 8007312:	d804      	bhi.n	800731e <_malloc_r+0xfe>
 8007314:	0ca3      	lsrs	r3, r4, #18
 8007316:	337c      	adds	r3, #124	; 0x7c
 8007318:	e7d8      	b.n	80072cc <_malloc_r+0xac>
 800731a:	233f      	movs	r3, #63	; 0x3f
 800731c:	e7d6      	b.n	80072cc <_malloc_r+0xac>
 800731e:	237e      	movs	r3, #126	; 0x7e
 8007320:	e7d4      	b.n	80072cc <_malloc_r+0xac>
 8007322:	2900      	cmp	r1, #0
 8007324:	68f1      	ldr	r1, [r6, #12]
 8007326:	db04      	blt.n	8007332 <_malloc_r+0x112>
 8007328:	68b3      	ldr	r3, [r6, #8]
 800732a:	60d9      	str	r1, [r3, #12]
 800732c:	608b      	str	r3, [r1, #8]
 800732e:	18b3      	adds	r3, r6, r2
 8007330:	e7a4      	b.n	800727c <_malloc_r+0x5c>
 8007332:	460e      	mov	r6, r1
 8007334:	e7d0      	b.n	80072d8 <_malloc_r+0xb8>
 8007336:	2f00      	cmp	r7, #0
 8007338:	616a      	str	r2, [r5, #20]
 800733a:	612a      	str	r2, [r5, #16]
 800733c:	db05      	blt.n	800734a <_malloc_r+0x12a>
 800733e:	4430      	add	r0, r6
 8007340:	6843      	ldr	r3, [r0, #4]
 8007342:	f043 0301 	orr.w	r3, r3, #1
 8007346:	6043      	str	r3, [r0, #4]
 8007348:	e79c      	b.n	8007284 <_malloc_r+0x64>
 800734a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800734e:	d244      	bcs.n	80073da <_malloc_r+0x1ba>
 8007350:	08c0      	lsrs	r0, r0, #3
 8007352:	1087      	asrs	r7, r0, #2
 8007354:	2201      	movs	r2, #1
 8007356:	fa02 f707 	lsl.w	r7, r2, r7
 800735a:	686a      	ldr	r2, [r5, #4]
 800735c:	3001      	adds	r0, #1
 800735e:	433a      	orrs	r2, r7
 8007360:	606a      	str	r2, [r5, #4]
 8007362:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007366:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800736a:	60b7      	str	r7, [r6, #8]
 800736c:	3a08      	subs	r2, #8
 800736e:	60f2      	str	r2, [r6, #12]
 8007370:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8007374:	60fe      	str	r6, [r7, #12]
 8007376:	2001      	movs	r0, #1
 8007378:	109a      	asrs	r2, r3, #2
 800737a:	fa00 f202 	lsl.w	r2, r0, r2
 800737e:	6868      	ldr	r0, [r5, #4]
 8007380:	4282      	cmp	r2, r0
 8007382:	f200 80a1 	bhi.w	80074c8 <_malloc_r+0x2a8>
 8007386:	4202      	tst	r2, r0
 8007388:	d106      	bne.n	8007398 <_malloc_r+0x178>
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	0052      	lsls	r2, r2, #1
 8007390:	4202      	tst	r2, r0
 8007392:	f103 0304 	add.w	r3, r3, #4
 8007396:	d0fa      	beq.n	800738e <_malloc_r+0x16e>
 8007398:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800739c:	46e0      	mov	r8, ip
 800739e:	469e      	mov	lr, r3
 80073a0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80073a4:	4546      	cmp	r6, r8
 80073a6:	d153      	bne.n	8007450 <_malloc_r+0x230>
 80073a8:	f10e 0e01 	add.w	lr, lr, #1
 80073ac:	f01e 0f03 	tst.w	lr, #3
 80073b0:	f108 0808 	add.w	r8, r8, #8
 80073b4:	d1f4      	bne.n	80073a0 <_malloc_r+0x180>
 80073b6:	0798      	lsls	r0, r3, #30
 80073b8:	d179      	bne.n	80074ae <_malloc_r+0x28e>
 80073ba:	686b      	ldr	r3, [r5, #4]
 80073bc:	ea23 0302 	bic.w	r3, r3, r2
 80073c0:	606b      	str	r3, [r5, #4]
 80073c2:	6868      	ldr	r0, [r5, #4]
 80073c4:	0052      	lsls	r2, r2, #1
 80073c6:	4282      	cmp	r2, r0
 80073c8:	d87e      	bhi.n	80074c8 <_malloc_r+0x2a8>
 80073ca:	2a00      	cmp	r2, #0
 80073cc:	d07c      	beq.n	80074c8 <_malloc_r+0x2a8>
 80073ce:	4673      	mov	r3, lr
 80073d0:	4202      	tst	r2, r0
 80073d2:	d1e1      	bne.n	8007398 <_malloc_r+0x178>
 80073d4:	3304      	adds	r3, #4
 80073d6:	0052      	lsls	r2, r2, #1
 80073d8:	e7fa      	b.n	80073d0 <_malloc_r+0x1b0>
 80073da:	0a42      	lsrs	r2, r0, #9
 80073dc:	2a04      	cmp	r2, #4
 80073de:	d815      	bhi.n	800740c <_malloc_r+0x1ec>
 80073e0:	0982      	lsrs	r2, r0, #6
 80073e2:	3238      	adds	r2, #56	; 0x38
 80073e4:	1c57      	adds	r7, r2, #1
 80073e6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80073ea:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80073ee:	45be      	cmp	lr, r7
 80073f0:	d126      	bne.n	8007440 <_malloc_r+0x220>
 80073f2:	2001      	movs	r0, #1
 80073f4:	1092      	asrs	r2, r2, #2
 80073f6:	fa00 f202 	lsl.w	r2, r0, r2
 80073fa:	6868      	ldr	r0, [r5, #4]
 80073fc:	4310      	orrs	r0, r2
 80073fe:	6068      	str	r0, [r5, #4]
 8007400:	f8c6 e00c 	str.w	lr, [r6, #12]
 8007404:	60b7      	str	r7, [r6, #8]
 8007406:	f8ce 6008 	str.w	r6, [lr, #8]
 800740a:	e7b3      	b.n	8007374 <_malloc_r+0x154>
 800740c:	2a14      	cmp	r2, #20
 800740e:	d801      	bhi.n	8007414 <_malloc_r+0x1f4>
 8007410:	325b      	adds	r2, #91	; 0x5b
 8007412:	e7e7      	b.n	80073e4 <_malloc_r+0x1c4>
 8007414:	2a54      	cmp	r2, #84	; 0x54
 8007416:	d802      	bhi.n	800741e <_malloc_r+0x1fe>
 8007418:	0b02      	lsrs	r2, r0, #12
 800741a:	326e      	adds	r2, #110	; 0x6e
 800741c:	e7e2      	b.n	80073e4 <_malloc_r+0x1c4>
 800741e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007422:	d802      	bhi.n	800742a <_malloc_r+0x20a>
 8007424:	0bc2      	lsrs	r2, r0, #15
 8007426:	3277      	adds	r2, #119	; 0x77
 8007428:	e7dc      	b.n	80073e4 <_malloc_r+0x1c4>
 800742a:	f240 5754 	movw	r7, #1364	; 0x554
 800742e:	42ba      	cmp	r2, r7
 8007430:	bf9a      	itte	ls
 8007432:	0c82      	lsrls	r2, r0, #18
 8007434:	327c      	addls	r2, #124	; 0x7c
 8007436:	227e      	movhi	r2, #126	; 0x7e
 8007438:	e7d4      	b.n	80073e4 <_malloc_r+0x1c4>
 800743a:	68bf      	ldr	r7, [r7, #8]
 800743c:	45be      	cmp	lr, r7
 800743e:	d004      	beq.n	800744a <_malloc_r+0x22a>
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	f022 0203 	bic.w	r2, r2, #3
 8007446:	4290      	cmp	r0, r2
 8007448:	d3f7      	bcc.n	800743a <_malloc_r+0x21a>
 800744a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800744e:	e7d7      	b.n	8007400 <_malloc_r+0x1e0>
 8007450:	6870      	ldr	r0, [r6, #4]
 8007452:	68f7      	ldr	r7, [r6, #12]
 8007454:	f020 0003 	bic.w	r0, r0, #3
 8007458:	eba0 0a04 	sub.w	sl, r0, r4
 800745c:	f1ba 0f0f 	cmp.w	sl, #15
 8007460:	dd10      	ble.n	8007484 <_malloc_r+0x264>
 8007462:	68b2      	ldr	r2, [r6, #8]
 8007464:	1933      	adds	r3, r6, r4
 8007466:	f044 0401 	orr.w	r4, r4, #1
 800746a:	6074      	str	r4, [r6, #4]
 800746c:	60d7      	str	r7, [r2, #12]
 800746e:	60ba      	str	r2, [r7, #8]
 8007470:	f04a 0201 	orr.w	r2, sl, #1
 8007474:	616b      	str	r3, [r5, #20]
 8007476:	612b      	str	r3, [r5, #16]
 8007478:	60d9      	str	r1, [r3, #12]
 800747a:	6099      	str	r1, [r3, #8]
 800747c:	605a      	str	r2, [r3, #4]
 800747e:	f846 a000 	str.w	sl, [r6, r0]
 8007482:	e6ff      	b.n	8007284 <_malloc_r+0x64>
 8007484:	f1ba 0f00 	cmp.w	sl, #0
 8007488:	db0f      	blt.n	80074aa <_malloc_r+0x28a>
 800748a:	4430      	add	r0, r6
 800748c:	6843      	ldr	r3, [r0, #4]
 800748e:	f043 0301 	orr.w	r3, r3, #1
 8007492:	6043      	str	r3, [r0, #4]
 8007494:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8007498:	4648      	mov	r0, r9
 800749a:	60df      	str	r7, [r3, #12]
 800749c:	60bb      	str	r3, [r7, #8]
 800749e:	f000 f8e5 	bl	800766c <__malloc_unlock>
 80074a2:	4630      	mov	r0, r6
 80074a4:	b003      	add	sp, #12
 80074a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074aa:	463e      	mov	r6, r7
 80074ac:	e77a      	b.n	80073a4 <_malloc_r+0x184>
 80074ae:	f85c 0908 	ldr.w	r0, [ip], #-8
 80074b2:	4584      	cmp	ip, r0
 80074b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80074b8:	f43f af7d 	beq.w	80073b6 <_malloc_r+0x196>
 80074bc:	e781      	b.n	80073c2 <_malloc_r+0x1a2>
 80074be:	bf00      	nop
 80074c0:	2000026c 	.word	0x2000026c
 80074c4:	20000274 	.word	0x20000274
 80074c8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80074cc:	f8db 6004 	ldr.w	r6, [fp, #4]
 80074d0:	f026 0603 	bic.w	r6, r6, #3
 80074d4:	42b4      	cmp	r4, r6
 80074d6:	d803      	bhi.n	80074e0 <_malloc_r+0x2c0>
 80074d8:	1b33      	subs	r3, r6, r4
 80074da:	2b0f      	cmp	r3, #15
 80074dc:	f300 8096 	bgt.w	800760c <_malloc_r+0x3ec>
 80074e0:	4a4f      	ldr	r2, [pc, #316]	; (8007620 <_malloc_r+0x400>)
 80074e2:	6817      	ldr	r7, [r2, #0]
 80074e4:	4a4f      	ldr	r2, [pc, #316]	; (8007624 <_malloc_r+0x404>)
 80074e6:	6811      	ldr	r1, [r2, #0]
 80074e8:	3710      	adds	r7, #16
 80074ea:	3101      	adds	r1, #1
 80074ec:	eb0b 0306 	add.w	r3, fp, r6
 80074f0:	4427      	add	r7, r4
 80074f2:	d005      	beq.n	8007500 <_malloc_r+0x2e0>
 80074f4:	494c      	ldr	r1, [pc, #304]	; (8007628 <_malloc_r+0x408>)
 80074f6:	3901      	subs	r1, #1
 80074f8:	440f      	add	r7, r1
 80074fa:	3101      	adds	r1, #1
 80074fc:	4249      	negs	r1, r1
 80074fe:	400f      	ands	r7, r1
 8007500:	4639      	mov	r1, r7
 8007502:	4648      	mov	r0, r9
 8007504:	9201      	str	r2, [sp, #4]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	f000 fb86 	bl	8007c18 <_sbrk_r>
 800750c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007510:	4680      	mov	r8, r0
 8007512:	d056      	beq.n	80075c2 <_malloc_r+0x3a2>
 8007514:	9b00      	ldr	r3, [sp, #0]
 8007516:	9a01      	ldr	r2, [sp, #4]
 8007518:	4283      	cmp	r3, r0
 800751a:	d901      	bls.n	8007520 <_malloc_r+0x300>
 800751c:	45ab      	cmp	fp, r5
 800751e:	d150      	bne.n	80075c2 <_malloc_r+0x3a2>
 8007520:	4842      	ldr	r0, [pc, #264]	; (800762c <_malloc_r+0x40c>)
 8007522:	6801      	ldr	r1, [r0, #0]
 8007524:	4543      	cmp	r3, r8
 8007526:	eb07 0e01 	add.w	lr, r7, r1
 800752a:	f8c0 e000 	str.w	lr, [r0]
 800752e:	4940      	ldr	r1, [pc, #256]	; (8007630 <_malloc_r+0x410>)
 8007530:	4682      	mov	sl, r0
 8007532:	d113      	bne.n	800755c <_malloc_r+0x33c>
 8007534:	420b      	tst	r3, r1
 8007536:	d111      	bne.n	800755c <_malloc_r+0x33c>
 8007538:	68ab      	ldr	r3, [r5, #8]
 800753a:	443e      	add	r6, r7
 800753c:	f046 0601 	orr.w	r6, r6, #1
 8007540:	605e      	str	r6, [r3, #4]
 8007542:	4a3c      	ldr	r2, [pc, #240]	; (8007634 <_malloc_r+0x414>)
 8007544:	f8da 3000 	ldr.w	r3, [sl]
 8007548:	6811      	ldr	r1, [r2, #0]
 800754a:	428b      	cmp	r3, r1
 800754c:	bf88      	it	hi
 800754e:	6013      	strhi	r3, [r2, #0]
 8007550:	4a39      	ldr	r2, [pc, #228]	; (8007638 <_malloc_r+0x418>)
 8007552:	6811      	ldr	r1, [r2, #0]
 8007554:	428b      	cmp	r3, r1
 8007556:	bf88      	it	hi
 8007558:	6013      	strhi	r3, [r2, #0]
 800755a:	e032      	b.n	80075c2 <_malloc_r+0x3a2>
 800755c:	6810      	ldr	r0, [r2, #0]
 800755e:	3001      	adds	r0, #1
 8007560:	bf1b      	ittet	ne
 8007562:	eba8 0303 	subne.w	r3, r8, r3
 8007566:	4473      	addne	r3, lr
 8007568:	f8c2 8000 	streq.w	r8, [r2]
 800756c:	f8ca 3000 	strne.w	r3, [sl]
 8007570:	f018 0007 	ands.w	r0, r8, #7
 8007574:	bf1c      	itt	ne
 8007576:	f1c0 0008 	rsbne	r0, r0, #8
 800757a:	4480      	addne	r8, r0
 800757c:	4b2a      	ldr	r3, [pc, #168]	; (8007628 <_malloc_r+0x408>)
 800757e:	4447      	add	r7, r8
 8007580:	4418      	add	r0, r3
 8007582:	400f      	ands	r7, r1
 8007584:	1bc7      	subs	r7, r0, r7
 8007586:	4639      	mov	r1, r7
 8007588:	4648      	mov	r0, r9
 800758a:	f000 fb45 	bl	8007c18 <_sbrk_r>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	bf08      	it	eq
 8007592:	4640      	moveq	r0, r8
 8007594:	f8da 3000 	ldr.w	r3, [sl]
 8007598:	f8c5 8008 	str.w	r8, [r5, #8]
 800759c:	bf08      	it	eq
 800759e:	2700      	moveq	r7, #0
 80075a0:	eba0 0008 	sub.w	r0, r0, r8
 80075a4:	443b      	add	r3, r7
 80075a6:	4407      	add	r7, r0
 80075a8:	f047 0701 	orr.w	r7, r7, #1
 80075ac:	45ab      	cmp	fp, r5
 80075ae:	f8ca 3000 	str.w	r3, [sl]
 80075b2:	f8c8 7004 	str.w	r7, [r8, #4]
 80075b6:	d0c4      	beq.n	8007542 <_malloc_r+0x322>
 80075b8:	2e0f      	cmp	r6, #15
 80075ba:	d810      	bhi.n	80075de <_malloc_r+0x3be>
 80075bc:	2301      	movs	r3, #1
 80075be:	f8c8 3004 	str.w	r3, [r8, #4]
 80075c2:	68ab      	ldr	r3, [r5, #8]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	f022 0203 	bic.w	r2, r2, #3
 80075ca:	4294      	cmp	r4, r2
 80075cc:	eba2 0304 	sub.w	r3, r2, r4
 80075d0:	d801      	bhi.n	80075d6 <_malloc_r+0x3b6>
 80075d2:	2b0f      	cmp	r3, #15
 80075d4:	dc1a      	bgt.n	800760c <_malloc_r+0x3ec>
 80075d6:	4648      	mov	r0, r9
 80075d8:	f000 f848 	bl	800766c <__malloc_unlock>
 80075dc:	e62d      	b.n	800723a <_malloc_r+0x1a>
 80075de:	f8db 3004 	ldr.w	r3, [fp, #4]
 80075e2:	3e0c      	subs	r6, #12
 80075e4:	f026 0607 	bic.w	r6, r6, #7
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	4333      	orrs	r3, r6
 80075ee:	f8cb 3004 	str.w	r3, [fp, #4]
 80075f2:	eb0b 0306 	add.w	r3, fp, r6
 80075f6:	2205      	movs	r2, #5
 80075f8:	2e0f      	cmp	r6, #15
 80075fa:	605a      	str	r2, [r3, #4]
 80075fc:	609a      	str	r2, [r3, #8]
 80075fe:	d9a0      	bls.n	8007542 <_malloc_r+0x322>
 8007600:	f10b 0108 	add.w	r1, fp, #8
 8007604:	4648      	mov	r0, r9
 8007606:	f000 fc21 	bl	8007e4c <_free_r>
 800760a:	e79a      	b.n	8007542 <_malloc_r+0x322>
 800760c:	68ae      	ldr	r6, [r5, #8]
 800760e:	f044 0201 	orr.w	r2, r4, #1
 8007612:	4434      	add	r4, r6
 8007614:	f043 0301 	orr.w	r3, r3, #1
 8007618:	6072      	str	r2, [r6, #4]
 800761a:	60ac      	str	r4, [r5, #8]
 800761c:	6063      	str	r3, [r4, #4]
 800761e:	e631      	b.n	8007284 <_malloc_r+0x64>
 8007620:	200006e8 	.word	0x200006e8
 8007624:	20000674 	.word	0x20000674
 8007628:	00000080 	.word	0x00000080
 800762c:	200006b8 	.word	0x200006b8
 8007630:	0000007f 	.word	0x0000007f
 8007634:	200006e0 	.word	0x200006e0
 8007638:	200006e4 	.word	0x200006e4

0800763c <__ascii_mbtowc>:
 800763c:	b082      	sub	sp, #8
 800763e:	b901      	cbnz	r1, 8007642 <__ascii_mbtowc+0x6>
 8007640:	a901      	add	r1, sp, #4
 8007642:	b142      	cbz	r2, 8007656 <__ascii_mbtowc+0x1a>
 8007644:	b14b      	cbz	r3, 800765a <__ascii_mbtowc+0x1e>
 8007646:	7813      	ldrb	r3, [r2, #0]
 8007648:	600b      	str	r3, [r1, #0]
 800764a:	7812      	ldrb	r2, [r2, #0]
 800764c:	1c10      	adds	r0, r2, #0
 800764e:	bf18      	it	ne
 8007650:	2001      	movne	r0, #1
 8007652:	b002      	add	sp, #8
 8007654:	4770      	bx	lr
 8007656:	4610      	mov	r0, r2
 8007658:	e7fb      	b.n	8007652 <__ascii_mbtowc+0x16>
 800765a:	f06f 0001 	mvn.w	r0, #1
 800765e:	e7f8      	b.n	8007652 <__ascii_mbtowc+0x16>

08007660 <__malloc_lock>:
 8007660:	4801      	ldr	r0, [pc, #4]	; (8007668 <__malloc_lock+0x8>)
 8007662:	f000 bcaf 	b.w	8007fc4 <__retarget_lock_acquire_recursive>
 8007666:	bf00      	nop
 8007668:	20001010 	.word	0x20001010

0800766c <__malloc_unlock>:
 800766c:	4801      	ldr	r0, [pc, #4]	; (8007674 <__malloc_unlock+0x8>)
 800766e:	f000 bcaa 	b.w	8007fc6 <__retarget_lock_release_recursive>
 8007672:	bf00      	nop
 8007674:	20001010 	.word	0x20001010

08007678 <_Balloc>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800767c:	4604      	mov	r4, r0
 800767e:	460e      	mov	r6, r1
 8007680:	b93d      	cbnz	r5, 8007692 <_Balloc+0x1a>
 8007682:	2010      	movs	r0, #16
 8007684:	f7ff fdc4 	bl	8007210 <malloc>
 8007688:	6260      	str	r0, [r4, #36]	; 0x24
 800768a:	6045      	str	r5, [r0, #4]
 800768c:	6085      	str	r5, [r0, #8]
 800768e:	6005      	str	r5, [r0, #0]
 8007690:	60c5      	str	r5, [r0, #12]
 8007692:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007694:	68eb      	ldr	r3, [r5, #12]
 8007696:	b183      	cbz	r3, 80076ba <_Balloc+0x42>
 8007698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80076a0:	b9b8      	cbnz	r0, 80076d2 <_Balloc+0x5a>
 80076a2:	2101      	movs	r1, #1
 80076a4:	fa01 f506 	lsl.w	r5, r1, r6
 80076a8:	1d6a      	adds	r2, r5, #5
 80076aa:	0092      	lsls	r2, r2, #2
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 fb4a 	bl	8007d46 <_calloc_r>
 80076b2:	b160      	cbz	r0, 80076ce <_Balloc+0x56>
 80076b4:	6046      	str	r6, [r0, #4]
 80076b6:	6085      	str	r5, [r0, #8]
 80076b8:	e00e      	b.n	80076d8 <_Balloc+0x60>
 80076ba:	2221      	movs	r2, #33	; 0x21
 80076bc:	2104      	movs	r1, #4
 80076be:	4620      	mov	r0, r4
 80076c0:	f000 fb41 	bl	8007d46 <_calloc_r>
 80076c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076c6:	60e8      	str	r0, [r5, #12]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e4      	bne.n	8007698 <_Balloc+0x20>
 80076ce:	2000      	movs	r0, #0
 80076d0:	bd70      	pop	{r4, r5, r6, pc}
 80076d2:	6802      	ldr	r2, [r0, #0]
 80076d4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80076d8:	2300      	movs	r3, #0
 80076da:	6103      	str	r3, [r0, #16]
 80076dc:	60c3      	str	r3, [r0, #12]
 80076de:	bd70      	pop	{r4, r5, r6, pc}

080076e0 <_Bfree>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80076e4:	4606      	mov	r6, r0
 80076e6:	460d      	mov	r5, r1
 80076e8:	b93c      	cbnz	r4, 80076fa <_Bfree+0x1a>
 80076ea:	2010      	movs	r0, #16
 80076ec:	f7ff fd90 	bl	8007210 <malloc>
 80076f0:	6270      	str	r0, [r6, #36]	; 0x24
 80076f2:	6044      	str	r4, [r0, #4]
 80076f4:	6084      	str	r4, [r0, #8]
 80076f6:	6004      	str	r4, [r0, #0]
 80076f8:	60c4      	str	r4, [r0, #12]
 80076fa:	b13d      	cbz	r5, 800770c <_Bfree+0x2c>
 80076fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80076fe:	686a      	ldr	r2, [r5, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007706:	6029      	str	r1, [r5, #0]
 8007708:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800770c:	bd70      	pop	{r4, r5, r6, pc}

0800770e <__multadd>:
 800770e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007712:	690d      	ldr	r5, [r1, #16]
 8007714:	461f      	mov	r7, r3
 8007716:	4606      	mov	r6, r0
 8007718:	460c      	mov	r4, r1
 800771a:	f101 0e14 	add.w	lr, r1, #20
 800771e:	2300      	movs	r3, #0
 8007720:	f8de 0000 	ldr.w	r0, [lr]
 8007724:	b281      	uxth	r1, r0
 8007726:	fb02 7101 	mla	r1, r2, r1, r7
 800772a:	0c0f      	lsrs	r7, r1, #16
 800772c:	0c00      	lsrs	r0, r0, #16
 800772e:	fb02 7000 	mla	r0, r2, r0, r7
 8007732:	b289      	uxth	r1, r1
 8007734:	3301      	adds	r3, #1
 8007736:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800773a:	429d      	cmp	r5, r3
 800773c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007740:	f84e 1b04 	str.w	r1, [lr], #4
 8007744:	dcec      	bgt.n	8007720 <__multadd+0x12>
 8007746:	b1d7      	cbz	r7, 800777e <__multadd+0x70>
 8007748:	68a3      	ldr	r3, [r4, #8]
 800774a:	429d      	cmp	r5, r3
 800774c:	db12      	blt.n	8007774 <__multadd+0x66>
 800774e:	6861      	ldr	r1, [r4, #4]
 8007750:	4630      	mov	r0, r6
 8007752:	3101      	adds	r1, #1
 8007754:	f7ff ff90 	bl	8007678 <_Balloc>
 8007758:	6922      	ldr	r2, [r4, #16]
 800775a:	3202      	adds	r2, #2
 800775c:	f104 010c 	add.w	r1, r4, #12
 8007760:	4680      	mov	r8, r0
 8007762:	0092      	lsls	r2, r2, #2
 8007764:	300c      	adds	r0, #12
 8007766:	f7fd fedf 	bl	8005528 <memcpy>
 800776a:	4621      	mov	r1, r4
 800776c:	4630      	mov	r0, r6
 800776e:	f7ff ffb7 	bl	80076e0 <_Bfree>
 8007772:	4644      	mov	r4, r8
 8007774:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007778:	3501      	adds	r5, #1
 800777a:	615f      	str	r7, [r3, #20]
 800777c:	6125      	str	r5, [r4, #16]
 800777e:	4620      	mov	r0, r4
 8007780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007784 <__hi0bits>:
 8007784:	0c02      	lsrs	r2, r0, #16
 8007786:	0412      	lsls	r2, r2, #16
 8007788:	4603      	mov	r3, r0
 800778a:	b9b2      	cbnz	r2, 80077ba <__hi0bits+0x36>
 800778c:	0403      	lsls	r3, r0, #16
 800778e:	2010      	movs	r0, #16
 8007790:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007794:	bf04      	itt	eq
 8007796:	021b      	lsleq	r3, r3, #8
 8007798:	3008      	addeq	r0, #8
 800779a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800779e:	bf04      	itt	eq
 80077a0:	011b      	lsleq	r3, r3, #4
 80077a2:	3004      	addeq	r0, #4
 80077a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80077a8:	bf04      	itt	eq
 80077aa:	009b      	lsleq	r3, r3, #2
 80077ac:	3002      	addeq	r0, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	db06      	blt.n	80077c0 <__hi0bits+0x3c>
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	d503      	bpl.n	80077be <__hi0bits+0x3a>
 80077b6:	3001      	adds	r0, #1
 80077b8:	4770      	bx	lr
 80077ba:	2000      	movs	r0, #0
 80077bc:	e7e8      	b.n	8007790 <__hi0bits+0xc>
 80077be:	2020      	movs	r0, #32
 80077c0:	4770      	bx	lr

080077c2 <__lo0bits>:
 80077c2:	6803      	ldr	r3, [r0, #0]
 80077c4:	f013 0207 	ands.w	r2, r3, #7
 80077c8:	4601      	mov	r1, r0
 80077ca:	d00b      	beq.n	80077e4 <__lo0bits+0x22>
 80077cc:	07da      	lsls	r2, r3, #31
 80077ce:	d423      	bmi.n	8007818 <__lo0bits+0x56>
 80077d0:	0798      	lsls	r0, r3, #30
 80077d2:	bf49      	itett	mi
 80077d4:	085b      	lsrmi	r3, r3, #1
 80077d6:	089b      	lsrpl	r3, r3, #2
 80077d8:	2001      	movmi	r0, #1
 80077da:	600b      	strmi	r3, [r1, #0]
 80077dc:	bf5c      	itt	pl
 80077de:	600b      	strpl	r3, [r1, #0]
 80077e0:	2002      	movpl	r0, #2
 80077e2:	4770      	bx	lr
 80077e4:	b298      	uxth	r0, r3
 80077e6:	b9a8      	cbnz	r0, 8007814 <__lo0bits+0x52>
 80077e8:	0c1b      	lsrs	r3, r3, #16
 80077ea:	2010      	movs	r0, #16
 80077ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077f0:	bf04      	itt	eq
 80077f2:	0a1b      	lsreq	r3, r3, #8
 80077f4:	3008      	addeq	r0, #8
 80077f6:	071a      	lsls	r2, r3, #28
 80077f8:	bf04      	itt	eq
 80077fa:	091b      	lsreq	r3, r3, #4
 80077fc:	3004      	addeq	r0, #4
 80077fe:	079a      	lsls	r2, r3, #30
 8007800:	bf04      	itt	eq
 8007802:	089b      	lsreq	r3, r3, #2
 8007804:	3002      	addeq	r0, #2
 8007806:	07da      	lsls	r2, r3, #31
 8007808:	d402      	bmi.n	8007810 <__lo0bits+0x4e>
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	d006      	beq.n	800781c <__lo0bits+0x5a>
 800780e:	3001      	adds	r0, #1
 8007810:	600b      	str	r3, [r1, #0]
 8007812:	4770      	bx	lr
 8007814:	4610      	mov	r0, r2
 8007816:	e7e9      	b.n	80077ec <__lo0bits+0x2a>
 8007818:	2000      	movs	r0, #0
 800781a:	4770      	bx	lr
 800781c:	2020      	movs	r0, #32
 800781e:	4770      	bx	lr

08007820 <__i2b>:
 8007820:	b510      	push	{r4, lr}
 8007822:	460c      	mov	r4, r1
 8007824:	2101      	movs	r1, #1
 8007826:	f7ff ff27 	bl	8007678 <_Balloc>
 800782a:	2201      	movs	r2, #1
 800782c:	6144      	str	r4, [r0, #20]
 800782e:	6102      	str	r2, [r0, #16]
 8007830:	bd10      	pop	{r4, pc}

08007832 <__multiply>:
 8007832:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007836:	4614      	mov	r4, r2
 8007838:	690a      	ldr	r2, [r1, #16]
 800783a:	6923      	ldr	r3, [r4, #16]
 800783c:	429a      	cmp	r2, r3
 800783e:	bfb8      	it	lt
 8007840:	460b      	movlt	r3, r1
 8007842:	4689      	mov	r9, r1
 8007844:	bfbc      	itt	lt
 8007846:	46a1      	movlt	r9, r4
 8007848:	461c      	movlt	r4, r3
 800784a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800784e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007852:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007856:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800785a:	eb07 060a 	add.w	r6, r7, sl
 800785e:	429e      	cmp	r6, r3
 8007860:	bfc8      	it	gt
 8007862:	3101      	addgt	r1, #1
 8007864:	f7ff ff08 	bl	8007678 <_Balloc>
 8007868:	f100 0514 	add.w	r5, r0, #20
 800786c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007870:	462b      	mov	r3, r5
 8007872:	2200      	movs	r2, #0
 8007874:	4543      	cmp	r3, r8
 8007876:	d316      	bcc.n	80078a6 <__multiply+0x74>
 8007878:	f104 0214 	add.w	r2, r4, #20
 800787c:	f109 0114 	add.w	r1, r9, #20
 8007880:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8007884:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	9c01      	ldr	r4, [sp, #4]
 800788c:	4294      	cmp	r4, r2
 800788e:	4613      	mov	r3, r2
 8007890:	d80c      	bhi.n	80078ac <__multiply+0x7a>
 8007892:	2e00      	cmp	r6, #0
 8007894:	dd03      	ble.n	800789e <__multiply+0x6c>
 8007896:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800789a:	2b00      	cmp	r3, #0
 800789c:	d054      	beq.n	8007948 <__multiply+0x116>
 800789e:	6106      	str	r6, [r0, #16]
 80078a0:	b003      	add	sp, #12
 80078a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a6:	f843 2b04 	str.w	r2, [r3], #4
 80078aa:	e7e3      	b.n	8007874 <__multiply+0x42>
 80078ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80078b0:	3204      	adds	r2, #4
 80078b2:	f1ba 0f00 	cmp.w	sl, #0
 80078b6:	d020      	beq.n	80078fa <__multiply+0xc8>
 80078b8:	46ae      	mov	lr, r5
 80078ba:	4689      	mov	r9, r1
 80078bc:	f04f 0c00 	mov.w	ip, #0
 80078c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80078c4:	f8be b000 	ldrh.w	fp, [lr]
 80078c8:	b2a3      	uxth	r3, r4
 80078ca:	fb0a b303 	mla	r3, sl, r3, fp
 80078ce:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80078d2:	f8de 4000 	ldr.w	r4, [lr]
 80078d6:	4463      	add	r3, ip
 80078d8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80078dc:	fb0a c40b 	mla	r4, sl, fp, ip
 80078e0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80078ea:	454f      	cmp	r7, r9
 80078ec:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80078f0:	f84e 3b04 	str.w	r3, [lr], #4
 80078f4:	d8e4      	bhi.n	80078c0 <__multiply+0x8e>
 80078f6:	f8ce c000 	str.w	ip, [lr]
 80078fa:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80078fe:	f1b9 0f00 	cmp.w	r9, #0
 8007902:	d01f      	beq.n	8007944 <__multiply+0x112>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	46ae      	mov	lr, r5
 8007908:	468c      	mov	ip, r1
 800790a:	f04f 0a00 	mov.w	sl, #0
 800790e:	f8bc 4000 	ldrh.w	r4, [ip]
 8007912:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007916:	fb09 b404 	mla	r4, r9, r4, fp
 800791a:	44a2      	add	sl, r4
 800791c:	b29b      	uxth	r3, r3
 800791e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007922:	f84e 3b04 	str.w	r3, [lr], #4
 8007926:	f85c 3b04 	ldr.w	r3, [ip], #4
 800792a:	f8be 4000 	ldrh.w	r4, [lr]
 800792e:	0c1b      	lsrs	r3, r3, #16
 8007930:	fb09 4303 	mla	r3, r9, r3, r4
 8007934:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007938:	4567      	cmp	r7, ip
 800793a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800793e:	d8e6      	bhi.n	800790e <__multiply+0xdc>
 8007940:	f8ce 3000 	str.w	r3, [lr]
 8007944:	3504      	adds	r5, #4
 8007946:	e7a0      	b.n	800788a <__multiply+0x58>
 8007948:	3e01      	subs	r6, #1
 800794a:	e7a2      	b.n	8007892 <__multiply+0x60>

0800794c <__pow5mult>:
 800794c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007950:	4615      	mov	r5, r2
 8007952:	f012 0203 	ands.w	r2, r2, #3
 8007956:	4606      	mov	r6, r0
 8007958:	460f      	mov	r7, r1
 800795a:	d007      	beq.n	800796c <__pow5mult+0x20>
 800795c:	3a01      	subs	r2, #1
 800795e:	4c21      	ldr	r4, [pc, #132]	; (80079e4 <__pow5mult+0x98>)
 8007960:	2300      	movs	r3, #0
 8007962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007966:	f7ff fed2 	bl	800770e <__multadd>
 800796a:	4607      	mov	r7, r0
 800796c:	10ad      	asrs	r5, r5, #2
 800796e:	d035      	beq.n	80079dc <__pow5mult+0x90>
 8007970:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007972:	b93c      	cbnz	r4, 8007984 <__pow5mult+0x38>
 8007974:	2010      	movs	r0, #16
 8007976:	f7ff fc4b 	bl	8007210 <malloc>
 800797a:	6270      	str	r0, [r6, #36]	; 0x24
 800797c:	6044      	str	r4, [r0, #4]
 800797e:	6084      	str	r4, [r0, #8]
 8007980:	6004      	str	r4, [r0, #0]
 8007982:	60c4      	str	r4, [r0, #12]
 8007984:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007988:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800798c:	b94c      	cbnz	r4, 80079a2 <__pow5mult+0x56>
 800798e:	f240 2171 	movw	r1, #625	; 0x271
 8007992:	4630      	mov	r0, r6
 8007994:	f7ff ff44 	bl	8007820 <__i2b>
 8007998:	2300      	movs	r3, #0
 800799a:	f8c8 0008 	str.w	r0, [r8, #8]
 800799e:	4604      	mov	r4, r0
 80079a0:	6003      	str	r3, [r0, #0]
 80079a2:	f04f 0800 	mov.w	r8, #0
 80079a6:	07eb      	lsls	r3, r5, #31
 80079a8:	d50a      	bpl.n	80079c0 <__pow5mult+0x74>
 80079aa:	4639      	mov	r1, r7
 80079ac:	4622      	mov	r2, r4
 80079ae:	4630      	mov	r0, r6
 80079b0:	f7ff ff3f 	bl	8007832 <__multiply>
 80079b4:	4639      	mov	r1, r7
 80079b6:	4681      	mov	r9, r0
 80079b8:	4630      	mov	r0, r6
 80079ba:	f7ff fe91 	bl	80076e0 <_Bfree>
 80079be:	464f      	mov	r7, r9
 80079c0:	106d      	asrs	r5, r5, #1
 80079c2:	d00b      	beq.n	80079dc <__pow5mult+0x90>
 80079c4:	6820      	ldr	r0, [r4, #0]
 80079c6:	b938      	cbnz	r0, 80079d8 <__pow5mult+0x8c>
 80079c8:	4622      	mov	r2, r4
 80079ca:	4621      	mov	r1, r4
 80079cc:	4630      	mov	r0, r6
 80079ce:	f7ff ff30 	bl	8007832 <__multiply>
 80079d2:	6020      	str	r0, [r4, #0]
 80079d4:	f8c0 8000 	str.w	r8, [r0]
 80079d8:	4604      	mov	r4, r0
 80079da:	e7e4      	b.n	80079a6 <__pow5mult+0x5a>
 80079dc:	4638      	mov	r0, r7
 80079de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079e2:	bf00      	nop
 80079e4:	08008600 	.word	0x08008600

080079e8 <__lshift>:
 80079e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ec:	460c      	mov	r4, r1
 80079ee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	6849      	ldr	r1, [r1, #4]
 80079f6:	eb0a 0903 	add.w	r9, sl, r3
 80079fa:	68a3      	ldr	r3, [r4, #8]
 80079fc:	4607      	mov	r7, r0
 80079fe:	4616      	mov	r6, r2
 8007a00:	f109 0501 	add.w	r5, r9, #1
 8007a04:	42ab      	cmp	r3, r5
 8007a06:	db31      	blt.n	8007a6c <__lshift+0x84>
 8007a08:	4638      	mov	r0, r7
 8007a0a:	f7ff fe35 	bl	8007678 <_Balloc>
 8007a0e:	2200      	movs	r2, #0
 8007a10:	4680      	mov	r8, r0
 8007a12:	f100 0314 	add.w	r3, r0, #20
 8007a16:	4611      	mov	r1, r2
 8007a18:	4552      	cmp	r2, sl
 8007a1a:	db2a      	blt.n	8007a72 <__lshift+0x8a>
 8007a1c:	6920      	ldr	r0, [r4, #16]
 8007a1e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a22:	f104 0114 	add.w	r1, r4, #20
 8007a26:	f016 021f 	ands.w	r2, r6, #31
 8007a2a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007a2e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007a32:	d022      	beq.n	8007a7a <__lshift+0x92>
 8007a34:	f1c2 0c20 	rsb	ip, r2, #32
 8007a38:	2000      	movs	r0, #0
 8007a3a:	680e      	ldr	r6, [r1, #0]
 8007a3c:	4096      	lsls	r6, r2
 8007a3e:	4330      	orrs	r0, r6
 8007a40:	f843 0b04 	str.w	r0, [r3], #4
 8007a44:	f851 0b04 	ldr.w	r0, [r1], #4
 8007a48:	458e      	cmp	lr, r1
 8007a4a:	fa20 f00c 	lsr.w	r0, r0, ip
 8007a4e:	d8f4      	bhi.n	8007a3a <__lshift+0x52>
 8007a50:	6018      	str	r0, [r3, #0]
 8007a52:	b108      	cbz	r0, 8007a58 <__lshift+0x70>
 8007a54:	f109 0502 	add.w	r5, r9, #2
 8007a58:	3d01      	subs	r5, #1
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f8c8 5010 	str.w	r5, [r8, #16]
 8007a60:	4621      	mov	r1, r4
 8007a62:	f7ff fe3d 	bl	80076e0 <_Bfree>
 8007a66:	4640      	mov	r0, r8
 8007a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a6c:	3101      	adds	r1, #1
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	e7c8      	b.n	8007a04 <__lshift+0x1c>
 8007a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007a76:	3201      	adds	r2, #1
 8007a78:	e7ce      	b.n	8007a18 <__lshift+0x30>
 8007a7a:	3b04      	subs	r3, #4
 8007a7c:	f851 2b04 	ldr.w	r2, [r1], #4
 8007a80:	f843 2f04 	str.w	r2, [r3, #4]!
 8007a84:	458e      	cmp	lr, r1
 8007a86:	d8f9      	bhi.n	8007a7c <__lshift+0x94>
 8007a88:	e7e6      	b.n	8007a58 <__lshift+0x70>

08007a8a <__mcmp>:
 8007a8a:	6903      	ldr	r3, [r0, #16]
 8007a8c:	690a      	ldr	r2, [r1, #16]
 8007a8e:	1a9b      	subs	r3, r3, r2
 8007a90:	b530      	push	{r4, r5, lr}
 8007a92:	d10c      	bne.n	8007aae <__mcmp+0x24>
 8007a94:	0092      	lsls	r2, r2, #2
 8007a96:	3014      	adds	r0, #20
 8007a98:	3114      	adds	r1, #20
 8007a9a:	1884      	adds	r4, r0, r2
 8007a9c:	4411      	add	r1, r2
 8007a9e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007aa2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007aa6:	4295      	cmp	r5, r2
 8007aa8:	d003      	beq.n	8007ab2 <__mcmp+0x28>
 8007aaa:	d305      	bcc.n	8007ab8 <__mcmp+0x2e>
 8007aac:	2301      	movs	r3, #1
 8007aae:	4618      	mov	r0, r3
 8007ab0:	bd30      	pop	{r4, r5, pc}
 8007ab2:	42a0      	cmp	r0, r4
 8007ab4:	d3f3      	bcc.n	8007a9e <__mcmp+0x14>
 8007ab6:	e7fa      	b.n	8007aae <__mcmp+0x24>
 8007ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8007abc:	e7f7      	b.n	8007aae <__mcmp+0x24>

08007abe <__mdiff>:
 8007abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac2:	460d      	mov	r5, r1
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	4628      	mov	r0, r5
 8007aca:	4614      	mov	r4, r2
 8007acc:	f7ff ffdd 	bl	8007a8a <__mcmp>
 8007ad0:	1e06      	subs	r6, r0, #0
 8007ad2:	d108      	bne.n	8007ae6 <__mdiff+0x28>
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	f7ff fdce 	bl	8007678 <_Balloc>
 8007adc:	2301      	movs	r3, #1
 8007ade:	6103      	str	r3, [r0, #16]
 8007ae0:	6146      	str	r6, [r0, #20]
 8007ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae6:	bfa4      	itt	ge
 8007ae8:	4623      	movge	r3, r4
 8007aea:	462c      	movge	r4, r5
 8007aec:	4638      	mov	r0, r7
 8007aee:	6861      	ldr	r1, [r4, #4]
 8007af0:	bfa6      	itte	ge
 8007af2:	461d      	movge	r5, r3
 8007af4:	2600      	movge	r6, #0
 8007af6:	2601      	movlt	r6, #1
 8007af8:	f7ff fdbe 	bl	8007678 <_Balloc>
 8007afc:	692b      	ldr	r3, [r5, #16]
 8007afe:	60c6      	str	r6, [r0, #12]
 8007b00:	6926      	ldr	r6, [r4, #16]
 8007b02:	f105 0914 	add.w	r9, r5, #20
 8007b06:	f104 0214 	add.w	r2, r4, #20
 8007b0a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007b0e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007b12:	f100 0514 	add.w	r5, r0, #20
 8007b16:	f04f 0c00 	mov.w	ip, #0
 8007b1a:	f852 ab04 	ldr.w	sl, [r2], #4
 8007b1e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b22:	fa1c f18a 	uxtah	r1, ip, sl
 8007b26:	b2a3      	uxth	r3, r4
 8007b28:	1ac9      	subs	r1, r1, r3
 8007b2a:	0c23      	lsrs	r3, r4, #16
 8007b2c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007b30:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007b34:	b289      	uxth	r1, r1
 8007b36:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007b3a:	45c8      	cmp	r8, r9
 8007b3c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007b40:	4696      	mov	lr, r2
 8007b42:	f845 3b04 	str.w	r3, [r5], #4
 8007b46:	d8e8      	bhi.n	8007b1a <__mdiff+0x5c>
 8007b48:	45be      	cmp	lr, r7
 8007b4a:	d305      	bcc.n	8007b58 <__mdiff+0x9a>
 8007b4c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007b50:	b18b      	cbz	r3, 8007b76 <__mdiff+0xb8>
 8007b52:	6106      	str	r6, [r0, #16]
 8007b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b58:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007b5c:	fa1c f381 	uxtah	r3, ip, r1
 8007b60:	141a      	asrs	r2, r3, #16
 8007b62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b70:	f845 3b04 	str.w	r3, [r5], #4
 8007b74:	e7e8      	b.n	8007b48 <__mdiff+0x8a>
 8007b76:	3e01      	subs	r6, #1
 8007b78:	e7e8      	b.n	8007b4c <__mdiff+0x8e>

08007b7a <__d2b>:
 8007b7a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b7e:	460e      	mov	r6, r1
 8007b80:	2101      	movs	r1, #1
 8007b82:	ec59 8b10 	vmov	r8, r9, d0
 8007b86:	4615      	mov	r5, r2
 8007b88:	f7ff fd76 	bl	8007678 <_Balloc>
 8007b8c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007b90:	4607      	mov	r7, r0
 8007b92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b96:	bb34      	cbnz	r4, 8007be6 <__d2b+0x6c>
 8007b98:	9301      	str	r3, [sp, #4]
 8007b9a:	f1b8 0f00 	cmp.w	r8, #0
 8007b9e:	d027      	beq.n	8007bf0 <__d2b+0x76>
 8007ba0:	a802      	add	r0, sp, #8
 8007ba2:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007ba6:	f7ff fe0c 	bl	80077c2 <__lo0bits>
 8007baa:	9900      	ldr	r1, [sp, #0]
 8007bac:	b1f0      	cbz	r0, 8007bec <__d2b+0x72>
 8007bae:	9a01      	ldr	r2, [sp, #4]
 8007bb0:	f1c0 0320 	rsb	r3, r0, #32
 8007bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	40c2      	lsrs	r2, r0
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	9201      	str	r2, [sp, #4]
 8007bc0:	9b01      	ldr	r3, [sp, #4]
 8007bc2:	61bb      	str	r3, [r7, #24]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	bf14      	ite	ne
 8007bc8:	2102      	movne	r1, #2
 8007bca:	2101      	moveq	r1, #1
 8007bcc:	6139      	str	r1, [r7, #16]
 8007bce:	b1c4      	cbz	r4, 8007c02 <__d2b+0x88>
 8007bd0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007bd4:	4404      	add	r4, r0
 8007bd6:	6034      	str	r4, [r6, #0]
 8007bd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bdc:	6028      	str	r0, [r5, #0]
 8007bde:	4638      	mov	r0, r7
 8007be0:	b003      	add	sp, #12
 8007be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bea:	e7d5      	b.n	8007b98 <__d2b+0x1e>
 8007bec:	6179      	str	r1, [r7, #20]
 8007bee:	e7e7      	b.n	8007bc0 <__d2b+0x46>
 8007bf0:	a801      	add	r0, sp, #4
 8007bf2:	f7ff fde6 	bl	80077c2 <__lo0bits>
 8007bf6:	9b01      	ldr	r3, [sp, #4]
 8007bf8:	617b      	str	r3, [r7, #20]
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	6139      	str	r1, [r7, #16]
 8007bfe:	3020      	adds	r0, #32
 8007c00:	e7e5      	b.n	8007bce <__d2b+0x54>
 8007c02:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007c06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c0a:	6030      	str	r0, [r6, #0]
 8007c0c:	6918      	ldr	r0, [r3, #16]
 8007c0e:	f7ff fdb9 	bl	8007784 <__hi0bits>
 8007c12:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007c16:	e7e1      	b.n	8007bdc <__d2b+0x62>

08007c18 <_sbrk_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4c06      	ldr	r4, [pc, #24]	; (8007c34 <_sbrk_r+0x1c>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4605      	mov	r5, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	6023      	str	r3, [r4, #0]
 8007c24:	f000 fb6a 	bl	80082fc <_sbrk>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_sbrk_r+0x1a>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_sbrk_r+0x1a>
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	20001008 	.word	0x20001008

08007c38 <__ssprint_r>:
 8007c38:	6893      	ldr	r3, [r2, #8]
 8007c3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3e:	4681      	mov	r9, r0
 8007c40:	460c      	mov	r4, r1
 8007c42:	4617      	mov	r7, r2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d060      	beq.n	8007d0a <__ssprint_r+0xd2>
 8007c48:	f04f 0b00 	mov.w	fp, #0
 8007c4c:	f8d2 a000 	ldr.w	sl, [r2]
 8007c50:	465e      	mov	r6, fp
 8007c52:	b356      	cbz	r6, 8007caa <__ssprint_r+0x72>
 8007c54:	68a3      	ldr	r3, [r4, #8]
 8007c56:	429e      	cmp	r6, r3
 8007c58:	d344      	bcc.n	8007ce4 <__ssprint_r+0xac>
 8007c5a:	89a2      	ldrh	r2, [r4, #12]
 8007c5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c60:	d03e      	beq.n	8007ce0 <__ssprint_r+0xa8>
 8007c62:	6825      	ldr	r5, [r4, #0]
 8007c64:	6921      	ldr	r1, [r4, #16]
 8007c66:	eba5 0801 	sub.w	r8, r5, r1
 8007c6a:	6965      	ldr	r5, [r4, #20]
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c72:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c76:	f108 0301 	add.w	r3, r8, #1
 8007c7a:	4433      	add	r3, r6
 8007c7c:	429d      	cmp	r5, r3
 8007c7e:	bf38      	it	cc
 8007c80:	461d      	movcc	r5, r3
 8007c82:	0553      	lsls	r3, r2, #21
 8007c84:	d546      	bpl.n	8007d14 <__ssprint_r+0xdc>
 8007c86:	4629      	mov	r1, r5
 8007c88:	4648      	mov	r0, r9
 8007c8a:	f7ff fac9 	bl	8007220 <_malloc_r>
 8007c8e:	b998      	cbnz	r0, 8007cb8 <__ssprint_r+0x80>
 8007c90:	230c      	movs	r3, #12
 8007c92:	f8c9 3000 	str.w	r3, [r9]
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60bb      	str	r3, [r7, #8]
 8007ca2:	607b      	str	r3, [r7, #4]
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	e031      	b.n	8007d0e <__ssprint_r+0xd6>
 8007caa:	f8da b000 	ldr.w	fp, [sl]
 8007cae:	f8da 6004 	ldr.w	r6, [sl, #4]
 8007cb2:	f10a 0a08 	add.w	sl, sl, #8
 8007cb6:	e7cc      	b.n	8007c52 <__ssprint_r+0x1a>
 8007cb8:	4642      	mov	r2, r8
 8007cba:	6921      	ldr	r1, [r4, #16]
 8007cbc:	9001      	str	r0, [sp, #4]
 8007cbe:	f7fd fc33 	bl	8005528 <memcpy>
 8007cc2:	89a2      	ldrh	r2, [r4, #12]
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007cca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cce:	81a2      	strh	r2, [r4, #12]
 8007cd0:	6123      	str	r3, [r4, #16]
 8007cd2:	6165      	str	r5, [r4, #20]
 8007cd4:	4443      	add	r3, r8
 8007cd6:	eba5 0508 	sub.w	r5, r5, r8
 8007cda:	6023      	str	r3, [r4, #0]
 8007cdc:	60a5      	str	r5, [r4, #8]
 8007cde:	4633      	mov	r3, r6
 8007ce0:	429e      	cmp	r6, r3
 8007ce2:	d200      	bcs.n	8007ce6 <__ssprint_r+0xae>
 8007ce4:	4633      	mov	r3, r6
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	4659      	mov	r1, fp
 8007cea:	6820      	ldr	r0, [r4, #0]
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	f000 f96b 	bl	8007fc8 <memmove>
 8007cf2:	68a2      	ldr	r2, [r4, #8]
 8007cf4:	9b01      	ldr	r3, [sp, #4]
 8007cf6:	1ad2      	subs	r2, r2, r3
 8007cf8:	60a2      	str	r2, [r4, #8]
 8007cfa:	6822      	ldr	r2, [r4, #0]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	1b9e      	subs	r6, r3, r6
 8007d04:	60be      	str	r6, [r7, #8]
 8007d06:	2e00      	cmp	r6, #0
 8007d08:	d1cf      	bne.n	8007caa <__ssprint_r+0x72>
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	b003      	add	sp, #12
 8007d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d14:	462a      	mov	r2, r5
 8007d16:	4648      	mov	r0, r9
 8007d18:	f000 f970 	bl	8007ffc <_realloc_r>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d1d6      	bne.n	8007cd0 <__ssprint_r+0x98>
 8007d22:	6921      	ldr	r1, [r4, #16]
 8007d24:	4648      	mov	r0, r9
 8007d26:	f000 f891 	bl	8007e4c <_free_r>
 8007d2a:	e7b1      	b.n	8007c90 <__ssprint_r+0x58>

08007d2c <__ascii_wctomb>:
 8007d2c:	b149      	cbz	r1, 8007d42 <__ascii_wctomb+0x16>
 8007d2e:	2aff      	cmp	r2, #255	; 0xff
 8007d30:	bf85      	ittet	hi
 8007d32:	238a      	movhi	r3, #138	; 0x8a
 8007d34:	6003      	strhi	r3, [r0, #0]
 8007d36:	700a      	strbls	r2, [r1, #0]
 8007d38:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d3c:	bf98      	it	ls
 8007d3e:	2001      	movls	r0, #1
 8007d40:	4770      	bx	lr
 8007d42:	4608      	mov	r0, r1
 8007d44:	4770      	bx	lr

08007d46 <_calloc_r>:
 8007d46:	b510      	push	{r4, lr}
 8007d48:	4351      	muls	r1, r2
 8007d4a:	f7ff fa69 	bl	8007220 <_malloc_r>
 8007d4e:	4604      	mov	r4, r0
 8007d50:	b198      	cbz	r0, 8007d7a <_calloc_r+0x34>
 8007d52:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007d56:	f022 0203 	bic.w	r2, r2, #3
 8007d5a:	3a04      	subs	r2, #4
 8007d5c:	2a24      	cmp	r2, #36	; 0x24
 8007d5e:	d81b      	bhi.n	8007d98 <_calloc_r+0x52>
 8007d60:	2a13      	cmp	r2, #19
 8007d62:	d917      	bls.n	8007d94 <_calloc_r+0x4e>
 8007d64:	2100      	movs	r1, #0
 8007d66:	2a1b      	cmp	r2, #27
 8007d68:	6001      	str	r1, [r0, #0]
 8007d6a:	6041      	str	r1, [r0, #4]
 8007d6c:	d807      	bhi.n	8007d7e <_calloc_r+0x38>
 8007d6e:	f100 0308 	add.w	r3, r0, #8
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	605a      	str	r2, [r3, #4]
 8007d78:	609a      	str	r2, [r3, #8]
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	bd10      	pop	{r4, pc}
 8007d7e:	2a24      	cmp	r2, #36	; 0x24
 8007d80:	6081      	str	r1, [r0, #8]
 8007d82:	60c1      	str	r1, [r0, #12]
 8007d84:	bf11      	iteee	ne
 8007d86:	f100 0310 	addne.w	r3, r0, #16
 8007d8a:	6101      	streq	r1, [r0, #16]
 8007d8c:	f100 0318 	addeq.w	r3, r0, #24
 8007d90:	6141      	streq	r1, [r0, #20]
 8007d92:	e7ee      	b.n	8007d72 <_calloc_r+0x2c>
 8007d94:	4603      	mov	r3, r0
 8007d96:	e7ec      	b.n	8007d72 <_calloc_r+0x2c>
 8007d98:	2100      	movs	r1, #0
 8007d9a:	f7fd fbd0 	bl	800553e <memset>
 8007d9e:	e7ec      	b.n	8007d7a <_calloc_r+0x34>

08007da0 <_malloc_trim_r>:
 8007da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da4:	4f25      	ldr	r7, [pc, #148]	; (8007e3c <_malloc_trim_r+0x9c>)
 8007da6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007e48 <_malloc_trim_r+0xa8>
 8007daa:	4689      	mov	r9, r1
 8007dac:	4606      	mov	r6, r0
 8007dae:	f7ff fc57 	bl	8007660 <__malloc_lock>
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	685d      	ldr	r5, [r3, #4]
 8007db6:	f1a8 0411 	sub.w	r4, r8, #17
 8007dba:	f025 0503 	bic.w	r5, r5, #3
 8007dbe:	eba4 0409 	sub.w	r4, r4, r9
 8007dc2:	442c      	add	r4, r5
 8007dc4:	fbb4 f4f8 	udiv	r4, r4, r8
 8007dc8:	3c01      	subs	r4, #1
 8007dca:	fb08 f404 	mul.w	r4, r8, r4
 8007dce:	4544      	cmp	r4, r8
 8007dd0:	da05      	bge.n	8007dde <_malloc_trim_r+0x3e>
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	f7ff fc4a 	bl	800766c <__malloc_unlock>
 8007dd8:	2000      	movs	r0, #0
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dde:	2100      	movs	r1, #0
 8007de0:	4630      	mov	r0, r6
 8007de2:	f7ff ff19 	bl	8007c18 <_sbrk_r>
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	442b      	add	r3, r5
 8007dea:	4298      	cmp	r0, r3
 8007dec:	d1f1      	bne.n	8007dd2 <_malloc_trim_r+0x32>
 8007dee:	4261      	negs	r1, r4
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7ff ff11 	bl	8007c18 <_sbrk_r>
 8007df6:	3001      	adds	r0, #1
 8007df8:	d110      	bne.n	8007e1c <_malloc_trim_r+0x7c>
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f7ff ff0b 	bl	8007c18 <_sbrk_r>
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	1a83      	subs	r3, r0, r2
 8007e06:	2b0f      	cmp	r3, #15
 8007e08:	dde3      	ble.n	8007dd2 <_malloc_trim_r+0x32>
 8007e0a:	490d      	ldr	r1, [pc, #52]	; (8007e40 <_malloc_trim_r+0xa0>)
 8007e0c:	6809      	ldr	r1, [r1, #0]
 8007e0e:	1a40      	subs	r0, r0, r1
 8007e10:	490c      	ldr	r1, [pc, #48]	; (8007e44 <_malloc_trim_r+0xa4>)
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	6008      	str	r0, [r1, #0]
 8007e18:	6053      	str	r3, [r2, #4]
 8007e1a:	e7da      	b.n	8007dd2 <_malloc_trim_r+0x32>
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4a09      	ldr	r2, [pc, #36]	; (8007e44 <_malloc_trim_r+0xa4>)
 8007e20:	1b2d      	subs	r5, r5, r4
 8007e22:	f045 0501 	orr.w	r5, r5, #1
 8007e26:	605d      	str	r5, [r3, #4]
 8007e28:	6813      	ldr	r3, [r2, #0]
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	1b1c      	subs	r4, r3, r4
 8007e2e:	6014      	str	r4, [r2, #0]
 8007e30:	f7ff fc1c 	bl	800766c <__malloc_unlock>
 8007e34:	2001      	movs	r0, #1
 8007e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3a:	bf00      	nop
 8007e3c:	2000026c 	.word	0x2000026c
 8007e40:	20000674 	.word	0x20000674
 8007e44:	200006b8 	.word	0x200006b8
 8007e48:	00000080 	.word	0x00000080

08007e4c <_free_r>:
 8007e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e50:	4604      	mov	r4, r0
 8007e52:	4688      	mov	r8, r1
 8007e54:	2900      	cmp	r1, #0
 8007e56:	f000 80ab 	beq.w	8007fb0 <_free_r+0x164>
 8007e5a:	f7ff fc01 	bl	8007660 <__malloc_lock>
 8007e5e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8007e62:	4d54      	ldr	r5, [pc, #336]	; (8007fb4 <_free_r+0x168>)
 8007e64:	f022 0001 	bic.w	r0, r2, #1
 8007e68:	f1a8 0308 	sub.w	r3, r8, #8
 8007e6c:	181f      	adds	r7, r3, r0
 8007e6e:	68a9      	ldr	r1, [r5, #8]
 8007e70:	687e      	ldr	r6, [r7, #4]
 8007e72:	428f      	cmp	r7, r1
 8007e74:	f026 0603 	bic.w	r6, r6, #3
 8007e78:	f002 0201 	and.w	r2, r2, #1
 8007e7c:	d11b      	bne.n	8007eb6 <_free_r+0x6a>
 8007e7e:	4430      	add	r0, r6
 8007e80:	b93a      	cbnz	r2, 8007e92 <_free_r+0x46>
 8007e82:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8007e86:	1a9b      	subs	r3, r3, r2
 8007e88:	4410      	add	r0, r2
 8007e8a:	6899      	ldr	r1, [r3, #8]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	60ca      	str	r2, [r1, #12]
 8007e90:	6091      	str	r1, [r2, #8]
 8007e92:	f040 0201 	orr.w	r2, r0, #1
 8007e96:	605a      	str	r2, [r3, #4]
 8007e98:	60ab      	str	r3, [r5, #8]
 8007e9a:	4b47      	ldr	r3, [pc, #284]	; (8007fb8 <_free_r+0x16c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4298      	cmp	r0, r3
 8007ea0:	d304      	bcc.n	8007eac <_free_r+0x60>
 8007ea2:	4b46      	ldr	r3, [pc, #280]	; (8007fbc <_free_r+0x170>)
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	6819      	ldr	r1, [r3, #0]
 8007ea8:	f7ff ff7a 	bl	8007da0 <_malloc_trim_r>
 8007eac:	4620      	mov	r0, r4
 8007eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb2:	f7ff bbdb 	b.w	800766c <__malloc_unlock>
 8007eb6:	607e      	str	r6, [r7, #4]
 8007eb8:	2a00      	cmp	r2, #0
 8007eba:	d139      	bne.n	8007f30 <_free_r+0xe4>
 8007ebc:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8007ec0:	1a5b      	subs	r3, r3, r1
 8007ec2:	4408      	add	r0, r1
 8007ec4:	6899      	ldr	r1, [r3, #8]
 8007ec6:	f105 0e08 	add.w	lr, r5, #8
 8007eca:	4571      	cmp	r1, lr
 8007ecc:	d032      	beq.n	8007f34 <_free_r+0xe8>
 8007ece:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8007ed2:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007ed6:	f8ce 1008 	str.w	r1, [lr, #8]
 8007eda:	19b9      	adds	r1, r7, r6
 8007edc:	6849      	ldr	r1, [r1, #4]
 8007ede:	07c9      	lsls	r1, r1, #31
 8007ee0:	d40a      	bmi.n	8007ef8 <_free_r+0xac>
 8007ee2:	4430      	add	r0, r6
 8007ee4:	68b9      	ldr	r1, [r7, #8]
 8007ee6:	bb3a      	cbnz	r2, 8007f38 <_free_r+0xec>
 8007ee8:	4e35      	ldr	r6, [pc, #212]	; (8007fc0 <_free_r+0x174>)
 8007eea:	42b1      	cmp	r1, r6
 8007eec:	d124      	bne.n	8007f38 <_free_r+0xec>
 8007eee:	616b      	str	r3, [r5, #20]
 8007ef0:	612b      	str	r3, [r5, #16]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	60d9      	str	r1, [r3, #12]
 8007ef6:	6099      	str	r1, [r3, #8]
 8007ef8:	f040 0101 	orr.w	r1, r0, #1
 8007efc:	6059      	str	r1, [r3, #4]
 8007efe:	5018      	str	r0, [r3, r0]
 8007f00:	2a00      	cmp	r2, #0
 8007f02:	d1d3      	bne.n	8007eac <_free_r+0x60>
 8007f04:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007f08:	d21a      	bcs.n	8007f40 <_free_r+0xf4>
 8007f0a:	08c0      	lsrs	r0, r0, #3
 8007f0c:	1081      	asrs	r1, r0, #2
 8007f0e:	2201      	movs	r2, #1
 8007f10:	408a      	lsls	r2, r1
 8007f12:	6869      	ldr	r1, [r5, #4]
 8007f14:	3001      	adds	r0, #1
 8007f16:	430a      	orrs	r2, r1
 8007f18:	606a      	str	r2, [r5, #4]
 8007f1a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007f1e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8007f22:	6099      	str	r1, [r3, #8]
 8007f24:	3a08      	subs	r2, #8
 8007f26:	60da      	str	r2, [r3, #12]
 8007f28:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007f2c:	60cb      	str	r3, [r1, #12]
 8007f2e:	e7bd      	b.n	8007eac <_free_r+0x60>
 8007f30:	2200      	movs	r2, #0
 8007f32:	e7d2      	b.n	8007eda <_free_r+0x8e>
 8007f34:	2201      	movs	r2, #1
 8007f36:	e7d0      	b.n	8007eda <_free_r+0x8e>
 8007f38:	68fe      	ldr	r6, [r7, #12]
 8007f3a:	60ce      	str	r6, [r1, #12]
 8007f3c:	60b1      	str	r1, [r6, #8]
 8007f3e:	e7db      	b.n	8007ef8 <_free_r+0xac>
 8007f40:	0a42      	lsrs	r2, r0, #9
 8007f42:	2a04      	cmp	r2, #4
 8007f44:	d813      	bhi.n	8007f6e <_free_r+0x122>
 8007f46:	0982      	lsrs	r2, r0, #6
 8007f48:	3238      	adds	r2, #56	; 0x38
 8007f4a:	1c51      	adds	r1, r2, #1
 8007f4c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007f50:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8007f54:	428e      	cmp	r6, r1
 8007f56:	d124      	bne.n	8007fa2 <_free_r+0x156>
 8007f58:	2001      	movs	r0, #1
 8007f5a:	1092      	asrs	r2, r2, #2
 8007f5c:	fa00 f202 	lsl.w	r2, r0, r2
 8007f60:	6868      	ldr	r0, [r5, #4]
 8007f62:	4302      	orrs	r2, r0
 8007f64:	606a      	str	r2, [r5, #4]
 8007f66:	60de      	str	r6, [r3, #12]
 8007f68:	6099      	str	r1, [r3, #8]
 8007f6a:	60b3      	str	r3, [r6, #8]
 8007f6c:	e7de      	b.n	8007f2c <_free_r+0xe0>
 8007f6e:	2a14      	cmp	r2, #20
 8007f70:	d801      	bhi.n	8007f76 <_free_r+0x12a>
 8007f72:	325b      	adds	r2, #91	; 0x5b
 8007f74:	e7e9      	b.n	8007f4a <_free_r+0xfe>
 8007f76:	2a54      	cmp	r2, #84	; 0x54
 8007f78:	d802      	bhi.n	8007f80 <_free_r+0x134>
 8007f7a:	0b02      	lsrs	r2, r0, #12
 8007f7c:	326e      	adds	r2, #110	; 0x6e
 8007f7e:	e7e4      	b.n	8007f4a <_free_r+0xfe>
 8007f80:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007f84:	d802      	bhi.n	8007f8c <_free_r+0x140>
 8007f86:	0bc2      	lsrs	r2, r0, #15
 8007f88:	3277      	adds	r2, #119	; 0x77
 8007f8a:	e7de      	b.n	8007f4a <_free_r+0xfe>
 8007f8c:	f240 5154 	movw	r1, #1364	; 0x554
 8007f90:	428a      	cmp	r2, r1
 8007f92:	bf9a      	itte	ls
 8007f94:	0c82      	lsrls	r2, r0, #18
 8007f96:	327c      	addls	r2, #124	; 0x7c
 8007f98:	227e      	movhi	r2, #126	; 0x7e
 8007f9a:	e7d6      	b.n	8007f4a <_free_r+0xfe>
 8007f9c:	6889      	ldr	r1, [r1, #8]
 8007f9e:	428e      	cmp	r6, r1
 8007fa0:	d004      	beq.n	8007fac <_free_r+0x160>
 8007fa2:	684a      	ldr	r2, [r1, #4]
 8007fa4:	f022 0203 	bic.w	r2, r2, #3
 8007fa8:	4290      	cmp	r0, r2
 8007faa:	d3f7      	bcc.n	8007f9c <_free_r+0x150>
 8007fac:	68ce      	ldr	r6, [r1, #12]
 8007fae:	e7da      	b.n	8007f66 <_free_r+0x11a>
 8007fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb4:	2000026c 	.word	0x2000026c
 8007fb8:	20000678 	.word	0x20000678
 8007fbc:	200006e8 	.word	0x200006e8
 8007fc0:	20000274 	.word	0x20000274

08007fc4 <__retarget_lock_acquire_recursive>:
 8007fc4:	4770      	bx	lr

08007fc6 <__retarget_lock_release_recursive>:
 8007fc6:	4770      	bx	lr

08007fc8 <memmove>:
 8007fc8:	4288      	cmp	r0, r1
 8007fca:	b510      	push	{r4, lr}
 8007fcc:	eb01 0302 	add.w	r3, r1, r2
 8007fd0:	d803      	bhi.n	8007fda <memmove+0x12>
 8007fd2:	1e42      	subs	r2, r0, #1
 8007fd4:	4299      	cmp	r1, r3
 8007fd6:	d10c      	bne.n	8007ff2 <memmove+0x2a>
 8007fd8:	bd10      	pop	{r4, pc}
 8007fda:	4298      	cmp	r0, r3
 8007fdc:	d2f9      	bcs.n	8007fd2 <memmove+0xa>
 8007fde:	1881      	adds	r1, r0, r2
 8007fe0:	1ad2      	subs	r2, r2, r3
 8007fe2:	42d3      	cmn	r3, r2
 8007fe4:	d100      	bne.n	8007fe8 <memmove+0x20>
 8007fe6:	bd10      	pop	{r4, pc}
 8007fe8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007ff0:	e7f7      	b.n	8007fe2 <memmove+0x1a>
 8007ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ff6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ffa:	e7eb      	b.n	8007fd4 <memmove+0xc>

08007ffc <_realloc_r>:
 8007ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008000:	4682      	mov	sl, r0
 8008002:	460c      	mov	r4, r1
 8008004:	b929      	cbnz	r1, 8008012 <_realloc_r+0x16>
 8008006:	4611      	mov	r1, r2
 8008008:	b003      	add	sp, #12
 800800a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800e:	f7ff b907 	b.w	8007220 <_malloc_r>
 8008012:	9201      	str	r2, [sp, #4]
 8008014:	f7ff fb24 	bl	8007660 <__malloc_lock>
 8008018:	9a01      	ldr	r2, [sp, #4]
 800801a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800801e:	f102 080b 	add.w	r8, r2, #11
 8008022:	f1b8 0f16 	cmp.w	r8, #22
 8008026:	f1a4 0908 	sub.w	r9, r4, #8
 800802a:	f025 0603 	bic.w	r6, r5, #3
 800802e:	d90a      	bls.n	8008046 <_realloc_r+0x4a>
 8008030:	f038 0807 	bics.w	r8, r8, #7
 8008034:	d509      	bpl.n	800804a <_realloc_r+0x4e>
 8008036:	230c      	movs	r3, #12
 8008038:	f8ca 3000 	str.w	r3, [sl]
 800803c:	2700      	movs	r7, #0
 800803e:	4638      	mov	r0, r7
 8008040:	b003      	add	sp, #12
 8008042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008046:	f04f 0810 	mov.w	r8, #16
 800804a:	4590      	cmp	r8, r2
 800804c:	d3f3      	bcc.n	8008036 <_realloc_r+0x3a>
 800804e:	45b0      	cmp	r8, r6
 8008050:	f340 8145 	ble.w	80082de <_realloc_r+0x2e2>
 8008054:	4ba8      	ldr	r3, [pc, #672]	; (80082f8 <_realloc_r+0x2fc>)
 8008056:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800805a:	eb09 0106 	add.w	r1, r9, r6
 800805e:	4571      	cmp	r1, lr
 8008060:	469b      	mov	fp, r3
 8008062:	684b      	ldr	r3, [r1, #4]
 8008064:	d005      	beq.n	8008072 <_realloc_r+0x76>
 8008066:	f023 0001 	bic.w	r0, r3, #1
 800806a:	4408      	add	r0, r1
 800806c:	6840      	ldr	r0, [r0, #4]
 800806e:	07c7      	lsls	r7, r0, #31
 8008070:	d447      	bmi.n	8008102 <_realloc_r+0x106>
 8008072:	f023 0303 	bic.w	r3, r3, #3
 8008076:	4571      	cmp	r1, lr
 8008078:	eb06 0703 	add.w	r7, r6, r3
 800807c:	d119      	bne.n	80080b2 <_realloc_r+0xb6>
 800807e:	f108 0010 	add.w	r0, r8, #16
 8008082:	4287      	cmp	r7, r0
 8008084:	db3f      	blt.n	8008106 <_realloc_r+0x10a>
 8008086:	eb09 0308 	add.w	r3, r9, r8
 800808a:	eba7 0708 	sub.w	r7, r7, r8
 800808e:	f047 0701 	orr.w	r7, r7, #1
 8008092:	f8cb 3008 	str.w	r3, [fp, #8]
 8008096:	605f      	str	r7, [r3, #4]
 8008098:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	ea43 0308 	orr.w	r3, r3, r8
 80080a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80080a8:	4650      	mov	r0, sl
 80080aa:	f7ff fadf 	bl	800766c <__malloc_unlock>
 80080ae:	4627      	mov	r7, r4
 80080b0:	e7c5      	b.n	800803e <_realloc_r+0x42>
 80080b2:	45b8      	cmp	r8, r7
 80080b4:	dc27      	bgt.n	8008106 <_realloc_r+0x10a>
 80080b6:	68cb      	ldr	r3, [r1, #12]
 80080b8:	688a      	ldr	r2, [r1, #8]
 80080ba:	60d3      	str	r3, [r2, #12]
 80080bc:	609a      	str	r2, [r3, #8]
 80080be:	eba7 0008 	sub.w	r0, r7, r8
 80080c2:	280f      	cmp	r0, #15
 80080c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80080c8:	eb09 0207 	add.w	r2, r9, r7
 80080cc:	f240 8109 	bls.w	80082e2 <_realloc_r+0x2e6>
 80080d0:	eb09 0108 	add.w	r1, r9, r8
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	ea43 0308 	orr.w	r3, r3, r8
 80080dc:	f040 0001 	orr.w	r0, r0, #1
 80080e0:	f8c9 3004 	str.w	r3, [r9, #4]
 80080e4:	6048      	str	r0, [r1, #4]
 80080e6:	6853      	ldr	r3, [r2, #4]
 80080e8:	f043 0301 	orr.w	r3, r3, #1
 80080ec:	6053      	str	r3, [r2, #4]
 80080ee:	3108      	adds	r1, #8
 80080f0:	4650      	mov	r0, sl
 80080f2:	f7ff feab 	bl	8007e4c <_free_r>
 80080f6:	4650      	mov	r0, sl
 80080f8:	f7ff fab8 	bl	800766c <__malloc_unlock>
 80080fc:	f109 0708 	add.w	r7, r9, #8
 8008100:	e79d      	b.n	800803e <_realloc_r+0x42>
 8008102:	2300      	movs	r3, #0
 8008104:	4619      	mov	r1, r3
 8008106:	07e8      	lsls	r0, r5, #31
 8008108:	f100 8084 	bmi.w	8008214 <_realloc_r+0x218>
 800810c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008110:	eba9 0505 	sub.w	r5, r9, r5
 8008114:	6868      	ldr	r0, [r5, #4]
 8008116:	f020 0003 	bic.w	r0, r0, #3
 800811a:	4430      	add	r0, r6
 800811c:	2900      	cmp	r1, #0
 800811e:	d076      	beq.n	800820e <_realloc_r+0x212>
 8008120:	4571      	cmp	r1, lr
 8008122:	d150      	bne.n	80081c6 <_realloc_r+0x1ca>
 8008124:	4403      	add	r3, r0
 8008126:	f108 0110 	add.w	r1, r8, #16
 800812a:	428b      	cmp	r3, r1
 800812c:	db6f      	blt.n	800820e <_realloc_r+0x212>
 800812e:	462f      	mov	r7, r5
 8008130:	68ea      	ldr	r2, [r5, #12]
 8008132:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8008136:	60ca      	str	r2, [r1, #12]
 8008138:	6091      	str	r1, [r2, #8]
 800813a:	1f32      	subs	r2, r6, #4
 800813c:	2a24      	cmp	r2, #36	; 0x24
 800813e:	d83b      	bhi.n	80081b8 <_realloc_r+0x1bc>
 8008140:	2a13      	cmp	r2, #19
 8008142:	d936      	bls.n	80081b2 <_realloc_r+0x1b6>
 8008144:	6821      	ldr	r1, [r4, #0]
 8008146:	60a9      	str	r1, [r5, #8]
 8008148:	6861      	ldr	r1, [r4, #4]
 800814a:	60e9      	str	r1, [r5, #12]
 800814c:	2a1b      	cmp	r2, #27
 800814e:	d81c      	bhi.n	800818a <_realloc_r+0x18e>
 8008150:	f105 0210 	add.w	r2, r5, #16
 8008154:	f104 0108 	add.w	r1, r4, #8
 8008158:	6808      	ldr	r0, [r1, #0]
 800815a:	6010      	str	r0, [r2, #0]
 800815c:	6848      	ldr	r0, [r1, #4]
 800815e:	6050      	str	r0, [r2, #4]
 8008160:	6889      	ldr	r1, [r1, #8]
 8008162:	6091      	str	r1, [r2, #8]
 8008164:	eb05 0208 	add.w	r2, r5, r8
 8008168:	eba3 0308 	sub.w	r3, r3, r8
 800816c:	f043 0301 	orr.w	r3, r3, #1
 8008170:	f8cb 2008 	str.w	r2, [fp, #8]
 8008174:	6053      	str	r3, [r2, #4]
 8008176:	686b      	ldr	r3, [r5, #4]
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	ea43 0308 	orr.w	r3, r3, r8
 8008180:	606b      	str	r3, [r5, #4]
 8008182:	4650      	mov	r0, sl
 8008184:	f7ff fa72 	bl	800766c <__malloc_unlock>
 8008188:	e759      	b.n	800803e <_realloc_r+0x42>
 800818a:	68a1      	ldr	r1, [r4, #8]
 800818c:	6129      	str	r1, [r5, #16]
 800818e:	68e1      	ldr	r1, [r4, #12]
 8008190:	6169      	str	r1, [r5, #20]
 8008192:	2a24      	cmp	r2, #36	; 0x24
 8008194:	bf01      	itttt	eq
 8008196:	6922      	ldreq	r2, [r4, #16]
 8008198:	61aa      	streq	r2, [r5, #24]
 800819a:	6960      	ldreq	r0, [r4, #20]
 800819c:	61e8      	streq	r0, [r5, #28]
 800819e:	bf19      	ittee	ne
 80081a0:	f105 0218 	addne.w	r2, r5, #24
 80081a4:	f104 0110 	addne.w	r1, r4, #16
 80081a8:	f105 0220 	addeq.w	r2, r5, #32
 80081ac:	f104 0118 	addeq.w	r1, r4, #24
 80081b0:	e7d2      	b.n	8008158 <_realloc_r+0x15c>
 80081b2:	463a      	mov	r2, r7
 80081b4:	4621      	mov	r1, r4
 80081b6:	e7cf      	b.n	8008158 <_realloc_r+0x15c>
 80081b8:	4621      	mov	r1, r4
 80081ba:	4638      	mov	r0, r7
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	f7ff ff03 	bl	8007fc8 <memmove>
 80081c2:	9b01      	ldr	r3, [sp, #4]
 80081c4:	e7ce      	b.n	8008164 <_realloc_r+0x168>
 80081c6:	18c7      	adds	r7, r0, r3
 80081c8:	45b8      	cmp	r8, r7
 80081ca:	dc20      	bgt.n	800820e <_realloc_r+0x212>
 80081cc:	68cb      	ldr	r3, [r1, #12]
 80081ce:	688a      	ldr	r2, [r1, #8]
 80081d0:	60d3      	str	r3, [r2, #12]
 80081d2:	609a      	str	r2, [r3, #8]
 80081d4:	4628      	mov	r0, r5
 80081d6:	68eb      	ldr	r3, [r5, #12]
 80081d8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80081dc:	60d3      	str	r3, [r2, #12]
 80081de:	609a      	str	r2, [r3, #8]
 80081e0:	1f32      	subs	r2, r6, #4
 80081e2:	2a24      	cmp	r2, #36	; 0x24
 80081e4:	d842      	bhi.n	800826c <_realloc_r+0x270>
 80081e6:	2a13      	cmp	r2, #19
 80081e8:	d93e      	bls.n	8008268 <_realloc_r+0x26c>
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	60ab      	str	r3, [r5, #8]
 80081ee:	6863      	ldr	r3, [r4, #4]
 80081f0:	60eb      	str	r3, [r5, #12]
 80081f2:	2a1b      	cmp	r2, #27
 80081f4:	d824      	bhi.n	8008240 <_realloc_r+0x244>
 80081f6:	f105 0010 	add.w	r0, r5, #16
 80081fa:	f104 0308 	add.w	r3, r4, #8
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	6002      	str	r2, [r0, #0]
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	6042      	str	r2, [r0, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	6083      	str	r3, [r0, #8]
 800820a:	46a9      	mov	r9, r5
 800820c:	e757      	b.n	80080be <_realloc_r+0xc2>
 800820e:	4580      	cmp	r8, r0
 8008210:	4607      	mov	r7, r0
 8008212:	dddf      	ble.n	80081d4 <_realloc_r+0x1d8>
 8008214:	4611      	mov	r1, r2
 8008216:	4650      	mov	r0, sl
 8008218:	f7ff f802 	bl	8007220 <_malloc_r>
 800821c:	4607      	mov	r7, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	d0af      	beq.n	8008182 <_realloc_r+0x186>
 8008222:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008226:	f023 0301 	bic.w	r3, r3, #1
 800822a:	f1a0 0208 	sub.w	r2, r0, #8
 800822e:	444b      	add	r3, r9
 8008230:	429a      	cmp	r2, r3
 8008232:	d11f      	bne.n	8008274 <_realloc_r+0x278>
 8008234:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8008238:	f027 0703 	bic.w	r7, r7, #3
 800823c:	4437      	add	r7, r6
 800823e:	e73e      	b.n	80080be <_realloc_r+0xc2>
 8008240:	68a3      	ldr	r3, [r4, #8]
 8008242:	612b      	str	r3, [r5, #16]
 8008244:	68e3      	ldr	r3, [r4, #12]
 8008246:	616b      	str	r3, [r5, #20]
 8008248:	2a24      	cmp	r2, #36	; 0x24
 800824a:	bf01      	itttt	eq
 800824c:	6923      	ldreq	r3, [r4, #16]
 800824e:	61ab      	streq	r3, [r5, #24]
 8008250:	6962      	ldreq	r2, [r4, #20]
 8008252:	61ea      	streq	r2, [r5, #28]
 8008254:	bf19      	ittee	ne
 8008256:	f105 0018 	addne.w	r0, r5, #24
 800825a:	f104 0310 	addne.w	r3, r4, #16
 800825e:	f105 0020 	addeq.w	r0, r5, #32
 8008262:	f104 0318 	addeq.w	r3, r4, #24
 8008266:	e7ca      	b.n	80081fe <_realloc_r+0x202>
 8008268:	4623      	mov	r3, r4
 800826a:	e7c8      	b.n	80081fe <_realloc_r+0x202>
 800826c:	4621      	mov	r1, r4
 800826e:	f7ff feab 	bl	8007fc8 <memmove>
 8008272:	e7ca      	b.n	800820a <_realloc_r+0x20e>
 8008274:	1f32      	subs	r2, r6, #4
 8008276:	2a24      	cmp	r2, #36	; 0x24
 8008278:	d82d      	bhi.n	80082d6 <_realloc_r+0x2da>
 800827a:	2a13      	cmp	r2, #19
 800827c:	d928      	bls.n	80082d0 <_realloc_r+0x2d4>
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	6003      	str	r3, [r0, #0]
 8008282:	6863      	ldr	r3, [r4, #4]
 8008284:	6043      	str	r3, [r0, #4]
 8008286:	2a1b      	cmp	r2, #27
 8008288:	d80e      	bhi.n	80082a8 <_realloc_r+0x2ac>
 800828a:	f100 0308 	add.w	r3, r0, #8
 800828e:	f104 0208 	add.w	r2, r4, #8
 8008292:	6811      	ldr	r1, [r2, #0]
 8008294:	6019      	str	r1, [r3, #0]
 8008296:	6851      	ldr	r1, [r2, #4]
 8008298:	6059      	str	r1, [r3, #4]
 800829a:	6892      	ldr	r2, [r2, #8]
 800829c:	609a      	str	r2, [r3, #8]
 800829e:	4621      	mov	r1, r4
 80082a0:	4650      	mov	r0, sl
 80082a2:	f7ff fdd3 	bl	8007e4c <_free_r>
 80082a6:	e76c      	b.n	8008182 <_realloc_r+0x186>
 80082a8:	68a3      	ldr	r3, [r4, #8]
 80082aa:	6083      	str	r3, [r0, #8]
 80082ac:	68e3      	ldr	r3, [r4, #12]
 80082ae:	60c3      	str	r3, [r0, #12]
 80082b0:	2a24      	cmp	r2, #36	; 0x24
 80082b2:	bf01      	itttt	eq
 80082b4:	6923      	ldreq	r3, [r4, #16]
 80082b6:	6103      	streq	r3, [r0, #16]
 80082b8:	6961      	ldreq	r1, [r4, #20]
 80082ba:	6141      	streq	r1, [r0, #20]
 80082bc:	bf19      	ittee	ne
 80082be:	f100 0310 	addne.w	r3, r0, #16
 80082c2:	f104 0210 	addne.w	r2, r4, #16
 80082c6:	f100 0318 	addeq.w	r3, r0, #24
 80082ca:	f104 0218 	addeq.w	r2, r4, #24
 80082ce:	e7e0      	b.n	8008292 <_realloc_r+0x296>
 80082d0:	4603      	mov	r3, r0
 80082d2:	4622      	mov	r2, r4
 80082d4:	e7dd      	b.n	8008292 <_realloc_r+0x296>
 80082d6:	4621      	mov	r1, r4
 80082d8:	f7ff fe76 	bl	8007fc8 <memmove>
 80082dc:	e7df      	b.n	800829e <_realloc_r+0x2a2>
 80082de:	4637      	mov	r7, r6
 80082e0:	e6ed      	b.n	80080be <_realloc_r+0xc2>
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	431f      	orrs	r7, r3
 80082e8:	f8c9 7004 	str.w	r7, [r9, #4]
 80082ec:	6853      	ldr	r3, [r2, #4]
 80082ee:	f043 0301 	orr.w	r3, r3, #1
 80082f2:	6053      	str	r3, [r2, #4]
 80082f4:	e6ff      	b.n	80080f6 <_realloc_r+0xfa>
 80082f6:	bf00      	nop
 80082f8:	2000026c 	.word	0x2000026c

080082fc <_sbrk>:
 80082fc:	4b04      	ldr	r3, [pc, #16]	; (8008310 <_sbrk+0x14>)
 80082fe:	6819      	ldr	r1, [r3, #0]
 8008300:	4602      	mov	r2, r0
 8008302:	b909      	cbnz	r1, 8008308 <_sbrk+0xc>
 8008304:	4903      	ldr	r1, [pc, #12]	; (8008314 <_sbrk+0x18>)
 8008306:	6019      	str	r1, [r3, #0]
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	4402      	add	r2, r0
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	4770      	bx	lr
 8008310:	200006ec 	.word	0x200006ec
 8008314:	20001018 	.word	0x20001018

08008318 <_init>:
 8008318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831a:	bf00      	nop
 800831c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831e:	bc08      	pop	{r3}
 8008320:	469e      	mov	lr, r3
 8008322:	4770      	bx	lr

08008324 <_fini>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	bf00      	nop
 8008328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832a:	bc08      	pop	{r3}
 800832c:	469e      	mov	lr, r3
 800832e:	4770      	bx	lr
